
Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cdac  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000620  0800cf40  0800cf40  0001cf40  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d560  0800d560  000201f8  2**0
                  CONTENTS
  4 .ARM          00000008  0800d560  0800d560  0001d560  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d568  0800d568  000201f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d568  0800d568  0001d568  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d56c  0800d56c  0001d56c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f8  20000000  0800d570  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201f8  2**0
                  CONTENTS
 10 .bss          00000760  200001f8  200001f8  000201f8  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000958  20000958  000201f8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201f8  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001644c  00000000  00000000  00020228  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000298f  00000000  00000000  00036674  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001250  00000000  00000000  00039008  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001198  00000000  00000000  0003a258  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024f16  00000000  00000000  0003b3f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00015d75  00000000  00000000  00060306  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000dc99a  00000000  00000000  0007607b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00152a15  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006304  00000000  00000000  00152a68  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001f8 	.word	0x200001f8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800cf24 	.word	0x0800cf24

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001fc 	.word	0x200001fc
 80001cc:	0800cf24 	.word	0x0800cf24

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295
 8000c5c:	f000 b96e 	b.w	8000f3c <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9d08      	ldr	r5, [sp, #32]
 8000c7e:	4604      	mov	r4, r0
 8000c80:	468c      	mov	ip, r1
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	f040 8083 	bne.w	8000d8e <__udivmoddi4+0x116>
 8000c88:	428a      	cmp	r2, r1
 8000c8a:	4617      	mov	r7, r2
 8000c8c:	d947      	bls.n	8000d1e <__udivmoddi4+0xa6>
 8000c8e:	fab2 f282 	clz	r2, r2
 8000c92:	b142      	cbz	r2, 8000ca6 <__udivmoddi4+0x2e>
 8000c94:	f1c2 0020 	rsb	r0, r2, #32
 8000c98:	fa24 f000 	lsr.w	r0, r4, r0
 8000c9c:	4091      	lsls	r1, r2
 8000c9e:	4097      	lsls	r7, r2
 8000ca0:	ea40 0c01 	orr.w	ip, r0, r1
 8000ca4:	4094      	lsls	r4, r2
 8000ca6:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000caa:	0c23      	lsrs	r3, r4, #16
 8000cac:	fbbc f6f8 	udiv	r6, ip, r8
 8000cb0:	fa1f fe87 	uxth.w	lr, r7
 8000cb4:	fb08 c116 	mls	r1, r8, r6, ip
 8000cb8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cbc:	fb06 f10e 	mul.w	r1, r6, lr
 8000cc0:	4299      	cmp	r1, r3
 8000cc2:	d909      	bls.n	8000cd8 <__udivmoddi4+0x60>
 8000cc4:	18fb      	adds	r3, r7, r3
 8000cc6:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cca:	f080 8119 	bcs.w	8000f00 <__udivmoddi4+0x288>
 8000cce:	4299      	cmp	r1, r3
 8000cd0:	f240 8116 	bls.w	8000f00 <__udivmoddi4+0x288>
 8000cd4:	3e02      	subs	r6, #2
 8000cd6:	443b      	add	r3, r7
 8000cd8:	1a5b      	subs	r3, r3, r1
 8000cda:	b2a4      	uxth	r4, r4
 8000cdc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ce0:	fb08 3310 	mls	r3, r8, r0, r3
 8000ce4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ce8:	fb00 fe0e 	mul.w	lr, r0, lr
 8000cec:	45a6      	cmp	lr, r4
 8000cee:	d909      	bls.n	8000d04 <__udivmoddi4+0x8c>
 8000cf0:	193c      	adds	r4, r7, r4
 8000cf2:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cf6:	f080 8105 	bcs.w	8000f04 <__udivmoddi4+0x28c>
 8000cfa:	45a6      	cmp	lr, r4
 8000cfc:	f240 8102 	bls.w	8000f04 <__udivmoddi4+0x28c>
 8000d00:	3802      	subs	r0, #2
 8000d02:	443c      	add	r4, r7
 8000d04:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d08:	eba4 040e 	sub.w	r4, r4, lr
 8000d0c:	2600      	movs	r6, #0
 8000d0e:	b11d      	cbz	r5, 8000d18 <__udivmoddi4+0xa0>
 8000d10:	40d4      	lsrs	r4, r2
 8000d12:	2300      	movs	r3, #0
 8000d14:	e9c5 4300 	strd	r4, r3, [r5]
 8000d18:	4631      	mov	r1, r6
 8000d1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d1e:	b902      	cbnz	r2, 8000d22 <__udivmoddi4+0xaa>
 8000d20:	deff      	udf	#255	; 0xff
 8000d22:	fab2 f282 	clz	r2, r2
 8000d26:	2a00      	cmp	r2, #0
 8000d28:	d150      	bne.n	8000dcc <__udivmoddi4+0x154>
 8000d2a:	1bcb      	subs	r3, r1, r7
 8000d2c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d30:	fa1f f887 	uxth.w	r8, r7
 8000d34:	2601      	movs	r6, #1
 8000d36:	fbb3 fcfe 	udiv	ip, r3, lr
 8000d3a:	0c21      	lsrs	r1, r4, #16
 8000d3c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000d40:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d44:	fb08 f30c 	mul.w	r3, r8, ip
 8000d48:	428b      	cmp	r3, r1
 8000d4a:	d907      	bls.n	8000d5c <__udivmoddi4+0xe4>
 8000d4c:	1879      	adds	r1, r7, r1
 8000d4e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d52:	d202      	bcs.n	8000d5a <__udivmoddi4+0xe2>
 8000d54:	428b      	cmp	r3, r1
 8000d56:	f200 80e9 	bhi.w	8000f2c <__udivmoddi4+0x2b4>
 8000d5a:	4684      	mov	ip, r0
 8000d5c:	1ac9      	subs	r1, r1, r3
 8000d5e:	b2a3      	uxth	r3, r4
 8000d60:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d64:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d68:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000d6c:	fb08 f800 	mul.w	r8, r8, r0
 8000d70:	45a0      	cmp	r8, r4
 8000d72:	d907      	bls.n	8000d84 <__udivmoddi4+0x10c>
 8000d74:	193c      	adds	r4, r7, r4
 8000d76:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d7a:	d202      	bcs.n	8000d82 <__udivmoddi4+0x10a>
 8000d7c:	45a0      	cmp	r8, r4
 8000d7e:	f200 80d9 	bhi.w	8000f34 <__udivmoddi4+0x2bc>
 8000d82:	4618      	mov	r0, r3
 8000d84:	eba4 0408 	sub.w	r4, r4, r8
 8000d88:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d8c:	e7bf      	b.n	8000d0e <__udivmoddi4+0x96>
 8000d8e:	428b      	cmp	r3, r1
 8000d90:	d909      	bls.n	8000da6 <__udivmoddi4+0x12e>
 8000d92:	2d00      	cmp	r5, #0
 8000d94:	f000 80b1 	beq.w	8000efa <__udivmoddi4+0x282>
 8000d98:	2600      	movs	r6, #0
 8000d9a:	e9c5 0100 	strd	r0, r1, [r5]
 8000d9e:	4630      	mov	r0, r6
 8000da0:	4631      	mov	r1, r6
 8000da2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000da6:	fab3 f683 	clz	r6, r3
 8000daa:	2e00      	cmp	r6, #0
 8000dac:	d14a      	bne.n	8000e44 <__udivmoddi4+0x1cc>
 8000dae:	428b      	cmp	r3, r1
 8000db0:	d302      	bcc.n	8000db8 <__udivmoddi4+0x140>
 8000db2:	4282      	cmp	r2, r0
 8000db4:	f200 80b8 	bhi.w	8000f28 <__udivmoddi4+0x2b0>
 8000db8:	1a84      	subs	r4, r0, r2
 8000dba:	eb61 0103 	sbc.w	r1, r1, r3
 8000dbe:	2001      	movs	r0, #1
 8000dc0:	468c      	mov	ip, r1
 8000dc2:	2d00      	cmp	r5, #0
 8000dc4:	d0a8      	beq.n	8000d18 <__udivmoddi4+0xa0>
 8000dc6:	e9c5 4c00 	strd	r4, ip, [r5]
 8000dca:	e7a5      	b.n	8000d18 <__udivmoddi4+0xa0>
 8000dcc:	f1c2 0320 	rsb	r3, r2, #32
 8000dd0:	fa20 f603 	lsr.w	r6, r0, r3
 8000dd4:	4097      	lsls	r7, r2
 8000dd6:	fa01 f002 	lsl.w	r0, r1, r2
 8000dda:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dde:	40d9      	lsrs	r1, r3
 8000de0:	4330      	orrs	r0, r6
 8000de2:	0c03      	lsrs	r3, r0, #16
 8000de4:	fbb1 f6fe 	udiv	r6, r1, lr
 8000de8:	fa1f f887 	uxth.w	r8, r7
 8000dec:	fb0e 1116 	mls	r1, lr, r6, r1
 8000df0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000df4:	fb06 f108 	mul.w	r1, r6, r8
 8000df8:	4299      	cmp	r1, r3
 8000dfa:	fa04 f402 	lsl.w	r4, r4, r2
 8000dfe:	d909      	bls.n	8000e14 <__udivmoddi4+0x19c>
 8000e00:	18fb      	adds	r3, r7, r3
 8000e02:	f106 3cff 	add.w	ip, r6, #4294967295
 8000e06:	f080 808d 	bcs.w	8000f24 <__udivmoddi4+0x2ac>
 8000e0a:	4299      	cmp	r1, r3
 8000e0c:	f240 808a 	bls.w	8000f24 <__udivmoddi4+0x2ac>
 8000e10:	3e02      	subs	r6, #2
 8000e12:	443b      	add	r3, r7
 8000e14:	1a5b      	subs	r3, r3, r1
 8000e16:	b281      	uxth	r1, r0
 8000e18:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e1c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e20:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e24:	fb00 f308 	mul.w	r3, r0, r8
 8000e28:	428b      	cmp	r3, r1
 8000e2a:	d907      	bls.n	8000e3c <__udivmoddi4+0x1c4>
 8000e2c:	1879      	adds	r1, r7, r1
 8000e2e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e32:	d273      	bcs.n	8000f1c <__udivmoddi4+0x2a4>
 8000e34:	428b      	cmp	r3, r1
 8000e36:	d971      	bls.n	8000f1c <__udivmoddi4+0x2a4>
 8000e38:	3802      	subs	r0, #2
 8000e3a:	4439      	add	r1, r7
 8000e3c:	1acb      	subs	r3, r1, r3
 8000e3e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000e42:	e778      	b.n	8000d36 <__udivmoddi4+0xbe>
 8000e44:	f1c6 0c20 	rsb	ip, r6, #32
 8000e48:	fa03 f406 	lsl.w	r4, r3, r6
 8000e4c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000e50:	431c      	orrs	r4, r3
 8000e52:	fa20 f70c 	lsr.w	r7, r0, ip
 8000e56:	fa01 f306 	lsl.w	r3, r1, r6
 8000e5a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000e5e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000e62:	431f      	orrs	r7, r3
 8000e64:	0c3b      	lsrs	r3, r7, #16
 8000e66:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e6a:	fa1f f884 	uxth.w	r8, r4
 8000e6e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e72:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000e76:	fb09 fa08 	mul.w	sl, r9, r8
 8000e7a:	458a      	cmp	sl, r1
 8000e7c:	fa02 f206 	lsl.w	r2, r2, r6
 8000e80:	fa00 f306 	lsl.w	r3, r0, r6
 8000e84:	d908      	bls.n	8000e98 <__udivmoddi4+0x220>
 8000e86:	1861      	adds	r1, r4, r1
 8000e88:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e8c:	d248      	bcs.n	8000f20 <__udivmoddi4+0x2a8>
 8000e8e:	458a      	cmp	sl, r1
 8000e90:	d946      	bls.n	8000f20 <__udivmoddi4+0x2a8>
 8000e92:	f1a9 0902 	sub.w	r9, r9, #2
 8000e96:	4421      	add	r1, r4
 8000e98:	eba1 010a 	sub.w	r1, r1, sl
 8000e9c:	b2bf      	uxth	r7, r7
 8000e9e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000ea2:	fb0e 1110 	mls	r1, lr, r0, r1
 8000ea6:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000eaa:	fb00 f808 	mul.w	r8, r0, r8
 8000eae:	45b8      	cmp	r8, r7
 8000eb0:	d907      	bls.n	8000ec2 <__udivmoddi4+0x24a>
 8000eb2:	19e7      	adds	r7, r4, r7
 8000eb4:	f100 31ff 	add.w	r1, r0, #4294967295
 8000eb8:	d22e      	bcs.n	8000f18 <__udivmoddi4+0x2a0>
 8000eba:	45b8      	cmp	r8, r7
 8000ebc:	d92c      	bls.n	8000f18 <__udivmoddi4+0x2a0>
 8000ebe:	3802      	subs	r0, #2
 8000ec0:	4427      	add	r7, r4
 8000ec2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ec6:	eba7 0708 	sub.w	r7, r7, r8
 8000eca:	fba0 8902 	umull	r8, r9, r0, r2
 8000ece:	454f      	cmp	r7, r9
 8000ed0:	46c6      	mov	lr, r8
 8000ed2:	4649      	mov	r1, r9
 8000ed4:	d31a      	bcc.n	8000f0c <__udivmoddi4+0x294>
 8000ed6:	d017      	beq.n	8000f08 <__udivmoddi4+0x290>
 8000ed8:	b15d      	cbz	r5, 8000ef2 <__udivmoddi4+0x27a>
 8000eda:	ebb3 020e 	subs.w	r2, r3, lr
 8000ede:	eb67 0701 	sbc.w	r7, r7, r1
 8000ee2:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000ee6:	40f2      	lsrs	r2, r6
 8000ee8:	ea4c 0202 	orr.w	r2, ip, r2
 8000eec:	40f7      	lsrs	r7, r6
 8000eee:	e9c5 2700 	strd	r2, r7, [r5]
 8000ef2:	2600      	movs	r6, #0
 8000ef4:	4631      	mov	r1, r6
 8000ef6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000efa:	462e      	mov	r6, r5
 8000efc:	4628      	mov	r0, r5
 8000efe:	e70b      	b.n	8000d18 <__udivmoddi4+0xa0>
 8000f00:	4606      	mov	r6, r0
 8000f02:	e6e9      	b.n	8000cd8 <__udivmoddi4+0x60>
 8000f04:	4618      	mov	r0, r3
 8000f06:	e6fd      	b.n	8000d04 <__udivmoddi4+0x8c>
 8000f08:	4543      	cmp	r3, r8
 8000f0a:	d2e5      	bcs.n	8000ed8 <__udivmoddi4+0x260>
 8000f0c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000f10:	eb69 0104 	sbc.w	r1, r9, r4
 8000f14:	3801      	subs	r0, #1
 8000f16:	e7df      	b.n	8000ed8 <__udivmoddi4+0x260>
 8000f18:	4608      	mov	r0, r1
 8000f1a:	e7d2      	b.n	8000ec2 <__udivmoddi4+0x24a>
 8000f1c:	4660      	mov	r0, ip
 8000f1e:	e78d      	b.n	8000e3c <__udivmoddi4+0x1c4>
 8000f20:	4681      	mov	r9, r0
 8000f22:	e7b9      	b.n	8000e98 <__udivmoddi4+0x220>
 8000f24:	4666      	mov	r6, ip
 8000f26:	e775      	b.n	8000e14 <__udivmoddi4+0x19c>
 8000f28:	4630      	mov	r0, r6
 8000f2a:	e74a      	b.n	8000dc2 <__udivmoddi4+0x14a>
 8000f2c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f30:	4439      	add	r1, r7
 8000f32:	e713      	b.n	8000d5c <__udivmoddi4+0xe4>
 8000f34:	3802      	subs	r0, #2
 8000f36:	443c      	add	r4, r7
 8000f38:	e724      	b.n	8000d84 <__udivmoddi4+0x10c>
 8000f3a:	bf00      	nop

08000f3c <__aeabi_idiv0>:
 8000f3c:	4770      	bx	lr
 8000f3e:	bf00      	nop

08000f40 <MPU6050_Init>:
#include <errno.h>
#include <sys/stat.h>
#include "retarget_uart.h"


void MPU6050_Init(){
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b086      	sub	sp, #24
 8000f44:	af04      	add	r7, sp, #16
	uint8_t check, Data;
	uint8_t attempts = 0;
 8000f46:	2300      	movs	r3, #0
 8000f48:	71fb      	strb	r3, [r7, #7]

	// Check if the device is ready
	while(check != 104){
 8000f4a:	e011      	b.n	8000f70 <MPU6050_Init+0x30>
		HAL_I2C_Mem_Read(&hi2c1, MPU6050_ADDR, WHO_AM_I_REG, 1, &check, 1, 1000);
 8000f4c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f50:	9302      	str	r3, [sp, #8]
 8000f52:	2301      	movs	r3, #1
 8000f54:	9301      	str	r3, [sp, #4]
 8000f56:	1dbb      	adds	r3, r7, #6
 8000f58:	9300      	str	r3, [sp, #0]
 8000f5a:	2301      	movs	r3, #1
 8000f5c:	2275      	movs	r2, #117	; 0x75
 8000f5e:	21d0      	movs	r1, #208	; 0xd0
 8000f60:	4845      	ldr	r0, [pc, #276]	; (8001078 <MPU6050_Init+0x138>)
 8000f62:	f003 ff4d 	bl	8004e00 <HAL_I2C_Mem_Read>
		if(attempts++ > 50){
 8000f66:	79fb      	ldrb	r3, [r7, #7]
 8000f68:	1c5a      	adds	r2, r3, #1
 8000f6a:	71fa      	strb	r2, [r7, #7]
 8000f6c:	2b32      	cmp	r3, #50	; 0x32
 8000f6e:	d803      	bhi.n	8000f78 <MPU6050_Init+0x38>
	while(check != 104){
 8000f70:	79bb      	ldrb	r3, [r7, #6]
 8000f72:	2b68      	cmp	r3, #104	; 0x68
 8000f74:	d1ea      	bne.n	8000f4c <MPU6050_Init+0xc>
 8000f76:	e000      	b.n	8000f7a <MPU6050_Init+0x3a>
			break;
 8000f78:	bf00      	nop
		}
	}

	if(check == 104){ // If the device is ready
 8000f7a:	79bb      	ldrb	r3, [r7, #6]
 8000f7c:	2b68      	cmp	r3, #104	; 0x68
 8000f7e:	d177      	bne.n	8001070 <MPU6050_Init+0x130>

		// We write all zeros in register 0X6B to wake up the sensor
		Data = 0;
 8000f80:	2300      	movs	r3, #0
 8000f82:	717b      	strb	r3, [r7, #5]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, PWR_MGMT_1_REG, 1, &Data, 1, 1000);
 8000f84:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f88:	9302      	str	r3, [sp, #8]
 8000f8a:	2301      	movs	r3, #1
 8000f8c:	9301      	str	r3, [sp, #4]
 8000f8e:	1d7b      	adds	r3, r7, #5
 8000f90:	9300      	str	r3, [sp, #0]
 8000f92:	2301      	movs	r3, #1
 8000f94:	226b      	movs	r2, #107	; 0x6b
 8000f96:	21d0      	movs	r1, #208	; 0xd0
 8000f98:	4837      	ldr	r0, [pc, #220]	; (8001078 <MPU6050_Init+0x138>)
 8000f9a:	f003 fe37 	bl	8004c0c <HAL_I2C_Mem_Write>

		// Let's put Gyro fs at 1KHz
		Data = 0x02;
 8000f9e:	2302      	movs	r3, #2
 8000fa0:	717b      	strb	r3, [r7, #5]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, CONFIG_REG, 1, &Data, 1, 1000);
 8000fa2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fa6:	9302      	str	r3, [sp, #8]
 8000fa8:	2301      	movs	r3, #1
 8000faa:	9301      	str	r3, [sp, #4]
 8000fac:	1d7b      	adds	r3, r7, #5
 8000fae:	9300      	str	r3, [sp, #0]
 8000fb0:	2301      	movs	r3, #1
 8000fb2:	221a      	movs	r2, #26
 8000fb4:	21d0      	movs	r1, #208	; 0xd0
 8000fb6:	4830      	ldr	r0, [pc, #192]	; (8001078 <MPU6050_Init+0x138>)
 8000fb8:	f003 fe28 	bl	8004c0c <HAL_I2C_Mem_Write>

		// DATA RATE = Gyroscope Output Rate (1 Khz) / (1 + SMPLRT_DIV (99)) ==> 10 Hz
		Data = 0x63;
 8000fbc:	2363      	movs	r3, #99	; 0x63
 8000fbe:	717b      	strb	r3, [r7, #5]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &Data, 1, 1000);
 8000fc0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fc4:	9302      	str	r3, [sp, #8]
 8000fc6:	2301      	movs	r3, #1
 8000fc8:	9301      	str	r3, [sp, #4]
 8000fca:	1d7b      	adds	r3, r7, #5
 8000fcc:	9300      	str	r3, [sp, #0]
 8000fce:	2301      	movs	r3, #1
 8000fd0:	2219      	movs	r2, #25
 8000fd2:	21d0      	movs	r1, #208	; 0xd0
 8000fd4:	4828      	ldr	r0, [pc, #160]	; (8001078 <MPU6050_Init+0x138>)
 8000fd6:	f003 fe19 	bl	8004c0c <HAL_I2C_Mem_Write>

		// Accelerometer configuration:
		// XA_ST = 0, YA_ST = 0, ZA_ST = 0, FS_SEL = 0 ==> Full Scale Range = +- 2g
		Data = 0x00;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	717b      	strb	r3, [r7, #5]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &Data, 1, 1000);
 8000fde:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fe2:	9302      	str	r3, [sp, #8]
 8000fe4:	2301      	movs	r3, #1
 8000fe6:	9301      	str	r3, [sp, #4]
 8000fe8:	1d7b      	adds	r3, r7, #5
 8000fea:	9300      	str	r3, [sp, #0]
 8000fec:	2301      	movs	r3, #1
 8000fee:	221c      	movs	r2, #28
 8000ff0:	21d0      	movs	r1, #208	; 0xd0
 8000ff2:	4821      	ldr	r0, [pc, #132]	; (8001078 <MPU6050_Init+0x138>)
 8000ff4:	f003 fe0a 	bl	8004c0c <HAL_I2C_Mem_Write>

		// Gyroscope configuration:
		// XG_ST = 0, YG_ST = 0, ZG_ST = 0, FS_SEL = 0 ==> Full Scale Range = +- 250 */s
		Data = 0x00;
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	717b      	strb	r3, [r7, #5]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &Data, 1, 1000);
 8000ffc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001000:	9302      	str	r3, [sp, #8]
 8001002:	2301      	movs	r3, #1
 8001004:	9301      	str	r3, [sp, #4]
 8001006:	1d7b      	adds	r3, r7, #5
 8001008:	9300      	str	r3, [sp, #0]
 800100a:	2301      	movs	r3, #1
 800100c:	221b      	movs	r2, #27
 800100e:	21d0      	movs	r1, #208	; 0xd0
 8001010:	4819      	ldr	r0, [pc, #100]	; (8001078 <MPU6050_Init+0x138>)
 8001012:	f003 fdfb 	bl	8004c0c <HAL_I2C_Mem_Write>

		// Enable write buffers for accel and gyro
		Data = 0x78;
 8001016:	2378      	movs	r3, #120	; 0x78
 8001018:	717b      	strb	r3, [r7, #5]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, FIFO_EN_REG, 1, &Data, 1, 1000);
 800101a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800101e:	9302      	str	r3, [sp, #8]
 8001020:	2301      	movs	r3, #1
 8001022:	9301      	str	r3, [sp, #4]
 8001024:	1d7b      	adds	r3, r7, #5
 8001026:	9300      	str	r3, [sp, #0]
 8001028:	2301      	movs	r3, #1
 800102a:	2223      	movs	r2, #35	; 0x23
 800102c:	21d0      	movs	r1, #208	; 0xd0
 800102e:	4812      	ldr	r0, [pc, #72]	; (8001078 <MPU6050_Init+0x138>)
 8001030:	f003 fdec 	bl	8004c0c <HAL_I2C_Mem_Write>

		// Enable the buffer
		Data = 0x44;
 8001034:	2344      	movs	r3, #68	; 0x44
 8001036:	717b      	strb	r3, [r7, #5]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, USER_CTRL, 1, &Data, 1, 1000);
 8001038:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800103c:	9302      	str	r3, [sp, #8]
 800103e:	2301      	movs	r3, #1
 8001040:	9301      	str	r3, [sp, #4]
 8001042:	1d7b      	adds	r3, r7, #5
 8001044:	9300      	str	r3, [sp, #0]
 8001046:	2301      	movs	r3, #1
 8001048:	226a      	movs	r2, #106	; 0x6a
 800104a:	21d0      	movs	r1, #208	; 0xd0
 800104c:	480a      	ldr	r0, [pc, #40]	; (8001078 <MPU6050_Init+0x138>)
 800104e:	f003 fddd 	bl	8004c0c <HAL_I2C_Mem_Write>

		// Enable interrupt with data read
		Data = 0x01;
 8001052:	2301      	movs	r3, #1
 8001054:	717b      	strb	r3, [r7, #5]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, INT_ENABLE, 1, &Data, 1, 1000);
 8001056:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800105a:	9302      	str	r3, [sp, #8]
 800105c:	2301      	movs	r3, #1
 800105e:	9301      	str	r3, [sp, #4]
 8001060:	1d7b      	adds	r3, r7, #5
 8001062:	9300      	str	r3, [sp, #0]
 8001064:	2301      	movs	r3, #1
 8001066:	2238      	movs	r2, #56	; 0x38
 8001068:	21d0      	movs	r1, #208	; 0xd0
 800106a:	4803      	ldr	r0, [pc, #12]	; (8001078 <MPU6050_Init+0x138>)
 800106c:	f003 fdce 	bl	8004c0c <HAL_I2C_Mem_Write>
	}
}
 8001070:	bf00      	nop
 8001072:	3708      	adds	r7, #8
 8001074:	46bd      	mov	sp, r7
 8001076:	bd80      	pop	{r7, pc}
 8001078:	200002c8 	.word	0x200002c8

0800107c <fake_gps_init>:

// Initialization of the circular buffer containing the coordinates generated by Google Eart.
void fake_gps_init(){
 800107c:	b480      	push	{r7}
 800107e:	af00      	add	r7, sp, #0

	fake_gps[0].longitude = 9.232127873367;
 8001080:	4b29      	ldr	r3, [pc, #164]	; (8001128 <fake_gps_init+0xac>)
 8001082:	4a2a      	ldr	r2, [pc, #168]	; (800112c <fake_gps_init+0xb0>)
 8001084:	601a      	str	r2, [r3, #0]
	fake_gps[0].latitude = 45.476947477674;
 8001086:	4b28      	ldr	r3, [pc, #160]	; (8001128 <fake_gps_init+0xac>)
 8001088:	4a29      	ldr	r2, [pc, #164]	; (8001130 <fake_gps_init+0xb4>)
 800108a:	605a      	str	r2, [r3, #4]

	fake_gps[1].longitude = 9.23132169559556;
 800108c:	4b26      	ldr	r3, [pc, #152]	; (8001128 <fake_gps_init+0xac>)
 800108e:	4a29      	ldr	r2, [pc, #164]	; (8001134 <fake_gps_init+0xb8>)
 8001090:	609a      	str	r2, [r3, #8]
	fake_gps[1].latitude = 45.4769356338021;
 8001092:	4b25      	ldr	r3, [pc, #148]	; (8001128 <fake_gps_init+0xac>)
 8001094:	4a28      	ldr	r2, [pc, #160]	; (8001138 <fake_gps_init+0xbc>)
 8001096:	60da      	str	r2, [r3, #12]

	fake_gps[2].longitude = 9.23027839341514;
 8001098:	4b23      	ldr	r3, [pc, #140]	; (8001128 <fake_gps_init+0xac>)
 800109a:	4a28      	ldr	r2, [pc, #160]	; (800113c <fake_gps_init+0xc0>)
 800109c:	611a      	str	r2, [r3, #16]
	fake_gps[2].latitude = 45.4769302429461;
 800109e:	4b22      	ldr	r3, [pc, #136]	; (8001128 <fake_gps_init+0xac>)
 80010a0:	4a27      	ldr	r2, [pc, #156]	; (8001140 <fake_gps_init+0xc4>)
 80010a2:	615a      	str	r2, [r3, #20]

	fake_gps[3].longitude = 9.22848735956641;
 80010a4:	4b20      	ldr	r3, [pc, #128]	; (8001128 <fake_gps_init+0xac>)
 80010a6:	4a27      	ldr	r2, [pc, #156]	; (8001144 <fake_gps_init+0xc8>)
 80010a8:	619a      	str	r2, [r3, #24]
	fake_gps[3].latitude = 45.4768485383483;
 80010aa:	4b1f      	ldr	r3, [pc, #124]	; (8001128 <fake_gps_init+0xac>)
 80010ac:	4a26      	ldr	r2, [pc, #152]	; (8001148 <fake_gps_init+0xcc>)
 80010ae:	61da      	str	r2, [r3, #28]

	fake_gps[4].longitude = 9.22811674289873;
 80010b0:	4b1d      	ldr	r3, [pc, #116]	; (8001128 <fake_gps_init+0xac>)
 80010b2:	4a26      	ldr	r2, [pc, #152]	; (800114c <fake_gps_init+0xd0>)
 80010b4:	621a      	str	r2, [r3, #32]
	fake_gps[4].latitude = 45.4767904670821;
 80010b6:	4b1c      	ldr	r3, [pc, #112]	; (8001128 <fake_gps_init+0xac>)
 80010b8:	4a25      	ldr	r2, [pc, #148]	; (8001150 <fake_gps_init+0xd4>)
 80010ba:	625a      	str	r2, [r3, #36]	; 0x24

	fake_gps[5].longitude = 9.22542983923211;
 80010bc:	4b1a      	ldr	r3, [pc, #104]	; (8001128 <fake_gps_init+0xac>)
 80010be:	4a25      	ldr	r2, [pc, #148]	; (8001154 <fake_gps_init+0xd8>)
 80010c0:	629a      	str	r2, [r3, #40]	; 0x28
    fake_gps[5].latitude = 45.4767755259172;
 80010c2:	4b19      	ldr	r3, [pc, #100]	; (8001128 <fake_gps_init+0xac>)
 80010c4:	4a24      	ldr	r2, [pc, #144]	; (8001158 <fake_gps_init+0xdc>)
 80010c6:	62da      	str	r2, [r3, #44]	; 0x2c

    fake_gps[6].longitude = 9.22554076080336;
 80010c8:	4b17      	ldr	r3, [pc, #92]	; (8001128 <fake_gps_init+0xac>)
 80010ca:	4a24      	ldr	r2, [pc, #144]	; (800115c <fake_gps_init+0xe0>)
 80010cc:	631a      	str	r2, [r3, #48]	; 0x30
    fake_gps[6].latitude = 45.477625700989;
 80010ce:	4b16      	ldr	r3, [pc, #88]	; (8001128 <fake_gps_init+0xac>)
 80010d0:	4a23      	ldr	r2, [pc, #140]	; (8001160 <fake_gps_init+0xe4>)
 80010d2:	635a      	str	r2, [r3, #52]	; 0x34

    fake_gps[7].longitude = 9.22552155468664;
 80010d4:	4b14      	ldr	r3, [pc, #80]	; (8001128 <fake_gps_init+0xac>)
 80010d6:	4a23      	ldr	r2, [pc, #140]	; (8001164 <fake_gps_init+0xe8>)
 80010d8:	639a      	str	r2, [r3, #56]	; 0x38
    fake_gps[7].latitude = 45.4788784152841;
 80010da:	4b13      	ldr	r3, [pc, #76]	; (8001128 <fake_gps_init+0xac>)
 80010dc:	4a22      	ldr	r2, [pc, #136]	; (8001168 <fake_gps_init+0xec>)
 80010de:	63da      	str	r2, [r3, #60]	; 0x3c

    fake_gps[8].longitude = 9.22652317861608;
 80010e0:	4b11      	ldr	r3, [pc, #68]	; (8001128 <fake_gps_init+0xac>)
 80010e2:	4a22      	ldr	r2, [pc, #136]	; (800116c <fake_gps_init+0xf0>)
 80010e4:	641a      	str	r2, [r3, #64]	; 0x40
    fake_gps[8].latitude = 45.4792292326394;
 80010e6:	4b10      	ldr	r3, [pc, #64]	; (8001128 <fake_gps_init+0xac>)
 80010e8:	4a21      	ldr	r2, [pc, #132]	; (8001170 <fake_gps_init+0xf4>)
 80010ea:	645a      	str	r2, [r3, #68]	; 0x44

    fake_gps[9].longitude = 9.22803205121175;
 80010ec:	4b0e      	ldr	r3, [pc, #56]	; (8001128 <fake_gps_init+0xac>)
 80010ee:	4a21      	ldr	r2, [pc, #132]	; (8001174 <fake_gps_init+0xf8>)
 80010f0:	649a      	str	r2, [r3, #72]	; 0x48
    fake_gps[9].latitude = 45.4791161835439;
 80010f2:	4b0d      	ldr	r3, [pc, #52]	; (8001128 <fake_gps_init+0xac>)
 80010f4:	4a20      	ldr	r2, [pc, #128]	; (8001178 <fake_gps_init+0xfc>)
 80010f6:	64da      	str	r2, [r3, #76]	; 0x4c

    fake_gps[10].longitude = 9.22938409789064;
 80010f8:	4b0b      	ldr	r3, [pc, #44]	; (8001128 <fake_gps_init+0xac>)
 80010fa:	4a20      	ldr	r2, [pc, #128]	; (800117c <fake_gps_init+0x100>)
 80010fc:	651a      	str	r2, [r3, #80]	; 0x50
    fake_gps[10].latitude = 45.4790173241089;
 80010fe:	4b0a      	ldr	r3, [pc, #40]	; (8001128 <fake_gps_init+0xac>)
 8001100:	4a1f      	ldr	r2, [pc, #124]	; (8001180 <fake_gps_init+0x104>)
 8001102:	655a      	str	r2, [r3, #84]	; 0x54

    fake_gps[11].longitude = 9.22994266430211;
 8001104:	4b08      	ldr	r3, [pc, #32]	; (8001128 <fake_gps_init+0xac>)
 8001106:	4a1f      	ldr	r2, [pc, #124]	; (8001184 <fake_gps_init+0x108>)
 8001108:	659a      	str	r2, [r3, #88]	; 0x58
    fake_gps[11].latitude = 45.4782498335493;
 800110a:	4b07      	ldr	r3, [pc, #28]	; (8001128 <fake_gps_init+0xac>)
 800110c:	4a1e      	ldr	r2, [pc, #120]	; (8001188 <fake_gps_init+0x10c>)
 800110e:	65da      	str	r2, [r3, #92]	; 0x5c

    fake_gps[12].longitude = 9.22997546730472;
 8001110:	4b05      	ldr	r3, [pc, #20]	; (8001128 <fake_gps_init+0xac>)
 8001112:	4a1e      	ldr	r2, [pc, #120]	; (800118c <fake_gps_init+0x110>)
 8001114:	661a      	str	r2, [r3, #96]	; 0x60
    fake_gps[12].latitude = 45.4788991756912;
 8001116:	4b04      	ldr	r3, [pc, #16]	; (8001128 <fake_gps_init+0xac>)
 8001118:	4a1d      	ldr	r2, [pc, #116]	; (8001190 <fake_gps_init+0x114>)
 800111a:	665a      	str	r2, [r3, #100]	; 0x64
}
 800111c:	bf00      	nop
 800111e:	46bd      	mov	sp, r7
 8001120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001124:	4770      	bx	lr
 8001126:	bf00      	nop
 8001128:	200003e0 	.word	0x200003e0
 800112c:	4113b6cc 	.word	0x4113b6cc
 8001130:	4235e865 	.word	0x4235e865
 8001134:	4113b37e 	.word	0x4113b37e
 8001138:	4235e862 	.word	0x4235e862
 800113c:	4113af38 	.word	0x4113af38
 8001140:	4235e860 	.word	0x4235e860
 8001144:	4113a7e2 	.word	0x4113a7e2
 8001148:	4235e84b 	.word	0x4235e84b
 800114c:	4113a65e 	.word	0x4113a65e
 8001150:	4235e83c 	.word	0x4235e83c
 8001154:	41139b5c 	.word	0x41139b5c
 8001158:	4235e838 	.word	0x4235e838
 800115c:	41139bd1 	.word	0x41139bd1
 8001160:	4235e917 	.word	0x4235e917
 8001164:	41139bbc 	.word	0x41139bbc
 8001168:	4235ea5f 	.word	0x4235ea5f
 800116c:	41139fd7 	.word	0x41139fd7
 8001170:	4235eabb 	.word	0x4235eabb
 8001174:	4113a605 	.word	0x4113a605
 8001178:	4235ea9d 	.word	0x4235ea9d
 800117c:	4113ab8f 	.word	0x4113ab8f
 8001180:	4235ea84 	.word	0x4235ea84
 8001184:	4113add8 	.word	0x4113add8
 8001188:	4235e9ba 	.word	0x4235e9ba
 800118c:	4113adfb 	.word	0x4113adfb
 8001190:	4235ea65 	.word	0x4235ea65

08001194 <get_coordinate>:

Coordinate get_coordinate(){
 8001194:	b480      	push	{r7}
 8001196:	b087      	sub	sp, #28
 8001198:	af00      	add	r7, sp, #0
	Coordinate c = fake_gps[coordinate_index];
 800119a:	4b1a      	ldr	r3, [pc, #104]	; (8001204 <get_coordinate+0x70>)
 800119c:	781b      	ldrb	r3, [r3, #0]
 800119e:	491a      	ldr	r1, [pc, #104]	; (8001208 <get_coordinate+0x74>)
 80011a0:	f107 0208 	add.w	r2, r7, #8
 80011a4:	00db      	lsls	r3, r3, #3
 80011a6:	440b      	add	r3, r1
 80011a8:	e893 0003 	ldmia.w	r3, {r0, r1}
 80011ac:	e882 0003 	stmia.w	r2, {r0, r1}
	coordinate_index = (coordinate_index + 1) % COORDINATE_NUMBER;
 80011b0:	4b14      	ldr	r3, [pc, #80]	; (8001204 <get_coordinate+0x70>)
 80011b2:	781b      	ldrb	r3, [r3, #0]
 80011b4:	1c59      	adds	r1, r3, #1
 80011b6:	4b15      	ldr	r3, [pc, #84]	; (800120c <get_coordinate+0x78>)
 80011b8:	fb83 2301 	smull	r2, r3, r3, r1
 80011bc:	109a      	asrs	r2, r3, #2
 80011be:	17cb      	asrs	r3, r1, #31
 80011c0:	1ad2      	subs	r2, r2, r3
 80011c2:	4613      	mov	r3, r2
 80011c4:	005b      	lsls	r3, r3, #1
 80011c6:	4413      	add	r3, r2
 80011c8:	009b      	lsls	r3, r3, #2
 80011ca:	4413      	add	r3, r2
 80011cc:	1aca      	subs	r2, r1, r3
 80011ce:	b2d2      	uxtb	r2, r2
 80011d0:	4b0c      	ldr	r3, [pc, #48]	; (8001204 <get_coordinate+0x70>)
 80011d2:	701a      	strb	r2, [r3, #0]
	return c;
 80011d4:	f107 0310 	add.w	r3, r7, #16
 80011d8:	f107 0208 	add.w	r2, r7, #8
 80011dc:	e892 0003 	ldmia.w	r2, {r0, r1}
 80011e0:	e883 0003 	stmia.w	r3, {r0, r1}
 80011e4:	693a      	ldr	r2, [r7, #16]
 80011e6:	697b      	ldr	r3, [r7, #20]
 80011e8:	ee07 2a10 	vmov	s14, r2
 80011ec:	ee07 3a90 	vmov	s15, r3
}
 80011f0:	eeb0 0a47 	vmov.f32	s0, s14
 80011f4:	eef0 0a67 	vmov.f32	s1, s15
 80011f8:	371c      	adds	r7, #28
 80011fa:	46bd      	mov	sp, r7
 80011fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001200:	4770      	bx	lr
 8001202:	bf00      	nop
 8001204:	20000216 	.word	0x20000216
 8001208:	200003e0 	.word	0x200003e0
 800120c:	4ec4ec4f 	.word	0x4ec4ec4f

08001210 <reset_esp8266>:

void reset_esp8266(){
 8001210:	b580      	push	{r7, lr}
 8001212:	af00      	add	r7, sp, #0
	HAL_NVIC_DisableIRQ(EXTI1_IRQn);
 8001214:	2007      	movs	r0, #7
 8001216:	f002 fbe4 	bl	80039e2 <HAL_NVIC_DisableIRQ>

	HAL_GPIO_WritePin(ESP_Reset_GPIO_Port, ESP_Reset_Pin, GPIO_PIN_RESET);
 800121a:	2200      	movs	r2, #0
 800121c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001220:	480f      	ldr	r0, [pc, #60]	; (8001260 <reset_esp8266+0x50>)
 8001222:	f003 f94f 	bl	80044c4 <HAL_GPIO_WritePin>
	HAL_Delay(20);
 8001226:	2014      	movs	r0, #20
 8001228:	f001 fda4 	bl	8002d74 <HAL_Delay>
	HAL_GPIO_WritePin(ESP_Reset_GPIO_Port, ESP_Reset_Pin, GPIO_PIN_SET);
 800122c:	2201      	movs	r2, #1
 800122e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001232:	480b      	ldr	r0, [pc, #44]	; (8001260 <reset_esp8266+0x50>)
 8001234:	f003 f946 	bl	80044c4 <HAL_GPIO_WritePin>
	HAL_Delay(200);
 8001238:	20c8      	movs	r0, #200	; 0xc8
 800123a:	f001 fd9b 	bl	8002d74 <HAL_Delay>

	HAL_NVIC_ClearPendingIRQ(EXTI1_IRQn); //Clears the pending bit of an EXTI1 interrupt.   //TODO: ne basta uno?
 800123e:	2007      	movs	r0, #7
 8001240:	f002 fbe9 	bl	8003a16 <HAL_NVIC_ClearPendingIRQ>
	__HAL_GPIO_EXTI_CLEAR_IT(ESP_Signal_Pin); //Clears the EXTI's line pending bits.
 8001244:	4b07      	ldr	r3, [pc, #28]	; (8001264 <reset_esp8266+0x54>)
 8001246:	2202      	movs	r2, #2
 8001248:	615a      	str	r2, [r3, #20]

	HAL_GPIO_WritePin(ESP_Signal_GPIO_Port, ESP_Signal_Pin, GPIO_PIN_RESET);
 800124a:	2200      	movs	r2, #0
 800124c:	2102      	movs	r1, #2
 800124e:	4806      	ldr	r0, [pc, #24]	; (8001268 <reset_esp8266+0x58>)
 8001250:	f003 f938 	bl	80044c4 <HAL_GPIO_WritePin>
	HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8001254:	2007      	movs	r0, #7
 8001256:	f002 fbb6 	bl	80039c6 <HAL_NVIC_EnableIRQ>
}
 800125a:	bf00      	nop
 800125c:	bd80      	pop	{r7, pc}
 800125e:	bf00      	nop
 8001260:	40021000 	.word	0x40021000
 8001264:	40013c00 	.word	0x40013c00
 8001268:	40020800 	.word	0x40020800

0800126c <float_sum>:

//Function that returns the sum of a collection of a certain length
float float_sum(float* collection, uint8_t index) {
 800126c:	b480      	push	{r7}
 800126e:	b085      	sub	sp, #20
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
 8001274:	460b      	mov	r3, r1
 8001276:	70fb      	strb	r3, [r7, #3]
	float sum = 0.0;
 8001278:	f04f 0300 	mov.w	r3, #0
 800127c:	60fb      	str	r3, [r7, #12]
	for(int i=0; i<index; i++){
 800127e:	2300      	movs	r3, #0
 8001280:	60bb      	str	r3, [r7, #8]
 8001282:	e00e      	b.n	80012a2 <float_sum+0x36>
		sum += collection[i];
 8001284:	68bb      	ldr	r3, [r7, #8]
 8001286:	009b      	lsls	r3, r3, #2
 8001288:	687a      	ldr	r2, [r7, #4]
 800128a:	4413      	add	r3, r2
 800128c:	edd3 7a00 	vldr	s15, [r3]
 8001290:	ed97 7a03 	vldr	s14, [r7, #12]
 8001294:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001298:	edc7 7a03 	vstr	s15, [r7, #12]
	for(int i=0; i<index; i++){
 800129c:	68bb      	ldr	r3, [r7, #8]
 800129e:	3301      	adds	r3, #1
 80012a0:	60bb      	str	r3, [r7, #8]
 80012a2:	78fb      	ldrb	r3, [r7, #3]
 80012a4:	68ba      	ldr	r2, [r7, #8]
 80012a6:	429a      	cmp	r2, r3
 80012a8:	dbec      	blt.n	8001284 <float_sum+0x18>
	}
	return sum;
 80012aa:	68fb      	ldr	r3, [r7, #12]
 80012ac:	ee07 3a90 	vmov	s15, r3
}
 80012b0:	eeb0 0a67 	vmov.f32	s0, s15
 80012b4:	3714      	adds	r7, #20
 80012b6:	46bd      	mov	sp, r7
 80012b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012bc:	4770      	bx	lr
	...

080012c0 <fall_counter_increment>:

//TODO: commentare
void fall_counter_increment(float gyro_value){
 80012c0:	b480      	push	{r7}
 80012c2:	b083      	sub	sp, #12
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	ed87 0a01 	vstr	s0, [r7, #4]
	if(check_fall){
 80012ca:	4b12      	ldr	r3, [pc, #72]	; (8001314 <fall_counter_increment+0x54>)
 80012cc:	781b      	ldrb	r3, [r3, #0]
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d01a      	beq.n	8001308 <fall_counter_increment+0x48>
		check_fall_counter++;
 80012d2:	4b11      	ldr	r3, [pc, #68]	; (8001318 <fall_counter_increment+0x58>)
 80012d4:	781b      	ldrb	r3, [r3, #0]
 80012d6:	3301      	adds	r3, #1
 80012d8:	b2da      	uxtb	r2, r3
 80012da:	4b0f      	ldr	r3, [pc, #60]	; (8001318 <fall_counter_increment+0x58>)
 80012dc:	701a      	strb	r2, [r3, #0]
		if(check_fall_counter>20){
 80012de:	4b0e      	ldr	r3, [pc, #56]	; (8001318 <fall_counter_increment+0x58>)
 80012e0:	781b      	ldrb	r3, [r3, #0]
 80012e2:	2b14      	cmp	r3, #20
 80012e4:	d910      	bls.n	8001308 <fall_counter_increment+0x48>
			if(gyro_value>30.0){
 80012e6:	edd7 7a01 	vldr	s15, [r7, #4]
 80012ea:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 80012ee:	eef4 7ac7 	vcmpe.f32	s15, s14
 80012f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012f6:	dc00      	bgt.n	80012fa <fall_counter_increment+0x3a>
				check_fall_counter=check_fall=0;
			}
		}
	}
}
 80012f8:	e006      	b.n	8001308 <fall_counter_increment+0x48>
				check_fall_counter=check_fall=0;
 80012fa:	4b06      	ldr	r3, [pc, #24]	; (8001314 <fall_counter_increment+0x54>)
 80012fc:	2200      	movs	r2, #0
 80012fe:	701a      	strb	r2, [r3, #0]
 8001300:	4b04      	ldr	r3, [pc, #16]	; (8001314 <fall_counter_increment+0x54>)
 8001302:	781a      	ldrb	r2, [r3, #0]
 8001304:	4b04      	ldr	r3, [pc, #16]	; (8001318 <fall_counter_increment+0x58>)
 8001306:	701a      	strb	r2, [r3, #0]
}
 8001308:	bf00      	nop
 800130a:	370c      	adds	r7, #12
 800130c:	46bd      	mov	sp, r7
 800130e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001312:	4770      	bx	lr
 8001314:	20000223 	.word	0x20000223
 8001318:	20000224 	.word	0x20000224

0800131c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  memset(mq_data, 0, MQ_DATA_LENGTH*sizeof(float));
 8001320:	2220      	movs	r2, #32
 8001322:	2100      	movs	r1, #0
 8001324:	481e      	ldr	r0, [pc, #120]	; (80013a0 <main+0x84>)
 8001326:	f007 fe11 	bl	8008f4c <memset>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800132a:	f001 fcb1 	bl	8002c90 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800132e:	f000 f843 	bl	80013b8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001332:	f000 fa89 	bl	8001848 <MX_GPIO_Init>
  MX_USART2_UART_Init();    //UART used to communicate with the ESP8266
 8001336:	f000 fa13 	bl	8001760 <MX_USART2_UART_Init>
  MX_TIM2_Init(); 			//30 sec timer to wake up ESP8266
 800133a:	f000 f927 	bl	800158c <MX_TIM2_Init>
  MX_USART3_UART_Init();    //Debugging UART
 800133e:	f000 fa39 	bl	80017b4 <MX_USART3_UART_Init>
  MX_I2C1_Init();           //I2C to communicate with MPU-6050
 8001342:	f000 f8f5 	bl	8001530 <MX_I2C1_Init>
  MX_ADC1_Init();           //ADC1 used to convert signals from the MQ-135
 8001346:	f000 f8a1 	bl	800148c <MX_ADC1_Init>
  MX_DMA_Init();            //TODO: commentare
 800134a:	f000 fa5d 	bl	8001808 <MX_DMA_Init>
  MX_TIM3_Init();           //3 sec timer to start ADC1 conversion
 800134e:	f000 f96b 	bl	8001628 <MX_TIM3_Init>
  MX_TIM4_Init();           //4 sec timer for reading inertial data from MPU-6050
 8001352:	f000 f9b7 	bl	80016c4 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  RetargetInit(&huart3); //Retarget printf to uart3
 8001356:	4813      	ldr	r0, [pc, #76]	; (80013a4 <main+0x88>)
 8001358:	f001 fb70 	bl	8002a3c <RetargetInit>
  fake_gps_init();
 800135c:	f7ff fe8e 	bl	800107c <fake_gps_init>

  MPU6050_Init();
 8001360:	f7ff fdee 	bl	8000f40 <MPU6050_Init>
  HAL_DMA_Init(&hdma_i2c1_rx);
 8001364:	4810      	ldr	r0, [pc, #64]	; (80013a8 <main+0x8c>)
 8001366:	f002 fb65 	bl	8003a34 <HAL_DMA_Init>

  HAL_TIM_Base_Start(&htim3);
 800136a:	4810      	ldr	r0, [pc, #64]	; (80013ac <main+0x90>)
 800136c:	f006 fe14 	bl	8007f98 <HAL_TIM_Base_Start>
  HAL_ADC_Start_IT(&hadc1);
 8001370:	480f      	ldr	r0, [pc, #60]	; (80013b0 <main+0x94>)
 8001372:	f001 fd87 	bl	8002e84 <HAL_ADC_Start_IT>

  HAL_NVIC_DisableIRQ(EXTI1_IRQn);
 8001376:	2007      	movs	r0, #7
 8001378:	f002 fb33 	bl	80039e2 <HAL_NVIC_DisableIRQ>
  __HAL_TIM_CLEAR_FLAG(&htim2, TIM_SR_UIF); //TODO: commentare
 800137c:	4b0d      	ldr	r3, [pc, #52]	; (80013b4 <main+0x98>)
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	f06f 0201 	mvn.w	r2, #1
 8001384:	611a      	str	r2, [r3, #16]
  HAL_TIM_Base_Start_IT(&htim2); //Start timer 30 s
 8001386:	480b      	ldr	r0, [pc, #44]	; (80013b4 <main+0x98>)
 8001388:	f006 fe6e 	bl	8008068 <HAL_TIM_Base_Start_IT>

  HAL_SuspendTick(); //The SysTick interrupt is disabled and then the Tick increment is suspended
 800138c:	f001 fd16 	bl	8002dbc <HAL_SuspendTick>

  /*
   * Set SLEEPONEXIT bit of SCR register. When this bit is set, the processor re-enters SLEEP mode
   * when an interruption handling is over.
   */
  HAL_PWR_EnableSleepOnExit();
 8001390:	f006 f92e 	bl	80075f0 <HAL_PWR_EnableSleepOnExit>

  HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 8001394:	2101      	movs	r1, #1
 8001396:	2000      	movs	r0, #0
 8001398:	f006 f90e 	bl	80075b8 <HAL_PWR_EnterSLEEPMode>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1){
 800139c:	e7fe      	b.n	800139c <main+0x80>
 800139e:	bf00      	nop
 80013a0:	20000320 	.word	0x20000320
 80013a4:	20000284 	.word	0x20000284
 80013a8:	2000084c 	.word	0x2000084c
 80013ac:	20000344 	.word	0x20000344
 80013b0:	20000398 	.word	0x20000398
 80013b4:	200008b0 	.word	0x200008b0

080013b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b094      	sub	sp, #80	; 0x50
 80013bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80013be:	f107 0320 	add.w	r3, r7, #32
 80013c2:	2230      	movs	r2, #48	; 0x30
 80013c4:	2100      	movs	r1, #0
 80013c6:	4618      	mov	r0, r3
 80013c8:	f007 fdc0 	bl	8008f4c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80013cc:	f107 030c 	add.w	r3, r7, #12
 80013d0:	2200      	movs	r2, #0
 80013d2:	601a      	str	r2, [r3, #0]
 80013d4:	605a      	str	r2, [r3, #4]
 80013d6:	609a      	str	r2, [r3, #8]
 80013d8:	60da      	str	r2, [r3, #12]
 80013da:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80013dc:	2300      	movs	r3, #0
 80013de:	60bb      	str	r3, [r7, #8]
 80013e0:	4b28      	ldr	r3, [pc, #160]	; (8001484 <SystemClock_Config+0xcc>)
 80013e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013e4:	4a27      	ldr	r2, [pc, #156]	; (8001484 <SystemClock_Config+0xcc>)
 80013e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013ea:	6413      	str	r3, [r2, #64]	; 0x40
 80013ec:	4b25      	ldr	r3, [pc, #148]	; (8001484 <SystemClock_Config+0xcc>)
 80013ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013f4:	60bb      	str	r3, [r7, #8]
 80013f6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80013f8:	2300      	movs	r3, #0
 80013fa:	607b      	str	r3, [r7, #4]
 80013fc:	4b22      	ldr	r3, [pc, #136]	; (8001488 <SystemClock_Config+0xd0>)
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	4a21      	ldr	r2, [pc, #132]	; (8001488 <SystemClock_Config+0xd0>)
 8001402:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001406:	6013      	str	r3, [r2, #0]
 8001408:	4b1f      	ldr	r3, [pc, #124]	; (8001488 <SystemClock_Config+0xd0>)
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001410:	607b      	str	r3, [r7, #4]
 8001412:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001414:	2302      	movs	r3, #2
 8001416:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001418:	2301      	movs	r3, #1
 800141a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800141c:	2310      	movs	r3, #16
 800141e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001420:	2302      	movs	r3, #2
 8001422:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001424:	2300      	movs	r3, #0
 8001426:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001428:	2308      	movs	r3, #8
 800142a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 800142c:	2332      	movs	r3, #50	; 0x32
 800142e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001430:	2302      	movs	r3, #2
 8001432:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001434:	2307      	movs	r3, #7
 8001436:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001438:	f107 0320 	add.w	r3, r7, #32
 800143c:	4618      	mov	r0, r3
 800143e:	f006 f8e7 	bl	8007610 <HAL_RCC_OscConfig>
 8001442:	4603      	mov	r3, r0
 8001444:	2b00      	cmp	r3, #0
 8001446:	d001      	beq.n	800144c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001448:	f001 f8a6 	bl	8002598 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800144c:	230f      	movs	r3, #15
 800144e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001450:	2302      	movs	r3, #2
 8001452:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001454:	2300      	movs	r3, #0
 8001456:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001458:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800145c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800145e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001462:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001464:	f107 030c 	add.w	r3, r7, #12
 8001468:	2101      	movs	r1, #1
 800146a:	4618      	mov	r0, r3
 800146c:	f006 fb48 	bl	8007b00 <HAL_RCC_ClockConfig>
 8001470:	4603      	mov	r3, r0
 8001472:	2b00      	cmp	r3, #0
 8001474:	d001      	beq.n	800147a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001476:	f001 f88f 	bl	8002598 <Error_Handler>
  }
}
 800147a:	bf00      	nop
 800147c:	3750      	adds	r7, #80	; 0x50
 800147e:	46bd      	mov	sp, r7
 8001480:	bd80      	pop	{r7, pc}
 8001482:	bf00      	nop
 8001484:	40023800 	.word	0x40023800
 8001488:	40007000 	.word	0x40007000

0800148c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	b084      	sub	sp, #16
 8001490:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001492:	463b      	mov	r3, r7
 8001494:	2200      	movs	r2, #0
 8001496:	601a      	str	r2, [r3, #0]
 8001498:	605a      	str	r2, [r3, #4]
 800149a:	609a      	str	r2, [r3, #8]
 800149c:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800149e:	4b22      	ldr	r3, [pc, #136]	; (8001528 <MX_ADC1_Init+0x9c>)
 80014a0:	4a22      	ldr	r2, [pc, #136]	; (800152c <MX_ADC1_Init+0xa0>)
 80014a2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80014a4:	4b20      	ldr	r3, [pc, #128]	; (8001528 <MX_ADC1_Init+0x9c>)
 80014a6:	2200      	movs	r2, #0
 80014a8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80014aa:	4b1f      	ldr	r3, [pc, #124]	; (8001528 <MX_ADC1_Init+0x9c>)
 80014ac:	2200      	movs	r2, #0
 80014ae:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80014b0:	4b1d      	ldr	r3, [pc, #116]	; (8001528 <MX_ADC1_Init+0x9c>)
 80014b2:	2200      	movs	r2, #0
 80014b4:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80014b6:	4b1c      	ldr	r3, [pc, #112]	; (8001528 <MX_ADC1_Init+0x9c>)
 80014b8:	2200      	movs	r2, #0
 80014ba:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80014bc:	4b1a      	ldr	r3, [pc, #104]	; (8001528 <MX_ADC1_Init+0x9c>)
 80014be:	2200      	movs	r2, #0
 80014c0:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80014c4:	4b18      	ldr	r3, [pc, #96]	; (8001528 <MX_ADC1_Init+0x9c>)
 80014c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80014ca:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 80014cc:	4b16      	ldr	r3, [pc, #88]	; (8001528 <MX_ADC1_Init+0x9c>)
 80014ce:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80014d2:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80014d4:	4b14      	ldr	r3, [pc, #80]	; (8001528 <MX_ADC1_Init+0x9c>)
 80014d6:	2200      	movs	r2, #0
 80014d8:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80014da:	4b13      	ldr	r3, [pc, #76]	; (8001528 <MX_ADC1_Init+0x9c>)
 80014dc:	2201      	movs	r2, #1
 80014de:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80014e0:	4b11      	ldr	r3, [pc, #68]	; (8001528 <MX_ADC1_Init+0x9c>)
 80014e2:	2200      	movs	r2, #0
 80014e4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80014e8:	4b0f      	ldr	r3, [pc, #60]	; (8001528 <MX_ADC1_Init+0x9c>)
 80014ea:	2201      	movs	r2, #1
 80014ec:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80014ee:	480e      	ldr	r0, [pc, #56]	; (8001528 <MX_ADC1_Init+0x9c>)
 80014f0:	f001 fc84 	bl	8002dfc <HAL_ADC_Init>
 80014f4:	4603      	mov	r3, r0
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d001      	beq.n	80014fe <MX_ADC1_Init+0x72>
  {
    Error_Handler();
 80014fa:	f001 f84d 	bl	8002598 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80014fe:	2300      	movs	r3, #0
 8001500:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001502:	2301      	movs	r3, #1
 8001504:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8001506:	2307      	movs	r3, #7
 8001508:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800150a:	463b      	mov	r3, r7
 800150c:	4619      	mov	r1, r3
 800150e:	4806      	ldr	r0, [pc, #24]	; (8001528 <MX_ADC1_Init+0x9c>)
 8001510:	f001 fef8 	bl	8003304 <HAL_ADC_ConfigChannel>
 8001514:	4603      	mov	r3, r0
 8001516:	2b00      	cmp	r3, #0
 8001518:	d001      	beq.n	800151e <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 800151a:	f001 f83d 	bl	8002598 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800151e:	bf00      	nop
 8001520:	3710      	adds	r7, #16
 8001522:	46bd      	mov	sp, r7
 8001524:	bd80      	pop	{r7, pc}
 8001526:	bf00      	nop
 8001528:	20000398 	.word	0x20000398
 800152c:	40012000 	.word	0x40012000

08001530 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001534:	4b12      	ldr	r3, [pc, #72]	; (8001580 <MX_I2C1_Init+0x50>)
 8001536:	4a13      	ldr	r2, [pc, #76]	; (8001584 <MX_I2C1_Init+0x54>)
 8001538:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800153a:	4b11      	ldr	r3, [pc, #68]	; (8001580 <MX_I2C1_Init+0x50>)
 800153c:	4a12      	ldr	r2, [pc, #72]	; (8001588 <MX_I2C1_Init+0x58>)
 800153e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001540:	4b0f      	ldr	r3, [pc, #60]	; (8001580 <MX_I2C1_Init+0x50>)
 8001542:	2200      	movs	r2, #0
 8001544:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001546:	4b0e      	ldr	r3, [pc, #56]	; (8001580 <MX_I2C1_Init+0x50>)
 8001548:	2200      	movs	r2, #0
 800154a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800154c:	4b0c      	ldr	r3, [pc, #48]	; (8001580 <MX_I2C1_Init+0x50>)
 800154e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001552:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001554:	4b0a      	ldr	r3, [pc, #40]	; (8001580 <MX_I2C1_Init+0x50>)
 8001556:	2200      	movs	r2, #0
 8001558:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800155a:	4b09      	ldr	r3, [pc, #36]	; (8001580 <MX_I2C1_Init+0x50>)
 800155c:	2200      	movs	r2, #0
 800155e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001560:	4b07      	ldr	r3, [pc, #28]	; (8001580 <MX_I2C1_Init+0x50>)
 8001562:	2200      	movs	r2, #0
 8001564:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001566:	4b06      	ldr	r3, [pc, #24]	; (8001580 <MX_I2C1_Init+0x50>)
 8001568:	2200      	movs	r2, #0
 800156a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800156c:	4804      	ldr	r0, [pc, #16]	; (8001580 <MX_I2C1_Init+0x50>)
 800156e:	f002 ffdb 	bl	8004528 <HAL_I2C_Init>
 8001572:	4603      	mov	r3, r0
 8001574:	2b00      	cmp	r3, #0
 8001576:	d001      	beq.n	800157c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001578:	f001 f80e 	bl	8002598 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800157c:	bf00      	nop
 800157e:	bd80      	pop	{r7, pc}
 8001580:	200002c8 	.word	0x200002c8
 8001584:	40005400 	.word	0x40005400
 8001588:	000186a0 	.word	0x000186a0

0800158c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	b086      	sub	sp, #24
 8001590:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001592:	f107 0308 	add.w	r3, r7, #8
 8001596:	2200      	movs	r2, #0
 8001598:	601a      	str	r2, [r3, #0]
 800159a:	605a      	str	r2, [r3, #4]
 800159c:	609a      	str	r2, [r3, #8]
 800159e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015a0:	463b      	mov	r3, r7
 80015a2:	2200      	movs	r2, #0
 80015a4:	601a      	str	r2, [r3, #0]
 80015a6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80015a8:	4b1e      	ldr	r3, [pc, #120]	; (8001624 <MX_TIM2_Init+0x98>)
 80015aa:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80015ae:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 49999;
 80015b0:	4b1c      	ldr	r3, [pc, #112]	; (8001624 <MX_TIM2_Init+0x98>)
 80015b2:	f24c 324f 	movw	r2, #49999	; 0xc34f
 80015b6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015b8:	4b1a      	ldr	r3, [pc, #104]	; (8001624 <MX_TIM2_Init+0x98>)
 80015ba:	2200      	movs	r2, #0
 80015bc:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 14999;                     //TODO: perchè sono 30 sec?
 80015be:	4b19      	ldr	r3, [pc, #100]	; (8001624 <MX_TIM2_Init+0x98>)
 80015c0:	f643 2297 	movw	r2, #14999	; 0x3a97
 80015c4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015c6:	4b17      	ldr	r3, [pc, #92]	; (8001624 <MX_TIM2_Init+0x98>)
 80015c8:	2200      	movs	r2, #0
 80015ca:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015cc:	4b15      	ldr	r3, [pc, #84]	; (8001624 <MX_TIM2_Init+0x98>)
 80015ce:	2200      	movs	r2, #0
 80015d0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80015d2:	4814      	ldr	r0, [pc, #80]	; (8001624 <MX_TIM2_Init+0x98>)
 80015d4:	f006 fc90 	bl	8007ef8 <HAL_TIM_Base_Init>
 80015d8:	4603      	mov	r3, r0
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d001      	beq.n	80015e2 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80015de:	f000 ffdb 	bl	8002598 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80015e2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015e6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80015e8:	f107 0308 	add.w	r3, r7, #8
 80015ec:	4619      	mov	r1, r3
 80015ee:	480d      	ldr	r0, [pc, #52]	; (8001624 <MX_TIM2_Init+0x98>)
 80015f0:	f006 feb2 	bl	8008358 <HAL_TIM_ConfigClockSource>
 80015f4:	4603      	mov	r3, r0
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d001      	beq.n	80015fe <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80015fa:	f000 ffcd 	bl	8002598 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015fe:	2300      	movs	r3, #0
 8001600:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001602:	2300      	movs	r3, #0
 8001604:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001606:	463b      	mov	r3, r7
 8001608:	4619      	mov	r1, r3
 800160a:	4806      	ldr	r0, [pc, #24]	; (8001624 <MX_TIM2_Init+0x98>)
 800160c:	f007 f8ce 	bl	80087ac <HAL_TIMEx_MasterConfigSynchronization>
 8001610:	4603      	mov	r3, r0
 8001612:	2b00      	cmp	r3, #0
 8001614:	d001      	beq.n	800161a <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001616:	f000 ffbf 	bl	8002598 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800161a:	bf00      	nop
 800161c:	3718      	adds	r7, #24
 800161e:	46bd      	mov	sp, r7
 8001620:	bd80      	pop	{r7, pc}
 8001622:	bf00      	nop
 8001624:	200008b0 	.word	0x200008b0

08001628 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	b086      	sub	sp, #24
 800162c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800162e:	f107 0308 	add.w	r3, r7, #8
 8001632:	2200      	movs	r2, #0
 8001634:	601a      	str	r2, [r3, #0]
 8001636:	605a      	str	r2, [r3, #4]
 8001638:	609a      	str	r2, [r3, #8]
 800163a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800163c:	463b      	mov	r3, r7
 800163e:	2200      	movs	r2, #0
 8001640:	601a      	str	r2, [r3, #0]
 8001642:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001644:	4b1d      	ldr	r3, [pc, #116]	; (80016bc <MX_TIM3_Init+0x94>)
 8001646:	4a1e      	ldr	r2, [pc, #120]	; (80016c0 <MX_TIM3_Init+0x98>)
 8001648:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 49999;
 800164a:	4b1c      	ldr	r3, [pc, #112]	; (80016bc <MX_TIM3_Init+0x94>)
 800164c:	f24c 324f 	movw	r2, #49999	; 0xc34f
 8001650:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001652:	4b1a      	ldr	r3, [pc, #104]	; (80016bc <MX_TIM3_Init+0x94>)
 8001654:	2200      	movs	r2, #0
 8001656:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 2499;
 8001658:	4b18      	ldr	r3, [pc, #96]	; (80016bc <MX_TIM3_Init+0x94>)
 800165a:	f640 12c3 	movw	r2, #2499	; 0x9c3
 800165e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001660:	4b16      	ldr	r3, [pc, #88]	; (80016bc <MX_TIM3_Init+0x94>)
 8001662:	2200      	movs	r2, #0
 8001664:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001666:	4b15      	ldr	r3, [pc, #84]	; (80016bc <MX_TIM3_Init+0x94>)
 8001668:	2200      	movs	r2, #0
 800166a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800166c:	4813      	ldr	r0, [pc, #76]	; (80016bc <MX_TIM3_Init+0x94>)
 800166e:	f006 fc43 	bl	8007ef8 <HAL_TIM_Base_Init>
 8001672:	4603      	mov	r3, r0
 8001674:	2b00      	cmp	r3, #0
 8001676:	d001      	beq.n	800167c <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8001678:	f000 ff8e 	bl	8002598 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800167c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001680:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001682:	f107 0308 	add.w	r3, r7, #8
 8001686:	4619      	mov	r1, r3
 8001688:	480c      	ldr	r0, [pc, #48]	; (80016bc <MX_TIM3_Init+0x94>)
 800168a:	f006 fe65 	bl	8008358 <HAL_TIM_ConfigClockSource>
 800168e:	4603      	mov	r3, r0
 8001690:	2b00      	cmp	r3, #0
 8001692:	d001      	beq.n	8001698 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8001694:	f000 ff80 	bl	8002598 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001698:	2320      	movs	r3, #32
 800169a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800169c:	2300      	movs	r3, #0
 800169e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80016a0:	463b      	mov	r3, r7
 80016a2:	4619      	mov	r1, r3
 80016a4:	4805      	ldr	r0, [pc, #20]	; (80016bc <MX_TIM3_Init+0x94>)
 80016a6:	f007 f881 	bl	80087ac <HAL_TIMEx_MasterConfigSynchronization>
 80016aa:	4603      	mov	r3, r0
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d001      	beq.n	80016b4 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 80016b0:	f000 ff72 	bl	8002598 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80016b4:	bf00      	nop
 80016b6:	3718      	adds	r7, #24
 80016b8:	46bd      	mov	sp, r7
 80016ba:	bd80      	pop	{r7, pc}
 80016bc:	20000344 	.word	0x20000344
 80016c0:	40000400 	.word	0x40000400

080016c4 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b086      	sub	sp, #24
 80016c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80016ca:	f107 0308 	add.w	r3, r7, #8
 80016ce:	2200      	movs	r2, #0
 80016d0:	601a      	str	r2, [r3, #0]
 80016d2:	605a      	str	r2, [r3, #4]
 80016d4:	609a      	str	r2, [r3, #8]
 80016d6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016d8:	463b      	mov	r3, r7
 80016da:	2200      	movs	r2, #0
 80016dc:	601a      	str	r2, [r3, #0]
 80016de:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80016e0:	4b1d      	ldr	r3, [pc, #116]	; (8001758 <MX_TIM4_Init+0x94>)
 80016e2:	4a1e      	ldr	r2, [pc, #120]	; (800175c <MX_TIM4_Init+0x98>)
 80016e4:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 49999;
 80016e6:	4b1c      	ldr	r3, [pc, #112]	; (8001758 <MX_TIM4_Init+0x94>)
 80016e8:	f24c 324f 	movw	r2, #49999	; 0xc34f
 80016ec:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 80016ee:	4b1a      	ldr	r3, [pc, #104]	; (8001758 <MX_TIM4_Init+0x94>)
 80016f0:	2210      	movs	r2, #16
 80016f2:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 3999;
 80016f4:	4b18      	ldr	r3, [pc, #96]	; (8001758 <MX_TIM4_Init+0x94>)
 80016f6:	f640 729f 	movw	r2, #3999	; 0xf9f
 80016fa:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016fc:	4b16      	ldr	r3, [pc, #88]	; (8001758 <MX_TIM4_Init+0x94>)
 80016fe:	2200      	movs	r2, #0
 8001700:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001702:	4b15      	ldr	r3, [pc, #84]	; (8001758 <MX_TIM4_Init+0x94>)
 8001704:	2200      	movs	r2, #0
 8001706:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001708:	4813      	ldr	r0, [pc, #76]	; (8001758 <MX_TIM4_Init+0x94>)
 800170a:	f006 fbf5 	bl	8007ef8 <HAL_TIM_Base_Init>
 800170e:	4603      	mov	r3, r0
 8001710:	2b00      	cmp	r3, #0
 8001712:	d001      	beq.n	8001718 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 8001714:	f000 ff40 	bl	8002598 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001718:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800171c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800171e:	f107 0308 	add.w	r3, r7, #8
 8001722:	4619      	mov	r1, r3
 8001724:	480c      	ldr	r0, [pc, #48]	; (8001758 <MX_TIM4_Init+0x94>)
 8001726:	f006 fe17 	bl	8008358 <HAL_TIM_ConfigClockSource>
 800172a:	4603      	mov	r3, r0
 800172c:	2b00      	cmp	r3, #0
 800172e:	d001      	beq.n	8001734 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8001730:	f000 ff32 	bl	8002598 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001734:	2300      	movs	r3, #0
 8001736:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001738:	2300      	movs	r3, #0
 800173a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800173c:	463b      	mov	r3, r7
 800173e:	4619      	mov	r1, r3
 8001740:	4805      	ldr	r0, [pc, #20]	; (8001758 <MX_TIM4_Init+0x94>)
 8001742:	f007 f833 	bl	80087ac <HAL_TIMEx_MasterConfigSynchronization>
 8001746:	4603      	mov	r3, r0
 8001748:	2b00      	cmp	r3, #0
 800174a:	d001      	beq.n	8001750 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 800174c:	f000 ff24 	bl	8002598 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001750:	bf00      	nop
 8001752:	3718      	adds	r7, #24
 8001754:	46bd      	mov	sp, r7
 8001756:	bd80      	pop	{r7, pc}
 8001758:	2000023c 	.word	0x2000023c
 800175c:	40000800 	.word	0x40000800

08001760 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001764:	4b11      	ldr	r3, [pc, #68]	; (80017ac <MX_USART2_UART_Init+0x4c>)
 8001766:	4a12      	ldr	r2, [pc, #72]	; (80017b0 <MX_USART2_UART_Init+0x50>)
 8001768:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800176a:	4b10      	ldr	r3, [pc, #64]	; (80017ac <MX_USART2_UART_Init+0x4c>)
 800176c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001770:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001772:	4b0e      	ldr	r3, [pc, #56]	; (80017ac <MX_USART2_UART_Init+0x4c>)
 8001774:	2200      	movs	r2, #0
 8001776:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001778:	4b0c      	ldr	r3, [pc, #48]	; (80017ac <MX_USART2_UART_Init+0x4c>)
 800177a:	2200      	movs	r2, #0
 800177c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800177e:	4b0b      	ldr	r3, [pc, #44]	; (80017ac <MX_USART2_UART_Init+0x4c>)
 8001780:	2200      	movs	r2, #0
 8001782:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001784:	4b09      	ldr	r3, [pc, #36]	; (80017ac <MX_USART2_UART_Init+0x4c>)
 8001786:	220c      	movs	r2, #12
 8001788:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800178a:	4b08      	ldr	r3, [pc, #32]	; (80017ac <MX_USART2_UART_Init+0x4c>)
 800178c:	2200      	movs	r2, #0
 800178e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001790:	4b06      	ldr	r3, [pc, #24]	; (80017ac <MX_USART2_UART_Init+0x4c>)
 8001792:	2200      	movs	r2, #0
 8001794:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001796:	4805      	ldr	r0, [pc, #20]	; (80017ac <MX_USART2_UART_Init+0x4c>)
 8001798:	f007 f898 	bl	80088cc <HAL_UART_Init>
 800179c:	4603      	mov	r3, r0
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d001      	beq.n	80017a6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80017a2:	f000 fef9 	bl	8002598 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80017a6:	bf00      	nop
 80017a8:	bd80      	pop	{r7, pc}
 80017aa:	bf00      	nop
 80017ac:	200008f8 	.word	0x200008f8
 80017b0:	40004400 	.word	0x40004400

080017b4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80017b8:	4b11      	ldr	r3, [pc, #68]	; (8001800 <MX_USART3_UART_Init+0x4c>)
 80017ba:	4a12      	ldr	r2, [pc, #72]	; (8001804 <MX_USART3_UART_Init+0x50>)
 80017bc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80017be:	4b10      	ldr	r3, [pc, #64]	; (8001800 <MX_USART3_UART_Init+0x4c>)
 80017c0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80017c4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80017c6:	4b0e      	ldr	r3, [pc, #56]	; (8001800 <MX_USART3_UART_Init+0x4c>)
 80017c8:	2200      	movs	r2, #0
 80017ca:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80017cc:	4b0c      	ldr	r3, [pc, #48]	; (8001800 <MX_USART3_UART_Init+0x4c>)
 80017ce:	2200      	movs	r2, #0
 80017d0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80017d2:	4b0b      	ldr	r3, [pc, #44]	; (8001800 <MX_USART3_UART_Init+0x4c>)
 80017d4:	2200      	movs	r2, #0
 80017d6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80017d8:	4b09      	ldr	r3, [pc, #36]	; (8001800 <MX_USART3_UART_Init+0x4c>)
 80017da:	220c      	movs	r2, #12
 80017dc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80017de:	4b08      	ldr	r3, [pc, #32]	; (8001800 <MX_USART3_UART_Init+0x4c>)
 80017e0:	2200      	movs	r2, #0
 80017e2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80017e4:	4b06      	ldr	r3, [pc, #24]	; (8001800 <MX_USART3_UART_Init+0x4c>)
 80017e6:	2200      	movs	r2, #0
 80017e8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80017ea:	4805      	ldr	r0, [pc, #20]	; (8001800 <MX_USART3_UART_Init+0x4c>)
 80017ec:	f007 f86e 	bl	80088cc <HAL_UART_Init>
 80017f0:	4603      	mov	r3, r0
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d001      	beq.n	80017fa <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80017f6:	f000 fecf 	bl	8002598 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80017fa:	bf00      	nop
 80017fc:	bd80      	pop	{r7, pc}
 80017fe:	bf00      	nop
 8001800:	20000284 	.word	0x20000284
 8001804:	40004800 	.word	0x40004800

08001808 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	b082      	sub	sp, #8
 800180c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800180e:	2300      	movs	r3, #0
 8001810:	607b      	str	r3, [r7, #4]
 8001812:	4b0c      	ldr	r3, [pc, #48]	; (8001844 <MX_DMA_Init+0x3c>)
 8001814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001816:	4a0b      	ldr	r2, [pc, #44]	; (8001844 <MX_DMA_Init+0x3c>)
 8001818:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800181c:	6313      	str	r3, [r2, #48]	; 0x30
 800181e:	4b09      	ldr	r3, [pc, #36]	; (8001844 <MX_DMA_Init+0x3c>)
 8001820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001822:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001826:	607b      	str	r3, [r7, #4]
 8001828:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 1, 0);
 800182a:	2200      	movs	r2, #0
 800182c:	2101      	movs	r1, #1
 800182e:	200b      	movs	r0, #11
 8001830:	f002 f8ad 	bl	800398e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8001834:	200b      	movs	r0, #11
 8001836:	f002 f8c6 	bl	80039c6 <HAL_NVIC_EnableIRQ>

}
 800183a:	bf00      	nop
 800183c:	3708      	adds	r7, #8
 800183e:	46bd      	mov	sp, r7
 8001840:	bd80      	pop	{r7, pc}
 8001842:	bf00      	nop
 8001844:	40023800 	.word	0x40023800

08001848 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	b08a      	sub	sp, #40	; 0x28
 800184c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800184e:	f107 0314 	add.w	r3, r7, #20
 8001852:	2200      	movs	r2, #0
 8001854:	601a      	str	r2, [r3, #0]
 8001856:	605a      	str	r2, [r3, #4]
 8001858:	609a      	str	r2, [r3, #8]
 800185a:	60da      	str	r2, [r3, #12]
 800185c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800185e:	2300      	movs	r3, #0
 8001860:	613b      	str	r3, [r7, #16]
 8001862:	4b44      	ldr	r3, [pc, #272]	; (8001974 <MX_GPIO_Init+0x12c>)
 8001864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001866:	4a43      	ldr	r2, [pc, #268]	; (8001974 <MX_GPIO_Init+0x12c>)
 8001868:	f043 0304 	orr.w	r3, r3, #4
 800186c:	6313      	str	r3, [r2, #48]	; 0x30
 800186e:	4b41      	ldr	r3, [pc, #260]	; (8001974 <MX_GPIO_Init+0x12c>)
 8001870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001872:	f003 0304 	and.w	r3, r3, #4
 8001876:	613b      	str	r3, [r7, #16]
 8001878:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800187a:	2300      	movs	r3, #0
 800187c:	60fb      	str	r3, [r7, #12]
 800187e:	4b3d      	ldr	r3, [pc, #244]	; (8001974 <MX_GPIO_Init+0x12c>)
 8001880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001882:	4a3c      	ldr	r2, [pc, #240]	; (8001974 <MX_GPIO_Init+0x12c>)
 8001884:	f043 0301 	orr.w	r3, r3, #1
 8001888:	6313      	str	r3, [r2, #48]	; 0x30
 800188a:	4b3a      	ldr	r3, [pc, #232]	; (8001974 <MX_GPIO_Init+0x12c>)
 800188c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800188e:	f003 0301 	and.w	r3, r3, #1
 8001892:	60fb      	str	r3, [r7, #12]
 8001894:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001896:	2300      	movs	r3, #0
 8001898:	60bb      	str	r3, [r7, #8]
 800189a:	4b36      	ldr	r3, [pc, #216]	; (8001974 <MX_GPIO_Init+0x12c>)
 800189c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800189e:	4a35      	ldr	r2, [pc, #212]	; (8001974 <MX_GPIO_Init+0x12c>)
 80018a0:	f043 0310 	orr.w	r3, r3, #16
 80018a4:	6313      	str	r3, [r2, #48]	; 0x30
 80018a6:	4b33      	ldr	r3, [pc, #204]	; (8001974 <MX_GPIO_Init+0x12c>)
 80018a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018aa:	f003 0310 	and.w	r3, r3, #16
 80018ae:	60bb      	str	r3, [r7, #8]
 80018b0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80018b2:	2300      	movs	r3, #0
 80018b4:	607b      	str	r3, [r7, #4]
 80018b6:	4b2f      	ldr	r3, [pc, #188]	; (8001974 <MX_GPIO_Init+0x12c>)
 80018b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ba:	4a2e      	ldr	r2, [pc, #184]	; (8001974 <MX_GPIO_Init+0x12c>)
 80018bc:	f043 0302 	orr.w	r3, r3, #2
 80018c0:	6313      	str	r3, [r2, #48]	; 0x30
 80018c2:	4b2c      	ldr	r3, [pc, #176]	; (8001974 <MX_GPIO_Init+0x12c>)
 80018c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018c6:	f003 0302 	and.w	r3, r3, #2
 80018ca:	607b      	str	r3, [r7, #4]
 80018cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80018ce:	2300      	movs	r3, #0
 80018d0:	603b      	str	r3, [r7, #0]
 80018d2:	4b28      	ldr	r3, [pc, #160]	; (8001974 <MX_GPIO_Init+0x12c>)
 80018d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018d6:	4a27      	ldr	r2, [pc, #156]	; (8001974 <MX_GPIO_Init+0x12c>)
 80018d8:	f043 0308 	orr.w	r3, r3, #8
 80018dc:	6313      	str	r3, [r2, #48]	; 0x30
 80018de:	4b25      	ldr	r3, [pc, #148]	; (8001974 <MX_GPIO_Init+0x12c>)
 80018e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018e2:	f003 0308 	and.w	r3, r3, #8
 80018e6:	603b      	str	r3, [r7, #0]
 80018e8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ESP_Reset_GPIO_Port, ESP_Reset_Pin, GPIO_PIN_SET);
 80018ea:	2201      	movs	r2, #1
 80018ec:	f44f 7180 	mov.w	r1, #256	; 0x100
 80018f0:	4821      	ldr	r0, [pc, #132]	; (8001978 <MX_GPIO_Init+0x130>)
 80018f2:	f002 fde7 	bl	80044c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : ESP_Signal_Pin */
  GPIO_InitStruct.Pin = ESP_Signal_Pin;
 80018f6:	2302      	movs	r3, #2
 80018f8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80018fa:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80018fe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001900:	2300      	movs	r3, #0
 8001902:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ESP_Signal_GPIO_Port, &GPIO_InitStruct);
 8001904:	f107 0314 	add.w	r3, r7, #20
 8001908:	4619      	mov	r1, r3
 800190a:	481c      	ldr	r0, [pc, #112]	; (800197c <MX_GPIO_Init+0x134>)
 800190c:	f002 fc3e 	bl	800418c <HAL_GPIO_Init>

  /*Configure GPIO pin : ESP_Reset_Pin */
  GPIO_InitStruct.Pin = ESP_Reset_Pin;
 8001910:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001914:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001916:	2301      	movs	r3, #1
 8001918:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800191a:	2300      	movs	r3, #0
 800191c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800191e:	2300      	movs	r3, #0
 8001920:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(ESP_Reset_GPIO_Port, &GPIO_InitStruct);
 8001922:	f107 0314 	add.w	r3, r7, #20
 8001926:	4619      	mov	r1, r3
 8001928:	4813      	ldr	r0, [pc, #76]	; (8001978 <MX_GPIO_Init+0x130>)
 800192a:	f002 fc2f 	bl	800418c <HAL_GPIO_Init>

  /*Configure GPIO pin : MPU_DATA_RDY_Pin */
  GPIO_InitStruct.Pin = MPU_DATA_RDY_Pin;
 800192e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001932:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001934:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001938:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800193a:	2300      	movs	r3, #0
 800193c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(MPU_DATA_RDY_GPIO_Port, &GPIO_InitStruct);
 800193e:	f107 0314 	add.w	r3, r7, #20
 8001942:	4619      	mov	r1, r3
 8001944:	480e      	ldr	r0, [pc, #56]	; (8001980 <MX_GPIO_Init+0x138>)
 8001946:	f002 fc21 	bl	800418c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 1, 0);
 800194a:	2200      	movs	r2, #0
 800194c:	2101      	movs	r1, #1
 800194e:	2007      	movs	r0, #7
 8001950:	f002 f81d 	bl	800398e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8001954:	2007      	movs	r0, #7
 8001956:	f002 f836 	bl	80039c6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 2, 0);
 800195a:	2200      	movs	r2, #0
 800195c:	2102      	movs	r1, #2
 800195e:	2028      	movs	r0, #40	; 0x28
 8001960:	f002 f815 	bl	800398e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001964:	2028      	movs	r0, #40	; 0x28
 8001966:	f002 f82e 	bl	80039c6 <HAL_NVIC_EnableIRQ>

}
 800196a:	bf00      	nop
 800196c:	3728      	adds	r7, #40	; 0x28
 800196e:	46bd      	mov	sp, r7
 8001970:	bd80      	pop	{r7, pc}
 8001972:	bf00      	nop
 8001974:	40023800 	.word	0x40023800
 8001978:	40021000 	.word	0x40021000
 800197c:	40020800 	.word	0x40020800
 8001980:	40020c00 	.word	0x40020c00

08001984 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	b088      	sub	sp, #32
 8001988:	af04      	add	r7, sp, #16
 800198a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */
	if (htim->Instance == TIM2) {
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001994:	d10e      	bne.n	80019b4 <HAL_TIM_PeriodElapsedCallback+0x30>
		HAL_ResumeTick();
 8001996:	f001 fa21 	bl	8002ddc <HAL_ResumeTick>
		DEBUG_PRINT(("[TIM2] 30 sec timer expired! SEND RESET TO ESP8266!\r\n\n"));
 800199a:	4832      	ldr	r0, [pc, #200]	; (8001a64 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 800199c:	f007 ffce 	bl	800993c <puts>

		// Check MPU
		if(!MPU_OK){
 80019a0:	4b31      	ldr	r3, [pc, #196]	; (8001a68 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 80019a2:	781b      	ldrb	r3, [r3, #0]
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d101      	bne.n	80019ac <HAL_TIM_PeriodElapsedCallback+0x28>
			MPU6050_Init();
 80019a8:	f7ff faca 	bl	8000f40 <MPU6050_Init>
		}

		reset_esp8266();
 80019ac:	f7ff fc30 	bl	8001210 <reset_esp8266>

		HAL_SuspendTick();
 80019b0:	f001 fa04 	bl	8002dbc <HAL_SuspendTick>
	}

	//TODO: commenti
	if(htim->Instance == TIM4) {
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	4a2c      	ldr	r2, [pc, #176]	; (8001a6c <HAL_TIM_PeriodElapsedCallback+0xe8>)
 80019ba:	4293      	cmp	r3, r2
 80019bc:	d14e      	bne.n	8001a5c <HAL_TIM_PeriodElapsedCallback+0xd8>
		double timeCallback;

		DWT->CTRL |= 1;
		DWT->CYCCNT = 0;
		*/
		DEBUG_PRINT(("[TIM4] Reading inertial data from MPU-6050\r\n"));
 80019be:	482c      	ldr	r0, [pc, #176]	; (8001a70 <HAL_TIM_PeriodElapsedCallback+0xec>)
 80019c0:	f007 ffbc 	bl	800993c <puts>

		uint8_t countArr[2];
		uint16_t count=0;
 80019c4:	2300      	movs	r3, #0
 80019c6:	81fb      	strh	r3, [r7, #14]

		uint8_t Data = 0x0;
 80019c8:	2300      	movs	r3, #0
 80019ca:	72fb      	strb	r3, [r7, #11]


		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, FIFO_EN_REG, 1, &Data, 1, 1000);
 80019cc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80019d0:	9302      	str	r3, [sp, #8]
 80019d2:	2301      	movs	r3, #1
 80019d4:	9301      	str	r3, [sp, #4]
 80019d6:	f107 030b 	add.w	r3, r7, #11
 80019da:	9300      	str	r3, [sp, #0]
 80019dc:	2301      	movs	r3, #1
 80019de:	2223      	movs	r2, #35	; 0x23
 80019e0:	21d0      	movs	r1, #208	; 0xd0
 80019e2:	4824      	ldr	r0, [pc, #144]	; (8001a74 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 80019e4:	f003 f912 	bl	8004c0c <HAL_I2C_Mem_Write>
		HAL_I2C_Mem_Read(&hi2c1, MPU6050_ADDR, FIFO_COUNTH, 1, countArr, 2, 1000);
 80019e8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80019ec:	9302      	str	r3, [sp, #8]
 80019ee:	2302      	movs	r3, #2
 80019f0:	9301      	str	r3, [sp, #4]
 80019f2:	f107 030c 	add.w	r3, r7, #12
 80019f6:	9300      	str	r3, [sp, #0]
 80019f8:	2301      	movs	r3, #1
 80019fa:	2272      	movs	r2, #114	; 0x72
 80019fc:	21d0      	movs	r1, #208	; 0xd0
 80019fe:	481d      	ldr	r0, [pc, #116]	; (8001a74 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 8001a00:	f003 f9fe 	bl	8004e00 <HAL_I2C_Mem_Read>
		count = (uint16_t) (countArr[0] << 8 | countArr[1]);
 8001a04:	7b3b      	ldrb	r3, [r7, #12]
 8001a06:	021b      	lsls	r3, r3, #8
 8001a08:	b21a      	sxth	r2, r3
 8001a0a:	7b7b      	ldrb	r3, [r7, #13]
 8001a0c:	b21b      	sxth	r3, r3
 8001a0e:	4313      	orrs	r3, r2
 8001a10:	b21b      	sxth	r3, r3
 8001a12:	81fb      	strh	r3, [r7, #14]
		DEBUG_PRINT(("Fifo count: %d\r\n\n", count));
 8001a14:	89fb      	ldrh	r3, [r7, #14]
 8001a16:	4619      	mov	r1, r3
 8001a18:	4817      	ldr	r0, [pc, #92]	; (8001a78 <HAL_TIM_PeriodElapsedCallback+0xf4>)
 8001a1a:	f007 ff09 	bl	8009830 <iprintf>

		if(count > 0 && count <= 1024) {
 8001a1e:	89fb      	ldrh	r3, [r7, #14]
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d019      	beq.n	8001a58 <HAL_TIM_PeriodElapsedCallback+0xd4>
 8001a24:	89fb      	ldrh	r3, [r7, #14]
 8001a26:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a2a:	d815      	bhi.n	8001a58 <HAL_TIM_PeriodElapsedCallback+0xd4>
			mpu_index = count;
 8001a2c:	4a13      	ldr	r2, [pc, #76]	; (8001a7c <HAL_TIM_PeriodElapsedCallback+0xf8>)
 8001a2e:	89fb      	ldrh	r3, [r7, #14]
 8001a30:	8013      	strh	r3, [r2, #0]

			Data = FIFO_R_W;
 8001a32:	2374      	movs	r3, #116	; 0x74
 8001a34:	72fb      	strb	r3, [r7, #11]
			HAL_I2C_Master_Transmit(&hi2c1, MPU6050_ADDR, &Data, 1, 1000);
 8001a36:	f107 020b 	add.w	r2, r7, #11
 8001a3a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a3e:	9300      	str	r3, [sp, #0]
 8001a40:	2301      	movs	r3, #1
 8001a42:	21d0      	movs	r1, #208	; 0xd0
 8001a44:	480b      	ldr	r0, [pc, #44]	; (8001a74 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 8001a46:	f002 feb3 	bl	80047b0 <HAL_I2C_Master_Transmit>
			HAL_I2C_Master_Receive_DMA(&hi2c1, MPU6050_ADDR, &mpu_data[0], count);
 8001a4a:	89fb      	ldrh	r3, [r7, #14]
 8001a4c:	4a0c      	ldr	r2, [pc, #48]	; (8001a80 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 8001a4e:	21d0      	movs	r1, #208	; 0xd0
 8001a50:	4808      	ldr	r0, [pc, #32]	; (8001a74 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 8001a52:	f002 ffab 	bl	80049ac <HAL_I2C_Master_Receive_DMA>
  /* USER CODE END Callback 0 */

  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001a56:	e001      	b.n	8001a5c <HAL_TIM_PeriodElapsedCallback+0xd8>
			MPU6050_Init();
 8001a58:	f7ff fa72 	bl	8000f40 <MPU6050_Init>
}
 8001a5c:	bf00      	nop
 8001a5e:	3710      	adds	r7, #16
 8001a60:	46bd      	mov	sp, r7
 8001a62:	bd80      	pop	{r7, pc}
 8001a64:	0800cf40 	.word	0x0800cf40
 8001a68:	20000215 	.word	0x20000215
 8001a6c:	40000800 	.word	0x40000800
 8001a70:	0800cf78 	.word	0x0800cf78
 8001a74:	200002c8 	.word	0x200002c8
 8001a78:	0800cfa4 	.word	0x0800cfa4
 8001a7c:	20000220 	.word	0x20000220
 8001a80:	20000448 	.word	0x20000448

08001a84 <HAL_GPIO_EXTI_Callback>:


//Callback interrupt ESP8266
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8001a84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001a88:	b09e      	sub	sp, #120	; 0x78
 8001a8a:	af08      	add	r7, sp, #32
 8001a8c:	4603      	mov	r3, r0
 8001a8e:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == ESP_Signal_Pin){
 8001a90:	88fb      	ldrh	r3, [r7, #6]
 8001a92:	2b02      	cmp	r3, #2
 8001a94:	f040 80ac 	bne.w	8001bf0 <HAL_GPIO_EXTI_Callback+0x16c>
		double timeCallback;

		DWT->CTRL |= 1;
		DWT->CYCCNT = 0;
		*/
		DEBUG_PRINT(("[ESP_SIGNAL] Sending data to esp8266\r\n"));
 8001a98:	4861      	ldr	r0, [pc, #388]	; (8001c20 <HAL_GPIO_EXTI_Callback+0x19c>)
 8001a9a:	f007 ff4f 	bl	800993c <puts>
		uint16_t road_quality = 0;
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56

		float mq_mean = float_sum(mq_data, mq_index)/mq_index;
 8001aa4:	4b5f      	ldr	r3, [pc, #380]	; (8001c24 <HAL_GPIO_EXTI_Callback+0x1a0>)
 8001aa6:	781b      	ldrb	r3, [r3, #0]
 8001aa8:	4619      	mov	r1, r3
 8001aaa:	485f      	ldr	r0, [pc, #380]	; (8001c28 <HAL_GPIO_EXTI_Callback+0x1a4>)
 8001aac:	f7ff fbde 	bl	800126c <float_sum>
 8001ab0:	eef0 6a40 	vmov.f32	s13, s0
 8001ab4:	4b5b      	ldr	r3, [pc, #364]	; (8001c24 <HAL_GPIO_EXTI_Callback+0x1a0>)
 8001ab6:	781b      	ldrb	r3, [r3, #0]
 8001ab8:	ee07 3a90 	vmov	s15, r3
 8001abc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001ac0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001ac4:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
		Coordinate c = get_coordinate();
 8001ac8:	f7ff fb64 	bl	8001194 <get_coordinate>
 8001acc:	eeb0 7a40 	vmov.f32	s14, s0
 8001ad0:	eef0 7a60 	vmov.f32	s15, s1
 8001ad4:	ed87 7a12 	vstr	s14, [r7, #72]	; 0x48
 8001ad8:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c

		if(bad_quality_road_counter <= 10){
 8001adc:	4b53      	ldr	r3, [pc, #332]	; (8001c2c <HAL_GPIO_EXTI_Callback+0x1a8>)
 8001ade:	881b      	ldrh	r3, [r3, #0]
 8001ae0:	2b0a      	cmp	r3, #10
 8001ae2:	d803      	bhi.n	8001aec <HAL_GPIO_EXTI_Callback+0x68>
			road_quality = 0; //Excellent road quality
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8001aea:	e012      	b.n	8001b12 <HAL_GPIO_EXTI_Callback+0x8e>
		}else if(bad_quality_road_counter > 10 && bad_quality_road_counter <= 20){
 8001aec:	4b4f      	ldr	r3, [pc, #316]	; (8001c2c <HAL_GPIO_EXTI_Callback+0x1a8>)
 8001aee:	881b      	ldrh	r3, [r3, #0]
 8001af0:	2b0a      	cmp	r3, #10
 8001af2:	d907      	bls.n	8001b04 <HAL_GPIO_EXTI_Callback+0x80>
 8001af4:	4b4d      	ldr	r3, [pc, #308]	; (8001c2c <HAL_GPIO_EXTI_Callback+0x1a8>)
 8001af6:	881b      	ldrh	r3, [r3, #0]
 8001af8:	2b14      	cmp	r3, #20
 8001afa:	d803      	bhi.n	8001b04 <HAL_GPIO_EXTI_Callback+0x80>
			road_quality = 1; //Decent road quality
 8001afc:	2301      	movs	r3, #1
 8001afe:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8001b02:	e006      	b.n	8001b12 <HAL_GPIO_EXTI_Callback+0x8e>
		}else if(bad_quality_road_counter > 20){
 8001b04:	4b49      	ldr	r3, [pc, #292]	; (8001c2c <HAL_GPIO_EXTI_Callback+0x1a8>)
 8001b06:	881b      	ldrh	r3, [r3, #0]
 8001b08:	2b14      	cmp	r3, #20
 8001b0a:	d902      	bls.n	8001b12 <HAL_GPIO_EXTI_Callback+0x8e>
			road_quality = 2; //Bad road quality
 8001b0c:	2302      	movs	r3, #2
 8001b0e:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
		}

		bad_quality_road_counter = 0;
 8001b12:	4b46      	ldr	r3, [pc, #280]	; (8001c2c <HAL_GPIO_EXTI_Callback+0x1a8>)
 8001b14:	2200      	movs	r2, #0
 8001b16:	801a      	strh	r2, [r3, #0]

		DEBUG_PRINT(("[ESP_SIGNAL] i=%d, Longitude=%f, Latitude=%f, PPM = %f, Road_quality = %d, Fall_detected = %d\r\n\n", i, c.longitude, c.latitude, mq_mean, road_quality, fall_detected));
 8001b18:	4b45      	ldr	r3, [pc, #276]	; (8001c30 <HAL_GPIO_EXTI_Callback+0x1ac>)
 8001b1a:	781b      	ldrb	r3, [r3, #0]
 8001b1c:	461e      	mov	r6, r3
 8001b1e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001b20:	4618      	mov	r0, r3
 8001b22:	f7fe fd11 	bl	8000548 <__aeabi_f2d>
 8001b26:	4680      	mov	r8, r0
 8001b28:	4689      	mov	r9, r1
 8001b2a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	f7fe fd0b 	bl	8000548 <__aeabi_f2d>
 8001b32:	4604      	mov	r4, r0
 8001b34:	460d      	mov	r5, r1
 8001b36:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8001b38:	f7fe fd06 	bl	8000548 <__aeabi_f2d>
 8001b3c:	4602      	mov	r2, r0
 8001b3e:	460b      	mov	r3, r1
 8001b40:	f8b7 1056 	ldrh.w	r1, [r7, #86]	; 0x56
 8001b44:	483b      	ldr	r0, [pc, #236]	; (8001c34 <HAL_GPIO_EXTI_Callback+0x1b0>)
 8001b46:	7800      	ldrb	r0, [r0, #0]
 8001b48:	9005      	str	r0, [sp, #20]
 8001b4a:	9104      	str	r1, [sp, #16]
 8001b4c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001b50:	e9cd 4500 	strd	r4, r5, [sp]
 8001b54:	4642      	mov	r2, r8
 8001b56:	464b      	mov	r3, r9
 8001b58:	4631      	mov	r1, r6
 8001b5a:	4837      	ldr	r0, [pc, #220]	; (8001c38 <HAL_GPIO_EXTI_Callback+0x1b4>)
 8001b5c:	f007 fe68 	bl	8009830 <iprintf>

		char line[60];

		snprintf(line, sizeof(line), "%d,%f,%f,%f,%d,%d\n", i, c.longitude, c.latitude, mq_mean, road_quality, fall_detected);
 8001b60:	4b33      	ldr	r3, [pc, #204]	; (8001c30 <HAL_GPIO_EXTI_Callback+0x1ac>)
 8001b62:	781b      	ldrb	r3, [r3, #0]
 8001b64:	469a      	mov	sl, r3
 8001b66:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001b68:	4618      	mov	r0, r3
 8001b6a:	f7fe fced 	bl	8000548 <__aeabi_f2d>
 8001b6e:	4604      	mov	r4, r0
 8001b70:	460d      	mov	r5, r1
 8001b72:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001b74:	4618      	mov	r0, r3
 8001b76:	f7fe fce7 	bl	8000548 <__aeabi_f2d>
 8001b7a:	4680      	mov	r8, r0
 8001b7c:	4689      	mov	r9, r1
 8001b7e:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8001b80:	f7fe fce2 	bl	8000548 <__aeabi_f2d>
 8001b84:	4602      	mov	r2, r0
 8001b86:	460b      	mov	r3, r1
 8001b88:	f8b7 1056 	ldrh.w	r1, [r7, #86]	; 0x56
 8001b8c:	4829      	ldr	r0, [pc, #164]	; (8001c34 <HAL_GPIO_EXTI_Callback+0x1b0>)
 8001b8e:	7800      	ldrb	r0, [r0, #0]
 8001b90:	4606      	mov	r6, r0
 8001b92:	f107 000c 	add.w	r0, r7, #12
 8001b96:	9607      	str	r6, [sp, #28]
 8001b98:	9106      	str	r1, [sp, #24]
 8001b9a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8001b9e:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8001ba2:	e9cd 4500 	strd	r4, r5, [sp]
 8001ba6:	4653      	mov	r3, sl
 8001ba8:	4a24      	ldr	r2, [pc, #144]	; (8001c3c <HAL_GPIO_EXTI_Callback+0x1b8>)
 8001baa:	213c      	movs	r1, #60	; 0x3c
 8001bac:	f007 ff94 	bl	8009ad8 <sniprintf>

		fall_detected=0;
 8001bb0:	4b20      	ldr	r3, [pc, #128]	; (8001c34 <HAL_GPIO_EXTI_Callback+0x1b0>)
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	701a      	strb	r2, [r3, #0]
		i++;
 8001bb6:	4b1e      	ldr	r3, [pc, #120]	; (8001c30 <HAL_GPIO_EXTI_Callback+0x1ac>)
 8001bb8:	781b      	ldrb	r3, [r3, #0]
 8001bba:	3301      	adds	r3, #1
 8001bbc:	b2da      	uxtb	r2, r3
 8001bbe:	4b1c      	ldr	r3, [pc, #112]	; (8001c30 <HAL_GPIO_EXTI_Callback+0x1ac>)
 8001bc0:	701a      	strb	r2, [r3, #0]

		//Sending data via USART to ESP8266
		HAL_UART_Transmit(&huart2, (uint8_t*) (line), strlen(line), 1000);
 8001bc2:	f107 030c 	add.w	r3, r7, #12
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	f7fe fb02 	bl	80001d0 <strlen>
 8001bcc:	4603      	mov	r3, r0
 8001bce:	b29a      	uxth	r2, r3
 8001bd0:	f107 010c 	add.w	r1, r7, #12
 8001bd4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001bd8:	4819      	ldr	r0, [pc, #100]	; (8001c40 <HAL_GPIO_EXTI_Callback+0x1bc>)
 8001bda:	f006 fec4 	bl	8008966 <HAL_UART_Transmit>

		__HAL_GPIO_EXTI_CLEAR_IT(EXTI1_IRQn);  //Todo: servono entrambi?
 8001bde:	4b19      	ldr	r3, [pc, #100]	; (8001c44 <HAL_GPIO_EXTI_Callback+0x1c0>)
 8001be0:	2207      	movs	r2, #7
 8001be2:	615a      	str	r2, [r3, #20]
		HAL_NVIC_ClearPendingIRQ(EXTI1_IRQn);
 8001be4:	2007      	movs	r0, #7
 8001be6:	f001 ff16 	bl	8003a16 <HAL_NVIC_ClearPendingIRQ>

		HAL_NVIC_DisableIRQ(EXTI1_IRQn);
 8001bea:	2007      	movs	r0, #7
 8001bec:	f001 fef9 	bl	80039e2 <HAL_NVIC_DisableIRQ>
		timeCallback = ((double)cycles/HAL_RCC_GetHCLKFreq())*10e+3;
		printf("TIME (ESP_Signal) =  %.2lf ms\n\r", timeCallback);
		*/
	}

	if(GPIO_Pin == MPU_DATA_RDY_Pin){ //TODO: si può togliere, già messo sulla relazione
 8001bf0:	88fb      	ldrh	r3, [r7, #6]
 8001bf2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001bf6:	d10d      	bne.n	8001c14 <HAL_GPIO_EXTI_Callback+0x190>

		//Periodic timer start for mpu reading
		DEBUG_PRINT(("[MPU_DATA_RDY_Pin] \r\n\n"));
 8001bf8:	4813      	ldr	r0, [pc, #76]	; (8001c48 <HAL_GPIO_EXTI_Callback+0x1c4>)
 8001bfa:	f007 fe9f 	bl	800993c <puts>
		__HAL_TIM_CLEAR_FLAG(&htim4, TIM_SR_UIF);
 8001bfe:	4b13      	ldr	r3, [pc, #76]	; (8001c4c <HAL_GPIO_EXTI_Callback+0x1c8>)
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	f06f 0201 	mvn.w	r2, #1
 8001c06:	611a      	str	r2, [r3, #16]
		HAL_TIM_Base_Start_IT(&htim4);
 8001c08:	4810      	ldr	r0, [pc, #64]	; (8001c4c <HAL_GPIO_EXTI_Callback+0x1c8>)
 8001c0a:	f006 fa2d 	bl	8008068 <HAL_TIM_Base_Start_IT>
		HAL_NVIC_DisableIRQ(EXTI15_10_IRQn);
 8001c0e:	2028      	movs	r0, #40	; 0x28
 8001c10:	f001 fee7 	bl	80039e2 <HAL_NVIC_DisableIRQ>
	}
}
 8001c14:	bf00      	nop
 8001c16:	3758      	adds	r7, #88	; 0x58
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001c1e:	bf00      	nop
 8001c20:	0800cfb8 	.word	0x0800cfb8
 8001c24:	20000217 	.word	0x20000217
 8001c28:	20000320 	.word	0x20000320
 8001c2c:	20000226 	.word	0x20000226
 8001c30:	20000214 	.word	0x20000214
 8001c34:	20000222 	.word	0x20000222
 8001c38:	0800cfe0 	.word	0x0800cfe0
 8001c3c:	0800d044 	.word	0x0800d044
 8001c40:	200008f8 	.word	0x200008f8
 8001c44:	40013c00 	.word	0x40013c00
 8001c48:	0800d058 	.word	0x0800d058
 8001c4c:	2000023c 	.word	0x2000023c

08001c50 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef*hadc){
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b086      	sub	sp, #24
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]

	uint16_t rawValue; float ppm; float v;

	rawValue = HAL_ADC_GetValue(hadc);
 8001c58:	6878      	ldr	r0, [r7, #4]
 8001c5a:	f001 fb32 	bl	80032c2 <HAL_ADC_GetValue>
 8001c5e:	4603      	mov	r3, r0
 8001c60:	82fb      	strh	r3, [r7, #22]

	v = ((float)rawValue) / 4095 * 4660;
 8001c62:	8afb      	ldrh	r3, [r7, #22]
 8001c64:	ee07 3a90 	vmov	s15, r3
 8001c68:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001c6c:	eddf 6a28 	vldr	s13, [pc, #160]	; 8001d10 <HAL_ADC_ConvCpltCallback+0xc0>
 8001c70:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001c74:	ed9f 7a27 	vldr	s14, [pc, #156]	; 8001d14 <HAL_ADC_ConvCpltCallback+0xc4>
 8001c78:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001c7c:	edc7 7a04 	vstr	s15, [r7, #16]
	ppm = ((v - 320.0) / 0.65) + 400;
 8001c80:	6938      	ldr	r0, [r7, #16]
 8001c82:	f7fe fc61 	bl	8000548 <__aeabi_f2d>
 8001c86:	f04f 0200 	mov.w	r2, #0
 8001c8a:	4b23      	ldr	r3, [pc, #140]	; (8001d18 <HAL_ADC_ConvCpltCallback+0xc8>)
 8001c8c:	f7fe fafc 	bl	8000288 <__aeabi_dsub>
 8001c90:	4602      	mov	r2, r0
 8001c92:	460b      	mov	r3, r1
 8001c94:	4610      	mov	r0, r2
 8001c96:	4619      	mov	r1, r3
 8001c98:	a31b      	add	r3, pc, #108	; (adr r3, 8001d08 <HAL_ADC_ConvCpltCallback+0xb8>)
 8001c9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c9e:	f7fe fdd5 	bl	800084c <__aeabi_ddiv>
 8001ca2:	4602      	mov	r2, r0
 8001ca4:	460b      	mov	r3, r1
 8001ca6:	4610      	mov	r0, r2
 8001ca8:	4619      	mov	r1, r3
 8001caa:	f04f 0200 	mov.w	r2, #0
 8001cae:	4b1b      	ldr	r3, [pc, #108]	; (8001d1c <HAL_ADC_ConvCpltCallback+0xcc>)
 8001cb0:	f7fe faec 	bl	800028c <__adddf3>
 8001cb4:	4602      	mov	r2, r0
 8001cb6:	460b      	mov	r3, r1
 8001cb8:	4610      	mov	r0, r2
 8001cba:	4619      	mov	r1, r3
 8001cbc:	f7fe ff74 	bl	8000ba8 <__aeabi_d2f>
 8001cc0:	4603      	mov	r3, r0
 8001cc2:	60fb      	str	r3, [r7, #12]
	//DEBUG_PRINT(("rawValue: %hu\r\n", rawValue));
	//DEBUG_PRINT(("v: %f\r\n", v));
	DEBUG_PRINT(("[HAL_ADC_ConvCpltCallback] PPM: %f\r\n\n", ppm));
 8001cc4:	68f8      	ldr	r0, [r7, #12]
 8001cc6:	f7fe fc3f 	bl	8000548 <__aeabi_f2d>
 8001cca:	4602      	mov	r2, r0
 8001ccc:	460b      	mov	r3, r1
 8001cce:	4814      	ldr	r0, [pc, #80]	; (8001d20 <HAL_ADC_ConvCpltCallback+0xd0>)
 8001cd0:	f007 fdae 	bl	8009830 <iprintf>
	mq_data[mq_index] = ppm;
 8001cd4:	4b13      	ldr	r3, [pc, #76]	; (8001d24 <HAL_ADC_ConvCpltCallback+0xd4>)
 8001cd6:	781b      	ldrb	r3, [r3, #0]
 8001cd8:	4a13      	ldr	r2, [pc, #76]	; (8001d28 <HAL_ADC_ConvCpltCallback+0xd8>)
 8001cda:	009b      	lsls	r3, r3, #2
 8001cdc:	4413      	add	r3, r2
 8001cde:	68fa      	ldr	r2, [r7, #12]
 8001ce0:	601a      	str	r2, [r3, #0]
	mq_index = (mq_index + 1) % MQ_DATA_LENGTH;
 8001ce2:	4b10      	ldr	r3, [pc, #64]	; (8001d24 <HAL_ADC_ConvCpltCallback+0xd4>)
 8001ce4:	781b      	ldrb	r3, [r3, #0]
 8001ce6:	3301      	adds	r3, #1
 8001ce8:	425a      	negs	r2, r3
 8001cea:	f003 0307 	and.w	r3, r3, #7
 8001cee:	f002 0207 	and.w	r2, r2, #7
 8001cf2:	bf58      	it	pl
 8001cf4:	4253      	negpl	r3, r2
 8001cf6:	b2da      	uxtb	r2, r3
 8001cf8:	4b0a      	ldr	r3, [pc, #40]	; (8001d24 <HAL_ADC_ConvCpltCallback+0xd4>)
 8001cfa:	701a      	strb	r2, [r3, #0]
}
 8001cfc:	bf00      	nop
 8001cfe:	3718      	adds	r7, #24
 8001d00:	46bd      	mov	sp, r7
 8001d02:	bd80      	pop	{r7, pc}
 8001d04:	f3af 8000 	nop.w
 8001d08:	cccccccd 	.word	0xcccccccd
 8001d0c:	3fe4cccc 	.word	0x3fe4cccc
 8001d10:	457ff000 	.word	0x457ff000
 8001d14:	4591a000 	.word	0x4591a000
 8001d18:	40740000 	.word	0x40740000
 8001d1c:	40790000 	.word	0x40790000
 8001d20:	0800d070 	.word	0x0800d070
 8001d24:	20000217 	.word	0x20000217
 8001d28:	20000320 	.word	0x20000320
 8001d2c:	00000000 	.word	0x00000000

08001d30 <HAL_I2C_MasterRxCpltCallback>:

//TODO: commenti
void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef* hi2c){
 8001d30:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001d32:	b0ad      	sub	sp, #180	; 0xb4
 8001d34:	af04      	add	r7, sp, #16
 8001d36:	6078      	str	r0, [r7, #4]
 8001d38:	466b      	mov	r3, sp
 8001d3a:	461e      	mov	r6, r3

	DWT->CTRL |= 1;
	DWT->CYCCNT = 0;
	*/

	MPU_OK = 1;
 8001d3c:	4b4d      	ldr	r3, [pc, #308]	; (8001e74 <HAL_I2C_MasterRxCpltCallback+0x144>)
 8001d3e:	2201      	movs	r2, #1
 8001d40:	701a      	strb	r2, [r3, #0]

	/// Reactivate write buffer

	uint8_t Data = 0x78;
 8001d42:	2378      	movs	r3, #120	; 0x78
 8001d44:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63
	HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, FIFO_EN_REG, 1, &Data, 1, 1000);
 8001d48:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d4c:	9302      	str	r3, [sp, #8]
 8001d4e:	2301      	movs	r3, #1
 8001d50:	9301      	str	r3, [sp, #4]
 8001d52:	f107 0363 	add.w	r3, r7, #99	; 0x63
 8001d56:	9300      	str	r3, [sp, #0]
 8001d58:	2301      	movs	r3, #1
 8001d5a:	2223      	movs	r2, #35	; 0x23
 8001d5c:	21d0      	movs	r1, #208	; 0xd0
 8001d5e:	4846      	ldr	r0, [pc, #280]	; (8001e78 <HAL_I2C_MasterRxCpltCallback+0x148>)
 8001d60:	f002 ff54 	bl	8004c0c <HAL_I2C_Mem_Write>
	Data = 0x44;
 8001d64:	2344      	movs	r3, #68	; 0x44
 8001d66:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63
	HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, USER_CTRL, 1, &Data, 1, 1000);
 8001d6a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d6e:	9302      	str	r3, [sp, #8]
 8001d70:	2301      	movs	r3, #1
 8001d72:	9301      	str	r3, [sp, #4]
 8001d74:	f107 0363 	add.w	r3, r7, #99	; 0x63
 8001d78:	9300      	str	r3, [sp, #0]
 8001d7a:	2301      	movs	r3, #1
 8001d7c:	226a      	movs	r2, #106	; 0x6a
 8001d7e:	21d0      	movs	r1, #208	; 0xd0
 8001d80:	483d      	ldr	r0, [pc, #244]	; (8001e78 <HAL_I2C_MasterRxCpltCallback+0x148>)
 8001d82:	f002 ff43 	bl	8004c0c <HAL_I2C_Mem_Write>

	float means[SLIDING_WINDOWS];
	float temp_sums[SLIDING_WINDOWS*2];
	float accel_vectors[mpu_index/12], gyro_vectors[mpu_index/12];
 8001d86:	4b3d      	ldr	r3, [pc, #244]	; (8001e7c <HAL_I2C_MasterRxCpltCallback+0x14c>)
 8001d88:	881b      	ldrh	r3, [r3, #0]
 8001d8a:	4a3d      	ldr	r2, [pc, #244]	; (8001e80 <HAL_I2C_MasterRxCpltCallback+0x150>)
 8001d8c:	fba2 2303 	umull	r2, r3, r2, r3
 8001d90:	08db      	lsrs	r3, r3, #3
 8001d92:	b29b      	uxth	r3, r3
 8001d94:	461c      	mov	r4, r3
 8001d96:	1e63      	subs	r3, r4, #1
 8001d98:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8001d9c:	4623      	mov	r3, r4
 8001d9e:	4618      	mov	r0, r3
 8001da0:	f04f 0100 	mov.w	r1, #0
 8001da4:	f04f 0200 	mov.w	r2, #0
 8001da8:	f04f 0300 	mov.w	r3, #0
 8001dac:	014b      	lsls	r3, r1, #5
 8001dae:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001db2:	0142      	lsls	r2, r0, #5
 8001db4:	4623      	mov	r3, r4
 8001db6:	4618      	mov	r0, r3
 8001db8:	f04f 0100 	mov.w	r1, #0
 8001dbc:	f04f 0200 	mov.w	r2, #0
 8001dc0:	f04f 0300 	mov.w	r3, #0
 8001dc4:	014b      	lsls	r3, r1, #5
 8001dc6:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001dca:	0142      	lsls	r2, r0, #5
 8001dcc:	4623      	mov	r3, r4
 8001dce:	009b      	lsls	r3, r3, #2
 8001dd0:	3307      	adds	r3, #7
 8001dd2:	08db      	lsrs	r3, r3, #3
 8001dd4:	00db      	lsls	r3, r3, #3
 8001dd6:	ebad 0d03 	sub.w	sp, sp, r3
 8001dda:	ab04      	add	r3, sp, #16
 8001ddc:	3303      	adds	r3, #3
 8001dde:	089b      	lsrs	r3, r3, #2
 8001de0:	009b      	lsls	r3, r3, #2
 8001de2:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001de4:	4b25      	ldr	r3, [pc, #148]	; (8001e7c <HAL_I2C_MasterRxCpltCallback+0x14c>)
 8001de6:	881b      	ldrh	r3, [r3, #0]
 8001de8:	4a25      	ldr	r2, [pc, #148]	; (8001e80 <HAL_I2C_MasterRxCpltCallback+0x150>)
 8001dea:	fba2 2303 	umull	r2, r3, r2, r3
 8001dee:	08db      	lsrs	r3, r3, #3
 8001df0:	b29b      	uxth	r3, r3
 8001df2:	461c      	mov	r4, r3
 8001df4:	1e63      	subs	r3, r4, #1
 8001df6:	67bb      	str	r3, [r7, #120]	; 0x78
 8001df8:	4623      	mov	r3, r4
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	f04f 0100 	mov.w	r1, #0
 8001e00:	f04f 0200 	mov.w	r2, #0
 8001e04:	f04f 0300 	mov.w	r3, #0
 8001e08:	014b      	lsls	r3, r1, #5
 8001e0a:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001e0e:	0142      	lsls	r2, r0, #5
 8001e10:	4623      	mov	r3, r4
 8001e12:	4618      	mov	r0, r3
 8001e14:	f04f 0100 	mov.w	r1, #0
 8001e18:	f04f 0200 	mov.w	r2, #0
 8001e1c:	f04f 0300 	mov.w	r3, #0
 8001e20:	014b      	lsls	r3, r1, #5
 8001e22:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001e26:	0142      	lsls	r2, r0, #5
 8001e28:	4623      	mov	r3, r4
 8001e2a:	009b      	lsls	r3, r3, #2
 8001e2c:	3307      	adds	r3, #7
 8001e2e:	08db      	lsrs	r3, r3, #3
 8001e30:	00db      	lsls	r3, r3, #3
 8001e32:	ebad 0d03 	sub.w	sp, sp, r3
 8001e36:	ab04      	add	r3, sp, #16
 8001e38:	3303      	adds	r3, #3
 8001e3a:	089b      	lsrs	r3, r3, #2
 8001e3c:	009b      	lsls	r3, r3, #2
 8001e3e:	677b      	str	r3, [r7, #116]	; 0x74
	uint16_t accel_vector_index=0, gyro_vector_index = 0;
 8001e40:	2300      	movs	r3, #0
 8001e42:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 8001e46:	2300      	movs	r3, #0
 8001e48:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
	float accel_sum = 0;
 8001e4c:	f04f 0300 	mov.w	r3, #0
 8001e50:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
	uint8_t sum_counter = 0, sum_index=0;
 8001e54:	2300      	movs	r3, #0
 8001e56:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
	DEBUG_PRINT(("receive dma callback, mpu index: %d\r\n", mpu_index));
 8001e60:	4b06      	ldr	r3, [pc, #24]	; (8001e7c <HAL_I2C_MasterRxCpltCallback+0x14c>)
 8001e62:	881b      	ldrh	r3, [r3, #0]
 8001e64:	4619      	mov	r1, r3
 8001e66:	4807      	ldr	r0, [pc, #28]	; (8001e84 <HAL_I2C_MasterRxCpltCallback+0x154>)
 8001e68:	f007 fce2 	bl	8009830 <iprintf>
	for(int i=0; i<mpu_index; i+=12){
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8001e72:	e259      	b.n	8002328 <HAL_I2C_MasterRxCpltCallback+0x5f8>
 8001e74:	20000215 	.word	0x20000215
 8001e78:	200002c8 	.word	0x200002c8
 8001e7c:	20000220 	.word	0x20000220
 8001e80:	aaaaaaab 	.word	0xaaaaaaab
 8001e84:	0800d098 	.word	0x0800d098
		Accel_X_RAW = (int16_t)(mpu_data[i] << 8 | mpu_data[i+1]);
 8001e88:	4ac9      	ldr	r2, [pc, #804]	; (80021b0 <HAL_I2C_MasterRxCpltCallback+0x480>)
 8001e8a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001e8e:	4413      	add	r3, r2
 8001e90:	781b      	ldrb	r3, [r3, #0]
 8001e92:	021b      	lsls	r3, r3, #8
 8001e94:	b21a      	sxth	r2, r3
 8001e96:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001e9a:	3301      	adds	r3, #1
 8001e9c:	49c4      	ldr	r1, [pc, #784]	; (80021b0 <HAL_I2C_MasterRxCpltCallback+0x480>)
 8001e9e:	5ccb      	ldrb	r3, [r1, r3]
 8001ea0:	b21b      	sxth	r3, r3
 8001ea2:	4313      	orrs	r3, r2
 8001ea4:	b21b      	sxth	r3, r3
 8001ea6:	ee07 3a90 	vmov	s15, r3
 8001eaa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001eae:	4bc1      	ldr	r3, [pc, #772]	; (80021b4 <HAL_I2C_MasterRxCpltCallback+0x484>)
 8001eb0:	edc3 7a00 	vstr	s15, [r3]
		Accel_Y_RAW = (int16_t)(mpu_data[i+2] << 8 | mpu_data[i+3]);
 8001eb4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001eb8:	3302      	adds	r3, #2
 8001eba:	4abd      	ldr	r2, [pc, #756]	; (80021b0 <HAL_I2C_MasterRxCpltCallback+0x480>)
 8001ebc:	5cd3      	ldrb	r3, [r2, r3]
 8001ebe:	021b      	lsls	r3, r3, #8
 8001ec0:	b21a      	sxth	r2, r3
 8001ec2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001ec6:	3303      	adds	r3, #3
 8001ec8:	49b9      	ldr	r1, [pc, #740]	; (80021b0 <HAL_I2C_MasterRxCpltCallback+0x480>)
 8001eca:	5ccb      	ldrb	r3, [r1, r3]
 8001ecc:	b21b      	sxth	r3, r3
 8001ece:	4313      	orrs	r3, r2
 8001ed0:	b21b      	sxth	r3, r3
 8001ed2:	ee07 3a90 	vmov	s15, r3
 8001ed6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001eda:	4bb7      	ldr	r3, [pc, #732]	; (80021b8 <HAL_I2C_MasterRxCpltCallback+0x488>)
 8001edc:	edc3 7a00 	vstr	s15, [r3]
		Accel_Z_RAW = (int16_t)(mpu_data[i+4] << 8 | mpu_data[i+5]);
 8001ee0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001ee4:	3304      	adds	r3, #4
 8001ee6:	4ab2      	ldr	r2, [pc, #712]	; (80021b0 <HAL_I2C_MasterRxCpltCallback+0x480>)
 8001ee8:	5cd3      	ldrb	r3, [r2, r3]
 8001eea:	021b      	lsls	r3, r3, #8
 8001eec:	b21a      	sxth	r2, r3
 8001eee:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001ef2:	3305      	adds	r3, #5
 8001ef4:	49ae      	ldr	r1, [pc, #696]	; (80021b0 <HAL_I2C_MasterRxCpltCallback+0x480>)
 8001ef6:	5ccb      	ldrb	r3, [r1, r3]
 8001ef8:	b21b      	sxth	r3, r3
 8001efa:	4313      	orrs	r3, r2
 8001efc:	b21b      	sxth	r3, r3
 8001efe:	ee07 3a90 	vmov	s15, r3
 8001f02:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001f06:	4bad      	ldr	r3, [pc, #692]	; (80021bc <HAL_I2C_MasterRxCpltCallback+0x48c>)
 8001f08:	edc3 7a00 	vstr	s15, [r3]

		Ax = Accel_X_RAW/16384.0 + offset_accelX;  // get the float g
 8001f0c:	4ba9      	ldr	r3, [pc, #676]	; (80021b4 <HAL_I2C_MasterRxCpltCallback+0x484>)
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	4618      	mov	r0, r3
 8001f12:	f7fe fb19 	bl	8000548 <__aeabi_f2d>
 8001f16:	f04f 0200 	mov.w	r2, #0
 8001f1a:	4ba9      	ldr	r3, [pc, #676]	; (80021c0 <HAL_I2C_MasterRxCpltCallback+0x490>)
 8001f1c:	f7fe fc96 	bl	800084c <__aeabi_ddiv>
 8001f20:	4602      	mov	r2, r0
 8001f22:	460b      	mov	r3, r1
 8001f24:	4614      	mov	r4, r2
 8001f26:	461d      	mov	r5, r3
 8001f28:	4ba6      	ldr	r3, [pc, #664]	; (80021c4 <HAL_I2C_MasterRxCpltCallback+0x494>)
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	f7fe fb0b 	bl	8000548 <__aeabi_f2d>
 8001f32:	4602      	mov	r2, r0
 8001f34:	460b      	mov	r3, r1
 8001f36:	4620      	mov	r0, r4
 8001f38:	4629      	mov	r1, r5
 8001f3a:	f7fe f9a7 	bl	800028c <__adddf3>
 8001f3e:	4602      	mov	r2, r0
 8001f40:	460b      	mov	r3, r1
 8001f42:	4610      	mov	r0, r2
 8001f44:	4619      	mov	r1, r3
 8001f46:	f7fe fe2f 	bl	8000ba8 <__aeabi_d2f>
 8001f4a:	4603      	mov	r3, r0
 8001f4c:	4a9e      	ldr	r2, [pc, #632]	; (80021c8 <HAL_I2C_MasterRxCpltCallback+0x498>)
 8001f4e:	6013      	str	r3, [r2, #0]
		Ay = Accel_Y_RAW/16384.0 + offset_accelY;
 8001f50:	4b99      	ldr	r3, [pc, #612]	; (80021b8 <HAL_I2C_MasterRxCpltCallback+0x488>)
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	4618      	mov	r0, r3
 8001f56:	f7fe faf7 	bl	8000548 <__aeabi_f2d>
 8001f5a:	f04f 0200 	mov.w	r2, #0
 8001f5e:	4b98      	ldr	r3, [pc, #608]	; (80021c0 <HAL_I2C_MasterRxCpltCallback+0x490>)
 8001f60:	f7fe fc74 	bl	800084c <__aeabi_ddiv>
 8001f64:	4602      	mov	r2, r0
 8001f66:	460b      	mov	r3, r1
 8001f68:	4614      	mov	r4, r2
 8001f6a:	461d      	mov	r5, r3
 8001f6c:	4b97      	ldr	r3, [pc, #604]	; (80021cc <HAL_I2C_MasterRxCpltCallback+0x49c>)
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	4618      	mov	r0, r3
 8001f72:	f7fe fae9 	bl	8000548 <__aeabi_f2d>
 8001f76:	4602      	mov	r2, r0
 8001f78:	460b      	mov	r3, r1
 8001f7a:	4620      	mov	r0, r4
 8001f7c:	4629      	mov	r1, r5
 8001f7e:	f7fe f985 	bl	800028c <__adddf3>
 8001f82:	4602      	mov	r2, r0
 8001f84:	460b      	mov	r3, r1
 8001f86:	4610      	mov	r0, r2
 8001f88:	4619      	mov	r1, r3
 8001f8a:	f7fe fe0d 	bl	8000ba8 <__aeabi_d2f>
 8001f8e:	4603      	mov	r3, r0
 8001f90:	4a8f      	ldr	r2, [pc, #572]	; (80021d0 <HAL_I2C_MasterRxCpltCallback+0x4a0>)
 8001f92:	6013      	str	r3, [r2, #0]
		Az = Accel_Z_RAW/16384.0 + offset_accelZ;
 8001f94:	4b89      	ldr	r3, [pc, #548]	; (80021bc <HAL_I2C_MasterRxCpltCallback+0x48c>)
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	4618      	mov	r0, r3
 8001f9a:	f7fe fad5 	bl	8000548 <__aeabi_f2d>
 8001f9e:	f04f 0200 	mov.w	r2, #0
 8001fa2:	4b87      	ldr	r3, [pc, #540]	; (80021c0 <HAL_I2C_MasterRxCpltCallback+0x490>)
 8001fa4:	f7fe fc52 	bl	800084c <__aeabi_ddiv>
 8001fa8:	4602      	mov	r2, r0
 8001faa:	460b      	mov	r3, r1
 8001fac:	4614      	mov	r4, r2
 8001fae:	461d      	mov	r5, r3
 8001fb0:	4b88      	ldr	r3, [pc, #544]	; (80021d4 <HAL_I2C_MasterRxCpltCallback+0x4a4>)
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	f7fe fac7 	bl	8000548 <__aeabi_f2d>
 8001fba:	4602      	mov	r2, r0
 8001fbc:	460b      	mov	r3, r1
 8001fbe:	4620      	mov	r0, r4
 8001fc0:	4629      	mov	r1, r5
 8001fc2:	f7fe f963 	bl	800028c <__adddf3>
 8001fc6:	4602      	mov	r2, r0
 8001fc8:	460b      	mov	r3, r1
 8001fca:	4610      	mov	r0, r2
 8001fcc:	4619      	mov	r1, r3
 8001fce:	f7fe fdeb 	bl	8000ba8 <__aeabi_d2f>
 8001fd2:	4603      	mov	r3, r0
 8001fd4:	4a80      	ldr	r2, [pc, #512]	; (80021d8 <HAL_I2C_MasterRxCpltCallback+0x4a8>)
 8001fd6:	6013      	str	r3, [r2, #0]

		float raw_amp = sqrt(pow(Ax, 2)+pow(Ay, 2)+pow(Az, 2));
 8001fd8:	4b7b      	ldr	r3, [pc, #492]	; (80021c8 <HAL_I2C_MasterRxCpltCallback+0x498>)
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	4618      	mov	r0, r3
 8001fde:	f7fe fab3 	bl	8000548 <__aeabi_f2d>
 8001fe2:	4602      	mov	r2, r0
 8001fe4:	460b      	mov	r3, r1
 8001fe6:	ed9f 1b6e 	vldr	d1, [pc, #440]	; 80021a0 <HAL_I2C_MasterRxCpltCallback+0x470>
 8001fea:	ec43 2b10 	vmov	d0, r2, r3
 8001fee:	f009 ffb1 	bl	800bf54 <pow>
 8001ff2:	ec55 4b10 	vmov	r4, r5, d0
 8001ff6:	4b76      	ldr	r3, [pc, #472]	; (80021d0 <HAL_I2C_MasterRxCpltCallback+0x4a0>)
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	f7fe faa4 	bl	8000548 <__aeabi_f2d>
 8002000:	4602      	mov	r2, r0
 8002002:	460b      	mov	r3, r1
 8002004:	ed9f 1b66 	vldr	d1, [pc, #408]	; 80021a0 <HAL_I2C_MasterRxCpltCallback+0x470>
 8002008:	ec43 2b10 	vmov	d0, r2, r3
 800200c:	f009 ffa2 	bl	800bf54 <pow>
 8002010:	ec53 2b10 	vmov	r2, r3, d0
 8002014:	4620      	mov	r0, r4
 8002016:	4629      	mov	r1, r5
 8002018:	f7fe f938 	bl	800028c <__adddf3>
 800201c:	4602      	mov	r2, r0
 800201e:	460b      	mov	r3, r1
 8002020:	4614      	mov	r4, r2
 8002022:	461d      	mov	r5, r3
 8002024:	4b6c      	ldr	r3, [pc, #432]	; (80021d8 <HAL_I2C_MasterRxCpltCallback+0x4a8>)
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	4618      	mov	r0, r3
 800202a:	f7fe fa8d 	bl	8000548 <__aeabi_f2d>
 800202e:	4602      	mov	r2, r0
 8002030:	460b      	mov	r3, r1
 8002032:	ed9f 1b5b 	vldr	d1, [pc, #364]	; 80021a0 <HAL_I2C_MasterRxCpltCallback+0x470>
 8002036:	ec43 2b10 	vmov	d0, r2, r3
 800203a:	f009 ff8b 	bl	800bf54 <pow>
 800203e:	ec53 2b10 	vmov	r2, r3, d0
 8002042:	4620      	mov	r0, r4
 8002044:	4629      	mov	r1, r5
 8002046:	f7fe f921 	bl	800028c <__adddf3>
 800204a:	4602      	mov	r2, r0
 800204c:	460b      	mov	r3, r1
 800204e:	ec43 2b17 	vmov	d7, r2, r3
 8002052:	eeb0 0a47 	vmov.f32	s0, s14
 8002056:	eef0 0a67 	vmov.f32	s1, s15
 800205a:	f00a f829 	bl	800c0b0 <sqrt>
 800205e:	ec53 2b10 	vmov	r2, r3, d0
 8002062:	4610      	mov	r0, r2
 8002064:	4619      	mov	r1, r3
 8002066:	f7fe fd9f 	bl	8000ba8 <__aeabi_d2f>
 800206a:	4603      	mov	r3, r0
 800206c:	66bb      	str	r3, [r7, #104]	; 0x68
		accel_vectors[accel_vector_index++] = raw_amp;
 800206e:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8002072:	1c5a      	adds	r2, r3, #1
 8002074:	f8a7 208c 	strh.w	r2, [r7, #140]	; 0x8c
 8002078:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800207a:	009b      	lsls	r3, r3, #2
 800207c:	4413      	add	r3, r2
 800207e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8002080:	601a      	str	r2, [r3, #0]
		accel_sum = accel_sum + raw_amp;
 8002082:	ed97 7a24 	vldr	s14, [r7, #144]	; 0x90
 8002086:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 800208a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800208e:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
		sum_counter++;
 8002092:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
 8002096:	3301      	adds	r3, #1
 8002098:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
		if (sum_counter == 10){
 800209c:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
 80020a0:	2b0a      	cmp	r3, #10
 80020a2:	d113      	bne.n	80020cc <HAL_I2C_MasterRxCpltCallback+0x39c>
			temp_sums[sum_index++] = accel_sum;
 80020a4:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 80020a8:	1c5a      	adds	r2, r3, #1
 80020aa:	f887 2097 	strb.w	r2, [r7, #151]	; 0x97
 80020ae:	009b      	lsls	r3, r3, #2
 80020b0:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 80020b4:	4413      	add	r3, r2
 80020b6:	3b94      	subs	r3, #148	; 0x94
 80020b8:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 80020bc:	601a      	str	r2, [r3, #0]
			sum_counter = 0;
 80020be:	2300      	movs	r3, #0
 80020c0:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
			accel_sum = 0;
 80020c4:	f04f 0300 	mov.w	r3, #0
 80020c8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
		}

		Gyro_X_RAW = (int16_t)(mpu_data[i+6] << 8 | mpu_data[i+6+1]);
 80020cc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80020d0:	3306      	adds	r3, #6
 80020d2:	4a37      	ldr	r2, [pc, #220]	; (80021b0 <HAL_I2C_MasterRxCpltCallback+0x480>)
 80020d4:	5cd3      	ldrb	r3, [r2, r3]
 80020d6:	021b      	lsls	r3, r3, #8
 80020d8:	b21a      	sxth	r2, r3
 80020da:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80020de:	3307      	adds	r3, #7
 80020e0:	4933      	ldr	r1, [pc, #204]	; (80021b0 <HAL_I2C_MasterRxCpltCallback+0x480>)
 80020e2:	5ccb      	ldrb	r3, [r1, r3]
 80020e4:	b21b      	sxth	r3, r3
 80020e6:	4313      	orrs	r3, r2
 80020e8:	b21b      	sxth	r3, r3
 80020ea:	ee07 3a90 	vmov	s15, r3
 80020ee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80020f2:	4b3a      	ldr	r3, [pc, #232]	; (80021dc <HAL_I2C_MasterRxCpltCallback+0x4ac>)
 80020f4:	edc3 7a00 	vstr	s15, [r3]
		Gyro_Y_RAW = (int16_t)(mpu_data[i+6+2] << 8 | mpu_data[i+6+3]);
 80020f8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80020fc:	3308      	adds	r3, #8
 80020fe:	4a2c      	ldr	r2, [pc, #176]	; (80021b0 <HAL_I2C_MasterRxCpltCallback+0x480>)
 8002100:	5cd3      	ldrb	r3, [r2, r3]
 8002102:	021b      	lsls	r3, r3, #8
 8002104:	b21a      	sxth	r2, r3
 8002106:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800210a:	3309      	adds	r3, #9
 800210c:	4928      	ldr	r1, [pc, #160]	; (80021b0 <HAL_I2C_MasterRxCpltCallback+0x480>)
 800210e:	5ccb      	ldrb	r3, [r1, r3]
 8002110:	b21b      	sxth	r3, r3
 8002112:	4313      	orrs	r3, r2
 8002114:	b21b      	sxth	r3, r3
 8002116:	ee07 3a90 	vmov	s15, r3
 800211a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800211e:	4b30      	ldr	r3, [pc, #192]	; (80021e0 <HAL_I2C_MasterRxCpltCallback+0x4b0>)
 8002120:	edc3 7a00 	vstr	s15, [r3]
		Gyro_Z_RAW = (int16_t)(mpu_data[i+6+4] << 8 | mpu_data[i+6+5]);
 8002124:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002128:	330a      	adds	r3, #10
 800212a:	4a21      	ldr	r2, [pc, #132]	; (80021b0 <HAL_I2C_MasterRxCpltCallback+0x480>)
 800212c:	5cd3      	ldrb	r3, [r2, r3]
 800212e:	021b      	lsls	r3, r3, #8
 8002130:	b21a      	sxth	r2, r3
 8002132:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002136:	330b      	adds	r3, #11
 8002138:	491d      	ldr	r1, [pc, #116]	; (80021b0 <HAL_I2C_MasterRxCpltCallback+0x480>)
 800213a:	5ccb      	ldrb	r3, [r1, r3]
 800213c:	b21b      	sxth	r3, r3
 800213e:	4313      	orrs	r3, r2
 8002140:	b21b      	sxth	r3, r3
 8002142:	ee07 3a90 	vmov	s15, r3
 8002146:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800214a:	4b26      	ldr	r3, [pc, #152]	; (80021e4 <HAL_I2C_MasterRxCpltCallback+0x4b4>)
 800214c:	edc3 7a00 	vstr	s15, [r3]

		Gx = Gyro_X_RAW/131.0 + offset_gyroX;
 8002150:	4b22      	ldr	r3, [pc, #136]	; (80021dc <HAL_I2C_MasterRxCpltCallback+0x4ac>)
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	4618      	mov	r0, r3
 8002156:	f7fe f9f7 	bl	8000548 <__aeabi_f2d>
 800215a:	a313      	add	r3, pc, #76	; (adr r3, 80021a8 <HAL_I2C_MasterRxCpltCallback+0x478>)
 800215c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002160:	f7fe fb74 	bl	800084c <__aeabi_ddiv>
 8002164:	4602      	mov	r2, r0
 8002166:	460b      	mov	r3, r1
 8002168:	4614      	mov	r4, r2
 800216a:	461d      	mov	r5, r3
 800216c:	4b1e      	ldr	r3, [pc, #120]	; (80021e8 <HAL_I2C_MasterRxCpltCallback+0x4b8>)
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	4618      	mov	r0, r3
 8002172:	f7fe f9e9 	bl	8000548 <__aeabi_f2d>
 8002176:	4602      	mov	r2, r0
 8002178:	460b      	mov	r3, r1
 800217a:	4620      	mov	r0, r4
 800217c:	4629      	mov	r1, r5
 800217e:	f7fe f885 	bl	800028c <__adddf3>
 8002182:	4602      	mov	r2, r0
 8002184:	460b      	mov	r3, r1
 8002186:	4610      	mov	r0, r2
 8002188:	4619      	mov	r1, r3
 800218a:	f7fe fd0d 	bl	8000ba8 <__aeabi_d2f>
 800218e:	4603      	mov	r3, r0
 8002190:	4a16      	ldr	r2, [pc, #88]	; (80021ec <HAL_I2C_MasterRxCpltCallback+0x4bc>)
 8002192:	6013      	str	r3, [r2, #0]
		Gy = Gyro_Y_RAW/131.0 + offset_gyroY;
 8002194:	4b12      	ldr	r3, [pc, #72]	; (80021e0 <HAL_I2C_MasterRxCpltCallback+0x4b0>)
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	e02a      	b.n	80021f0 <HAL_I2C_MasterRxCpltCallback+0x4c0>
 800219a:	bf00      	nop
 800219c:	f3af 8000 	nop.w
 80021a0:	00000000 	.word	0x00000000
 80021a4:	40000000 	.word	0x40000000
 80021a8:	00000000 	.word	0x00000000
 80021ac:	40606000 	.word	0x40606000
 80021b0:	20000448 	.word	0x20000448
 80021b4:	20000238 	.word	0x20000238
 80021b8:	20000340 	.word	0x20000340
 80021bc:	20000390 	.word	0x20000390
 80021c0:	40d00000 	.word	0x40d00000
 80021c4:	2000000c 	.word	0x2000000c
 80021c8:	20000848 	.word	0x20000848
 80021cc:	20000010 	.word	0x20000010
 80021d0:	2000038c 	.word	0x2000038c
 80021d4:	20000014 	.word	0x20000014
 80021d8:	200008ac 	.word	0x200008ac
 80021dc:	2000031c 	.word	0x2000031c
 80021e0:	2000093c 	.word	0x2000093c
 80021e4:	2000021c 	.word	0x2000021c
 80021e8:	20000000 	.word	0x20000000
 80021ec:	20000234 	.word	0x20000234
 80021f0:	4618      	mov	r0, r3
 80021f2:	f7fe f9a9 	bl	8000548 <__aeabi_f2d>
 80021f6:	a3d4      	add	r3, pc, #848	; (adr r3, 8002548 <HAL_I2C_MasterRxCpltCallback+0x818>)
 80021f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021fc:	f7fe fb26 	bl	800084c <__aeabi_ddiv>
 8002200:	4602      	mov	r2, r0
 8002202:	460b      	mov	r3, r1
 8002204:	4614      	mov	r4, r2
 8002206:	461d      	mov	r5, r3
 8002208:	4bd3      	ldr	r3, [pc, #844]	; (8002558 <HAL_I2C_MasterRxCpltCallback+0x828>)
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	4618      	mov	r0, r3
 800220e:	f7fe f99b 	bl	8000548 <__aeabi_f2d>
 8002212:	4602      	mov	r2, r0
 8002214:	460b      	mov	r3, r1
 8002216:	4620      	mov	r0, r4
 8002218:	4629      	mov	r1, r5
 800221a:	f7fe f837 	bl	800028c <__adddf3>
 800221e:	4602      	mov	r2, r0
 8002220:	460b      	mov	r3, r1
 8002222:	4610      	mov	r0, r2
 8002224:	4619      	mov	r1, r3
 8002226:	f7fe fcbf 	bl	8000ba8 <__aeabi_d2f>
 800222a:	4603      	mov	r3, r0
 800222c:	4acb      	ldr	r2, [pc, #812]	; (800255c <HAL_I2C_MasterRxCpltCallback+0x82c>)
 800222e:	6013      	str	r3, [r2, #0]
		Gz = Gyro_Z_RAW/131.0 + offset_gyroZ;
 8002230:	4bcb      	ldr	r3, [pc, #812]	; (8002560 <HAL_I2C_MasterRxCpltCallback+0x830>)
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	4618      	mov	r0, r3
 8002236:	f7fe f987 	bl	8000548 <__aeabi_f2d>
 800223a:	a3c3      	add	r3, pc, #780	; (adr r3, 8002548 <HAL_I2C_MasterRxCpltCallback+0x818>)
 800223c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002240:	f7fe fb04 	bl	800084c <__aeabi_ddiv>
 8002244:	4602      	mov	r2, r0
 8002246:	460b      	mov	r3, r1
 8002248:	4614      	mov	r4, r2
 800224a:	461d      	mov	r5, r3
 800224c:	4bc5      	ldr	r3, [pc, #788]	; (8002564 <HAL_I2C_MasterRxCpltCallback+0x834>)
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	4618      	mov	r0, r3
 8002252:	f7fe f979 	bl	8000548 <__aeabi_f2d>
 8002256:	4602      	mov	r2, r0
 8002258:	460b      	mov	r3, r1
 800225a:	4620      	mov	r0, r4
 800225c:	4629      	mov	r1, r5
 800225e:	f7fe f815 	bl	800028c <__adddf3>
 8002262:	4602      	mov	r2, r0
 8002264:	460b      	mov	r3, r1
 8002266:	4610      	mov	r0, r2
 8002268:	4619      	mov	r1, r3
 800226a:	f7fe fc9d 	bl	8000ba8 <__aeabi_d2f>
 800226e:	4603      	mov	r3, r0
 8002270:	4abd      	ldr	r2, [pc, #756]	; (8002568 <HAL_I2C_MasterRxCpltCallback+0x838>)
 8002272:	6013      	str	r3, [r2, #0]

		float gyro_vector = sqrt(pow(Gx, 2)+pow(Gy, 2)+pow(Gz, 2));
 8002274:	4bbd      	ldr	r3, [pc, #756]	; (800256c <HAL_I2C_MasterRxCpltCallback+0x83c>)
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	4618      	mov	r0, r3
 800227a:	f7fe f965 	bl	8000548 <__aeabi_f2d>
 800227e:	4602      	mov	r2, r0
 8002280:	460b      	mov	r3, r1
 8002282:	ed9f 1bb3 	vldr	d1, [pc, #716]	; 8002550 <HAL_I2C_MasterRxCpltCallback+0x820>
 8002286:	ec43 2b10 	vmov	d0, r2, r3
 800228a:	f009 fe63 	bl	800bf54 <pow>
 800228e:	ec55 4b10 	vmov	r4, r5, d0
 8002292:	4bb2      	ldr	r3, [pc, #712]	; (800255c <HAL_I2C_MasterRxCpltCallback+0x82c>)
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	4618      	mov	r0, r3
 8002298:	f7fe f956 	bl	8000548 <__aeabi_f2d>
 800229c:	4602      	mov	r2, r0
 800229e:	460b      	mov	r3, r1
 80022a0:	ed9f 1bab 	vldr	d1, [pc, #684]	; 8002550 <HAL_I2C_MasterRxCpltCallback+0x820>
 80022a4:	ec43 2b10 	vmov	d0, r2, r3
 80022a8:	f009 fe54 	bl	800bf54 <pow>
 80022ac:	ec53 2b10 	vmov	r2, r3, d0
 80022b0:	4620      	mov	r0, r4
 80022b2:	4629      	mov	r1, r5
 80022b4:	f7fd ffea 	bl	800028c <__adddf3>
 80022b8:	4602      	mov	r2, r0
 80022ba:	460b      	mov	r3, r1
 80022bc:	4614      	mov	r4, r2
 80022be:	461d      	mov	r5, r3
 80022c0:	4ba9      	ldr	r3, [pc, #676]	; (8002568 <HAL_I2C_MasterRxCpltCallback+0x838>)
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	4618      	mov	r0, r3
 80022c6:	f7fe f93f 	bl	8000548 <__aeabi_f2d>
 80022ca:	4602      	mov	r2, r0
 80022cc:	460b      	mov	r3, r1
 80022ce:	ed9f 1ba0 	vldr	d1, [pc, #640]	; 8002550 <HAL_I2C_MasterRxCpltCallback+0x820>
 80022d2:	ec43 2b10 	vmov	d0, r2, r3
 80022d6:	f009 fe3d 	bl	800bf54 <pow>
 80022da:	ec53 2b10 	vmov	r2, r3, d0
 80022de:	4620      	mov	r0, r4
 80022e0:	4629      	mov	r1, r5
 80022e2:	f7fd ffd3 	bl	800028c <__adddf3>
 80022e6:	4602      	mov	r2, r0
 80022e8:	460b      	mov	r3, r1
 80022ea:	ec43 2b17 	vmov	d7, r2, r3
 80022ee:	eeb0 0a47 	vmov.f32	s0, s14
 80022f2:	eef0 0a67 	vmov.f32	s1, s15
 80022f6:	f009 fedb 	bl	800c0b0 <sqrt>
 80022fa:	ec53 2b10 	vmov	r2, r3, d0
 80022fe:	4610      	mov	r0, r2
 8002300:	4619      	mov	r1, r3
 8002302:	f7fe fc51 	bl	8000ba8 <__aeabi_d2f>
 8002306:	4603      	mov	r3, r0
 8002308:	667b      	str	r3, [r7, #100]	; 0x64
		gyro_vectors[gyro_vector_index++] = gyro_vector;
 800230a:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800230e:	1c5a      	adds	r2, r3, #1
 8002310:	f8a7 208e 	strh.w	r2, [r7, #142]	; 0x8e
 8002314:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8002316:	009b      	lsls	r3, r3, #2
 8002318:	4413      	add	r3, r2
 800231a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800231c:	601a      	str	r2, [r3, #0]
	for(int i=0; i<mpu_index; i+=12){
 800231e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002322:	330c      	adds	r3, #12
 8002324:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002328:	4b91      	ldr	r3, [pc, #580]	; (8002570 <HAL_I2C_MasterRxCpltCallback+0x840>)
 800232a:	881b      	ldrh	r3, [r3, #0]
 800232c:	461a      	mov	r2, r3
 800232e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002332:	4293      	cmp	r3, r2
 8002334:	f6ff ada8 	blt.w	8001e88 <HAL_I2C_MasterRxCpltCallback+0x158>

		//DEBUG_PRINT(("burst #%d: Accelerazione lineare asse x: %f g, y: %f g, z: %f g\r\n", i/12, Ax, Ay, Az));
		//DEBUG_PRINT(("Gyro asse x: %f °/s, y: %f °/s, z: %f °/s \tgyro_vector: %f\r\n", Gx, Gy, Gz, gyro_vector));
	}

	for(int i=0; i<SLIDING_WINDOWS; i++){
 8002338:	2300      	movs	r3, #0
 800233a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800233e:	e026      	b.n	800238e <HAL_I2C_MasterRxCpltCallback+0x65e>
		means[i]=(temp_sums[i]+temp_sums[i+1])/20;
 8002340:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002344:	009b      	lsls	r3, r3, #2
 8002346:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 800234a:	4413      	add	r3, r2
 800234c:	3b94      	subs	r3, #148	; 0x94
 800234e:	ed93 7a00 	vldr	s14, [r3]
 8002352:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002356:	3301      	adds	r3, #1
 8002358:	009b      	lsls	r3, r3, #2
 800235a:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 800235e:	4413      	add	r3, r2
 8002360:	3b94      	subs	r3, #148	; 0x94
 8002362:	edd3 7a00 	vldr	s15, [r3]
 8002366:	ee37 7a27 	vadd.f32	s14, s14, s15
 800236a:	eef3 6a04 	vmov.f32	s13, #52	; 0x41a00000  20.0
 800236e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002372:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002376:	009b      	lsls	r3, r3, #2
 8002378:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 800237c:	4413      	add	r3, r2
 800237e:	3b5c      	subs	r3, #92	; 0x5c
 8002380:	edc3 7a00 	vstr	s15, [r3]
	for(int i=0; i<SLIDING_WINDOWS; i++){
 8002384:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002388:	3301      	adds	r3, #1
 800238a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800238e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002392:	2b06      	cmp	r3, #6
 8002394:	ddd4      	ble.n	8002340 <HAL_I2C_MasterRxCpltCallback+0x610>
	}

	for (int i = 0; i < 7; ++i) {
 8002396:	2300      	movs	r3, #0
 8002398:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800239c:	e0be      	b.n	800251c <HAL_I2C_MasterRxCpltCallback+0x7ec>
		for(int j=0; j<20; j++){
 800239e:	2300      	movs	r3, #0
 80023a0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80023a4:	e0b0      	b.n	8002508 <HAL_I2C_MasterRxCpltCallback+0x7d8>
			if(j<10 && i<6){
 80023a6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80023aa:	2b09      	cmp	r3, #9
 80023ac:	dc16      	bgt.n	80023dc <HAL_I2C_MasterRxCpltCallback+0x6ac>
 80023ae:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80023b2:	2b05      	cmp	r3, #5
 80023b4:	dc12      	bgt.n	80023dc <HAL_I2C_MasterRxCpltCallback+0x6ac>
				fall_counter_increment(gyro_vectors[10*i+j]);
 80023b6:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80023ba:	4613      	mov	r3, r2
 80023bc:	009b      	lsls	r3, r3, #2
 80023be:	4413      	add	r3, r2
 80023c0:	005b      	lsls	r3, r3, #1
 80023c2:	461a      	mov	r2, r3
 80023c4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80023c8:	4413      	add	r3, r2
 80023ca:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80023cc:	009b      	lsls	r3, r3, #2
 80023ce:	4413      	add	r3, r2
 80023d0:	edd3 7a00 	vldr	s15, [r3]
 80023d4:	eeb0 0a67 	vmov.f32	s0, s15
 80023d8:	f7fe ff72 	bl	80012c0 <fall_counter_increment>
			}
			if(i==6){
 80023dc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80023e0:	2b06      	cmp	r3, #6
 80023e2:	d112      	bne.n	800240a <HAL_I2C_MasterRxCpltCallback+0x6da>
				fall_counter_increment(gyro_vectors[10*i+j]);
 80023e4:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80023e8:	4613      	mov	r3, r2
 80023ea:	009b      	lsls	r3, r3, #2
 80023ec:	4413      	add	r3, r2
 80023ee:	005b      	lsls	r3, r3, #1
 80023f0:	461a      	mov	r2, r3
 80023f2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80023f6:	4413      	add	r3, r2
 80023f8:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80023fa:	009b      	lsls	r3, r3, #2
 80023fc:	4413      	add	r3, r2
 80023fe:	edd3 7a00 	vldr	s15, [r3]
 8002402:	eeb0 0a67 	vmov.f32	s0, s15
 8002406:	f7fe ff5b 	bl	80012c0 <fall_counter_increment>
			}
			if(check_fall_counter > 60) {
 800240a:	4b5a      	ldr	r3, [pc, #360]	; (8002574 <HAL_I2C_MasterRxCpltCallback+0x844>)
 800240c:	781b      	ldrb	r3, [r3, #0]
 800240e:	2b3c      	cmp	r3, #60	; 0x3c
 8002410:	d909      	bls.n	8002426 <HAL_I2C_MasterRxCpltCallback+0x6f6>
				fall_detected=1;
 8002412:	4b59      	ldr	r3, [pc, #356]	; (8002578 <HAL_I2C_MasterRxCpltCallback+0x848>)
 8002414:	2201      	movs	r2, #1
 8002416:	701a      	strb	r2, [r3, #0]
				check_fall_counter=check_fall=0;
 8002418:	4b58      	ldr	r3, [pc, #352]	; (800257c <HAL_I2C_MasterRxCpltCallback+0x84c>)
 800241a:	2200      	movs	r2, #0
 800241c:	701a      	strb	r2, [r3, #0]
 800241e:	4b57      	ldr	r3, [pc, #348]	; (800257c <HAL_I2C_MasterRxCpltCallback+0x84c>)
 8002420:	781a      	ldrb	r2, [r3, #0]
 8002422:	4b54      	ldr	r3, [pc, #336]	; (8002574 <HAL_I2C_MasterRxCpltCallback+0x844>)
 8002424:	701a      	strb	r2, [r3, #0]
			}
			float threshold = BASE_THRESHOLD - gyro_vectors[10*i+j]/250.0;
 8002426:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800242a:	4613      	mov	r3, r2
 800242c:	009b      	lsls	r3, r3, #2
 800242e:	4413      	add	r3, r2
 8002430:	005b      	lsls	r3, r3, #1
 8002432:	461a      	mov	r2, r3
 8002434:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002438:	4413      	add	r3, r2
 800243a:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800243c:	009b      	lsls	r3, r3, #2
 800243e:	4413      	add	r3, r2
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	4618      	mov	r0, r3
 8002444:	f7fe f880 	bl	8000548 <__aeabi_f2d>
 8002448:	f04f 0200 	mov.w	r2, #0
 800244c:	4b4c      	ldr	r3, [pc, #304]	; (8002580 <HAL_I2C_MasterRxCpltCallback+0x850>)
 800244e:	f7fe f9fd 	bl	800084c <__aeabi_ddiv>
 8002452:	4602      	mov	r2, r0
 8002454:	460b      	mov	r3, r1
 8002456:	f04f 0000 	mov.w	r0, #0
 800245a:	494a      	ldr	r1, [pc, #296]	; (8002584 <HAL_I2C_MasterRxCpltCallback+0x854>)
 800245c:	f7fd ff14 	bl	8000288 <__aeabi_dsub>
 8002460:	4602      	mov	r2, r0
 8002462:	460b      	mov	r3, r1
 8002464:	4610      	mov	r0, r2
 8002466:	4619      	mov	r1, r3
 8002468:	f7fe fb9e 	bl	8000ba8 <__aeabi_d2f>
 800246c:	4603      	mov	r3, r0
 800246e:	673b      	str	r3, [r7, #112]	; 0x70
			float difference = abs(accel_vectors[10*i+j] - means[i]);
 8002470:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8002474:	4613      	mov	r3, r2
 8002476:	009b      	lsls	r3, r3, #2
 8002478:	4413      	add	r3, r2
 800247a:	005b      	lsls	r3, r3, #1
 800247c:	461a      	mov	r2, r3
 800247e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002482:	4413      	add	r3, r2
 8002484:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8002486:	009b      	lsls	r3, r3, #2
 8002488:	4413      	add	r3, r2
 800248a:	ed93 7a00 	vldr	s14, [r3]
 800248e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002492:	009b      	lsls	r3, r3, #2
 8002494:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 8002498:	4413      	add	r3, r2
 800249a:	3b5c      	subs	r3, #92	; 0x5c
 800249c:	edd3 7a00 	vldr	s15, [r3]
 80024a0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80024a4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80024a8:	ee17 3a90 	vmov	r3, s15
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	bfb8      	it	lt
 80024b0:	425b      	neglt	r3, r3
 80024b2:	ee07 3a90 	vmov	s15, r3
 80024b6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80024ba:	edc7 7a1b 	vstr	s15, [r7, #108]	; 0x6c
			if(difference > threshold) {
 80024be:	ed97 7a1b 	vldr	s14, [r7, #108]	; 0x6c
 80024c2:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 80024c6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80024ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024ce:	dd16      	ble.n	80024fe <HAL_I2C_MasterRxCpltCallback+0x7ce>
				DEBUG_PRINT(("punto brutto alla misurazione nr. %d\r\n", 10*i+j));
 80024d0:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80024d4:	4613      	mov	r3, r2
 80024d6:	009b      	lsls	r3, r3, #2
 80024d8:	4413      	add	r3, r2
 80024da:	005b      	lsls	r3, r3, #1
 80024dc:	461a      	mov	r2, r3
 80024de:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80024e2:	4413      	add	r3, r2
 80024e4:	4619      	mov	r1, r3
 80024e6:	4828      	ldr	r0, [pc, #160]	; (8002588 <HAL_I2C_MasterRxCpltCallback+0x858>)
 80024e8:	f007 f9a2 	bl	8009830 <iprintf>
				bad_quality_road_counter++;
 80024ec:	4b27      	ldr	r3, [pc, #156]	; (800258c <HAL_I2C_MasterRxCpltCallback+0x85c>)
 80024ee:	881b      	ldrh	r3, [r3, #0]
 80024f0:	3301      	adds	r3, #1
 80024f2:	b29a      	uxth	r2, r3
 80024f4:	4b25      	ldr	r3, [pc, #148]	; (800258c <HAL_I2C_MasterRxCpltCallback+0x85c>)
 80024f6:	801a      	strh	r2, [r3, #0]
				check_fall=1;
 80024f8:	4b20      	ldr	r3, [pc, #128]	; (800257c <HAL_I2C_MasterRxCpltCallback+0x84c>)
 80024fa:	2201      	movs	r2, #1
 80024fc:	701a      	strb	r2, [r3, #0]
		for(int j=0; j<20; j++){
 80024fe:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002502:	3301      	adds	r3, #1
 8002504:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002508:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800250c:	2b13      	cmp	r3, #19
 800250e:	f77f af4a 	ble.w	80023a6 <HAL_I2C_MasterRxCpltCallback+0x676>
	for (int i = 0; i < 7; ++i) {
 8002512:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002516:	3301      	adds	r3, #1
 8002518:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800251c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002520:	2b06      	cmp	r3, #6
 8002522:	f77f af3c 	ble.w	800239e <HAL_I2C_MasterRxCpltCallback+0x66e>

	timeCallback = ((double)cycles/HAL_RCC_GetHCLKFreq())*10e+3;

	printf("TIME (HAL_I2C_MasterRxCpltCallback) =  %.2lf ms\n\r", timeCallback);
	*/
	DEBUG_PRINT(("Bad points calculated: %d\r\n", bad_quality_road_counter));
 8002526:	4b19      	ldr	r3, [pc, #100]	; (800258c <HAL_I2C_MasterRxCpltCallback+0x85c>)
 8002528:	881b      	ldrh	r3, [r3, #0]
 800252a:	4619      	mov	r1, r3
 800252c:	4818      	ldr	r0, [pc, #96]	; (8002590 <HAL_I2C_MasterRxCpltCallback+0x860>)
 800252e:	f007 f97f 	bl	8009830 <iprintf>
	DEBUG_PRINT(("Fall_detected: %d\r\n\n", fall_detected));
 8002532:	4b11      	ldr	r3, [pc, #68]	; (8002578 <HAL_I2C_MasterRxCpltCallback+0x848>)
 8002534:	781b      	ldrb	r3, [r3, #0]
 8002536:	4619      	mov	r1, r3
 8002538:	4816      	ldr	r0, [pc, #88]	; (8002594 <HAL_I2C_MasterRxCpltCallback+0x864>)
 800253a:	f007 f979 	bl	8009830 <iprintf>
 800253e:	46b5      	mov	sp, r6

}
 8002540:	bf00      	nop
 8002542:	37a4      	adds	r7, #164	; 0xa4
 8002544:	46bd      	mov	sp, r7
 8002546:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002548:	00000000 	.word	0x00000000
 800254c:	40606000 	.word	0x40606000
 8002550:	00000000 	.word	0x00000000
 8002554:	40000000 	.word	0x40000000
 8002558:	20000004 	.word	0x20000004
 800255c:	20000394 	.word	0x20000394
 8002560:	2000021c 	.word	0x2000021c
 8002564:	20000008 	.word	0x20000008
 8002568:	20000218 	.word	0x20000218
 800256c:	20000234 	.word	0x20000234
 8002570:	20000220 	.word	0x20000220
 8002574:	20000224 	.word	0x20000224
 8002578:	20000222 	.word	0x20000222
 800257c:	20000223 	.word	0x20000223
 8002580:	406f4000 	.word	0x406f4000
 8002584:	3ff00000 	.word	0x3ff00000
 8002588:	0800d0c0 	.word	0x0800d0c0
 800258c:	20000226 	.word	0x20000226
 8002590:	0800d0e8 	.word	0x0800d0e8
 8002594:	0800d104 	.word	0x0800d104

08002598 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002598:	b480      	push	{r7}
 800259a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800259c:	b672      	cpsid	i
}
 800259e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80025a0:	e7fe      	b.n	80025a0 <Error_Handler+0x8>
	...

080025a4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	b082      	sub	sp, #8
 80025a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80025aa:	2300      	movs	r3, #0
 80025ac:	607b      	str	r3, [r7, #4]
 80025ae:	4b10      	ldr	r3, [pc, #64]	; (80025f0 <HAL_MspInit+0x4c>)
 80025b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025b2:	4a0f      	ldr	r2, [pc, #60]	; (80025f0 <HAL_MspInit+0x4c>)
 80025b4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80025b8:	6453      	str	r3, [r2, #68]	; 0x44
 80025ba:	4b0d      	ldr	r3, [pc, #52]	; (80025f0 <HAL_MspInit+0x4c>)
 80025bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80025c2:	607b      	str	r3, [r7, #4]
 80025c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80025c6:	2300      	movs	r3, #0
 80025c8:	603b      	str	r3, [r7, #0]
 80025ca:	4b09      	ldr	r3, [pc, #36]	; (80025f0 <HAL_MspInit+0x4c>)
 80025cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ce:	4a08      	ldr	r2, [pc, #32]	; (80025f0 <HAL_MspInit+0x4c>)
 80025d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025d4:	6413      	str	r3, [r2, #64]	; 0x40
 80025d6:	4b06      	ldr	r3, [pc, #24]	; (80025f0 <HAL_MspInit+0x4c>)
 80025d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025de:	603b      	str	r3, [r7, #0]
 80025e0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_2);
 80025e2:	2005      	movs	r0, #5
 80025e4:	f001 f9c8 	bl	8003978 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80025e8:	bf00      	nop
 80025ea:	3708      	adds	r7, #8
 80025ec:	46bd      	mov	sp, r7
 80025ee:	bd80      	pop	{r7, pc}
 80025f0:	40023800 	.word	0x40023800

080025f4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80025f4:	b580      	push	{r7, lr}
 80025f6:	b08a      	sub	sp, #40	; 0x28
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025fc:	f107 0314 	add.w	r3, r7, #20
 8002600:	2200      	movs	r2, #0
 8002602:	601a      	str	r2, [r3, #0]
 8002604:	605a      	str	r2, [r3, #4]
 8002606:	609a      	str	r2, [r3, #8]
 8002608:	60da      	str	r2, [r3, #12]
 800260a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	4a1b      	ldr	r2, [pc, #108]	; (8002680 <HAL_ADC_MspInit+0x8c>)
 8002612:	4293      	cmp	r3, r2
 8002614:	d12f      	bne.n	8002676 <HAL_ADC_MspInit+0x82>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002616:	2300      	movs	r3, #0
 8002618:	613b      	str	r3, [r7, #16]
 800261a:	4b1a      	ldr	r3, [pc, #104]	; (8002684 <HAL_ADC_MspInit+0x90>)
 800261c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800261e:	4a19      	ldr	r2, [pc, #100]	; (8002684 <HAL_ADC_MspInit+0x90>)
 8002620:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002624:	6453      	str	r3, [r2, #68]	; 0x44
 8002626:	4b17      	ldr	r3, [pc, #92]	; (8002684 <HAL_ADC_MspInit+0x90>)
 8002628:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800262a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800262e:	613b      	str	r3, [r7, #16]
 8002630:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002632:	2300      	movs	r3, #0
 8002634:	60fb      	str	r3, [r7, #12]
 8002636:	4b13      	ldr	r3, [pc, #76]	; (8002684 <HAL_ADC_MspInit+0x90>)
 8002638:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800263a:	4a12      	ldr	r2, [pc, #72]	; (8002684 <HAL_ADC_MspInit+0x90>)
 800263c:	f043 0301 	orr.w	r3, r3, #1
 8002640:	6313      	str	r3, [r2, #48]	; 0x30
 8002642:	4b10      	ldr	r3, [pc, #64]	; (8002684 <HAL_ADC_MspInit+0x90>)
 8002644:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002646:	f003 0301 	and.w	r3, r3, #1
 800264a:	60fb      	str	r3, [r7, #12]
 800264c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800264e:	2301      	movs	r3, #1
 8002650:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002652:	2303      	movs	r3, #3
 8002654:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002656:	2300      	movs	r3, #0
 8002658:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800265a:	f107 0314 	add.w	r3, r7, #20
 800265e:	4619      	mov	r1, r3
 8002660:	4809      	ldr	r0, [pc, #36]	; (8002688 <HAL_ADC_MspInit+0x94>)
 8002662:	f001 fd93 	bl	800418c <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 1, 0);
 8002666:	2200      	movs	r2, #0
 8002668:	2101      	movs	r1, #1
 800266a:	2012      	movs	r0, #18
 800266c:	f001 f98f 	bl	800398e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8002670:	2012      	movs	r0, #18
 8002672:	f001 f9a8 	bl	80039c6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002676:	bf00      	nop
 8002678:	3728      	adds	r7, #40	; 0x28
 800267a:	46bd      	mov	sp, r7
 800267c:	bd80      	pop	{r7, pc}
 800267e:	bf00      	nop
 8002680:	40012000 	.word	0x40012000
 8002684:	40023800 	.word	0x40023800
 8002688:	40020000 	.word	0x40020000

0800268c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800268c:	b580      	push	{r7, lr}
 800268e:	b08a      	sub	sp, #40	; 0x28
 8002690:	af00      	add	r7, sp, #0
 8002692:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002694:	f107 0314 	add.w	r3, r7, #20
 8002698:	2200      	movs	r2, #0
 800269a:	601a      	str	r2, [r3, #0]
 800269c:	605a      	str	r2, [r3, #4]
 800269e:	609a      	str	r2, [r3, #8]
 80026a0:	60da      	str	r2, [r3, #12]
 80026a2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	4a38      	ldr	r2, [pc, #224]	; (800278c <HAL_I2C_MspInit+0x100>)
 80026aa:	4293      	cmp	r3, r2
 80026ac:	d169      	bne.n	8002782 <HAL_I2C_MspInit+0xf6>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80026ae:	2300      	movs	r3, #0
 80026b0:	613b      	str	r3, [r7, #16]
 80026b2:	4b37      	ldr	r3, [pc, #220]	; (8002790 <HAL_I2C_MspInit+0x104>)
 80026b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026b6:	4a36      	ldr	r2, [pc, #216]	; (8002790 <HAL_I2C_MspInit+0x104>)
 80026b8:	f043 0302 	orr.w	r3, r3, #2
 80026bc:	6313      	str	r3, [r2, #48]	; 0x30
 80026be:	4b34      	ldr	r3, [pc, #208]	; (8002790 <HAL_I2C_MspInit+0x104>)
 80026c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026c2:	f003 0302 	and.w	r3, r3, #2
 80026c6:	613b      	str	r3, [r7, #16]
 80026c8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = MPU6050_I2C1_SCL_Pin|MPU6050_I2C1_SDA_Pin;
 80026ca:	23c0      	movs	r3, #192	; 0xc0
 80026cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80026ce:	2312      	movs	r3, #18
 80026d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026d2:	2300      	movs	r3, #0
 80026d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026d6:	2303      	movs	r3, #3
 80026d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80026da:	2304      	movs	r3, #4
 80026dc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80026de:	f107 0314 	add.w	r3, r7, #20
 80026e2:	4619      	mov	r1, r3
 80026e4:	482b      	ldr	r0, [pc, #172]	; (8002794 <HAL_I2C_MspInit+0x108>)
 80026e6:	f001 fd51 	bl	800418c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80026ea:	2300      	movs	r3, #0
 80026ec:	60fb      	str	r3, [r7, #12]
 80026ee:	4b28      	ldr	r3, [pc, #160]	; (8002790 <HAL_I2C_MspInit+0x104>)
 80026f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026f2:	4a27      	ldr	r2, [pc, #156]	; (8002790 <HAL_I2C_MspInit+0x104>)
 80026f4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80026f8:	6413      	str	r3, [r2, #64]	; 0x40
 80026fa:	4b25      	ldr	r3, [pc, #148]	; (8002790 <HAL_I2C_MspInit+0x104>)
 80026fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026fe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002702:	60fb      	str	r3, [r7, #12]
 8002704:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream0;
 8002706:	4b24      	ldr	r3, [pc, #144]	; (8002798 <HAL_I2C_MspInit+0x10c>)
 8002708:	4a24      	ldr	r2, [pc, #144]	; (800279c <HAL_I2C_MspInit+0x110>)
 800270a:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 800270c:	4b22      	ldr	r3, [pc, #136]	; (8002798 <HAL_I2C_MspInit+0x10c>)
 800270e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002712:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002714:	4b20      	ldr	r3, [pc, #128]	; (8002798 <HAL_I2C_MspInit+0x10c>)
 8002716:	2200      	movs	r2, #0
 8002718:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800271a:	4b1f      	ldr	r3, [pc, #124]	; (8002798 <HAL_I2C_MspInit+0x10c>)
 800271c:	2200      	movs	r2, #0
 800271e:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002720:	4b1d      	ldr	r3, [pc, #116]	; (8002798 <HAL_I2C_MspInit+0x10c>)
 8002722:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002726:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002728:	4b1b      	ldr	r3, [pc, #108]	; (8002798 <HAL_I2C_MspInit+0x10c>)
 800272a:	2200      	movs	r2, #0
 800272c:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800272e:	4b1a      	ldr	r3, [pc, #104]	; (8002798 <HAL_I2C_MspInit+0x10c>)
 8002730:	2200      	movs	r2, #0
 8002732:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8002734:	4b18      	ldr	r3, [pc, #96]	; (8002798 <HAL_I2C_MspInit+0x10c>)
 8002736:	2200      	movs	r2, #0
 8002738:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800273a:	4b17      	ldr	r3, [pc, #92]	; (8002798 <HAL_I2C_MspInit+0x10c>)
 800273c:	2200      	movs	r2, #0
 800273e:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002740:	4b15      	ldr	r3, [pc, #84]	; (8002798 <HAL_I2C_MspInit+0x10c>)
 8002742:	2200      	movs	r2, #0
 8002744:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8002746:	4814      	ldr	r0, [pc, #80]	; (8002798 <HAL_I2C_MspInit+0x10c>)
 8002748:	f001 f974 	bl	8003a34 <HAL_DMA_Init>
 800274c:	4603      	mov	r3, r0
 800274e:	2b00      	cmp	r3, #0
 8002750:	d001      	beq.n	8002756 <HAL_I2C_MspInit+0xca>
    {
      Error_Handler();
 8002752:	f7ff ff21 	bl	8002598 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	4a0f      	ldr	r2, [pc, #60]	; (8002798 <HAL_I2C_MspInit+0x10c>)
 800275a:	639a      	str	r2, [r3, #56]	; 0x38
 800275c:	4a0e      	ldr	r2, [pc, #56]	; (8002798 <HAL_I2C_MspInit+0x10c>)
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 1, 0);
 8002762:	2200      	movs	r2, #0
 8002764:	2101      	movs	r1, #1
 8002766:	201f      	movs	r0, #31
 8002768:	f001 f911 	bl	800398e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 800276c:	201f      	movs	r0, #31
 800276e:	f001 f92a 	bl	80039c6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 1, 0);
 8002772:	2200      	movs	r2, #0
 8002774:	2101      	movs	r1, #1
 8002776:	2020      	movs	r0, #32
 8002778:	f001 f909 	bl	800398e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 800277c:	2020      	movs	r0, #32
 800277e:	f001 f922 	bl	80039c6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002782:	bf00      	nop
 8002784:	3728      	adds	r7, #40	; 0x28
 8002786:	46bd      	mov	sp, r7
 8002788:	bd80      	pop	{r7, pc}
 800278a:	bf00      	nop
 800278c:	40005400 	.word	0x40005400
 8002790:	40023800 	.word	0x40023800
 8002794:	40020400 	.word	0x40020400
 8002798:	2000084c 	.word	0x2000084c
 800279c:	40026010 	.word	0x40026010

080027a0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	b086      	sub	sp, #24
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80027b0:	d116      	bne.n	80027e0 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80027b2:	2300      	movs	r3, #0
 80027b4:	617b      	str	r3, [r7, #20]
 80027b6:	4b24      	ldr	r3, [pc, #144]	; (8002848 <HAL_TIM_Base_MspInit+0xa8>)
 80027b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ba:	4a23      	ldr	r2, [pc, #140]	; (8002848 <HAL_TIM_Base_MspInit+0xa8>)
 80027bc:	f043 0301 	orr.w	r3, r3, #1
 80027c0:	6413      	str	r3, [r2, #64]	; 0x40
 80027c2:	4b21      	ldr	r3, [pc, #132]	; (8002848 <HAL_TIM_Base_MspInit+0xa8>)
 80027c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027c6:	f003 0301 	and.w	r3, r3, #1
 80027ca:	617b      	str	r3, [r7, #20]
 80027cc:	697b      	ldr	r3, [r7, #20]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 1, 1);
 80027ce:	2201      	movs	r2, #1
 80027d0:	2101      	movs	r1, #1
 80027d2:	201c      	movs	r0, #28
 80027d4:	f001 f8db 	bl	800398e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80027d8:	201c      	movs	r0, #28
 80027da:	f001 f8f4 	bl	80039c6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80027de:	e02e      	b.n	800283e <HAL_TIM_Base_MspInit+0x9e>
  else if(htim_base->Instance==TIM3)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	4a19      	ldr	r2, [pc, #100]	; (800284c <HAL_TIM_Base_MspInit+0xac>)
 80027e6:	4293      	cmp	r3, r2
 80027e8:	d10e      	bne.n	8002808 <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80027ea:	2300      	movs	r3, #0
 80027ec:	613b      	str	r3, [r7, #16]
 80027ee:	4b16      	ldr	r3, [pc, #88]	; (8002848 <HAL_TIM_Base_MspInit+0xa8>)
 80027f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027f2:	4a15      	ldr	r2, [pc, #84]	; (8002848 <HAL_TIM_Base_MspInit+0xa8>)
 80027f4:	f043 0302 	orr.w	r3, r3, #2
 80027f8:	6413      	str	r3, [r2, #64]	; 0x40
 80027fa:	4b13      	ldr	r3, [pc, #76]	; (8002848 <HAL_TIM_Base_MspInit+0xa8>)
 80027fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027fe:	f003 0302 	and.w	r3, r3, #2
 8002802:	613b      	str	r3, [r7, #16]
 8002804:	693b      	ldr	r3, [r7, #16]
}
 8002806:	e01a      	b.n	800283e <HAL_TIM_Base_MspInit+0x9e>
  else if(htim_base->Instance==TIM4)
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	4a10      	ldr	r2, [pc, #64]	; (8002850 <HAL_TIM_Base_MspInit+0xb0>)
 800280e:	4293      	cmp	r3, r2
 8002810:	d115      	bne.n	800283e <HAL_TIM_Base_MspInit+0x9e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002812:	2300      	movs	r3, #0
 8002814:	60fb      	str	r3, [r7, #12]
 8002816:	4b0c      	ldr	r3, [pc, #48]	; (8002848 <HAL_TIM_Base_MspInit+0xa8>)
 8002818:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800281a:	4a0b      	ldr	r2, [pc, #44]	; (8002848 <HAL_TIM_Base_MspInit+0xa8>)
 800281c:	f043 0304 	orr.w	r3, r3, #4
 8002820:	6413      	str	r3, [r2, #64]	; 0x40
 8002822:	4b09      	ldr	r3, [pc, #36]	; (8002848 <HAL_TIM_Base_MspInit+0xa8>)
 8002824:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002826:	f003 0304 	and.w	r3, r3, #4
 800282a:	60fb      	str	r3, [r7, #12]
 800282c:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM4_IRQn, 2, 0);
 800282e:	2200      	movs	r2, #0
 8002830:	2102      	movs	r1, #2
 8002832:	201e      	movs	r0, #30
 8002834:	f001 f8ab 	bl	800398e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002838:	201e      	movs	r0, #30
 800283a:	f001 f8c4 	bl	80039c6 <HAL_NVIC_EnableIRQ>
}
 800283e:	bf00      	nop
 8002840:	3718      	adds	r7, #24
 8002842:	46bd      	mov	sp, r7
 8002844:	bd80      	pop	{r7, pc}
 8002846:	bf00      	nop
 8002848:	40023800 	.word	0x40023800
 800284c:	40000400 	.word	0x40000400
 8002850:	40000800 	.word	0x40000800

08002854 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002854:	b580      	push	{r7, lr}
 8002856:	b08c      	sub	sp, #48	; 0x30
 8002858:	af00      	add	r7, sp, #0
 800285a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800285c:	f107 031c 	add.w	r3, r7, #28
 8002860:	2200      	movs	r2, #0
 8002862:	601a      	str	r2, [r3, #0]
 8002864:	605a      	str	r2, [r3, #4]
 8002866:	609a      	str	r2, [r3, #8]
 8002868:	60da      	str	r2, [r3, #12]
 800286a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	4a32      	ldr	r2, [pc, #200]	; (800293c <HAL_UART_MspInit+0xe8>)
 8002872:	4293      	cmp	r3, r2
 8002874:	d12c      	bne.n	80028d0 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002876:	2300      	movs	r3, #0
 8002878:	61bb      	str	r3, [r7, #24]
 800287a:	4b31      	ldr	r3, [pc, #196]	; (8002940 <HAL_UART_MspInit+0xec>)
 800287c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800287e:	4a30      	ldr	r2, [pc, #192]	; (8002940 <HAL_UART_MspInit+0xec>)
 8002880:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002884:	6413      	str	r3, [r2, #64]	; 0x40
 8002886:	4b2e      	ldr	r3, [pc, #184]	; (8002940 <HAL_UART_MspInit+0xec>)
 8002888:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800288a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800288e:	61bb      	str	r3, [r7, #24]
 8002890:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002892:	2300      	movs	r3, #0
 8002894:	617b      	str	r3, [r7, #20]
 8002896:	4b2a      	ldr	r3, [pc, #168]	; (8002940 <HAL_UART_MspInit+0xec>)
 8002898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800289a:	4a29      	ldr	r2, [pc, #164]	; (8002940 <HAL_UART_MspInit+0xec>)
 800289c:	f043 0301 	orr.w	r3, r3, #1
 80028a0:	6313      	str	r3, [r2, #48]	; 0x30
 80028a2:	4b27      	ldr	r3, [pc, #156]	; (8002940 <HAL_UART_MspInit+0xec>)
 80028a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028a6:	f003 0301 	and.w	r3, r3, #1
 80028aa:	617b      	str	r3, [r7, #20]
 80028ac:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART2_ESP_TX_Pin|USART2_ESP_RX_Pin;
 80028ae:	230c      	movs	r3, #12
 80028b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028b2:	2302      	movs	r3, #2
 80028b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028b6:	2300      	movs	r3, #0
 80028b8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028ba:	2303      	movs	r3, #3
 80028bc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80028be:	2307      	movs	r3, #7
 80028c0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028c2:	f107 031c 	add.w	r3, r7, #28
 80028c6:	4619      	mov	r1, r3
 80028c8:	481e      	ldr	r0, [pc, #120]	; (8002944 <HAL_UART_MspInit+0xf0>)
 80028ca:	f001 fc5f 	bl	800418c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80028ce:	e031      	b.n	8002934 <HAL_UART_MspInit+0xe0>
  else if(huart->Instance==USART3)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	4a1c      	ldr	r2, [pc, #112]	; (8002948 <HAL_UART_MspInit+0xf4>)
 80028d6:	4293      	cmp	r3, r2
 80028d8:	d12c      	bne.n	8002934 <HAL_UART_MspInit+0xe0>
    __HAL_RCC_USART3_CLK_ENABLE();
 80028da:	2300      	movs	r3, #0
 80028dc:	613b      	str	r3, [r7, #16]
 80028de:	4b18      	ldr	r3, [pc, #96]	; (8002940 <HAL_UART_MspInit+0xec>)
 80028e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028e2:	4a17      	ldr	r2, [pc, #92]	; (8002940 <HAL_UART_MspInit+0xec>)
 80028e4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80028e8:	6413      	str	r3, [r2, #64]	; 0x40
 80028ea:	4b15      	ldr	r3, [pc, #84]	; (8002940 <HAL_UART_MspInit+0xec>)
 80028ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80028f2:	613b      	str	r3, [r7, #16]
 80028f4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80028f6:	2300      	movs	r3, #0
 80028f8:	60fb      	str	r3, [r7, #12]
 80028fa:	4b11      	ldr	r3, [pc, #68]	; (8002940 <HAL_UART_MspInit+0xec>)
 80028fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028fe:	4a10      	ldr	r2, [pc, #64]	; (8002940 <HAL_UART_MspInit+0xec>)
 8002900:	f043 0302 	orr.w	r3, r3, #2
 8002904:	6313      	str	r3, [r2, #48]	; 0x30
 8002906:	4b0e      	ldr	r3, [pc, #56]	; (8002940 <HAL_UART_MspInit+0xec>)
 8002908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800290a:	f003 0302 	and.w	r3, r3, #2
 800290e:	60fb      	str	r3, [r7, #12]
 8002910:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART3_DEBUG_TX_Pin|USART3_DEBUG_RX_Pin;
 8002912:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002916:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002918:	2302      	movs	r3, #2
 800291a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800291c:	2300      	movs	r3, #0
 800291e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002920:	2303      	movs	r3, #3
 8002922:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002924:	2307      	movs	r3, #7
 8002926:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002928:	f107 031c 	add.w	r3, r7, #28
 800292c:	4619      	mov	r1, r3
 800292e:	4807      	ldr	r0, [pc, #28]	; (800294c <HAL_UART_MspInit+0xf8>)
 8002930:	f001 fc2c 	bl	800418c <HAL_GPIO_Init>
}
 8002934:	bf00      	nop
 8002936:	3730      	adds	r7, #48	; 0x30
 8002938:	46bd      	mov	sp, r7
 800293a:	bd80      	pop	{r7, pc}
 800293c:	40004400 	.word	0x40004400
 8002940:	40023800 	.word	0x40023800
 8002944:	40020000 	.word	0x40020000
 8002948:	40004800 	.word	0x40004800
 800294c:	40020400 	.word	0x40020400

08002950 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002950:	b480      	push	{r7}
 8002952:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002954:	e7fe      	b.n	8002954 <NMI_Handler+0x4>

08002956 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002956:	b480      	push	{r7}
 8002958:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800295a:	e7fe      	b.n	800295a <HardFault_Handler+0x4>

0800295c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800295c:	b480      	push	{r7}
 800295e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002960:	e7fe      	b.n	8002960 <MemManage_Handler+0x4>

08002962 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002962:	b480      	push	{r7}
 8002964:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002966:	e7fe      	b.n	8002966 <BusFault_Handler+0x4>

08002968 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002968:	b480      	push	{r7}
 800296a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800296c:	e7fe      	b.n	800296c <UsageFault_Handler+0x4>

0800296e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800296e:	b480      	push	{r7}
 8002970:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002972:	bf00      	nop
 8002974:	46bd      	mov	sp, r7
 8002976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297a:	4770      	bx	lr

0800297c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800297c:	b480      	push	{r7}
 800297e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002980:	bf00      	nop
 8002982:	46bd      	mov	sp, r7
 8002984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002988:	4770      	bx	lr

0800298a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800298a:	b480      	push	{r7}
 800298c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800298e:	bf00      	nop
 8002990:	46bd      	mov	sp, r7
 8002992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002996:	4770      	bx	lr

08002998 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002998:	b580      	push	{r7, lr}
 800299a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800299c:	f000 f9ca 	bl	8002d34 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80029a0:	bf00      	nop
 80029a2:	bd80      	pop	{r7, pc}

080029a4 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 80029a8:	2002      	movs	r0, #2
 80029aa:	f001 fda5 	bl	80044f8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 80029ae:	bf00      	nop
 80029b0:	bd80      	pop	{r7, pc}
	...

080029b4 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80029b4:	b580      	push	{r7, lr}
 80029b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 80029b8:	4802      	ldr	r0, [pc, #8]	; (80029c4 <DMA1_Stream0_IRQHandler+0x10>)
 80029ba:	f001 f963 	bl	8003c84 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80029be:	bf00      	nop
 80029c0:	bd80      	pop	{r7, pc}
 80029c2:	bf00      	nop
 80029c4:	2000084c 	.word	0x2000084c

080029c8 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80029cc:	4802      	ldr	r0, [pc, #8]	; (80029d8 <ADC_IRQHandler+0x10>)
 80029ce:	f000 fb37 	bl	8003040 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 80029d2:	bf00      	nop
 80029d4:	bd80      	pop	{r7, pc}
 80029d6:	bf00      	nop
 80029d8:	20000398 	.word	0x20000398

080029dc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80029dc:	b580      	push	{r7, lr}
 80029de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80029e0:	4802      	ldr	r0, [pc, #8]	; (80029ec <TIM2_IRQHandler+0x10>)
 80029e2:	f005 fbb1 	bl	8008148 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80029e6:	bf00      	nop
 80029e8:	bd80      	pop	{r7, pc}
 80029ea:	bf00      	nop
 80029ec:	200008b0 	.word	0x200008b0

080029f0 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80029f0:	b580      	push	{r7, lr}
 80029f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80029f4:	4802      	ldr	r0, [pc, #8]	; (8002a00 <TIM4_IRQHandler+0x10>)
 80029f6:	f005 fba7 	bl	8008148 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80029fa:	bf00      	nop
 80029fc:	bd80      	pop	{r7, pc}
 80029fe:	bf00      	nop
 8002a00:	2000023c 	.word	0x2000023c

08002a04 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8002a04:	b580      	push	{r7, lr}
 8002a06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8002a08:	4802      	ldr	r0, [pc, #8]	; (8002a14 <I2C1_EV_IRQHandler+0x10>)
 8002a0a:	f002 fc1f 	bl	800524c <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8002a0e:	bf00      	nop
 8002a10:	bd80      	pop	{r7, pc}
 8002a12:	bf00      	nop
 8002a14:	200002c8 	.word	0x200002c8

08002a18 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8002a1c:	4802      	ldr	r0, [pc, #8]	; (8002a28 <I2C1_ER_IRQHandler+0x10>)
 8002a1e:	f002 fd86 	bl	800552e <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8002a22:	bf00      	nop
 8002a24:	bd80      	pop	{r7, pc}
 8002a26:	bf00      	nop
 8002a28:	200002c8 	.word	0x200002c8

08002a2c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002a2c:	b580      	push	{r7, lr}
 8002a2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 8002a30:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8002a34:	f001 fd60 	bl	80044f8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002a38:	bf00      	nop
 8002a3a:	bd80      	pop	{r7, pc}

08002a3c <RetargetInit>:
/* Functions */


UART_HandleTypeDef* gHuart;

void  RetargetInit(UART_HandleTypeDef *huart){
 8002a3c:	b580      	push	{r7, lr}
 8002a3e:	b082      	sub	sp, #8
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	6078      	str	r0, [r7, #4]
	gHuart=huart;
 8002a44:	4a07      	ldr	r2, [pc, #28]	; (8002a64 <RetargetInit+0x28>)
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	6013      	str	r3, [r2, #0]

	/* Disabilito il buffer I/O per lo STDOUT per
	  far visualizzare immediatamente i caratteri
	  sul terminale*/
	setvbuf(stdout, NULL, _IONBF, 0);
 8002a4a:	4b07      	ldr	r3, [pc, #28]	; (8002a68 <RetargetInit+0x2c>)
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	6898      	ldr	r0, [r3, #8]
 8002a50:	2300      	movs	r3, #0
 8002a52:	2202      	movs	r2, #2
 8002a54:	2100      	movs	r1, #0
 8002a56:	f006 ff79 	bl	800994c <setvbuf>
}
 8002a5a:	bf00      	nop
 8002a5c:	3708      	adds	r7, #8
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	bd80      	pop	{r7, pc}
 8002a62:	bf00      	nop
 8002a64:	20000940 	.word	0x20000940
 8002a68:	20000024 	.word	0x20000024

08002a6c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002a6c:	b480      	push	{r7}
 8002a6e:	af00      	add	r7, sp, #0
	return 1;
 8002a70:	2301      	movs	r3, #1
}
 8002a72:	4618      	mov	r0, r3
 8002a74:	46bd      	mov	sp, r7
 8002a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a7a:	4770      	bx	lr

08002a7c <_kill>:

int _kill(int pid, int sig)
{
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	b082      	sub	sp, #8
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6078      	str	r0, [r7, #4]
 8002a84:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002a86:	f006 fa37 	bl	8008ef8 <__errno>
 8002a8a:	4603      	mov	r3, r0
 8002a8c:	2216      	movs	r2, #22
 8002a8e:	601a      	str	r2, [r3, #0]
	return -1;
 8002a90:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002a94:	4618      	mov	r0, r3
 8002a96:	3708      	adds	r7, #8
 8002a98:	46bd      	mov	sp, r7
 8002a9a:	bd80      	pop	{r7, pc}

08002a9c <_exit>:

void _exit (int status)
{
 8002a9c:	b580      	push	{r7, lr}
 8002a9e:	b082      	sub	sp, #8
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002aa4:	f04f 31ff 	mov.w	r1, #4294967295
 8002aa8:	6878      	ldr	r0, [r7, #4]
 8002aaa:	f7ff ffe7 	bl	8002a7c <_kill>
	while (1) {}		/* Make sure we hang here */
 8002aae:	e7fe      	b.n	8002aae <_exit+0x12>

08002ab0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	b086      	sub	sp, #24
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	60f8      	str	r0, [r7, #12]
 8002ab8:	60b9      	str	r1, [r7, #8]
 8002aba:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002abc:	2300      	movs	r3, #0
 8002abe:	617b      	str	r3, [r7, #20]
 8002ac0:	e00a      	b.n	8002ad8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002ac2:	f3af 8000 	nop.w
 8002ac6:	4601      	mov	r1, r0
 8002ac8:	68bb      	ldr	r3, [r7, #8]
 8002aca:	1c5a      	adds	r2, r3, #1
 8002acc:	60ba      	str	r2, [r7, #8]
 8002ace:	b2ca      	uxtb	r2, r1
 8002ad0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002ad2:	697b      	ldr	r3, [r7, #20]
 8002ad4:	3301      	adds	r3, #1
 8002ad6:	617b      	str	r3, [r7, #20]
 8002ad8:	697a      	ldr	r2, [r7, #20]
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	429a      	cmp	r2, r3
 8002ade:	dbf0      	blt.n	8002ac2 <_read+0x12>
	}

return len;
 8002ae0:	687b      	ldr	r3, [r7, #4]
}
 8002ae2:	4618      	mov	r0, r3
 8002ae4:	3718      	adds	r7, #24
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	bd80      	pop	{r7, pc}
	...

08002aec <_write>:
	}
	return len;
}*/

//Ridefinisco la funzione _write per far stampare i caratteri tramite l'interfaccia UART
__attribute__((weak)) int _write(int fd, char *ptr, int len){
 8002aec:	b580      	push	{r7, lr}
 8002aee:	b086      	sub	sp, #24
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	60f8      	str	r0, [r7, #12]
 8002af4:	60b9      	str	r1, [r7, #8]
 8002af6:	607a      	str	r2, [r7, #4]
	HAL_StatusTypeDef hstatus;

		if (fd == STDOUT_FILENO || fd == STDERR_FILENO) {
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	2b01      	cmp	r3, #1
 8002afc:	d002      	beq.n	8002b04 <_write+0x18>
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	2b02      	cmp	r3, #2
 8002b02:	d111      	bne.n	8002b28 <_write+0x3c>
			hstatus = HAL_UART_Transmit(gHuart, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 8002b04:	4b0e      	ldr	r3, [pc, #56]	; (8002b40 <_write+0x54>)
 8002b06:	6818      	ldr	r0, [r3, #0]
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	b29a      	uxth	r2, r3
 8002b0c:	f04f 33ff 	mov.w	r3, #4294967295
 8002b10:	68b9      	ldr	r1, [r7, #8]
 8002b12:	f005 ff28 	bl	8008966 <HAL_UART_Transmit>
 8002b16:	4603      	mov	r3, r0
 8002b18:	75fb      	strb	r3, [r7, #23]
			if (hstatus == HAL_OK)
 8002b1a:	7dfb      	ldrb	r3, [r7, #23]
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d101      	bne.n	8002b24 <_write+0x38>
				return len;
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	e008      	b.n	8002b36 <_write+0x4a>
			else
				return EIO;
 8002b24:	2305      	movs	r3, #5
 8002b26:	e006      	b.n	8002b36 <_write+0x4a>
		}
		errno = EBADF;
 8002b28:	f006 f9e6 	bl	8008ef8 <__errno>
 8002b2c:	4603      	mov	r3, r0
 8002b2e:	2209      	movs	r2, #9
 8002b30:	601a      	str	r2, [r3, #0]
		return -1;
 8002b32:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002b36:	4618      	mov	r0, r3
 8002b38:	3718      	adds	r7, #24
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	bd80      	pop	{r7, pc}
 8002b3e:	bf00      	nop
 8002b40:	20000940 	.word	0x20000940

08002b44 <_close>:


int _close(int file)
{
 8002b44:	b480      	push	{r7}
 8002b46:	b083      	sub	sp, #12
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	6078      	str	r0, [r7, #4]
	return -1;
 8002b4c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002b50:	4618      	mov	r0, r3
 8002b52:	370c      	adds	r7, #12
 8002b54:	46bd      	mov	sp, r7
 8002b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b5a:	4770      	bx	lr

08002b5c <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002b5c:	b480      	push	{r7}
 8002b5e:	b083      	sub	sp, #12
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	6078      	str	r0, [r7, #4]
 8002b64:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002b66:	683b      	ldr	r3, [r7, #0]
 8002b68:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002b6c:	605a      	str	r2, [r3, #4]
	return 0;
 8002b6e:	2300      	movs	r3, #0
}
 8002b70:	4618      	mov	r0, r3
 8002b72:	370c      	adds	r7, #12
 8002b74:	46bd      	mov	sp, r7
 8002b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b7a:	4770      	bx	lr

08002b7c <_isatty>:

int _isatty(int file)
{
 8002b7c:	b480      	push	{r7}
 8002b7e:	b083      	sub	sp, #12
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	6078      	str	r0, [r7, #4]
	return 1;
 8002b84:	2301      	movs	r3, #1
}
 8002b86:	4618      	mov	r0, r3
 8002b88:	370c      	adds	r7, #12
 8002b8a:	46bd      	mov	sp, r7
 8002b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b90:	4770      	bx	lr

08002b92 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002b92:	b480      	push	{r7}
 8002b94:	b085      	sub	sp, #20
 8002b96:	af00      	add	r7, sp, #0
 8002b98:	60f8      	str	r0, [r7, #12]
 8002b9a:	60b9      	str	r1, [r7, #8]
 8002b9c:	607a      	str	r2, [r7, #4]
	return 0;
 8002b9e:	2300      	movs	r3, #0
}
 8002ba0:	4618      	mov	r0, r3
 8002ba2:	3714      	adds	r7, #20
 8002ba4:	46bd      	mov	sp, r7
 8002ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002baa:	4770      	bx	lr

08002bac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002bac:	b580      	push	{r7, lr}
 8002bae:	b086      	sub	sp, #24
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002bb4:	4a14      	ldr	r2, [pc, #80]	; (8002c08 <_sbrk+0x5c>)
 8002bb6:	4b15      	ldr	r3, [pc, #84]	; (8002c0c <_sbrk+0x60>)
 8002bb8:	1ad3      	subs	r3, r2, r3
 8002bba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002bbc:	697b      	ldr	r3, [r7, #20]
 8002bbe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002bc0:	4b13      	ldr	r3, [pc, #76]	; (8002c10 <_sbrk+0x64>)
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d102      	bne.n	8002bce <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002bc8:	4b11      	ldr	r3, [pc, #68]	; (8002c10 <_sbrk+0x64>)
 8002bca:	4a12      	ldr	r2, [pc, #72]	; (8002c14 <_sbrk+0x68>)
 8002bcc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002bce:	4b10      	ldr	r3, [pc, #64]	; (8002c10 <_sbrk+0x64>)
 8002bd0:	681a      	ldr	r2, [r3, #0]
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	4413      	add	r3, r2
 8002bd6:	693a      	ldr	r2, [r7, #16]
 8002bd8:	429a      	cmp	r2, r3
 8002bda:	d207      	bcs.n	8002bec <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002bdc:	f006 f98c 	bl	8008ef8 <__errno>
 8002be0:	4603      	mov	r3, r0
 8002be2:	220c      	movs	r2, #12
 8002be4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002be6:	f04f 33ff 	mov.w	r3, #4294967295
 8002bea:	e009      	b.n	8002c00 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002bec:	4b08      	ldr	r3, [pc, #32]	; (8002c10 <_sbrk+0x64>)
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002bf2:	4b07      	ldr	r3, [pc, #28]	; (8002c10 <_sbrk+0x64>)
 8002bf4:	681a      	ldr	r2, [r3, #0]
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	4413      	add	r3, r2
 8002bfa:	4a05      	ldr	r2, [pc, #20]	; (8002c10 <_sbrk+0x64>)
 8002bfc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002bfe:	68fb      	ldr	r3, [r7, #12]
}
 8002c00:	4618      	mov	r0, r3
 8002c02:	3718      	adds	r7, #24
 8002c04:	46bd      	mov	sp, r7
 8002c06:	bd80      	pop	{r7, pc}
 8002c08:	20020000 	.word	0x20020000
 8002c0c:	00000400 	.word	0x00000400
 8002c10:	20000228 	.word	0x20000228
 8002c14:	20000958 	.word	0x20000958

08002c18 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002c18:	b480      	push	{r7}
 8002c1a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002c1c:	4b06      	ldr	r3, [pc, #24]	; (8002c38 <SystemInit+0x20>)
 8002c1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c22:	4a05      	ldr	r2, [pc, #20]	; (8002c38 <SystemInit+0x20>)
 8002c24:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002c28:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002c2c:	bf00      	nop
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c34:	4770      	bx	lr
 8002c36:	bf00      	nop
 8002c38:	e000ed00 	.word	0xe000ed00

08002c3c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002c3c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002c74 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002c40:	480d      	ldr	r0, [pc, #52]	; (8002c78 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002c42:	490e      	ldr	r1, [pc, #56]	; (8002c7c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002c44:	4a0e      	ldr	r2, [pc, #56]	; (8002c80 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002c46:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002c48:	e002      	b.n	8002c50 <LoopCopyDataInit>

08002c4a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002c4a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002c4c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002c4e:	3304      	adds	r3, #4

08002c50 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002c50:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002c52:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002c54:	d3f9      	bcc.n	8002c4a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002c56:	4a0b      	ldr	r2, [pc, #44]	; (8002c84 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002c58:	4c0b      	ldr	r4, [pc, #44]	; (8002c88 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002c5a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002c5c:	e001      	b.n	8002c62 <LoopFillZerobss>

08002c5e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002c5e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002c60:	3204      	adds	r2, #4

08002c62 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002c62:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002c64:	d3fb      	bcc.n	8002c5e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002c66:	f7ff ffd7 	bl	8002c18 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002c6a:	f006 f94b 	bl	8008f04 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002c6e:	f7fe fb55 	bl	800131c <main>
  bx  lr    
 8002c72:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002c74:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002c78:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002c7c:	200001f8 	.word	0x200001f8
  ldr r2, =_sidata
 8002c80:	0800d570 	.word	0x0800d570
  ldr r2, =_sbss
 8002c84:	200001f8 	.word	0x200001f8
  ldr r4, =_ebss
 8002c88:	20000958 	.word	0x20000958

08002c8c <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002c8c:	e7fe      	b.n	8002c8c <CAN1_RX0_IRQHandler>
	...

08002c90 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002c90:	b580      	push	{r7, lr}
 8002c92:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002c94:	4b0e      	ldr	r3, [pc, #56]	; (8002cd0 <HAL_Init+0x40>)
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	4a0d      	ldr	r2, [pc, #52]	; (8002cd0 <HAL_Init+0x40>)
 8002c9a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002c9e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002ca0:	4b0b      	ldr	r3, [pc, #44]	; (8002cd0 <HAL_Init+0x40>)
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	4a0a      	ldr	r2, [pc, #40]	; (8002cd0 <HAL_Init+0x40>)
 8002ca6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002caa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002cac:	4b08      	ldr	r3, [pc, #32]	; (8002cd0 <HAL_Init+0x40>)
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	4a07      	ldr	r2, [pc, #28]	; (8002cd0 <HAL_Init+0x40>)
 8002cb2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002cb6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002cb8:	2003      	movs	r0, #3
 8002cba:	f000 fe5d 	bl	8003978 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002cbe:	2000      	movs	r0, #0
 8002cc0:	f000 f808 	bl	8002cd4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002cc4:	f7ff fc6e 	bl	80025a4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002cc8:	2300      	movs	r3, #0
}
 8002cca:	4618      	mov	r0, r3
 8002ccc:	bd80      	pop	{r7, pc}
 8002cce:	bf00      	nop
 8002cd0:	40023c00 	.word	0x40023c00

08002cd4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002cd4:	b580      	push	{r7, lr}
 8002cd6:	b082      	sub	sp, #8
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002cdc:	4b12      	ldr	r3, [pc, #72]	; (8002d28 <HAL_InitTick+0x54>)
 8002cde:	681a      	ldr	r2, [r3, #0]
 8002ce0:	4b12      	ldr	r3, [pc, #72]	; (8002d2c <HAL_InitTick+0x58>)
 8002ce2:	781b      	ldrb	r3, [r3, #0]
 8002ce4:	4619      	mov	r1, r3
 8002ce6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002cea:	fbb3 f3f1 	udiv	r3, r3, r1
 8002cee:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	f000 fe83 	bl	80039fe <HAL_SYSTICK_Config>
 8002cf8:	4603      	mov	r3, r0
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d001      	beq.n	8002d02 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002cfe:	2301      	movs	r3, #1
 8002d00:	e00e      	b.n	8002d20 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	2b0f      	cmp	r3, #15
 8002d06:	d80a      	bhi.n	8002d1e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002d08:	2200      	movs	r2, #0
 8002d0a:	6879      	ldr	r1, [r7, #4]
 8002d0c:	f04f 30ff 	mov.w	r0, #4294967295
 8002d10:	f000 fe3d 	bl	800398e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002d14:	4a06      	ldr	r2, [pc, #24]	; (8002d30 <HAL_InitTick+0x5c>)
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002d1a:	2300      	movs	r3, #0
 8002d1c:	e000      	b.n	8002d20 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002d1e:	2301      	movs	r3, #1
}
 8002d20:	4618      	mov	r0, r3
 8002d22:	3708      	adds	r7, #8
 8002d24:	46bd      	mov	sp, r7
 8002d26:	bd80      	pop	{r7, pc}
 8002d28:	20000018 	.word	0x20000018
 8002d2c:	20000020 	.word	0x20000020
 8002d30:	2000001c 	.word	0x2000001c

08002d34 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002d34:	b480      	push	{r7}
 8002d36:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002d38:	4b06      	ldr	r3, [pc, #24]	; (8002d54 <HAL_IncTick+0x20>)
 8002d3a:	781b      	ldrb	r3, [r3, #0]
 8002d3c:	461a      	mov	r2, r3
 8002d3e:	4b06      	ldr	r3, [pc, #24]	; (8002d58 <HAL_IncTick+0x24>)
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	4413      	add	r3, r2
 8002d44:	4a04      	ldr	r2, [pc, #16]	; (8002d58 <HAL_IncTick+0x24>)
 8002d46:	6013      	str	r3, [r2, #0]
}
 8002d48:	bf00      	nop
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d50:	4770      	bx	lr
 8002d52:	bf00      	nop
 8002d54:	20000020 	.word	0x20000020
 8002d58:	20000944 	.word	0x20000944

08002d5c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002d5c:	b480      	push	{r7}
 8002d5e:	af00      	add	r7, sp, #0
  return uwTick;
 8002d60:	4b03      	ldr	r3, [pc, #12]	; (8002d70 <HAL_GetTick+0x14>)
 8002d62:	681b      	ldr	r3, [r3, #0]
}
 8002d64:	4618      	mov	r0, r3
 8002d66:	46bd      	mov	sp, r7
 8002d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6c:	4770      	bx	lr
 8002d6e:	bf00      	nop
 8002d70:	20000944 	.word	0x20000944

08002d74 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002d74:	b580      	push	{r7, lr}
 8002d76:	b084      	sub	sp, #16
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002d7c:	f7ff ffee 	bl	8002d5c <HAL_GetTick>
 8002d80:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d8c:	d005      	beq.n	8002d9a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002d8e:	4b0a      	ldr	r3, [pc, #40]	; (8002db8 <HAL_Delay+0x44>)
 8002d90:	781b      	ldrb	r3, [r3, #0]
 8002d92:	461a      	mov	r2, r3
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	4413      	add	r3, r2
 8002d98:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002d9a:	bf00      	nop
 8002d9c:	f7ff ffde 	bl	8002d5c <HAL_GetTick>
 8002da0:	4602      	mov	r2, r0
 8002da2:	68bb      	ldr	r3, [r7, #8]
 8002da4:	1ad3      	subs	r3, r2, r3
 8002da6:	68fa      	ldr	r2, [r7, #12]
 8002da8:	429a      	cmp	r2, r3
 8002daa:	d8f7      	bhi.n	8002d9c <HAL_Delay+0x28>
  {
  }
}
 8002dac:	bf00      	nop
 8002dae:	bf00      	nop
 8002db0:	3710      	adds	r7, #16
 8002db2:	46bd      	mov	sp, r7
 8002db4:	bd80      	pop	{r7, pc}
 8002db6:	bf00      	nop
 8002db8:	20000020 	.word	0x20000020

08002dbc <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 8002dbc:	b480      	push	{r7}
 8002dbe:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
 8002dc0:	4b05      	ldr	r3, [pc, #20]	; (8002dd8 <HAL_SuspendTick+0x1c>)
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	4a04      	ldr	r2, [pc, #16]	; (8002dd8 <HAL_SuspendTick+0x1c>)
 8002dc6:	f023 0302 	bic.w	r3, r3, #2
 8002dca:	6013      	str	r3, [r2, #0]
}
 8002dcc:	bf00      	nop
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd4:	4770      	bx	lr
 8002dd6:	bf00      	nop
 8002dd8:	e000e010 	.word	0xe000e010

08002ddc <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 8002ddc:	b480      	push	{r7}
 8002dde:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SysTick->CTRL  |= SysTick_CTRL_TICKINT_Msk;
 8002de0:	4b05      	ldr	r3, [pc, #20]	; (8002df8 <HAL_ResumeTick+0x1c>)
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	4a04      	ldr	r2, [pc, #16]	; (8002df8 <HAL_ResumeTick+0x1c>)
 8002de6:	f043 0302 	orr.w	r3, r3, #2
 8002dea:	6013      	str	r3, [r2, #0]
}
 8002dec:	bf00      	nop
 8002dee:	46bd      	mov	sp, r7
 8002df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df4:	4770      	bx	lr
 8002df6:	bf00      	nop
 8002df8:	e000e010 	.word	0xe000e010

08002dfc <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	b084      	sub	sp, #16
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002e04:	2300      	movs	r3, #0
 8002e06:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d101      	bne.n	8002e12 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002e0e:	2301      	movs	r3, #1
 8002e10:	e033      	b.n	8002e7a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d109      	bne.n	8002e2e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002e1a:	6878      	ldr	r0, [r7, #4]
 8002e1c:	f7ff fbea 	bl	80025f4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	2200      	movs	r2, #0
 8002e24:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	2200      	movs	r2, #0
 8002e2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e32:	f003 0310 	and.w	r3, r3, #16
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d118      	bne.n	8002e6c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e3e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002e42:	f023 0302 	bic.w	r3, r3, #2
 8002e46:	f043 0202 	orr.w	r2, r3, #2
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002e4e:	6878      	ldr	r0, [r7, #4]
 8002e50:	f000 fb7a 	bl	8003548 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	2200      	movs	r2, #0
 8002e58:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e5e:	f023 0303 	bic.w	r3, r3, #3
 8002e62:	f043 0201 	orr.w	r2, r3, #1
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	641a      	str	r2, [r3, #64]	; 0x40
 8002e6a:	e001      	b.n	8002e70 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002e6c:	2301      	movs	r3, #1
 8002e6e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	2200      	movs	r2, #0
 8002e74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002e78:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e7a:	4618      	mov	r0, r3
 8002e7c:	3710      	adds	r7, #16
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	bd80      	pop	{r7, pc}
	...

08002e84 <HAL_ADC_Start_IT>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 8002e84:	b480      	push	{r7}
 8002e86:	b085      	sub	sp, #20
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8002e8c:	2300      	movs	r3, #0
 8002e8e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e96:	2b01      	cmp	r3, #1
 8002e98:	d101      	bne.n	8002e9e <HAL_ADC_Start_IT+0x1a>
 8002e9a:	2302      	movs	r3, #2
 8002e9c:	e0bd      	b.n	800301a <HAL_ADC_Start_IT+0x196>
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	2201      	movs	r2, #1
 8002ea2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	689b      	ldr	r3, [r3, #8]
 8002eac:	f003 0301 	and.w	r3, r3, #1
 8002eb0:	2b01      	cmp	r3, #1
 8002eb2:	d018      	beq.n	8002ee6 <HAL_ADC_Start_IT+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	689a      	ldr	r2, [r3, #8]
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f042 0201 	orr.w	r2, r2, #1
 8002ec2:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002ec4:	4b58      	ldr	r3, [pc, #352]	; (8003028 <HAL_ADC_Start_IT+0x1a4>)
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	4a58      	ldr	r2, [pc, #352]	; (800302c <HAL_ADC_Start_IT+0x1a8>)
 8002eca:	fba2 2303 	umull	r2, r3, r2, r3
 8002ece:	0c9a      	lsrs	r2, r3, #18
 8002ed0:	4613      	mov	r3, r2
 8002ed2:	005b      	lsls	r3, r3, #1
 8002ed4:	4413      	add	r3, r2
 8002ed6:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002ed8:	e002      	b.n	8002ee0 <HAL_ADC_Start_IT+0x5c>
    {
      counter--;
 8002eda:	68bb      	ldr	r3, [r7, #8]
 8002edc:	3b01      	subs	r3, #1
 8002ede:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002ee0:	68bb      	ldr	r3, [r7, #8]
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d1f9      	bne.n	8002eda <HAL_ADC_Start_IT+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	689b      	ldr	r3, [r3, #8]
 8002eec:	f003 0301 	and.w	r3, r3, #1
 8002ef0:	2b01      	cmp	r3, #1
 8002ef2:	f040 8085 	bne.w	8003000 <HAL_ADC_Start_IT+0x17c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002efa:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002efe:	f023 0301 	bic.w	r3, r3, #1
 8002f02:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	685b      	ldr	r3, [r3, #4]
 8002f10:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d007      	beq.n	8002f28 <HAL_ADC_Start_IT+0xa4>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f1c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002f20:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f2c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002f30:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f34:	d106      	bne.n	8002f44 <HAL_ADC_Start_IT+0xc0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f3a:	f023 0206 	bic.w	r2, r3, #6
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	645a      	str	r2, [r3, #68]	; 0x44
 8002f42:	e002      	b.n	8002f4a <HAL_ADC_Start_IT+0xc6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	2200      	movs	r2, #0
 8002f48:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002f52:	4b37      	ldr	r3, [pc, #220]	; (8003030 <HAL_ADC_Start_IT+0x1ac>)
 8002f54:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002f5e:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	685b      	ldr	r3, [r3, #4]
 8002f66:	687a      	ldr	r2, [r7, #4]
 8002f68:	6812      	ldr	r2, [r2, #0]
 8002f6a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002f6e:	f043 0320 	orr.w	r3, r3, #32
 8002f72:	6053      	str	r3, [r2, #4]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	685b      	ldr	r3, [r3, #4]
 8002f78:	f003 031f 	and.w	r3, r3, #31
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d12a      	bne.n	8002fd6 <HAL_ADC_Start_IT+0x152>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	4a2b      	ldr	r2, [pc, #172]	; (8003034 <HAL_ADC_Start_IT+0x1b0>)
 8002f86:	4293      	cmp	r3, r2
 8002f88:	d015      	beq.n	8002fb6 <HAL_ADC_Start_IT+0x132>
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	4a2a      	ldr	r2, [pc, #168]	; (8003038 <HAL_ADC_Start_IT+0x1b4>)
 8002f90:	4293      	cmp	r3, r2
 8002f92:	d105      	bne.n	8002fa0 <HAL_ADC_Start_IT+0x11c>
 8002f94:	4b26      	ldr	r3, [pc, #152]	; (8003030 <HAL_ADC_Start_IT+0x1ac>)
 8002f96:	685b      	ldr	r3, [r3, #4]
 8002f98:	f003 031f 	and.w	r3, r3, #31
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d00a      	beq.n	8002fb6 <HAL_ADC_Start_IT+0x132>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	4a25      	ldr	r2, [pc, #148]	; (800303c <HAL_ADC_Start_IT+0x1b8>)
 8002fa6:	4293      	cmp	r3, r2
 8002fa8:	d136      	bne.n	8003018 <HAL_ADC_Start_IT+0x194>
 8002faa:	4b21      	ldr	r3, [pc, #132]	; (8003030 <HAL_ADC_Start_IT+0x1ac>)
 8002fac:	685b      	ldr	r3, [r3, #4]
 8002fae:	f003 0310 	and.w	r3, r3, #16
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d130      	bne.n	8003018 <HAL_ADC_Start_IT+0x194>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	689b      	ldr	r3, [r3, #8]
 8002fbc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d129      	bne.n	8003018 <HAL_ADC_Start_IT+0x194>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	689a      	ldr	r2, [r3, #8]
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002fd2:	609a      	str	r2, [r3, #8]
 8002fd4:	e020      	b.n	8003018 <HAL_ADC_Start_IT+0x194>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	4a16      	ldr	r2, [pc, #88]	; (8003034 <HAL_ADC_Start_IT+0x1b0>)
 8002fdc:	4293      	cmp	r3, r2
 8002fde:	d11b      	bne.n	8003018 <HAL_ADC_Start_IT+0x194>
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	689b      	ldr	r3, [r3, #8]
 8002fe6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d114      	bne.n	8003018 <HAL_ADC_Start_IT+0x194>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	689a      	ldr	r2, [r3, #8]
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002ffc:	609a      	str	r2, [r3, #8]
 8002ffe:	e00b      	b.n	8003018 <HAL_ADC_Start_IT+0x194>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003004:	f043 0210 	orr.w	r2, r3, #16
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003010:	f043 0201 	orr.w	r2, r3, #1
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8003018:	2300      	movs	r3, #0
}
 800301a:	4618      	mov	r0, r3
 800301c:	3714      	adds	r7, #20
 800301e:	46bd      	mov	sp, r7
 8003020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003024:	4770      	bx	lr
 8003026:	bf00      	nop
 8003028:	20000018 	.word	0x20000018
 800302c:	431bde83 	.word	0x431bde83
 8003030:	40012300 	.word	0x40012300
 8003034:	40012000 	.word	0x40012000
 8003038:	40012100 	.word	0x40012100
 800303c:	40012200 	.word	0x40012200

08003040 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8003040:	b580      	push	{r7, lr}
 8003042:	b084      	sub	sp, #16
 8003044:	af00      	add	r7, sp, #0
 8003046:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8003048:	2300      	movs	r3, #0
 800304a:	60fb      	str	r3, [r7, #12]
 800304c:	2300      	movs	r3, #0
 800304e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f003 0302 	and.w	r3, r3, #2
 800305a:	2b02      	cmp	r3, #2
 800305c:	bf0c      	ite	eq
 800305e:	2301      	moveq	r3, #1
 8003060:	2300      	movne	r3, #0
 8003062:	b2db      	uxtb	r3, r3
 8003064:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	685b      	ldr	r3, [r3, #4]
 800306c:	f003 0320 	and.w	r3, r3, #32
 8003070:	2b20      	cmp	r3, #32
 8003072:	bf0c      	ite	eq
 8003074:	2301      	moveq	r3, #1
 8003076:	2300      	movne	r3, #0
 8003078:	b2db      	uxtb	r3, r3
 800307a:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	2b00      	cmp	r3, #0
 8003080:	d049      	beq.n	8003116 <HAL_ADC_IRQHandler+0xd6>
 8003082:	68bb      	ldr	r3, [r7, #8]
 8003084:	2b00      	cmp	r3, #0
 8003086:	d046      	beq.n	8003116 <HAL_ADC_IRQHandler+0xd6>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800308c:	f003 0310 	and.w	r3, r3, #16
 8003090:	2b00      	cmp	r3, #0
 8003092:	d105      	bne.n	80030a0 <HAL_ADC_IRQHandler+0x60>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003098:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	689b      	ldr	r3, [r3, #8]
 80030a6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d12b      	bne.n	8003106 <HAL_ADC_IRQHandler+0xc6>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d127      	bne.n	8003106 <HAL_ADC_IRQHandler+0xc6>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030bc:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d006      	beq.n	80030d2 <HAL_ADC_IRQHandler+0x92>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	689b      	ldr	r3, [r3, #8]
 80030ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d119      	bne.n	8003106 <HAL_ADC_IRQHandler+0xc6>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	685a      	ldr	r2, [r3, #4]
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f022 0220 	bic.w	r2, r2, #32
 80030e0:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030e6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030f2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d105      	bne.n	8003106 <HAL_ADC_IRQHandler+0xc6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030fe:	f043 0201 	orr.w	r2, r3, #1
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003106:	6878      	ldr	r0, [r7, #4]
 8003108:	f7fe fda2 	bl	8001c50 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f06f 0212 	mvn.w	r2, #18
 8003114:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f003 0304 	and.w	r3, r3, #4
 8003120:	2b04      	cmp	r3, #4
 8003122:	bf0c      	ite	eq
 8003124:	2301      	moveq	r3, #1
 8003126:	2300      	movne	r3, #0
 8003128:	b2db      	uxtb	r3, r3
 800312a:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	685b      	ldr	r3, [r3, #4]
 8003132:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003136:	2b80      	cmp	r3, #128	; 0x80
 8003138:	bf0c      	ite	eq
 800313a:	2301      	moveq	r3, #1
 800313c:	2300      	movne	r3, #0
 800313e:	b2db      	uxtb	r3, r3
 8003140:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	2b00      	cmp	r3, #0
 8003146:	d057      	beq.n	80031f8 <HAL_ADC_IRQHandler+0x1b8>
 8003148:	68bb      	ldr	r3, [r7, #8]
 800314a:	2b00      	cmp	r3, #0
 800314c:	d054      	beq.n	80031f8 <HAL_ADC_IRQHandler+0x1b8>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003152:	f003 0310 	and.w	r3, r3, #16
 8003156:	2b00      	cmp	r3, #0
 8003158:	d105      	bne.n	8003166 <HAL_ADC_IRQHandler+0x126>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800315e:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	689b      	ldr	r3, [r3, #8]
 800316c:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8003170:	2b00      	cmp	r3, #0
 8003172:	d139      	bne.n	80031e8 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800317a:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800317e:	2b00      	cmp	r3, #0
 8003180:	d006      	beq.n	8003190 <HAL_ADC_IRQHandler+0x150>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	689b      	ldr	r3, [r3, #8]
 8003188:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 800318c:	2b00      	cmp	r3, #0
 800318e:	d12b      	bne.n	80031e8 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	685b      	ldr	r3, [r3, #4]
 8003196:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 800319a:	2b00      	cmp	r3, #0
 800319c:	d124      	bne.n	80031e8 <HAL_ADC_IRQHandler+0x1a8>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	689b      	ldr	r3, [r3, #8]
 80031a4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d11d      	bne.n	80031e8 <HAL_ADC_IRQHandler+0x1a8>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d119      	bne.n	80031e8 <HAL_ADC_IRQHandler+0x1a8>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	685a      	ldr	r2, [r3, #4]
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80031c2:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031c8:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d105      	bne.n	80031e8 <HAL_ADC_IRQHandler+0x1a8>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031e0:	f043 0201 	orr.w	r2, r3, #1
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80031e8:	6878      	ldr	r0, [r7, #4]
 80031ea:	f000 faa9 	bl	8003740 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f06f 020c 	mvn.w	r2, #12
 80031f6:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f003 0301 	and.w	r3, r3, #1
 8003202:	2b01      	cmp	r3, #1
 8003204:	bf0c      	ite	eq
 8003206:	2301      	moveq	r3, #1
 8003208:	2300      	movne	r3, #0
 800320a:	b2db      	uxtb	r3, r3
 800320c:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	685b      	ldr	r3, [r3, #4]
 8003214:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003218:	2b40      	cmp	r3, #64	; 0x40
 800321a:	bf0c      	ite	eq
 800321c:	2301      	moveq	r3, #1
 800321e:	2300      	movne	r3, #0
 8003220:	b2db      	uxtb	r3, r3
 8003222:	60bb      	str	r3, [r7, #8]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	2b00      	cmp	r3, #0
 8003228:	d017      	beq.n	800325a <HAL_ADC_IRQHandler+0x21a>
 800322a:	68bb      	ldr	r3, [r7, #8]
 800322c:	2b00      	cmp	r3, #0
 800322e:	d014      	beq.n	800325a <HAL_ADC_IRQHandler+0x21a>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f003 0301 	and.w	r3, r3, #1
 800323a:	2b01      	cmp	r3, #1
 800323c:	d10d      	bne.n	800325a <HAL_ADC_IRQHandler+0x21a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003242:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 800324a:	6878      	ldr	r0, [r7, #4]
 800324c:	f000 f846 	bl	80032dc <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f06f 0201 	mvn.w	r2, #1
 8003258:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f003 0320 	and.w	r3, r3, #32
 8003264:	2b20      	cmp	r3, #32
 8003266:	bf0c      	ite	eq
 8003268:	2301      	moveq	r3, #1
 800326a:	2300      	movne	r3, #0
 800326c:	b2db      	uxtb	r3, r3
 800326e:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	685b      	ldr	r3, [r3, #4]
 8003276:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800327a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800327e:	bf0c      	ite	eq
 8003280:	2301      	moveq	r3, #1
 8003282:	2300      	movne	r3, #0
 8003284:	b2db      	uxtb	r3, r3
 8003286:	60bb      	str	r3, [r7, #8]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	2b00      	cmp	r3, #0
 800328c:	d015      	beq.n	80032ba <HAL_ADC_IRQHandler+0x27a>
 800328e:	68bb      	ldr	r3, [r7, #8]
 8003290:	2b00      	cmp	r3, #0
 8003292:	d012      	beq.n	80032ba <HAL_ADC_IRQHandler+0x27a>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003298:	f043 0202 	orr.w	r2, r3, #2
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f06f 0220 	mvn.w	r2, #32
 80032a8:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80032aa:	6878      	ldr	r0, [r7, #4]
 80032ac:	f000 f820 	bl	80032f0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f06f 0220 	mvn.w	r2, #32
 80032b8:	601a      	str	r2, [r3, #0]
  }
}
 80032ba:	bf00      	nop
 80032bc:	3710      	adds	r7, #16
 80032be:	46bd      	mov	sp, r7
 80032c0:	bd80      	pop	{r7, pc}

080032c2 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 80032c2:	b480      	push	{r7}
 80032c4:	b083      	sub	sp, #12
 80032c6:	af00      	add	r7, sp, #0
 80032c8:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80032d0:	4618      	mov	r0, r3
 80032d2:	370c      	adds	r7, #12
 80032d4:	46bd      	mov	sp, r7
 80032d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032da:	4770      	bx	lr

080032dc <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 80032dc:	b480      	push	{r7}
 80032de:	b083      	sub	sp, #12
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 80032e4:	bf00      	nop
 80032e6:	370c      	adds	r7, #12
 80032e8:	46bd      	mov	sp, r7
 80032ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ee:	4770      	bx	lr

080032f0 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80032f0:	b480      	push	{r7}
 80032f2:	b083      	sub	sp, #12
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80032f8:	bf00      	nop
 80032fa:	370c      	adds	r7, #12
 80032fc:	46bd      	mov	sp, r7
 80032fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003302:	4770      	bx	lr

08003304 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003304:	b480      	push	{r7}
 8003306:	b085      	sub	sp, #20
 8003308:	af00      	add	r7, sp, #0
 800330a:	6078      	str	r0, [r7, #4]
 800330c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800330e:	2300      	movs	r3, #0
 8003310:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003318:	2b01      	cmp	r3, #1
 800331a:	d101      	bne.n	8003320 <HAL_ADC_ConfigChannel+0x1c>
 800331c:	2302      	movs	r3, #2
 800331e:	e105      	b.n	800352c <HAL_ADC_ConfigChannel+0x228>
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	2201      	movs	r2, #1
 8003324:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003328:	683b      	ldr	r3, [r7, #0]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	2b09      	cmp	r3, #9
 800332e:	d925      	bls.n	800337c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	68d9      	ldr	r1, [r3, #12]
 8003336:	683b      	ldr	r3, [r7, #0]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	b29b      	uxth	r3, r3
 800333c:	461a      	mov	r2, r3
 800333e:	4613      	mov	r3, r2
 8003340:	005b      	lsls	r3, r3, #1
 8003342:	4413      	add	r3, r2
 8003344:	3b1e      	subs	r3, #30
 8003346:	2207      	movs	r2, #7
 8003348:	fa02 f303 	lsl.w	r3, r2, r3
 800334c:	43da      	mvns	r2, r3
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	400a      	ands	r2, r1
 8003354:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	68d9      	ldr	r1, [r3, #12]
 800335c:	683b      	ldr	r3, [r7, #0]
 800335e:	689a      	ldr	r2, [r3, #8]
 8003360:	683b      	ldr	r3, [r7, #0]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	b29b      	uxth	r3, r3
 8003366:	4618      	mov	r0, r3
 8003368:	4603      	mov	r3, r0
 800336a:	005b      	lsls	r3, r3, #1
 800336c:	4403      	add	r3, r0
 800336e:	3b1e      	subs	r3, #30
 8003370:	409a      	lsls	r2, r3
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	430a      	orrs	r2, r1
 8003378:	60da      	str	r2, [r3, #12]
 800337a:	e022      	b.n	80033c2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	6919      	ldr	r1, [r3, #16]
 8003382:	683b      	ldr	r3, [r7, #0]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	b29b      	uxth	r3, r3
 8003388:	461a      	mov	r2, r3
 800338a:	4613      	mov	r3, r2
 800338c:	005b      	lsls	r3, r3, #1
 800338e:	4413      	add	r3, r2
 8003390:	2207      	movs	r2, #7
 8003392:	fa02 f303 	lsl.w	r3, r2, r3
 8003396:	43da      	mvns	r2, r3
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	400a      	ands	r2, r1
 800339e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	6919      	ldr	r1, [r3, #16]
 80033a6:	683b      	ldr	r3, [r7, #0]
 80033a8:	689a      	ldr	r2, [r3, #8]
 80033aa:	683b      	ldr	r3, [r7, #0]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	b29b      	uxth	r3, r3
 80033b0:	4618      	mov	r0, r3
 80033b2:	4603      	mov	r3, r0
 80033b4:	005b      	lsls	r3, r3, #1
 80033b6:	4403      	add	r3, r0
 80033b8:	409a      	lsls	r2, r3
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	430a      	orrs	r2, r1
 80033c0:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80033c2:	683b      	ldr	r3, [r7, #0]
 80033c4:	685b      	ldr	r3, [r3, #4]
 80033c6:	2b06      	cmp	r3, #6
 80033c8:	d824      	bhi.n	8003414 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80033d0:	683b      	ldr	r3, [r7, #0]
 80033d2:	685a      	ldr	r2, [r3, #4]
 80033d4:	4613      	mov	r3, r2
 80033d6:	009b      	lsls	r3, r3, #2
 80033d8:	4413      	add	r3, r2
 80033da:	3b05      	subs	r3, #5
 80033dc:	221f      	movs	r2, #31
 80033de:	fa02 f303 	lsl.w	r3, r2, r3
 80033e2:	43da      	mvns	r2, r3
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	400a      	ands	r2, r1
 80033ea:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80033f2:	683b      	ldr	r3, [r7, #0]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	b29b      	uxth	r3, r3
 80033f8:	4618      	mov	r0, r3
 80033fa:	683b      	ldr	r3, [r7, #0]
 80033fc:	685a      	ldr	r2, [r3, #4]
 80033fe:	4613      	mov	r3, r2
 8003400:	009b      	lsls	r3, r3, #2
 8003402:	4413      	add	r3, r2
 8003404:	3b05      	subs	r3, #5
 8003406:	fa00 f203 	lsl.w	r2, r0, r3
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	430a      	orrs	r2, r1
 8003410:	635a      	str	r2, [r3, #52]	; 0x34
 8003412:	e04c      	b.n	80034ae <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003414:	683b      	ldr	r3, [r7, #0]
 8003416:	685b      	ldr	r3, [r3, #4]
 8003418:	2b0c      	cmp	r3, #12
 800341a:	d824      	bhi.n	8003466 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003422:	683b      	ldr	r3, [r7, #0]
 8003424:	685a      	ldr	r2, [r3, #4]
 8003426:	4613      	mov	r3, r2
 8003428:	009b      	lsls	r3, r3, #2
 800342a:	4413      	add	r3, r2
 800342c:	3b23      	subs	r3, #35	; 0x23
 800342e:	221f      	movs	r2, #31
 8003430:	fa02 f303 	lsl.w	r3, r2, r3
 8003434:	43da      	mvns	r2, r3
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	400a      	ands	r2, r1
 800343c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003444:	683b      	ldr	r3, [r7, #0]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	b29b      	uxth	r3, r3
 800344a:	4618      	mov	r0, r3
 800344c:	683b      	ldr	r3, [r7, #0]
 800344e:	685a      	ldr	r2, [r3, #4]
 8003450:	4613      	mov	r3, r2
 8003452:	009b      	lsls	r3, r3, #2
 8003454:	4413      	add	r3, r2
 8003456:	3b23      	subs	r3, #35	; 0x23
 8003458:	fa00 f203 	lsl.w	r2, r0, r3
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	430a      	orrs	r2, r1
 8003462:	631a      	str	r2, [r3, #48]	; 0x30
 8003464:	e023      	b.n	80034ae <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800346c:	683b      	ldr	r3, [r7, #0]
 800346e:	685a      	ldr	r2, [r3, #4]
 8003470:	4613      	mov	r3, r2
 8003472:	009b      	lsls	r3, r3, #2
 8003474:	4413      	add	r3, r2
 8003476:	3b41      	subs	r3, #65	; 0x41
 8003478:	221f      	movs	r2, #31
 800347a:	fa02 f303 	lsl.w	r3, r2, r3
 800347e:	43da      	mvns	r2, r3
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	400a      	ands	r2, r1
 8003486:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800348e:	683b      	ldr	r3, [r7, #0]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	b29b      	uxth	r3, r3
 8003494:	4618      	mov	r0, r3
 8003496:	683b      	ldr	r3, [r7, #0]
 8003498:	685a      	ldr	r2, [r3, #4]
 800349a:	4613      	mov	r3, r2
 800349c:	009b      	lsls	r3, r3, #2
 800349e:	4413      	add	r3, r2
 80034a0:	3b41      	subs	r3, #65	; 0x41
 80034a2:	fa00 f203 	lsl.w	r2, r0, r3
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	430a      	orrs	r2, r1
 80034ac:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80034ae:	4b22      	ldr	r3, [pc, #136]	; (8003538 <HAL_ADC_ConfigChannel+0x234>)
 80034b0:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	4a21      	ldr	r2, [pc, #132]	; (800353c <HAL_ADC_ConfigChannel+0x238>)
 80034b8:	4293      	cmp	r3, r2
 80034ba:	d109      	bne.n	80034d0 <HAL_ADC_ConfigChannel+0x1cc>
 80034bc:	683b      	ldr	r3, [r7, #0]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	2b12      	cmp	r3, #18
 80034c2:	d105      	bne.n	80034d0 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	685b      	ldr	r3, [r3, #4]
 80034c8:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	4a19      	ldr	r2, [pc, #100]	; (800353c <HAL_ADC_ConfigChannel+0x238>)
 80034d6:	4293      	cmp	r3, r2
 80034d8:	d123      	bne.n	8003522 <HAL_ADC_ConfigChannel+0x21e>
 80034da:	683b      	ldr	r3, [r7, #0]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	2b10      	cmp	r3, #16
 80034e0:	d003      	beq.n	80034ea <HAL_ADC_ConfigChannel+0x1e6>
 80034e2:	683b      	ldr	r3, [r7, #0]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	2b11      	cmp	r3, #17
 80034e8:	d11b      	bne.n	8003522 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	685b      	ldr	r3, [r3, #4]
 80034ee:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80034f6:	683b      	ldr	r3, [r7, #0]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	2b10      	cmp	r3, #16
 80034fc:	d111      	bne.n	8003522 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80034fe:	4b10      	ldr	r3, [pc, #64]	; (8003540 <HAL_ADC_ConfigChannel+0x23c>)
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	4a10      	ldr	r2, [pc, #64]	; (8003544 <HAL_ADC_ConfigChannel+0x240>)
 8003504:	fba2 2303 	umull	r2, r3, r2, r3
 8003508:	0c9a      	lsrs	r2, r3, #18
 800350a:	4613      	mov	r3, r2
 800350c:	009b      	lsls	r3, r3, #2
 800350e:	4413      	add	r3, r2
 8003510:	005b      	lsls	r3, r3, #1
 8003512:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003514:	e002      	b.n	800351c <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8003516:	68bb      	ldr	r3, [r7, #8]
 8003518:	3b01      	subs	r3, #1
 800351a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800351c:	68bb      	ldr	r3, [r7, #8]
 800351e:	2b00      	cmp	r3, #0
 8003520:	d1f9      	bne.n	8003516 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	2200      	movs	r2, #0
 8003526:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800352a:	2300      	movs	r3, #0
}
 800352c:	4618      	mov	r0, r3
 800352e:	3714      	adds	r7, #20
 8003530:	46bd      	mov	sp, r7
 8003532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003536:	4770      	bx	lr
 8003538:	40012300 	.word	0x40012300
 800353c:	40012000 	.word	0x40012000
 8003540:	20000018 	.word	0x20000018
 8003544:	431bde83 	.word	0x431bde83

08003548 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003548:	b480      	push	{r7}
 800354a:	b085      	sub	sp, #20
 800354c:	af00      	add	r7, sp, #0
 800354e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003550:	4b79      	ldr	r3, [pc, #484]	; (8003738 <ADC_Init+0x1f0>)
 8003552:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	685b      	ldr	r3, [r3, #4]
 8003558:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	685a      	ldr	r2, [r3, #4]
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	685b      	ldr	r3, [r3, #4]
 8003568:	431a      	orrs	r2, r3
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	685a      	ldr	r2, [r3, #4]
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800357c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	6859      	ldr	r1, [r3, #4]
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	691b      	ldr	r3, [r3, #16]
 8003588:	021a      	lsls	r2, r3, #8
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	430a      	orrs	r2, r1
 8003590:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	685a      	ldr	r2, [r3, #4]
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80035a0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	6859      	ldr	r1, [r3, #4]
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	689a      	ldr	r2, [r3, #8]
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	430a      	orrs	r2, r1
 80035b2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	689a      	ldr	r2, [r3, #8]
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80035c2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	6899      	ldr	r1, [r3, #8]
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	68da      	ldr	r2, [r3, #12]
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	430a      	orrs	r2, r1
 80035d4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035da:	4a58      	ldr	r2, [pc, #352]	; (800373c <ADC_Init+0x1f4>)
 80035dc:	4293      	cmp	r3, r2
 80035de:	d022      	beq.n	8003626 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	689a      	ldr	r2, [r3, #8]
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80035ee:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	6899      	ldr	r1, [r3, #8]
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	430a      	orrs	r2, r1
 8003600:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	689a      	ldr	r2, [r3, #8]
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003610:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	6899      	ldr	r1, [r3, #8]
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	430a      	orrs	r2, r1
 8003622:	609a      	str	r2, [r3, #8]
 8003624:	e00f      	b.n	8003646 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	689a      	ldr	r2, [r3, #8]
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003634:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	689a      	ldr	r2, [r3, #8]
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003644:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	689a      	ldr	r2, [r3, #8]
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f022 0202 	bic.w	r2, r2, #2
 8003654:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	6899      	ldr	r1, [r3, #8]
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	7e1b      	ldrb	r3, [r3, #24]
 8003660:	005a      	lsls	r2, r3, #1
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	430a      	orrs	r2, r1
 8003668:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003670:	2b00      	cmp	r3, #0
 8003672:	d01b      	beq.n	80036ac <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	685a      	ldr	r2, [r3, #4]
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003682:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	685a      	ldr	r2, [r3, #4]
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003692:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	6859      	ldr	r1, [r3, #4]
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800369e:	3b01      	subs	r3, #1
 80036a0:	035a      	lsls	r2, r3, #13
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	430a      	orrs	r2, r1
 80036a8:	605a      	str	r2, [r3, #4]
 80036aa:	e007      	b.n	80036bc <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	685a      	ldr	r2, [r3, #4]
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80036ba:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80036ca:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	69db      	ldr	r3, [r3, #28]
 80036d6:	3b01      	subs	r3, #1
 80036d8:	051a      	lsls	r2, r3, #20
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	430a      	orrs	r2, r1
 80036e0:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	689a      	ldr	r2, [r3, #8]
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80036f0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	6899      	ldr	r1, [r3, #8]
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80036fe:	025a      	lsls	r2, r3, #9
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	430a      	orrs	r2, r1
 8003706:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	689a      	ldr	r2, [r3, #8]
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003716:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	6899      	ldr	r1, [r3, #8]
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	695b      	ldr	r3, [r3, #20]
 8003722:	029a      	lsls	r2, r3, #10
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	430a      	orrs	r2, r1
 800372a:	609a      	str	r2, [r3, #8]
}
 800372c:	bf00      	nop
 800372e:	3714      	adds	r7, #20
 8003730:	46bd      	mov	sp, r7
 8003732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003736:	4770      	bx	lr
 8003738:	40012300 	.word	0x40012300
 800373c:	0f000001 	.word	0x0f000001

08003740 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003740:	b480      	push	{r7}
 8003742:	b083      	sub	sp, #12
 8003744:	af00      	add	r7, sp, #0
 8003746:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8003748:	bf00      	nop
 800374a:	370c      	adds	r7, #12
 800374c:	46bd      	mov	sp, r7
 800374e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003752:	4770      	bx	lr

08003754 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003754:	b480      	push	{r7}
 8003756:	b085      	sub	sp, #20
 8003758:	af00      	add	r7, sp, #0
 800375a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	f003 0307 	and.w	r3, r3, #7
 8003762:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003764:	4b0c      	ldr	r3, [pc, #48]	; (8003798 <__NVIC_SetPriorityGrouping+0x44>)
 8003766:	68db      	ldr	r3, [r3, #12]
 8003768:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800376a:	68ba      	ldr	r2, [r7, #8]
 800376c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003770:	4013      	ands	r3, r2
 8003772:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003778:	68bb      	ldr	r3, [r7, #8]
 800377a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800377c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003780:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003784:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003786:	4a04      	ldr	r2, [pc, #16]	; (8003798 <__NVIC_SetPriorityGrouping+0x44>)
 8003788:	68bb      	ldr	r3, [r7, #8]
 800378a:	60d3      	str	r3, [r2, #12]
}
 800378c:	bf00      	nop
 800378e:	3714      	adds	r7, #20
 8003790:	46bd      	mov	sp, r7
 8003792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003796:	4770      	bx	lr
 8003798:	e000ed00 	.word	0xe000ed00

0800379c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800379c:	b480      	push	{r7}
 800379e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80037a0:	4b04      	ldr	r3, [pc, #16]	; (80037b4 <__NVIC_GetPriorityGrouping+0x18>)
 80037a2:	68db      	ldr	r3, [r3, #12]
 80037a4:	0a1b      	lsrs	r3, r3, #8
 80037a6:	f003 0307 	and.w	r3, r3, #7
}
 80037aa:	4618      	mov	r0, r3
 80037ac:	46bd      	mov	sp, r7
 80037ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b2:	4770      	bx	lr
 80037b4:	e000ed00 	.word	0xe000ed00

080037b8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80037b8:	b480      	push	{r7}
 80037ba:	b083      	sub	sp, #12
 80037bc:	af00      	add	r7, sp, #0
 80037be:	4603      	mov	r3, r0
 80037c0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80037c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	db0b      	blt.n	80037e2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80037ca:	79fb      	ldrb	r3, [r7, #7]
 80037cc:	f003 021f 	and.w	r2, r3, #31
 80037d0:	4907      	ldr	r1, [pc, #28]	; (80037f0 <__NVIC_EnableIRQ+0x38>)
 80037d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037d6:	095b      	lsrs	r3, r3, #5
 80037d8:	2001      	movs	r0, #1
 80037da:	fa00 f202 	lsl.w	r2, r0, r2
 80037de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80037e2:	bf00      	nop
 80037e4:	370c      	adds	r7, #12
 80037e6:	46bd      	mov	sp, r7
 80037e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ec:	4770      	bx	lr
 80037ee:	bf00      	nop
 80037f0:	e000e100 	.word	0xe000e100

080037f4 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80037f4:	b480      	push	{r7}
 80037f6:	b083      	sub	sp, #12
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	4603      	mov	r3, r0
 80037fc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80037fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003802:	2b00      	cmp	r3, #0
 8003804:	db12      	blt.n	800382c <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003806:	79fb      	ldrb	r3, [r7, #7]
 8003808:	f003 021f 	and.w	r2, r3, #31
 800380c:	490a      	ldr	r1, [pc, #40]	; (8003838 <__NVIC_DisableIRQ+0x44>)
 800380e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003812:	095b      	lsrs	r3, r3, #5
 8003814:	2001      	movs	r0, #1
 8003816:	fa00 f202 	lsl.w	r2, r0, r2
 800381a:	3320      	adds	r3, #32
 800381c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8003820:	f3bf 8f4f 	dsb	sy
}
 8003824:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003826:	f3bf 8f6f 	isb	sy
}
 800382a:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 800382c:	bf00      	nop
 800382e:	370c      	adds	r7, #12
 8003830:	46bd      	mov	sp, r7
 8003832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003836:	4770      	bx	lr
 8003838:	e000e100 	.word	0xe000e100

0800383c <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 800383c:	b480      	push	{r7}
 800383e:	b083      	sub	sp, #12
 8003840:	af00      	add	r7, sp, #0
 8003842:	4603      	mov	r3, r0
 8003844:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003846:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800384a:	2b00      	cmp	r3, #0
 800384c:	db0c      	blt.n	8003868 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800384e:	79fb      	ldrb	r3, [r7, #7]
 8003850:	f003 021f 	and.w	r2, r3, #31
 8003854:	4907      	ldr	r1, [pc, #28]	; (8003874 <__NVIC_ClearPendingIRQ+0x38>)
 8003856:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800385a:	095b      	lsrs	r3, r3, #5
 800385c:	2001      	movs	r0, #1
 800385e:	fa00 f202 	lsl.w	r2, r0, r2
 8003862:	3360      	adds	r3, #96	; 0x60
 8003864:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003868:	bf00      	nop
 800386a:	370c      	adds	r7, #12
 800386c:	46bd      	mov	sp, r7
 800386e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003872:	4770      	bx	lr
 8003874:	e000e100 	.word	0xe000e100

08003878 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003878:	b480      	push	{r7}
 800387a:	b083      	sub	sp, #12
 800387c:	af00      	add	r7, sp, #0
 800387e:	4603      	mov	r3, r0
 8003880:	6039      	str	r1, [r7, #0]
 8003882:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003884:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003888:	2b00      	cmp	r3, #0
 800388a:	db0a      	blt.n	80038a2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800388c:	683b      	ldr	r3, [r7, #0]
 800388e:	b2da      	uxtb	r2, r3
 8003890:	490c      	ldr	r1, [pc, #48]	; (80038c4 <__NVIC_SetPriority+0x4c>)
 8003892:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003896:	0112      	lsls	r2, r2, #4
 8003898:	b2d2      	uxtb	r2, r2
 800389a:	440b      	add	r3, r1
 800389c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80038a0:	e00a      	b.n	80038b8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80038a2:	683b      	ldr	r3, [r7, #0]
 80038a4:	b2da      	uxtb	r2, r3
 80038a6:	4908      	ldr	r1, [pc, #32]	; (80038c8 <__NVIC_SetPriority+0x50>)
 80038a8:	79fb      	ldrb	r3, [r7, #7]
 80038aa:	f003 030f 	and.w	r3, r3, #15
 80038ae:	3b04      	subs	r3, #4
 80038b0:	0112      	lsls	r2, r2, #4
 80038b2:	b2d2      	uxtb	r2, r2
 80038b4:	440b      	add	r3, r1
 80038b6:	761a      	strb	r2, [r3, #24]
}
 80038b8:	bf00      	nop
 80038ba:	370c      	adds	r7, #12
 80038bc:	46bd      	mov	sp, r7
 80038be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c2:	4770      	bx	lr
 80038c4:	e000e100 	.word	0xe000e100
 80038c8:	e000ed00 	.word	0xe000ed00

080038cc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80038cc:	b480      	push	{r7}
 80038ce:	b089      	sub	sp, #36	; 0x24
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	60f8      	str	r0, [r7, #12]
 80038d4:	60b9      	str	r1, [r7, #8]
 80038d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	f003 0307 	and.w	r3, r3, #7
 80038de:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80038e0:	69fb      	ldr	r3, [r7, #28]
 80038e2:	f1c3 0307 	rsb	r3, r3, #7
 80038e6:	2b04      	cmp	r3, #4
 80038e8:	bf28      	it	cs
 80038ea:	2304      	movcs	r3, #4
 80038ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80038ee:	69fb      	ldr	r3, [r7, #28]
 80038f0:	3304      	adds	r3, #4
 80038f2:	2b06      	cmp	r3, #6
 80038f4:	d902      	bls.n	80038fc <NVIC_EncodePriority+0x30>
 80038f6:	69fb      	ldr	r3, [r7, #28]
 80038f8:	3b03      	subs	r3, #3
 80038fa:	e000      	b.n	80038fe <NVIC_EncodePriority+0x32>
 80038fc:	2300      	movs	r3, #0
 80038fe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003900:	f04f 32ff 	mov.w	r2, #4294967295
 8003904:	69bb      	ldr	r3, [r7, #24]
 8003906:	fa02 f303 	lsl.w	r3, r2, r3
 800390a:	43da      	mvns	r2, r3
 800390c:	68bb      	ldr	r3, [r7, #8]
 800390e:	401a      	ands	r2, r3
 8003910:	697b      	ldr	r3, [r7, #20]
 8003912:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003914:	f04f 31ff 	mov.w	r1, #4294967295
 8003918:	697b      	ldr	r3, [r7, #20]
 800391a:	fa01 f303 	lsl.w	r3, r1, r3
 800391e:	43d9      	mvns	r1, r3
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003924:	4313      	orrs	r3, r2
         );
}
 8003926:	4618      	mov	r0, r3
 8003928:	3724      	adds	r7, #36	; 0x24
 800392a:	46bd      	mov	sp, r7
 800392c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003930:	4770      	bx	lr
	...

08003934 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003934:	b580      	push	{r7, lr}
 8003936:	b082      	sub	sp, #8
 8003938:	af00      	add	r7, sp, #0
 800393a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	3b01      	subs	r3, #1
 8003940:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003944:	d301      	bcc.n	800394a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003946:	2301      	movs	r3, #1
 8003948:	e00f      	b.n	800396a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800394a:	4a0a      	ldr	r2, [pc, #40]	; (8003974 <SysTick_Config+0x40>)
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	3b01      	subs	r3, #1
 8003950:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003952:	210f      	movs	r1, #15
 8003954:	f04f 30ff 	mov.w	r0, #4294967295
 8003958:	f7ff ff8e 	bl	8003878 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800395c:	4b05      	ldr	r3, [pc, #20]	; (8003974 <SysTick_Config+0x40>)
 800395e:	2200      	movs	r2, #0
 8003960:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003962:	4b04      	ldr	r3, [pc, #16]	; (8003974 <SysTick_Config+0x40>)
 8003964:	2207      	movs	r2, #7
 8003966:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003968:	2300      	movs	r3, #0
}
 800396a:	4618      	mov	r0, r3
 800396c:	3708      	adds	r7, #8
 800396e:	46bd      	mov	sp, r7
 8003970:	bd80      	pop	{r7, pc}
 8003972:	bf00      	nop
 8003974:	e000e010 	.word	0xe000e010

08003978 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003978:	b580      	push	{r7, lr}
 800397a:	b082      	sub	sp, #8
 800397c:	af00      	add	r7, sp, #0
 800397e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003980:	6878      	ldr	r0, [r7, #4]
 8003982:	f7ff fee7 	bl	8003754 <__NVIC_SetPriorityGrouping>
}
 8003986:	bf00      	nop
 8003988:	3708      	adds	r7, #8
 800398a:	46bd      	mov	sp, r7
 800398c:	bd80      	pop	{r7, pc}

0800398e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800398e:	b580      	push	{r7, lr}
 8003990:	b086      	sub	sp, #24
 8003992:	af00      	add	r7, sp, #0
 8003994:	4603      	mov	r3, r0
 8003996:	60b9      	str	r1, [r7, #8]
 8003998:	607a      	str	r2, [r7, #4]
 800399a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800399c:	2300      	movs	r3, #0
 800399e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80039a0:	f7ff fefc 	bl	800379c <__NVIC_GetPriorityGrouping>
 80039a4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80039a6:	687a      	ldr	r2, [r7, #4]
 80039a8:	68b9      	ldr	r1, [r7, #8]
 80039aa:	6978      	ldr	r0, [r7, #20]
 80039ac:	f7ff ff8e 	bl	80038cc <NVIC_EncodePriority>
 80039b0:	4602      	mov	r2, r0
 80039b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80039b6:	4611      	mov	r1, r2
 80039b8:	4618      	mov	r0, r3
 80039ba:	f7ff ff5d 	bl	8003878 <__NVIC_SetPriority>
}
 80039be:	bf00      	nop
 80039c0:	3718      	adds	r7, #24
 80039c2:	46bd      	mov	sp, r7
 80039c4:	bd80      	pop	{r7, pc}

080039c6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80039c6:	b580      	push	{r7, lr}
 80039c8:	b082      	sub	sp, #8
 80039ca:	af00      	add	r7, sp, #0
 80039cc:	4603      	mov	r3, r0
 80039ce:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80039d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039d4:	4618      	mov	r0, r3
 80039d6:	f7ff feef 	bl	80037b8 <__NVIC_EnableIRQ>
}
 80039da:	bf00      	nop
 80039dc:	3708      	adds	r7, #8
 80039de:	46bd      	mov	sp, r7
 80039e0:	bd80      	pop	{r7, pc}

080039e2 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80039e2:	b580      	push	{r7, lr}
 80039e4:	b082      	sub	sp, #8
 80039e6:	af00      	add	r7, sp, #0
 80039e8:	4603      	mov	r3, r0
 80039ea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80039ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039f0:	4618      	mov	r0, r3
 80039f2:	f7ff feff 	bl	80037f4 <__NVIC_DisableIRQ>
}
 80039f6:	bf00      	nop
 80039f8:	3708      	adds	r7, #8
 80039fa:	46bd      	mov	sp, r7
 80039fc:	bd80      	pop	{r7, pc}

080039fe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80039fe:	b580      	push	{r7, lr}
 8003a00:	b082      	sub	sp, #8
 8003a02:	af00      	add	r7, sp, #0
 8003a04:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003a06:	6878      	ldr	r0, [r7, #4]
 8003a08:	f7ff ff94 	bl	8003934 <SysTick_Config>
 8003a0c:	4603      	mov	r3, r0
}
 8003a0e:	4618      	mov	r0, r3
 8003a10:	3708      	adds	r7, #8
 8003a12:	46bd      	mov	sp, r7
 8003a14:	bd80      	pop	{r7, pc}

08003a16 <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8003a16:	b580      	push	{r7, lr}
 8003a18:	b082      	sub	sp, #8
 8003a1a:	af00      	add	r7, sp, #0
 8003a1c:	4603      	mov	r3, r0
 8003a1e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 8003a20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a24:	4618      	mov	r0, r3
 8003a26:	f7ff ff09 	bl	800383c <__NVIC_ClearPendingIRQ>
}
 8003a2a:	bf00      	nop
 8003a2c:	3708      	adds	r7, #8
 8003a2e:	46bd      	mov	sp, r7
 8003a30:	bd80      	pop	{r7, pc}
	...

08003a34 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003a34:	b580      	push	{r7, lr}
 8003a36:	b086      	sub	sp, #24
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003a3c:	2300      	movs	r3, #0
 8003a3e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003a40:	f7ff f98c 	bl	8002d5c <HAL_GetTick>
 8003a44:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d101      	bne.n	8003a50 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003a4c:	2301      	movs	r3, #1
 8003a4e:	e099      	b.n	8003b84 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	2202      	movs	r2, #2
 8003a54:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	2200      	movs	r2, #0
 8003a5c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	681a      	ldr	r2, [r3, #0]
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f022 0201 	bic.w	r2, r2, #1
 8003a6e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003a70:	e00f      	b.n	8003a92 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003a72:	f7ff f973 	bl	8002d5c <HAL_GetTick>
 8003a76:	4602      	mov	r2, r0
 8003a78:	693b      	ldr	r3, [r7, #16]
 8003a7a:	1ad3      	subs	r3, r2, r3
 8003a7c:	2b05      	cmp	r3, #5
 8003a7e:	d908      	bls.n	8003a92 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	2220      	movs	r2, #32
 8003a84:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	2203      	movs	r2, #3
 8003a8a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003a8e:	2303      	movs	r3, #3
 8003a90:	e078      	b.n	8003b84 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	f003 0301 	and.w	r3, r3, #1
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d1e8      	bne.n	8003a72 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003aa8:	697a      	ldr	r2, [r7, #20]
 8003aaa:	4b38      	ldr	r3, [pc, #224]	; (8003b8c <HAL_DMA_Init+0x158>)
 8003aac:	4013      	ands	r3, r2
 8003aae:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	685a      	ldr	r2, [r3, #4]
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	689b      	ldr	r3, [r3, #8]
 8003ab8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003abe:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	691b      	ldr	r3, [r3, #16]
 8003ac4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003aca:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	699b      	ldr	r3, [r3, #24]
 8003ad0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003ad6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	6a1b      	ldr	r3, [r3, #32]
 8003adc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003ade:	697a      	ldr	r2, [r7, #20]
 8003ae0:	4313      	orrs	r3, r2
 8003ae2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ae8:	2b04      	cmp	r3, #4
 8003aea:	d107      	bne.n	8003afc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003af4:	4313      	orrs	r3, r2
 8003af6:	697a      	ldr	r2, [r7, #20]
 8003af8:	4313      	orrs	r3, r2
 8003afa:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	697a      	ldr	r2, [r7, #20]
 8003b02:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	695b      	ldr	r3, [r3, #20]
 8003b0a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003b0c:	697b      	ldr	r3, [r7, #20]
 8003b0e:	f023 0307 	bic.w	r3, r3, #7
 8003b12:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b18:	697a      	ldr	r2, [r7, #20]
 8003b1a:	4313      	orrs	r3, r2
 8003b1c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b22:	2b04      	cmp	r3, #4
 8003b24:	d117      	bne.n	8003b56 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b2a:	697a      	ldr	r2, [r7, #20]
 8003b2c:	4313      	orrs	r3, r2
 8003b2e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d00e      	beq.n	8003b56 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003b38:	6878      	ldr	r0, [r7, #4]
 8003b3a:	f000 faab 	bl	8004094 <DMA_CheckFifoParam>
 8003b3e:	4603      	mov	r3, r0
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d008      	beq.n	8003b56 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	2240      	movs	r2, #64	; 0x40
 8003b48:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	2201      	movs	r2, #1
 8003b4e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003b52:	2301      	movs	r3, #1
 8003b54:	e016      	b.n	8003b84 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	697a      	ldr	r2, [r7, #20]
 8003b5c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003b5e:	6878      	ldr	r0, [r7, #4]
 8003b60:	f000 fa62 	bl	8004028 <DMA_CalcBaseAndBitshift>
 8003b64:	4603      	mov	r3, r0
 8003b66:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b6c:	223f      	movs	r2, #63	; 0x3f
 8003b6e:	409a      	lsls	r2, r3
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	2200      	movs	r2, #0
 8003b78:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	2201      	movs	r2, #1
 8003b7e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003b82:	2300      	movs	r3, #0
}
 8003b84:	4618      	mov	r0, r3
 8003b86:	3718      	adds	r7, #24
 8003b88:	46bd      	mov	sp, r7
 8003b8a:	bd80      	pop	{r7, pc}
 8003b8c:	f010803f 	.word	0xf010803f

08003b90 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003b90:	b580      	push	{r7, lr}
 8003b92:	b086      	sub	sp, #24
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	60f8      	str	r0, [r7, #12]
 8003b98:	60b9      	str	r1, [r7, #8]
 8003b9a:	607a      	str	r2, [r7, #4]
 8003b9c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003b9e:	2300      	movs	r3, #0
 8003ba0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ba6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003bae:	2b01      	cmp	r3, #1
 8003bb0:	d101      	bne.n	8003bb6 <HAL_DMA_Start_IT+0x26>
 8003bb2:	2302      	movs	r3, #2
 8003bb4:	e040      	b.n	8003c38 <HAL_DMA_Start_IT+0xa8>
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	2201      	movs	r2, #1
 8003bba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003bc4:	b2db      	uxtb	r3, r3
 8003bc6:	2b01      	cmp	r3, #1
 8003bc8:	d12f      	bne.n	8003c2a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	2202      	movs	r2, #2
 8003bce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	2200      	movs	r2, #0
 8003bd6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003bd8:	683b      	ldr	r3, [r7, #0]
 8003bda:	687a      	ldr	r2, [r7, #4]
 8003bdc:	68b9      	ldr	r1, [r7, #8]
 8003bde:	68f8      	ldr	r0, [r7, #12]
 8003be0:	f000 f9f4 	bl	8003fcc <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003be8:	223f      	movs	r2, #63	; 0x3f
 8003bea:	409a      	lsls	r2, r3
 8003bec:	693b      	ldr	r3, [r7, #16]
 8003bee:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	681a      	ldr	r2, [r3, #0]
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	f042 0216 	orr.w	r2, r2, #22
 8003bfe:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d007      	beq.n	8003c18 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	681a      	ldr	r2, [r3, #0]
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f042 0208 	orr.w	r2, r2, #8
 8003c16:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	681a      	ldr	r2, [r3, #0]
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f042 0201 	orr.w	r2, r2, #1
 8003c26:	601a      	str	r2, [r3, #0]
 8003c28:	e005      	b.n	8003c36 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	2200      	movs	r2, #0
 8003c2e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003c32:	2302      	movs	r3, #2
 8003c34:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003c36:	7dfb      	ldrb	r3, [r7, #23]
}
 8003c38:	4618      	mov	r0, r3
 8003c3a:	3718      	adds	r7, #24
 8003c3c:	46bd      	mov	sp, r7
 8003c3e:	bd80      	pop	{r7, pc}

08003c40 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003c40:	b480      	push	{r7}
 8003c42:	b083      	sub	sp, #12
 8003c44:	af00      	add	r7, sp, #0
 8003c46:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003c4e:	b2db      	uxtb	r3, r3
 8003c50:	2b02      	cmp	r3, #2
 8003c52:	d004      	beq.n	8003c5e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	2280      	movs	r2, #128	; 0x80
 8003c58:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003c5a:	2301      	movs	r3, #1
 8003c5c:	e00c      	b.n	8003c78 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	2205      	movs	r2, #5
 8003c62:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	681a      	ldr	r2, [r3, #0]
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f022 0201 	bic.w	r2, r2, #1
 8003c74:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003c76:	2300      	movs	r3, #0
}
 8003c78:	4618      	mov	r0, r3
 8003c7a:	370c      	adds	r7, #12
 8003c7c:	46bd      	mov	sp, r7
 8003c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c82:	4770      	bx	lr

08003c84 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003c84:	b580      	push	{r7, lr}
 8003c86:	b086      	sub	sp, #24
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003c8c:	2300      	movs	r3, #0
 8003c8e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003c90:	4b92      	ldr	r3, [pc, #584]	; (8003edc <HAL_DMA_IRQHandler+0x258>)
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	4a92      	ldr	r2, [pc, #584]	; (8003ee0 <HAL_DMA_IRQHandler+0x25c>)
 8003c96:	fba2 2303 	umull	r2, r3, r2, r3
 8003c9a:	0a9b      	lsrs	r3, r3, #10
 8003c9c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ca2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003ca4:	693b      	ldr	r3, [r7, #16]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003cae:	2208      	movs	r2, #8
 8003cb0:	409a      	lsls	r2, r3
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	4013      	ands	r3, r2
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d01a      	beq.n	8003cf0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	f003 0304 	and.w	r3, r3, #4
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d013      	beq.n	8003cf0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	681a      	ldr	r2, [r3, #0]
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	f022 0204 	bic.w	r2, r2, #4
 8003cd6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003cdc:	2208      	movs	r2, #8
 8003cde:	409a      	lsls	r2, r3
 8003ce0:	693b      	ldr	r3, [r7, #16]
 8003ce2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ce8:	f043 0201 	orr.w	r2, r3, #1
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003cf4:	2201      	movs	r2, #1
 8003cf6:	409a      	lsls	r2, r3
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	4013      	ands	r3, r2
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d012      	beq.n	8003d26 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	695b      	ldr	r3, [r3, #20]
 8003d06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d00b      	beq.n	8003d26 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d12:	2201      	movs	r2, #1
 8003d14:	409a      	lsls	r2, r3
 8003d16:	693b      	ldr	r3, [r7, #16]
 8003d18:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d1e:	f043 0202 	orr.w	r2, r3, #2
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d2a:	2204      	movs	r2, #4
 8003d2c:	409a      	lsls	r2, r3
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	4013      	ands	r3, r2
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d012      	beq.n	8003d5c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	f003 0302 	and.w	r3, r3, #2
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d00b      	beq.n	8003d5c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d48:	2204      	movs	r2, #4
 8003d4a:	409a      	lsls	r2, r3
 8003d4c:	693b      	ldr	r3, [r7, #16]
 8003d4e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d54:	f043 0204 	orr.w	r2, r3, #4
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d60:	2210      	movs	r2, #16
 8003d62:	409a      	lsls	r2, r3
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	4013      	ands	r3, r2
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d043      	beq.n	8003df4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	f003 0308 	and.w	r3, r3, #8
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d03c      	beq.n	8003df4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d7e:	2210      	movs	r2, #16
 8003d80:	409a      	lsls	r2, r3
 8003d82:	693b      	ldr	r3, [r7, #16]
 8003d84:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d018      	beq.n	8003dc6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d108      	bne.n	8003db4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d024      	beq.n	8003df4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dae:	6878      	ldr	r0, [r7, #4]
 8003db0:	4798      	blx	r3
 8003db2:	e01f      	b.n	8003df4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d01b      	beq.n	8003df4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003dc0:	6878      	ldr	r0, [r7, #4]
 8003dc2:	4798      	blx	r3
 8003dc4:	e016      	b.n	8003df4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d107      	bne.n	8003de4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	681a      	ldr	r2, [r3, #0]
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f022 0208 	bic.w	r2, r2, #8
 8003de2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d003      	beq.n	8003df4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003df0:	6878      	ldr	r0, [r7, #4]
 8003df2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003df8:	2220      	movs	r2, #32
 8003dfa:	409a      	lsls	r2, r3
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	4013      	ands	r3, r2
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	f000 808e 	beq.w	8003f22 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	f003 0310 	and.w	r3, r3, #16
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	f000 8086 	beq.w	8003f22 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e1a:	2220      	movs	r2, #32
 8003e1c:	409a      	lsls	r2, r3
 8003e1e:	693b      	ldr	r3, [r7, #16]
 8003e20:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003e28:	b2db      	uxtb	r3, r3
 8003e2a:	2b05      	cmp	r3, #5
 8003e2c:	d136      	bne.n	8003e9c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	681a      	ldr	r2, [r3, #0]
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	f022 0216 	bic.w	r2, r2, #22
 8003e3c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	695a      	ldr	r2, [r3, #20]
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003e4c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d103      	bne.n	8003e5e <HAL_DMA_IRQHandler+0x1da>
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d007      	beq.n	8003e6e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	681a      	ldr	r2, [r3, #0]
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	f022 0208 	bic.w	r2, r2, #8
 8003e6c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e72:	223f      	movs	r2, #63	; 0x3f
 8003e74:	409a      	lsls	r2, r3
 8003e76:	693b      	ldr	r3, [r7, #16]
 8003e78:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	2201      	movs	r2, #1
 8003e7e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	2200      	movs	r2, #0
 8003e86:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d07d      	beq.n	8003f8e <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e96:	6878      	ldr	r0, [r7, #4]
 8003e98:	4798      	blx	r3
        }
        return;
 8003e9a:	e078      	b.n	8003f8e <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d01c      	beq.n	8003ee4 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d108      	bne.n	8003eca <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d030      	beq.n	8003f22 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ec4:	6878      	ldr	r0, [r7, #4]
 8003ec6:	4798      	blx	r3
 8003ec8:	e02b      	b.n	8003f22 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d027      	beq.n	8003f22 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ed6:	6878      	ldr	r0, [r7, #4]
 8003ed8:	4798      	blx	r3
 8003eda:	e022      	b.n	8003f22 <HAL_DMA_IRQHandler+0x29e>
 8003edc:	20000018 	.word	0x20000018
 8003ee0:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d10f      	bne.n	8003f12 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	681a      	ldr	r2, [r3, #0]
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	f022 0210 	bic.w	r2, r2, #16
 8003f00:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	2201      	movs	r2, #1
 8003f06:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	2200      	movs	r2, #0
 8003f0e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d003      	beq.n	8003f22 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f1e:	6878      	ldr	r0, [r7, #4]
 8003f20:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d032      	beq.n	8003f90 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f2e:	f003 0301 	and.w	r3, r3, #1
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d022      	beq.n	8003f7c <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	2205      	movs	r2, #5
 8003f3a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	681a      	ldr	r2, [r3, #0]
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	f022 0201 	bic.w	r2, r2, #1
 8003f4c:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003f4e:	68bb      	ldr	r3, [r7, #8]
 8003f50:	3301      	adds	r3, #1
 8003f52:	60bb      	str	r3, [r7, #8]
 8003f54:	697a      	ldr	r2, [r7, #20]
 8003f56:	429a      	cmp	r2, r3
 8003f58:	d307      	bcc.n	8003f6a <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f003 0301 	and.w	r3, r3, #1
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d1f2      	bne.n	8003f4e <HAL_DMA_IRQHandler+0x2ca>
 8003f68:	e000      	b.n	8003f6c <HAL_DMA_IRQHandler+0x2e8>
          break;
 8003f6a:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	2201      	movs	r2, #1
 8003f70:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	2200      	movs	r2, #0
 8003f78:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d005      	beq.n	8003f90 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f88:	6878      	ldr	r0, [r7, #4]
 8003f8a:	4798      	blx	r3
 8003f8c:	e000      	b.n	8003f90 <HAL_DMA_IRQHandler+0x30c>
        return;
 8003f8e:	bf00      	nop
    }
  }
}
 8003f90:	3718      	adds	r7, #24
 8003f92:	46bd      	mov	sp, r7
 8003f94:	bd80      	pop	{r7, pc}
 8003f96:	bf00      	nop

08003f98 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8003f98:	b480      	push	{r7}
 8003f9a:	b083      	sub	sp, #12
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003fa6:	b2db      	uxtb	r3, r3
}
 8003fa8:	4618      	mov	r0, r3
 8003faa:	370c      	adds	r7, #12
 8003fac:	46bd      	mov	sp, r7
 8003fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb2:	4770      	bx	lr

08003fb4 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8003fb4:	b480      	push	{r7}
 8003fb6:	b083      	sub	sp, #12
 8003fb8:	af00      	add	r7, sp, #0
 8003fba:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8003fc0:	4618      	mov	r0, r3
 8003fc2:	370c      	adds	r7, #12
 8003fc4:	46bd      	mov	sp, r7
 8003fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fca:	4770      	bx	lr

08003fcc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003fcc:	b480      	push	{r7}
 8003fce:	b085      	sub	sp, #20
 8003fd0:	af00      	add	r7, sp, #0
 8003fd2:	60f8      	str	r0, [r7, #12]
 8003fd4:	60b9      	str	r1, [r7, #8]
 8003fd6:	607a      	str	r2, [r7, #4]
 8003fd8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	681a      	ldr	r2, [r3, #0]
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003fe8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	683a      	ldr	r2, [r7, #0]
 8003ff0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	689b      	ldr	r3, [r3, #8]
 8003ff6:	2b40      	cmp	r3, #64	; 0x40
 8003ff8:	d108      	bne.n	800400c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	687a      	ldr	r2, [r7, #4]
 8004000:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	68ba      	ldr	r2, [r7, #8]
 8004008:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800400a:	e007      	b.n	800401c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	68ba      	ldr	r2, [r7, #8]
 8004012:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	687a      	ldr	r2, [r7, #4]
 800401a:	60da      	str	r2, [r3, #12]
}
 800401c:	bf00      	nop
 800401e:	3714      	adds	r7, #20
 8004020:	46bd      	mov	sp, r7
 8004022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004026:	4770      	bx	lr

08004028 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004028:	b480      	push	{r7}
 800402a:	b085      	sub	sp, #20
 800402c:	af00      	add	r7, sp, #0
 800402e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	b2db      	uxtb	r3, r3
 8004036:	3b10      	subs	r3, #16
 8004038:	4a14      	ldr	r2, [pc, #80]	; (800408c <DMA_CalcBaseAndBitshift+0x64>)
 800403a:	fba2 2303 	umull	r2, r3, r2, r3
 800403e:	091b      	lsrs	r3, r3, #4
 8004040:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004042:	4a13      	ldr	r2, [pc, #76]	; (8004090 <DMA_CalcBaseAndBitshift+0x68>)
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	4413      	add	r3, r2
 8004048:	781b      	ldrb	r3, [r3, #0]
 800404a:	461a      	mov	r2, r3
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	2b03      	cmp	r3, #3
 8004054:	d909      	bls.n	800406a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800405e:	f023 0303 	bic.w	r3, r3, #3
 8004062:	1d1a      	adds	r2, r3, #4
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	659a      	str	r2, [r3, #88]	; 0x58
 8004068:	e007      	b.n	800407a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004072:	f023 0303 	bic.w	r3, r3, #3
 8004076:	687a      	ldr	r2, [r7, #4]
 8004078:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800407e:	4618      	mov	r0, r3
 8004080:	3714      	adds	r7, #20
 8004082:	46bd      	mov	sp, r7
 8004084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004088:	4770      	bx	lr
 800408a:	bf00      	nop
 800408c:	aaaaaaab 	.word	0xaaaaaaab
 8004090:	0800d134 	.word	0x0800d134

08004094 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004094:	b480      	push	{r7}
 8004096:	b085      	sub	sp, #20
 8004098:	af00      	add	r7, sp, #0
 800409a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800409c:	2300      	movs	r3, #0
 800409e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040a4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	699b      	ldr	r3, [r3, #24]
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d11f      	bne.n	80040ee <DMA_CheckFifoParam+0x5a>
 80040ae:	68bb      	ldr	r3, [r7, #8]
 80040b0:	2b03      	cmp	r3, #3
 80040b2:	d856      	bhi.n	8004162 <DMA_CheckFifoParam+0xce>
 80040b4:	a201      	add	r2, pc, #4	; (adr r2, 80040bc <DMA_CheckFifoParam+0x28>)
 80040b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040ba:	bf00      	nop
 80040bc:	080040cd 	.word	0x080040cd
 80040c0:	080040df 	.word	0x080040df
 80040c4:	080040cd 	.word	0x080040cd
 80040c8:	08004163 	.word	0x08004163
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040d0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d046      	beq.n	8004166 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80040d8:	2301      	movs	r3, #1
 80040da:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80040dc:	e043      	b.n	8004166 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040e2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80040e6:	d140      	bne.n	800416a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80040e8:	2301      	movs	r3, #1
 80040ea:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80040ec:	e03d      	b.n	800416a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	699b      	ldr	r3, [r3, #24]
 80040f2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80040f6:	d121      	bne.n	800413c <DMA_CheckFifoParam+0xa8>
 80040f8:	68bb      	ldr	r3, [r7, #8]
 80040fa:	2b03      	cmp	r3, #3
 80040fc:	d837      	bhi.n	800416e <DMA_CheckFifoParam+0xda>
 80040fe:	a201      	add	r2, pc, #4	; (adr r2, 8004104 <DMA_CheckFifoParam+0x70>)
 8004100:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004104:	08004115 	.word	0x08004115
 8004108:	0800411b 	.word	0x0800411b
 800410c:	08004115 	.word	0x08004115
 8004110:	0800412d 	.word	0x0800412d
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004114:	2301      	movs	r3, #1
 8004116:	73fb      	strb	r3, [r7, #15]
      break;
 8004118:	e030      	b.n	800417c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800411e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004122:	2b00      	cmp	r3, #0
 8004124:	d025      	beq.n	8004172 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004126:	2301      	movs	r3, #1
 8004128:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800412a:	e022      	b.n	8004172 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004130:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004134:	d11f      	bne.n	8004176 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004136:	2301      	movs	r3, #1
 8004138:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800413a:	e01c      	b.n	8004176 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800413c:	68bb      	ldr	r3, [r7, #8]
 800413e:	2b02      	cmp	r3, #2
 8004140:	d903      	bls.n	800414a <DMA_CheckFifoParam+0xb6>
 8004142:	68bb      	ldr	r3, [r7, #8]
 8004144:	2b03      	cmp	r3, #3
 8004146:	d003      	beq.n	8004150 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004148:	e018      	b.n	800417c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800414a:	2301      	movs	r3, #1
 800414c:	73fb      	strb	r3, [r7, #15]
      break;
 800414e:	e015      	b.n	800417c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004154:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004158:	2b00      	cmp	r3, #0
 800415a:	d00e      	beq.n	800417a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800415c:	2301      	movs	r3, #1
 800415e:	73fb      	strb	r3, [r7, #15]
      break;
 8004160:	e00b      	b.n	800417a <DMA_CheckFifoParam+0xe6>
      break;
 8004162:	bf00      	nop
 8004164:	e00a      	b.n	800417c <DMA_CheckFifoParam+0xe8>
      break;
 8004166:	bf00      	nop
 8004168:	e008      	b.n	800417c <DMA_CheckFifoParam+0xe8>
      break;
 800416a:	bf00      	nop
 800416c:	e006      	b.n	800417c <DMA_CheckFifoParam+0xe8>
      break;
 800416e:	bf00      	nop
 8004170:	e004      	b.n	800417c <DMA_CheckFifoParam+0xe8>
      break;
 8004172:	bf00      	nop
 8004174:	e002      	b.n	800417c <DMA_CheckFifoParam+0xe8>
      break;   
 8004176:	bf00      	nop
 8004178:	e000      	b.n	800417c <DMA_CheckFifoParam+0xe8>
      break;
 800417a:	bf00      	nop
    }
  } 
  
  return status; 
 800417c:	7bfb      	ldrb	r3, [r7, #15]
}
 800417e:	4618      	mov	r0, r3
 8004180:	3714      	adds	r7, #20
 8004182:	46bd      	mov	sp, r7
 8004184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004188:	4770      	bx	lr
 800418a:	bf00      	nop

0800418c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800418c:	b480      	push	{r7}
 800418e:	b089      	sub	sp, #36	; 0x24
 8004190:	af00      	add	r7, sp, #0
 8004192:	6078      	str	r0, [r7, #4]
 8004194:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004196:	2300      	movs	r3, #0
 8004198:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800419a:	2300      	movs	r3, #0
 800419c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800419e:	2300      	movs	r3, #0
 80041a0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80041a2:	2300      	movs	r3, #0
 80041a4:	61fb      	str	r3, [r7, #28]
 80041a6:	e16b      	b.n	8004480 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80041a8:	2201      	movs	r2, #1
 80041aa:	69fb      	ldr	r3, [r7, #28]
 80041ac:	fa02 f303 	lsl.w	r3, r2, r3
 80041b0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80041b2:	683b      	ldr	r3, [r7, #0]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	697a      	ldr	r2, [r7, #20]
 80041b8:	4013      	ands	r3, r2
 80041ba:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80041bc:	693a      	ldr	r2, [r7, #16]
 80041be:	697b      	ldr	r3, [r7, #20]
 80041c0:	429a      	cmp	r2, r3
 80041c2:	f040 815a 	bne.w	800447a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80041c6:	683b      	ldr	r3, [r7, #0]
 80041c8:	685b      	ldr	r3, [r3, #4]
 80041ca:	f003 0303 	and.w	r3, r3, #3
 80041ce:	2b01      	cmp	r3, #1
 80041d0:	d005      	beq.n	80041de <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80041d2:	683b      	ldr	r3, [r7, #0]
 80041d4:	685b      	ldr	r3, [r3, #4]
 80041d6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80041da:	2b02      	cmp	r3, #2
 80041dc:	d130      	bne.n	8004240 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	689b      	ldr	r3, [r3, #8]
 80041e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80041e4:	69fb      	ldr	r3, [r7, #28]
 80041e6:	005b      	lsls	r3, r3, #1
 80041e8:	2203      	movs	r2, #3
 80041ea:	fa02 f303 	lsl.w	r3, r2, r3
 80041ee:	43db      	mvns	r3, r3
 80041f0:	69ba      	ldr	r2, [r7, #24]
 80041f2:	4013      	ands	r3, r2
 80041f4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80041f6:	683b      	ldr	r3, [r7, #0]
 80041f8:	68da      	ldr	r2, [r3, #12]
 80041fa:	69fb      	ldr	r3, [r7, #28]
 80041fc:	005b      	lsls	r3, r3, #1
 80041fe:	fa02 f303 	lsl.w	r3, r2, r3
 8004202:	69ba      	ldr	r2, [r7, #24]
 8004204:	4313      	orrs	r3, r2
 8004206:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	69ba      	ldr	r2, [r7, #24]
 800420c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	685b      	ldr	r3, [r3, #4]
 8004212:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004214:	2201      	movs	r2, #1
 8004216:	69fb      	ldr	r3, [r7, #28]
 8004218:	fa02 f303 	lsl.w	r3, r2, r3
 800421c:	43db      	mvns	r3, r3
 800421e:	69ba      	ldr	r2, [r7, #24]
 8004220:	4013      	ands	r3, r2
 8004222:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004224:	683b      	ldr	r3, [r7, #0]
 8004226:	685b      	ldr	r3, [r3, #4]
 8004228:	091b      	lsrs	r3, r3, #4
 800422a:	f003 0201 	and.w	r2, r3, #1
 800422e:	69fb      	ldr	r3, [r7, #28]
 8004230:	fa02 f303 	lsl.w	r3, r2, r3
 8004234:	69ba      	ldr	r2, [r7, #24]
 8004236:	4313      	orrs	r3, r2
 8004238:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	69ba      	ldr	r2, [r7, #24]
 800423e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004240:	683b      	ldr	r3, [r7, #0]
 8004242:	685b      	ldr	r3, [r3, #4]
 8004244:	f003 0303 	and.w	r3, r3, #3
 8004248:	2b03      	cmp	r3, #3
 800424a:	d017      	beq.n	800427c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	68db      	ldr	r3, [r3, #12]
 8004250:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004252:	69fb      	ldr	r3, [r7, #28]
 8004254:	005b      	lsls	r3, r3, #1
 8004256:	2203      	movs	r2, #3
 8004258:	fa02 f303 	lsl.w	r3, r2, r3
 800425c:	43db      	mvns	r3, r3
 800425e:	69ba      	ldr	r2, [r7, #24]
 8004260:	4013      	ands	r3, r2
 8004262:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004264:	683b      	ldr	r3, [r7, #0]
 8004266:	689a      	ldr	r2, [r3, #8]
 8004268:	69fb      	ldr	r3, [r7, #28]
 800426a:	005b      	lsls	r3, r3, #1
 800426c:	fa02 f303 	lsl.w	r3, r2, r3
 8004270:	69ba      	ldr	r2, [r7, #24]
 8004272:	4313      	orrs	r3, r2
 8004274:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	69ba      	ldr	r2, [r7, #24]
 800427a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800427c:	683b      	ldr	r3, [r7, #0]
 800427e:	685b      	ldr	r3, [r3, #4]
 8004280:	f003 0303 	and.w	r3, r3, #3
 8004284:	2b02      	cmp	r3, #2
 8004286:	d123      	bne.n	80042d0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004288:	69fb      	ldr	r3, [r7, #28]
 800428a:	08da      	lsrs	r2, r3, #3
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	3208      	adds	r2, #8
 8004290:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004294:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004296:	69fb      	ldr	r3, [r7, #28]
 8004298:	f003 0307 	and.w	r3, r3, #7
 800429c:	009b      	lsls	r3, r3, #2
 800429e:	220f      	movs	r2, #15
 80042a0:	fa02 f303 	lsl.w	r3, r2, r3
 80042a4:	43db      	mvns	r3, r3
 80042a6:	69ba      	ldr	r2, [r7, #24]
 80042a8:	4013      	ands	r3, r2
 80042aa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80042ac:	683b      	ldr	r3, [r7, #0]
 80042ae:	691a      	ldr	r2, [r3, #16]
 80042b0:	69fb      	ldr	r3, [r7, #28]
 80042b2:	f003 0307 	and.w	r3, r3, #7
 80042b6:	009b      	lsls	r3, r3, #2
 80042b8:	fa02 f303 	lsl.w	r3, r2, r3
 80042bc:	69ba      	ldr	r2, [r7, #24]
 80042be:	4313      	orrs	r3, r2
 80042c0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80042c2:	69fb      	ldr	r3, [r7, #28]
 80042c4:	08da      	lsrs	r2, r3, #3
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	3208      	adds	r2, #8
 80042ca:	69b9      	ldr	r1, [r7, #24]
 80042cc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80042d6:	69fb      	ldr	r3, [r7, #28]
 80042d8:	005b      	lsls	r3, r3, #1
 80042da:	2203      	movs	r2, #3
 80042dc:	fa02 f303 	lsl.w	r3, r2, r3
 80042e0:	43db      	mvns	r3, r3
 80042e2:	69ba      	ldr	r2, [r7, #24]
 80042e4:	4013      	ands	r3, r2
 80042e6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80042e8:	683b      	ldr	r3, [r7, #0]
 80042ea:	685b      	ldr	r3, [r3, #4]
 80042ec:	f003 0203 	and.w	r2, r3, #3
 80042f0:	69fb      	ldr	r3, [r7, #28]
 80042f2:	005b      	lsls	r3, r3, #1
 80042f4:	fa02 f303 	lsl.w	r3, r2, r3
 80042f8:	69ba      	ldr	r2, [r7, #24]
 80042fa:	4313      	orrs	r3, r2
 80042fc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	69ba      	ldr	r2, [r7, #24]
 8004302:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004304:	683b      	ldr	r3, [r7, #0]
 8004306:	685b      	ldr	r3, [r3, #4]
 8004308:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800430c:	2b00      	cmp	r3, #0
 800430e:	f000 80b4 	beq.w	800447a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004312:	2300      	movs	r3, #0
 8004314:	60fb      	str	r3, [r7, #12]
 8004316:	4b60      	ldr	r3, [pc, #384]	; (8004498 <HAL_GPIO_Init+0x30c>)
 8004318:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800431a:	4a5f      	ldr	r2, [pc, #380]	; (8004498 <HAL_GPIO_Init+0x30c>)
 800431c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004320:	6453      	str	r3, [r2, #68]	; 0x44
 8004322:	4b5d      	ldr	r3, [pc, #372]	; (8004498 <HAL_GPIO_Init+0x30c>)
 8004324:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004326:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800432a:	60fb      	str	r3, [r7, #12]
 800432c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800432e:	4a5b      	ldr	r2, [pc, #364]	; (800449c <HAL_GPIO_Init+0x310>)
 8004330:	69fb      	ldr	r3, [r7, #28]
 8004332:	089b      	lsrs	r3, r3, #2
 8004334:	3302      	adds	r3, #2
 8004336:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800433a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800433c:	69fb      	ldr	r3, [r7, #28]
 800433e:	f003 0303 	and.w	r3, r3, #3
 8004342:	009b      	lsls	r3, r3, #2
 8004344:	220f      	movs	r2, #15
 8004346:	fa02 f303 	lsl.w	r3, r2, r3
 800434a:	43db      	mvns	r3, r3
 800434c:	69ba      	ldr	r2, [r7, #24]
 800434e:	4013      	ands	r3, r2
 8004350:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	4a52      	ldr	r2, [pc, #328]	; (80044a0 <HAL_GPIO_Init+0x314>)
 8004356:	4293      	cmp	r3, r2
 8004358:	d02b      	beq.n	80043b2 <HAL_GPIO_Init+0x226>
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	4a51      	ldr	r2, [pc, #324]	; (80044a4 <HAL_GPIO_Init+0x318>)
 800435e:	4293      	cmp	r3, r2
 8004360:	d025      	beq.n	80043ae <HAL_GPIO_Init+0x222>
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	4a50      	ldr	r2, [pc, #320]	; (80044a8 <HAL_GPIO_Init+0x31c>)
 8004366:	4293      	cmp	r3, r2
 8004368:	d01f      	beq.n	80043aa <HAL_GPIO_Init+0x21e>
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	4a4f      	ldr	r2, [pc, #316]	; (80044ac <HAL_GPIO_Init+0x320>)
 800436e:	4293      	cmp	r3, r2
 8004370:	d019      	beq.n	80043a6 <HAL_GPIO_Init+0x21a>
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	4a4e      	ldr	r2, [pc, #312]	; (80044b0 <HAL_GPIO_Init+0x324>)
 8004376:	4293      	cmp	r3, r2
 8004378:	d013      	beq.n	80043a2 <HAL_GPIO_Init+0x216>
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	4a4d      	ldr	r2, [pc, #308]	; (80044b4 <HAL_GPIO_Init+0x328>)
 800437e:	4293      	cmp	r3, r2
 8004380:	d00d      	beq.n	800439e <HAL_GPIO_Init+0x212>
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	4a4c      	ldr	r2, [pc, #304]	; (80044b8 <HAL_GPIO_Init+0x32c>)
 8004386:	4293      	cmp	r3, r2
 8004388:	d007      	beq.n	800439a <HAL_GPIO_Init+0x20e>
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	4a4b      	ldr	r2, [pc, #300]	; (80044bc <HAL_GPIO_Init+0x330>)
 800438e:	4293      	cmp	r3, r2
 8004390:	d101      	bne.n	8004396 <HAL_GPIO_Init+0x20a>
 8004392:	2307      	movs	r3, #7
 8004394:	e00e      	b.n	80043b4 <HAL_GPIO_Init+0x228>
 8004396:	2308      	movs	r3, #8
 8004398:	e00c      	b.n	80043b4 <HAL_GPIO_Init+0x228>
 800439a:	2306      	movs	r3, #6
 800439c:	e00a      	b.n	80043b4 <HAL_GPIO_Init+0x228>
 800439e:	2305      	movs	r3, #5
 80043a0:	e008      	b.n	80043b4 <HAL_GPIO_Init+0x228>
 80043a2:	2304      	movs	r3, #4
 80043a4:	e006      	b.n	80043b4 <HAL_GPIO_Init+0x228>
 80043a6:	2303      	movs	r3, #3
 80043a8:	e004      	b.n	80043b4 <HAL_GPIO_Init+0x228>
 80043aa:	2302      	movs	r3, #2
 80043ac:	e002      	b.n	80043b4 <HAL_GPIO_Init+0x228>
 80043ae:	2301      	movs	r3, #1
 80043b0:	e000      	b.n	80043b4 <HAL_GPIO_Init+0x228>
 80043b2:	2300      	movs	r3, #0
 80043b4:	69fa      	ldr	r2, [r7, #28]
 80043b6:	f002 0203 	and.w	r2, r2, #3
 80043ba:	0092      	lsls	r2, r2, #2
 80043bc:	4093      	lsls	r3, r2
 80043be:	69ba      	ldr	r2, [r7, #24]
 80043c0:	4313      	orrs	r3, r2
 80043c2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80043c4:	4935      	ldr	r1, [pc, #212]	; (800449c <HAL_GPIO_Init+0x310>)
 80043c6:	69fb      	ldr	r3, [r7, #28]
 80043c8:	089b      	lsrs	r3, r3, #2
 80043ca:	3302      	adds	r3, #2
 80043cc:	69ba      	ldr	r2, [r7, #24]
 80043ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80043d2:	4b3b      	ldr	r3, [pc, #236]	; (80044c0 <HAL_GPIO_Init+0x334>)
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80043d8:	693b      	ldr	r3, [r7, #16]
 80043da:	43db      	mvns	r3, r3
 80043dc:	69ba      	ldr	r2, [r7, #24]
 80043de:	4013      	ands	r3, r2
 80043e0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80043e2:	683b      	ldr	r3, [r7, #0]
 80043e4:	685b      	ldr	r3, [r3, #4]
 80043e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d003      	beq.n	80043f6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80043ee:	69ba      	ldr	r2, [r7, #24]
 80043f0:	693b      	ldr	r3, [r7, #16]
 80043f2:	4313      	orrs	r3, r2
 80043f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80043f6:	4a32      	ldr	r2, [pc, #200]	; (80044c0 <HAL_GPIO_Init+0x334>)
 80043f8:	69bb      	ldr	r3, [r7, #24]
 80043fa:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80043fc:	4b30      	ldr	r3, [pc, #192]	; (80044c0 <HAL_GPIO_Init+0x334>)
 80043fe:	685b      	ldr	r3, [r3, #4]
 8004400:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004402:	693b      	ldr	r3, [r7, #16]
 8004404:	43db      	mvns	r3, r3
 8004406:	69ba      	ldr	r2, [r7, #24]
 8004408:	4013      	ands	r3, r2
 800440a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800440c:	683b      	ldr	r3, [r7, #0]
 800440e:	685b      	ldr	r3, [r3, #4]
 8004410:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004414:	2b00      	cmp	r3, #0
 8004416:	d003      	beq.n	8004420 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8004418:	69ba      	ldr	r2, [r7, #24]
 800441a:	693b      	ldr	r3, [r7, #16]
 800441c:	4313      	orrs	r3, r2
 800441e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004420:	4a27      	ldr	r2, [pc, #156]	; (80044c0 <HAL_GPIO_Init+0x334>)
 8004422:	69bb      	ldr	r3, [r7, #24]
 8004424:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004426:	4b26      	ldr	r3, [pc, #152]	; (80044c0 <HAL_GPIO_Init+0x334>)
 8004428:	689b      	ldr	r3, [r3, #8]
 800442a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800442c:	693b      	ldr	r3, [r7, #16]
 800442e:	43db      	mvns	r3, r3
 8004430:	69ba      	ldr	r2, [r7, #24]
 8004432:	4013      	ands	r3, r2
 8004434:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004436:	683b      	ldr	r3, [r7, #0]
 8004438:	685b      	ldr	r3, [r3, #4]
 800443a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800443e:	2b00      	cmp	r3, #0
 8004440:	d003      	beq.n	800444a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8004442:	69ba      	ldr	r2, [r7, #24]
 8004444:	693b      	ldr	r3, [r7, #16]
 8004446:	4313      	orrs	r3, r2
 8004448:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800444a:	4a1d      	ldr	r2, [pc, #116]	; (80044c0 <HAL_GPIO_Init+0x334>)
 800444c:	69bb      	ldr	r3, [r7, #24]
 800444e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004450:	4b1b      	ldr	r3, [pc, #108]	; (80044c0 <HAL_GPIO_Init+0x334>)
 8004452:	68db      	ldr	r3, [r3, #12]
 8004454:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004456:	693b      	ldr	r3, [r7, #16]
 8004458:	43db      	mvns	r3, r3
 800445a:	69ba      	ldr	r2, [r7, #24]
 800445c:	4013      	ands	r3, r2
 800445e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004460:	683b      	ldr	r3, [r7, #0]
 8004462:	685b      	ldr	r3, [r3, #4]
 8004464:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004468:	2b00      	cmp	r3, #0
 800446a:	d003      	beq.n	8004474 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800446c:	69ba      	ldr	r2, [r7, #24]
 800446e:	693b      	ldr	r3, [r7, #16]
 8004470:	4313      	orrs	r3, r2
 8004472:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004474:	4a12      	ldr	r2, [pc, #72]	; (80044c0 <HAL_GPIO_Init+0x334>)
 8004476:	69bb      	ldr	r3, [r7, #24]
 8004478:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800447a:	69fb      	ldr	r3, [r7, #28]
 800447c:	3301      	adds	r3, #1
 800447e:	61fb      	str	r3, [r7, #28]
 8004480:	69fb      	ldr	r3, [r7, #28]
 8004482:	2b0f      	cmp	r3, #15
 8004484:	f67f ae90 	bls.w	80041a8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004488:	bf00      	nop
 800448a:	bf00      	nop
 800448c:	3724      	adds	r7, #36	; 0x24
 800448e:	46bd      	mov	sp, r7
 8004490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004494:	4770      	bx	lr
 8004496:	bf00      	nop
 8004498:	40023800 	.word	0x40023800
 800449c:	40013800 	.word	0x40013800
 80044a0:	40020000 	.word	0x40020000
 80044a4:	40020400 	.word	0x40020400
 80044a8:	40020800 	.word	0x40020800
 80044ac:	40020c00 	.word	0x40020c00
 80044b0:	40021000 	.word	0x40021000
 80044b4:	40021400 	.word	0x40021400
 80044b8:	40021800 	.word	0x40021800
 80044bc:	40021c00 	.word	0x40021c00
 80044c0:	40013c00 	.word	0x40013c00

080044c4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80044c4:	b480      	push	{r7}
 80044c6:	b083      	sub	sp, #12
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	6078      	str	r0, [r7, #4]
 80044cc:	460b      	mov	r3, r1
 80044ce:	807b      	strh	r3, [r7, #2]
 80044d0:	4613      	mov	r3, r2
 80044d2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80044d4:	787b      	ldrb	r3, [r7, #1]
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d003      	beq.n	80044e2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80044da:	887a      	ldrh	r2, [r7, #2]
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80044e0:	e003      	b.n	80044ea <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80044e2:	887b      	ldrh	r3, [r7, #2]
 80044e4:	041a      	lsls	r2, r3, #16
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	619a      	str	r2, [r3, #24]
}
 80044ea:	bf00      	nop
 80044ec:	370c      	adds	r7, #12
 80044ee:	46bd      	mov	sp, r7
 80044f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f4:	4770      	bx	lr
	...

080044f8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80044f8:	b580      	push	{r7, lr}
 80044fa:	b082      	sub	sp, #8
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	4603      	mov	r3, r0
 8004500:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8004502:	4b08      	ldr	r3, [pc, #32]	; (8004524 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004504:	695a      	ldr	r2, [r3, #20]
 8004506:	88fb      	ldrh	r3, [r7, #6]
 8004508:	4013      	ands	r3, r2
 800450a:	2b00      	cmp	r3, #0
 800450c:	d006      	beq.n	800451c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800450e:	4a05      	ldr	r2, [pc, #20]	; (8004524 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004510:	88fb      	ldrh	r3, [r7, #6]
 8004512:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004514:	88fb      	ldrh	r3, [r7, #6]
 8004516:	4618      	mov	r0, r3
 8004518:	f7fd fab4 	bl	8001a84 <HAL_GPIO_EXTI_Callback>
  }
}
 800451c:	bf00      	nop
 800451e:	3708      	adds	r7, #8
 8004520:	46bd      	mov	sp, r7
 8004522:	bd80      	pop	{r7, pc}
 8004524:	40013c00 	.word	0x40013c00

08004528 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004528:	b580      	push	{r7, lr}
 800452a:	b084      	sub	sp, #16
 800452c:	af00      	add	r7, sp, #0
 800452e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	2b00      	cmp	r3, #0
 8004534:	d101      	bne.n	800453a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004536:	2301      	movs	r3, #1
 8004538:	e12b      	b.n	8004792 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004540:	b2db      	uxtb	r3, r3
 8004542:	2b00      	cmp	r3, #0
 8004544:	d106      	bne.n	8004554 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	2200      	movs	r2, #0
 800454a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800454e:	6878      	ldr	r0, [r7, #4]
 8004550:	f7fe f89c 	bl	800268c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	2224      	movs	r2, #36	; 0x24
 8004558:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	681a      	ldr	r2, [r3, #0]
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	f022 0201 	bic.w	r2, r2, #1
 800456a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	681a      	ldr	r2, [r3, #0]
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800457a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	681a      	ldr	r2, [r3, #0]
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800458a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800458c:	f003 fc8c 	bl	8007ea8 <HAL_RCC_GetPCLK1Freq>
 8004590:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	685b      	ldr	r3, [r3, #4]
 8004596:	4a81      	ldr	r2, [pc, #516]	; (800479c <HAL_I2C_Init+0x274>)
 8004598:	4293      	cmp	r3, r2
 800459a:	d807      	bhi.n	80045ac <HAL_I2C_Init+0x84>
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	4a80      	ldr	r2, [pc, #512]	; (80047a0 <HAL_I2C_Init+0x278>)
 80045a0:	4293      	cmp	r3, r2
 80045a2:	bf94      	ite	ls
 80045a4:	2301      	movls	r3, #1
 80045a6:	2300      	movhi	r3, #0
 80045a8:	b2db      	uxtb	r3, r3
 80045aa:	e006      	b.n	80045ba <HAL_I2C_Init+0x92>
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	4a7d      	ldr	r2, [pc, #500]	; (80047a4 <HAL_I2C_Init+0x27c>)
 80045b0:	4293      	cmp	r3, r2
 80045b2:	bf94      	ite	ls
 80045b4:	2301      	movls	r3, #1
 80045b6:	2300      	movhi	r3, #0
 80045b8:	b2db      	uxtb	r3, r3
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d001      	beq.n	80045c2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80045be:	2301      	movs	r3, #1
 80045c0:	e0e7      	b.n	8004792 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	4a78      	ldr	r2, [pc, #480]	; (80047a8 <HAL_I2C_Init+0x280>)
 80045c6:	fba2 2303 	umull	r2, r3, r2, r3
 80045ca:	0c9b      	lsrs	r3, r3, #18
 80045cc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	685b      	ldr	r3, [r3, #4]
 80045d4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	68ba      	ldr	r2, [r7, #8]
 80045de:	430a      	orrs	r2, r1
 80045e0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	6a1b      	ldr	r3, [r3, #32]
 80045e8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	685b      	ldr	r3, [r3, #4]
 80045f0:	4a6a      	ldr	r2, [pc, #424]	; (800479c <HAL_I2C_Init+0x274>)
 80045f2:	4293      	cmp	r3, r2
 80045f4:	d802      	bhi.n	80045fc <HAL_I2C_Init+0xd4>
 80045f6:	68bb      	ldr	r3, [r7, #8]
 80045f8:	3301      	adds	r3, #1
 80045fa:	e009      	b.n	8004610 <HAL_I2C_Init+0xe8>
 80045fc:	68bb      	ldr	r3, [r7, #8]
 80045fe:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004602:	fb02 f303 	mul.w	r3, r2, r3
 8004606:	4a69      	ldr	r2, [pc, #420]	; (80047ac <HAL_I2C_Init+0x284>)
 8004608:	fba2 2303 	umull	r2, r3, r2, r3
 800460c:	099b      	lsrs	r3, r3, #6
 800460e:	3301      	adds	r3, #1
 8004610:	687a      	ldr	r2, [r7, #4]
 8004612:	6812      	ldr	r2, [r2, #0]
 8004614:	430b      	orrs	r3, r1
 8004616:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	69db      	ldr	r3, [r3, #28]
 800461e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004622:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	685b      	ldr	r3, [r3, #4]
 800462a:	495c      	ldr	r1, [pc, #368]	; (800479c <HAL_I2C_Init+0x274>)
 800462c:	428b      	cmp	r3, r1
 800462e:	d819      	bhi.n	8004664 <HAL_I2C_Init+0x13c>
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	1e59      	subs	r1, r3, #1
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	685b      	ldr	r3, [r3, #4]
 8004638:	005b      	lsls	r3, r3, #1
 800463a:	fbb1 f3f3 	udiv	r3, r1, r3
 800463e:	1c59      	adds	r1, r3, #1
 8004640:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004644:	400b      	ands	r3, r1
 8004646:	2b00      	cmp	r3, #0
 8004648:	d00a      	beq.n	8004660 <HAL_I2C_Init+0x138>
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	1e59      	subs	r1, r3, #1
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	685b      	ldr	r3, [r3, #4]
 8004652:	005b      	lsls	r3, r3, #1
 8004654:	fbb1 f3f3 	udiv	r3, r1, r3
 8004658:	3301      	adds	r3, #1
 800465a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800465e:	e051      	b.n	8004704 <HAL_I2C_Init+0x1dc>
 8004660:	2304      	movs	r3, #4
 8004662:	e04f      	b.n	8004704 <HAL_I2C_Init+0x1dc>
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	689b      	ldr	r3, [r3, #8]
 8004668:	2b00      	cmp	r3, #0
 800466a:	d111      	bne.n	8004690 <HAL_I2C_Init+0x168>
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	1e58      	subs	r0, r3, #1
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	6859      	ldr	r1, [r3, #4]
 8004674:	460b      	mov	r3, r1
 8004676:	005b      	lsls	r3, r3, #1
 8004678:	440b      	add	r3, r1
 800467a:	fbb0 f3f3 	udiv	r3, r0, r3
 800467e:	3301      	adds	r3, #1
 8004680:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004684:	2b00      	cmp	r3, #0
 8004686:	bf0c      	ite	eq
 8004688:	2301      	moveq	r3, #1
 800468a:	2300      	movne	r3, #0
 800468c:	b2db      	uxtb	r3, r3
 800468e:	e012      	b.n	80046b6 <HAL_I2C_Init+0x18e>
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	1e58      	subs	r0, r3, #1
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	6859      	ldr	r1, [r3, #4]
 8004698:	460b      	mov	r3, r1
 800469a:	009b      	lsls	r3, r3, #2
 800469c:	440b      	add	r3, r1
 800469e:	0099      	lsls	r1, r3, #2
 80046a0:	440b      	add	r3, r1
 80046a2:	fbb0 f3f3 	udiv	r3, r0, r3
 80046a6:	3301      	adds	r3, #1
 80046a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	bf0c      	ite	eq
 80046b0:	2301      	moveq	r3, #1
 80046b2:	2300      	movne	r3, #0
 80046b4:	b2db      	uxtb	r3, r3
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d001      	beq.n	80046be <HAL_I2C_Init+0x196>
 80046ba:	2301      	movs	r3, #1
 80046bc:	e022      	b.n	8004704 <HAL_I2C_Init+0x1dc>
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	689b      	ldr	r3, [r3, #8]
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d10e      	bne.n	80046e4 <HAL_I2C_Init+0x1bc>
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	1e58      	subs	r0, r3, #1
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	6859      	ldr	r1, [r3, #4]
 80046ce:	460b      	mov	r3, r1
 80046d0:	005b      	lsls	r3, r3, #1
 80046d2:	440b      	add	r3, r1
 80046d4:	fbb0 f3f3 	udiv	r3, r0, r3
 80046d8:	3301      	adds	r3, #1
 80046da:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80046de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80046e2:	e00f      	b.n	8004704 <HAL_I2C_Init+0x1dc>
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	1e58      	subs	r0, r3, #1
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	6859      	ldr	r1, [r3, #4]
 80046ec:	460b      	mov	r3, r1
 80046ee:	009b      	lsls	r3, r3, #2
 80046f0:	440b      	add	r3, r1
 80046f2:	0099      	lsls	r1, r3, #2
 80046f4:	440b      	add	r3, r1
 80046f6:	fbb0 f3f3 	udiv	r3, r0, r3
 80046fa:	3301      	adds	r3, #1
 80046fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004700:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004704:	6879      	ldr	r1, [r7, #4]
 8004706:	6809      	ldr	r1, [r1, #0]
 8004708:	4313      	orrs	r3, r2
 800470a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	69da      	ldr	r2, [r3, #28]
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	6a1b      	ldr	r3, [r3, #32]
 800471e:	431a      	orrs	r2, r3
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	430a      	orrs	r2, r1
 8004726:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	689b      	ldr	r3, [r3, #8]
 800472e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004732:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004736:	687a      	ldr	r2, [r7, #4]
 8004738:	6911      	ldr	r1, [r2, #16]
 800473a:	687a      	ldr	r2, [r7, #4]
 800473c:	68d2      	ldr	r2, [r2, #12]
 800473e:	4311      	orrs	r1, r2
 8004740:	687a      	ldr	r2, [r7, #4]
 8004742:	6812      	ldr	r2, [r2, #0]
 8004744:	430b      	orrs	r3, r1
 8004746:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	68db      	ldr	r3, [r3, #12]
 800474e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	695a      	ldr	r2, [r3, #20]
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	699b      	ldr	r3, [r3, #24]
 800475a:	431a      	orrs	r2, r3
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	430a      	orrs	r2, r1
 8004762:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	681a      	ldr	r2, [r3, #0]
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	f042 0201 	orr.w	r2, r2, #1
 8004772:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	2200      	movs	r2, #0
 8004778:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	2220      	movs	r2, #32
 800477e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	2200      	movs	r2, #0
 8004786:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	2200      	movs	r2, #0
 800478c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004790:	2300      	movs	r3, #0
}
 8004792:	4618      	mov	r0, r3
 8004794:	3710      	adds	r7, #16
 8004796:	46bd      	mov	sp, r7
 8004798:	bd80      	pop	{r7, pc}
 800479a:	bf00      	nop
 800479c:	000186a0 	.word	0x000186a0
 80047a0:	001e847f 	.word	0x001e847f
 80047a4:	003d08ff 	.word	0x003d08ff
 80047a8:	431bde83 	.word	0x431bde83
 80047ac:	10624dd3 	.word	0x10624dd3

080047b0 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80047b0:	b580      	push	{r7, lr}
 80047b2:	b088      	sub	sp, #32
 80047b4:	af02      	add	r7, sp, #8
 80047b6:	60f8      	str	r0, [r7, #12]
 80047b8:	607a      	str	r2, [r7, #4]
 80047ba:	461a      	mov	r2, r3
 80047bc:	460b      	mov	r3, r1
 80047be:	817b      	strh	r3, [r7, #10]
 80047c0:	4613      	mov	r3, r2
 80047c2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80047c4:	f7fe faca 	bl	8002d5c <HAL_GetTick>
 80047c8:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047d0:	b2db      	uxtb	r3, r3
 80047d2:	2b20      	cmp	r3, #32
 80047d4:	f040 80e0 	bne.w	8004998 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80047d8:	697b      	ldr	r3, [r7, #20]
 80047da:	9300      	str	r3, [sp, #0]
 80047dc:	2319      	movs	r3, #25
 80047de:	2201      	movs	r2, #1
 80047e0:	4970      	ldr	r1, [pc, #448]	; (80049a4 <HAL_I2C_Master_Transmit+0x1f4>)
 80047e2:	68f8      	ldr	r0, [r7, #12]
 80047e4:	f002 fcbe 	bl	8007164 <I2C_WaitOnFlagUntilTimeout>
 80047e8:	4603      	mov	r3, r0
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d001      	beq.n	80047f2 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80047ee:	2302      	movs	r3, #2
 80047f0:	e0d3      	b.n	800499a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80047f8:	2b01      	cmp	r3, #1
 80047fa:	d101      	bne.n	8004800 <HAL_I2C_Master_Transmit+0x50>
 80047fc:	2302      	movs	r3, #2
 80047fe:	e0cc      	b.n	800499a <HAL_I2C_Master_Transmit+0x1ea>
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	2201      	movs	r2, #1
 8004804:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	f003 0301 	and.w	r3, r3, #1
 8004812:	2b01      	cmp	r3, #1
 8004814:	d007      	beq.n	8004826 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	681a      	ldr	r2, [r3, #0]
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	f042 0201 	orr.w	r2, r2, #1
 8004824:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	681a      	ldr	r2, [r3, #0]
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004834:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	2221      	movs	r2, #33	; 0x21
 800483a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	2210      	movs	r2, #16
 8004842:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	2200      	movs	r2, #0
 800484a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	687a      	ldr	r2, [r7, #4]
 8004850:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	893a      	ldrh	r2, [r7, #8]
 8004856:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800485c:	b29a      	uxth	r2, r3
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	4a50      	ldr	r2, [pc, #320]	; (80049a8 <HAL_I2C_Master_Transmit+0x1f8>)
 8004866:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004868:	8979      	ldrh	r1, [r7, #10]
 800486a:	697b      	ldr	r3, [r7, #20]
 800486c:	6a3a      	ldr	r2, [r7, #32]
 800486e:	68f8      	ldr	r0, [r7, #12]
 8004870:	f002 f8be 	bl	80069f0 <I2C_MasterRequestWrite>
 8004874:	4603      	mov	r3, r0
 8004876:	2b00      	cmp	r3, #0
 8004878:	d001      	beq.n	800487e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800487a:	2301      	movs	r3, #1
 800487c:	e08d      	b.n	800499a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800487e:	2300      	movs	r3, #0
 8004880:	613b      	str	r3, [r7, #16]
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	695b      	ldr	r3, [r3, #20]
 8004888:	613b      	str	r3, [r7, #16]
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	699b      	ldr	r3, [r3, #24]
 8004890:	613b      	str	r3, [r7, #16]
 8004892:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8004894:	e066      	b.n	8004964 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004896:	697a      	ldr	r2, [r7, #20]
 8004898:	6a39      	ldr	r1, [r7, #32]
 800489a:	68f8      	ldr	r0, [r7, #12]
 800489c:	f002 fd38 	bl	8007310 <I2C_WaitOnTXEFlagUntilTimeout>
 80048a0:	4603      	mov	r3, r0
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d00d      	beq.n	80048c2 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048aa:	2b04      	cmp	r3, #4
 80048ac:	d107      	bne.n	80048be <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	681a      	ldr	r2, [r3, #0]
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80048bc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80048be:	2301      	movs	r3, #1
 80048c0:	e06b      	b.n	800499a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048c6:	781a      	ldrb	r2, [r3, #0]
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048d2:	1c5a      	adds	r2, r3, #1
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048dc:	b29b      	uxth	r3, r3
 80048de:	3b01      	subs	r3, #1
 80048e0:	b29a      	uxth	r2, r3
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80048ea:	3b01      	subs	r3, #1
 80048ec:	b29a      	uxth	r2, r3
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	695b      	ldr	r3, [r3, #20]
 80048f8:	f003 0304 	and.w	r3, r3, #4
 80048fc:	2b04      	cmp	r3, #4
 80048fe:	d11b      	bne.n	8004938 <HAL_I2C_Master_Transmit+0x188>
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004904:	2b00      	cmp	r3, #0
 8004906:	d017      	beq.n	8004938 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800490c:	781a      	ldrb	r2, [r3, #0]
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004918:	1c5a      	adds	r2, r3, #1
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004922:	b29b      	uxth	r3, r3
 8004924:	3b01      	subs	r3, #1
 8004926:	b29a      	uxth	r2, r3
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004930:	3b01      	subs	r3, #1
 8004932:	b29a      	uxth	r2, r3
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004938:	697a      	ldr	r2, [r7, #20]
 800493a:	6a39      	ldr	r1, [r7, #32]
 800493c:	68f8      	ldr	r0, [r7, #12]
 800493e:	f002 fd28 	bl	8007392 <I2C_WaitOnBTFFlagUntilTimeout>
 8004942:	4603      	mov	r3, r0
 8004944:	2b00      	cmp	r3, #0
 8004946:	d00d      	beq.n	8004964 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800494c:	2b04      	cmp	r3, #4
 800494e:	d107      	bne.n	8004960 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	681a      	ldr	r2, [r3, #0]
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800495e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004960:	2301      	movs	r3, #1
 8004962:	e01a      	b.n	800499a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004968:	2b00      	cmp	r3, #0
 800496a:	d194      	bne.n	8004896 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	681a      	ldr	r2, [r3, #0]
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800497a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	2220      	movs	r2, #32
 8004980:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	2200      	movs	r2, #0
 8004988:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	2200      	movs	r2, #0
 8004990:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004994:	2300      	movs	r3, #0
 8004996:	e000      	b.n	800499a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8004998:	2302      	movs	r3, #2
  }
}
 800499a:	4618      	mov	r0, r3
 800499c:	3718      	adds	r7, #24
 800499e:	46bd      	mov	sp, r7
 80049a0:	bd80      	pop	{r7, pc}
 80049a2:	bf00      	nop
 80049a4:	00100002 	.word	0x00100002
 80049a8:	ffff0000 	.word	0xffff0000

080049ac <HAL_I2C_Master_Receive_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size)
{
 80049ac:	b580      	push	{r7, lr}
 80049ae:	b086      	sub	sp, #24
 80049b0:	af00      	add	r7, sp, #0
 80049b2:	60f8      	str	r0, [r7, #12]
 80049b4:	607a      	str	r2, [r7, #4]
 80049b6:	461a      	mov	r2, r3
 80049b8:	460b      	mov	r3, r1
 80049ba:	817b      	strh	r3, [r7, #10]
 80049bc:	4613      	mov	r3, r2
 80049be:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 80049c0:	2300      	movs	r3, #0
 80049c2:	613b      	str	r3, [r7, #16]
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80049ca:	b2db      	uxtb	r3, r3
 80049cc:	2b20      	cmp	r3, #32
 80049ce:	f040 810d 	bne.w	8004bec <HAL_I2C_Master_Receive_DMA+0x240>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 80049d2:	4b89      	ldr	r3, [pc, #548]	; (8004bf8 <HAL_I2C_Master_Receive_DMA+0x24c>)
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	08db      	lsrs	r3, r3, #3
 80049d8:	4a88      	ldr	r2, [pc, #544]	; (8004bfc <HAL_I2C_Master_Receive_DMA+0x250>)
 80049da:	fba2 2303 	umull	r2, r3, r2, r3
 80049de:	0a1a      	lsrs	r2, r3, #8
 80049e0:	4613      	mov	r3, r2
 80049e2:	009b      	lsls	r3, r3, #2
 80049e4:	4413      	add	r3, r2
 80049e6:	009a      	lsls	r2, r3, #2
 80049e8:	4413      	add	r3, r2
 80049ea:	613b      	str	r3, [r7, #16]
    do
    {
      count--;
 80049ec:	693b      	ldr	r3, [r7, #16]
 80049ee:	3b01      	subs	r3, #1
 80049f0:	613b      	str	r3, [r7, #16]
      if (count == 0U)
 80049f2:	693b      	ldr	r3, [r7, #16]
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d116      	bne.n	8004a26 <HAL_I2C_Master_Receive_DMA+0x7a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	2200      	movs	r2, #0
 80049fc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	2220      	movs	r2, #32
 8004a02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	2200      	movs	r2, #0
 8004a0a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a12:	f043 0220 	orr.w	r2, r3, #32
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	2200      	movs	r2, #0
 8004a1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004a22:	2301      	movs	r3, #1
 8004a24:	e0e3      	b.n	8004bee <HAL_I2C_Master_Receive_DMA+0x242>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	699b      	ldr	r3, [r3, #24]
 8004a2c:	f003 0302 	and.w	r3, r3, #2
 8004a30:	2b02      	cmp	r3, #2
 8004a32:	d0db      	beq.n	80049ec <HAL_I2C_Master_Receive_DMA+0x40>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004a3a:	2b01      	cmp	r3, #1
 8004a3c:	d101      	bne.n	8004a42 <HAL_I2C_Master_Receive_DMA+0x96>
 8004a3e:	2302      	movs	r3, #2
 8004a40:	e0d5      	b.n	8004bee <HAL_I2C_Master_Receive_DMA+0x242>
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	2201      	movs	r2, #1
 8004a46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	f003 0301 	and.w	r3, r3, #1
 8004a54:	2b01      	cmp	r3, #1
 8004a56:	d007      	beq.n	8004a68 <HAL_I2C_Master_Receive_DMA+0xbc>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	681a      	ldr	r2, [r3, #0]
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	f042 0201 	orr.w	r2, r2, #1
 8004a66:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	681a      	ldr	r2, [r3, #0]
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004a76:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	2222      	movs	r2, #34	; 0x22
 8004a7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	2210      	movs	r2, #16
 8004a84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	2200      	movs	r2, #0
 8004a8c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	687a      	ldr	r2, [r7, #4]
 8004a92:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	893a      	ldrh	r2, [r7, #8]
 8004a98:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a9e:	b29a      	uxth	r2, r3
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	4a56      	ldr	r2, [pc, #344]	; (8004c00 <HAL_I2C_Master_Receive_DMA+0x254>)
 8004aa8:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 8004aaa:	897a      	ldrh	r2, [r7, #10]
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	645a      	str	r2, [r3, #68]	; 0x44

    if (hi2c->XferSize > 0U)
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d07b      	beq.n	8004bb0 <HAL_I2C_Master_Receive_DMA+0x204>
    {
      if (hi2c->hdmarx != NULL)
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d02a      	beq.n	8004b16 <HAL_I2C_Master_Receive_DMA+0x16a>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAXferCplt;
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ac4:	4a4f      	ldr	r2, [pc, #316]	; (8004c04 <HAL_I2C_Master_Receive_DMA+0x258>)
 8004ac6:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004acc:	4a4e      	ldr	r2, [pc, #312]	; (8004c08 <HAL_I2C_Master_Receive_DMA+0x25c>)
 8004ace:	64da      	str	r2, [r3, #76]	; 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ad4:	2200      	movs	r2, #0
 8004ad6:	641a      	str	r2, [r3, #64]	; 0x40
        hi2c->hdmarx->XferM1CpltCallback = NULL;
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004adc:	2200      	movs	r2, #0
 8004ade:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->hdmarx->XferM1HalfCpltCallback = NULL;
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ae4:	2200      	movs	r2, #0
 8004ae6:	649a      	str	r2, [r3, #72]	; 0x48
        hi2c->hdmarx->XferAbortCallback = NULL;
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004aec:	2200      	movs	r2, #0
 8004aee:	651a      	str	r2, [r3, #80]	; 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->DR, (uint32_t)hi2c->pBuffPtr, hi2c->XferSize);
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	3310      	adds	r3, #16
 8004afa:	4619      	mov	r1, r3
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b00:	461a      	mov	r2, r3
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b06:	f7ff f843 	bl	8003b90 <HAL_DMA_Start_IT>
 8004b0a:	4603      	mov	r3, r0
 8004b0c:	75fb      	strb	r3, [r7, #23]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8004b0e:	7dfb      	ldrb	r3, [r7, #23]
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d139      	bne.n	8004b88 <HAL_I2C_Master_Receive_DMA+0x1dc>
 8004b14:	e013      	b.n	8004b3e <HAL_I2C_Master_Receive_DMA+0x192>
        hi2c->State     = HAL_I2C_STATE_READY;
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	2220      	movs	r2, #32
 8004b1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	2200      	movs	r2, #0
 8004b22:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b2a:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	641a      	str	r2, [r3, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	2200      	movs	r2, #0
 8004b36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_ERROR;
 8004b3a:	2301      	movs	r3, #1
 8004b3c:	e057      	b.n	8004bee <HAL_I2C_Master_Receive_DMA+0x242>
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	681a      	ldr	r2, [r3, #0]
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004b4c:	601a      	str	r2, [r3, #0]

        /* Generate Start */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	681a      	ldr	r2, [r3, #0]
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004b5c:	601a      	str	r2, [r3, #0]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	2200      	movs	r2, #0
 8004b62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */

        /* Enable EVT and ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	685a      	ldr	r2, [r3, #4]
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8004b74:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	685a      	ldr	r2, [r3, #4]
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004b84:	605a      	str	r2, [r3, #4]
 8004b86:	e02f      	b.n	8004be8 <HAL_I2C_Master_Receive_DMA+0x23c>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	2220      	movs	r2, #32
 8004b8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	2200      	movs	r2, #0
 8004b94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b9c:	f043 0210 	orr.w	r2, r3, #16
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	2200      	movs	r2, #0
 8004ba8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004bac:	2301      	movs	r3, #1
 8004bae:	e01e      	b.n	8004bee <HAL_I2C_Master_Receive_DMA+0x242>
      }
    }
    else
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	2200      	movs	r2, #0
 8004bb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      /* Note : The I2C interrupts must be enabled after unlocking current process
      to avoid the risk of I2C interrupt handle execution before current
      process unlock */

      /* Enable EVT, BUF and ERR interrupt */
      __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	685a      	ldr	r2, [r3, #4]
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 8004bc6:	605a      	str	r2, [r3, #4]

      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	681a      	ldr	r2, [r3, #0]
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004bd6:	601a      	str	r2, [r3, #0]

      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	681a      	ldr	r2, [r3, #0]
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004be6:	601a      	str	r2, [r3, #0]
    }

    return HAL_OK;
 8004be8:	2300      	movs	r3, #0
 8004bea:	e000      	b.n	8004bee <HAL_I2C_Master_Receive_DMA+0x242>
  }
  else
  {
    return HAL_BUSY;
 8004bec:	2302      	movs	r3, #2
  }
}
 8004bee:	4618      	mov	r0, r3
 8004bf0:	3718      	adds	r7, #24
 8004bf2:	46bd      	mov	sp, r7
 8004bf4:	bd80      	pop	{r7, pc}
 8004bf6:	bf00      	nop
 8004bf8:	20000018 	.word	0x20000018
 8004bfc:	14f8b589 	.word	0x14f8b589
 8004c00:	ffff0000 	.word	0xffff0000
 8004c04:	08006df1 	.word	0x08006df1
 8004c08:	08006f9b 	.word	0x08006f9b

08004c0c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004c0c:	b580      	push	{r7, lr}
 8004c0e:	b088      	sub	sp, #32
 8004c10:	af02      	add	r7, sp, #8
 8004c12:	60f8      	str	r0, [r7, #12]
 8004c14:	4608      	mov	r0, r1
 8004c16:	4611      	mov	r1, r2
 8004c18:	461a      	mov	r2, r3
 8004c1a:	4603      	mov	r3, r0
 8004c1c:	817b      	strh	r3, [r7, #10]
 8004c1e:	460b      	mov	r3, r1
 8004c20:	813b      	strh	r3, [r7, #8]
 8004c22:	4613      	mov	r3, r2
 8004c24:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004c26:	f7fe f899 	bl	8002d5c <HAL_GetTick>
 8004c2a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c32:	b2db      	uxtb	r3, r3
 8004c34:	2b20      	cmp	r3, #32
 8004c36:	f040 80d9 	bne.w	8004dec <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004c3a:	697b      	ldr	r3, [r7, #20]
 8004c3c:	9300      	str	r3, [sp, #0]
 8004c3e:	2319      	movs	r3, #25
 8004c40:	2201      	movs	r2, #1
 8004c42:	496d      	ldr	r1, [pc, #436]	; (8004df8 <HAL_I2C_Mem_Write+0x1ec>)
 8004c44:	68f8      	ldr	r0, [r7, #12]
 8004c46:	f002 fa8d 	bl	8007164 <I2C_WaitOnFlagUntilTimeout>
 8004c4a:	4603      	mov	r3, r0
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d001      	beq.n	8004c54 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8004c50:	2302      	movs	r3, #2
 8004c52:	e0cc      	b.n	8004dee <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004c5a:	2b01      	cmp	r3, #1
 8004c5c:	d101      	bne.n	8004c62 <HAL_I2C_Mem_Write+0x56>
 8004c5e:	2302      	movs	r3, #2
 8004c60:	e0c5      	b.n	8004dee <HAL_I2C_Mem_Write+0x1e2>
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	2201      	movs	r2, #1
 8004c66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	f003 0301 	and.w	r3, r3, #1
 8004c74:	2b01      	cmp	r3, #1
 8004c76:	d007      	beq.n	8004c88 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	681a      	ldr	r2, [r3, #0]
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	f042 0201 	orr.w	r2, r2, #1
 8004c86:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	681a      	ldr	r2, [r3, #0]
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004c96:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	2221      	movs	r2, #33	; 0x21
 8004c9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	2240      	movs	r2, #64	; 0x40
 8004ca4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	2200      	movs	r2, #0
 8004cac:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	6a3a      	ldr	r2, [r7, #32]
 8004cb2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004cb8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004cbe:	b29a      	uxth	r2, r3
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	4a4d      	ldr	r2, [pc, #308]	; (8004dfc <HAL_I2C_Mem_Write+0x1f0>)
 8004cc8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004cca:	88f8      	ldrh	r0, [r7, #6]
 8004ccc:	893a      	ldrh	r2, [r7, #8]
 8004cce:	8979      	ldrh	r1, [r7, #10]
 8004cd0:	697b      	ldr	r3, [r7, #20]
 8004cd2:	9301      	str	r3, [sp, #4]
 8004cd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cd6:	9300      	str	r3, [sp, #0]
 8004cd8:	4603      	mov	r3, r0
 8004cda:	68f8      	ldr	r0, [r7, #12]
 8004cdc:	f001 ff0a 	bl	8006af4 <I2C_RequestMemoryWrite>
 8004ce0:	4603      	mov	r3, r0
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d052      	beq.n	8004d8c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8004ce6:	2301      	movs	r3, #1
 8004ce8:	e081      	b.n	8004dee <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004cea:	697a      	ldr	r2, [r7, #20]
 8004cec:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004cee:	68f8      	ldr	r0, [r7, #12]
 8004cf0:	f002 fb0e 	bl	8007310 <I2C_WaitOnTXEFlagUntilTimeout>
 8004cf4:	4603      	mov	r3, r0
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d00d      	beq.n	8004d16 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cfe:	2b04      	cmp	r3, #4
 8004d00:	d107      	bne.n	8004d12 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	681a      	ldr	r2, [r3, #0]
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004d10:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004d12:	2301      	movs	r3, #1
 8004d14:	e06b      	b.n	8004dee <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d1a:	781a      	ldrb	r2, [r3, #0]
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d26:	1c5a      	adds	r2, r3, #1
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d30:	3b01      	subs	r3, #1
 8004d32:	b29a      	uxth	r2, r3
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d3c:	b29b      	uxth	r3, r3
 8004d3e:	3b01      	subs	r3, #1
 8004d40:	b29a      	uxth	r2, r3
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	695b      	ldr	r3, [r3, #20]
 8004d4c:	f003 0304 	and.w	r3, r3, #4
 8004d50:	2b04      	cmp	r3, #4
 8004d52:	d11b      	bne.n	8004d8c <HAL_I2C_Mem_Write+0x180>
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d017      	beq.n	8004d8c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d60:	781a      	ldrb	r2, [r3, #0]
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d6c:	1c5a      	adds	r2, r3, #1
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d76:	3b01      	subs	r3, #1
 8004d78:	b29a      	uxth	r2, r3
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d82:	b29b      	uxth	r3, r3
 8004d84:	3b01      	subs	r3, #1
 8004d86:	b29a      	uxth	r2, r3
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d1aa      	bne.n	8004cea <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004d94:	697a      	ldr	r2, [r7, #20]
 8004d96:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004d98:	68f8      	ldr	r0, [r7, #12]
 8004d9a:	f002 fafa 	bl	8007392 <I2C_WaitOnBTFFlagUntilTimeout>
 8004d9e:	4603      	mov	r3, r0
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d00d      	beq.n	8004dc0 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004da8:	2b04      	cmp	r3, #4
 8004daa:	d107      	bne.n	8004dbc <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	681a      	ldr	r2, [r3, #0]
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004dba:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004dbc:	2301      	movs	r3, #1
 8004dbe:	e016      	b.n	8004dee <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	681a      	ldr	r2, [r3, #0]
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004dce:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	2220      	movs	r2, #32
 8004dd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	2200      	movs	r2, #0
 8004ddc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	2200      	movs	r2, #0
 8004de4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004de8:	2300      	movs	r3, #0
 8004dea:	e000      	b.n	8004dee <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8004dec:	2302      	movs	r3, #2
  }
}
 8004dee:	4618      	mov	r0, r3
 8004df0:	3718      	adds	r7, #24
 8004df2:	46bd      	mov	sp, r7
 8004df4:	bd80      	pop	{r7, pc}
 8004df6:	bf00      	nop
 8004df8:	00100002 	.word	0x00100002
 8004dfc:	ffff0000 	.word	0xffff0000

08004e00 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004e00:	b580      	push	{r7, lr}
 8004e02:	b08c      	sub	sp, #48	; 0x30
 8004e04:	af02      	add	r7, sp, #8
 8004e06:	60f8      	str	r0, [r7, #12]
 8004e08:	4608      	mov	r0, r1
 8004e0a:	4611      	mov	r1, r2
 8004e0c:	461a      	mov	r2, r3
 8004e0e:	4603      	mov	r3, r0
 8004e10:	817b      	strh	r3, [r7, #10]
 8004e12:	460b      	mov	r3, r1
 8004e14:	813b      	strh	r3, [r7, #8]
 8004e16:	4613      	mov	r3, r2
 8004e18:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004e1a:	f7fd ff9f 	bl	8002d5c <HAL_GetTick>
 8004e1e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e26:	b2db      	uxtb	r3, r3
 8004e28:	2b20      	cmp	r3, #32
 8004e2a:	f040 8208 	bne.w	800523e <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004e2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e30:	9300      	str	r3, [sp, #0]
 8004e32:	2319      	movs	r3, #25
 8004e34:	2201      	movs	r2, #1
 8004e36:	497b      	ldr	r1, [pc, #492]	; (8005024 <HAL_I2C_Mem_Read+0x224>)
 8004e38:	68f8      	ldr	r0, [r7, #12]
 8004e3a:	f002 f993 	bl	8007164 <I2C_WaitOnFlagUntilTimeout>
 8004e3e:	4603      	mov	r3, r0
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d001      	beq.n	8004e48 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8004e44:	2302      	movs	r3, #2
 8004e46:	e1fb      	b.n	8005240 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004e4e:	2b01      	cmp	r3, #1
 8004e50:	d101      	bne.n	8004e56 <HAL_I2C_Mem_Read+0x56>
 8004e52:	2302      	movs	r3, #2
 8004e54:	e1f4      	b.n	8005240 <HAL_I2C_Mem_Read+0x440>
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	2201      	movs	r2, #1
 8004e5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	f003 0301 	and.w	r3, r3, #1
 8004e68:	2b01      	cmp	r3, #1
 8004e6a:	d007      	beq.n	8004e7c <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	681a      	ldr	r2, [r3, #0]
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	f042 0201 	orr.w	r2, r2, #1
 8004e7a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	681a      	ldr	r2, [r3, #0]
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004e8a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	2222      	movs	r2, #34	; 0x22
 8004e90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	2240      	movs	r2, #64	; 0x40
 8004e98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	2200      	movs	r2, #0
 8004ea0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004ea6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8004eac:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004eb2:	b29a      	uxth	r2, r3
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	4a5b      	ldr	r2, [pc, #364]	; (8005028 <HAL_I2C_Mem_Read+0x228>)
 8004ebc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004ebe:	88f8      	ldrh	r0, [r7, #6]
 8004ec0:	893a      	ldrh	r2, [r7, #8]
 8004ec2:	8979      	ldrh	r1, [r7, #10]
 8004ec4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ec6:	9301      	str	r3, [sp, #4]
 8004ec8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004eca:	9300      	str	r3, [sp, #0]
 8004ecc:	4603      	mov	r3, r0
 8004ece:	68f8      	ldr	r0, [r7, #12]
 8004ed0:	f001 fea6 	bl	8006c20 <I2C_RequestMemoryRead>
 8004ed4:	4603      	mov	r3, r0
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d001      	beq.n	8004ede <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8004eda:	2301      	movs	r3, #1
 8004edc:	e1b0      	b.n	8005240 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d113      	bne.n	8004f0e <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004ee6:	2300      	movs	r3, #0
 8004ee8:	623b      	str	r3, [r7, #32]
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	695b      	ldr	r3, [r3, #20]
 8004ef0:	623b      	str	r3, [r7, #32]
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	699b      	ldr	r3, [r3, #24]
 8004ef8:	623b      	str	r3, [r7, #32]
 8004efa:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	681a      	ldr	r2, [r3, #0]
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004f0a:	601a      	str	r2, [r3, #0]
 8004f0c:	e184      	b.n	8005218 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f12:	2b01      	cmp	r3, #1
 8004f14:	d11b      	bne.n	8004f4e <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	681a      	ldr	r2, [r3, #0]
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004f24:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004f26:	2300      	movs	r3, #0
 8004f28:	61fb      	str	r3, [r7, #28]
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	695b      	ldr	r3, [r3, #20]
 8004f30:	61fb      	str	r3, [r7, #28]
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	699b      	ldr	r3, [r3, #24]
 8004f38:	61fb      	str	r3, [r7, #28]
 8004f3a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	681a      	ldr	r2, [r3, #0]
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004f4a:	601a      	str	r2, [r3, #0]
 8004f4c:	e164      	b.n	8005218 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f52:	2b02      	cmp	r3, #2
 8004f54:	d11b      	bne.n	8004f8e <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	681a      	ldr	r2, [r3, #0]
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004f64:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	681a      	ldr	r2, [r3, #0]
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004f74:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004f76:	2300      	movs	r3, #0
 8004f78:	61bb      	str	r3, [r7, #24]
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	695b      	ldr	r3, [r3, #20]
 8004f80:	61bb      	str	r3, [r7, #24]
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	699b      	ldr	r3, [r3, #24]
 8004f88:	61bb      	str	r3, [r7, #24]
 8004f8a:	69bb      	ldr	r3, [r7, #24]
 8004f8c:	e144      	b.n	8005218 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004f8e:	2300      	movs	r3, #0
 8004f90:	617b      	str	r3, [r7, #20]
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	695b      	ldr	r3, [r3, #20]
 8004f98:	617b      	str	r3, [r7, #20]
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	699b      	ldr	r3, [r3, #24]
 8004fa0:	617b      	str	r3, [r7, #20]
 8004fa2:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004fa4:	e138      	b.n	8005218 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004faa:	2b03      	cmp	r3, #3
 8004fac:	f200 80f1 	bhi.w	8005192 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004fb4:	2b01      	cmp	r3, #1
 8004fb6:	d123      	bne.n	8005000 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004fb8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004fba:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004fbc:	68f8      	ldr	r0, [r7, #12]
 8004fbe:	f002 fa5b 	bl	8007478 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004fc2:	4603      	mov	r3, r0
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d001      	beq.n	8004fcc <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8004fc8:	2301      	movs	r3, #1
 8004fca:	e139      	b.n	8005240 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	691a      	ldr	r2, [r3, #16]
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fd6:	b2d2      	uxtb	r2, r2
 8004fd8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fde:	1c5a      	adds	r2, r3, #1
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004fe8:	3b01      	subs	r3, #1
 8004fea:	b29a      	uxth	r2, r3
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ff4:	b29b      	uxth	r3, r3
 8004ff6:	3b01      	subs	r3, #1
 8004ff8:	b29a      	uxth	r2, r3
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004ffe:	e10b      	b.n	8005218 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005004:	2b02      	cmp	r3, #2
 8005006:	d14e      	bne.n	80050a6 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005008:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800500a:	9300      	str	r3, [sp, #0]
 800500c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800500e:	2200      	movs	r2, #0
 8005010:	4906      	ldr	r1, [pc, #24]	; (800502c <HAL_I2C_Mem_Read+0x22c>)
 8005012:	68f8      	ldr	r0, [r7, #12]
 8005014:	f002 f8a6 	bl	8007164 <I2C_WaitOnFlagUntilTimeout>
 8005018:	4603      	mov	r3, r0
 800501a:	2b00      	cmp	r3, #0
 800501c:	d008      	beq.n	8005030 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800501e:	2301      	movs	r3, #1
 8005020:	e10e      	b.n	8005240 <HAL_I2C_Mem_Read+0x440>
 8005022:	bf00      	nop
 8005024:	00100002 	.word	0x00100002
 8005028:	ffff0000 	.word	0xffff0000
 800502c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	681a      	ldr	r2, [r3, #0]
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800503e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	691a      	ldr	r2, [r3, #16]
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800504a:	b2d2      	uxtb	r2, r2
 800504c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005052:	1c5a      	adds	r2, r3, #1
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800505c:	3b01      	subs	r3, #1
 800505e:	b29a      	uxth	r2, r3
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005068:	b29b      	uxth	r3, r3
 800506a:	3b01      	subs	r3, #1
 800506c:	b29a      	uxth	r2, r3
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	691a      	ldr	r2, [r3, #16]
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800507c:	b2d2      	uxtb	r2, r2
 800507e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005084:	1c5a      	adds	r2, r3, #1
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800508e:	3b01      	subs	r3, #1
 8005090:	b29a      	uxth	r2, r3
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800509a:	b29b      	uxth	r3, r3
 800509c:	3b01      	subs	r3, #1
 800509e:	b29a      	uxth	r2, r3
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80050a4:	e0b8      	b.n	8005218 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80050a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050a8:	9300      	str	r3, [sp, #0]
 80050aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050ac:	2200      	movs	r2, #0
 80050ae:	4966      	ldr	r1, [pc, #408]	; (8005248 <HAL_I2C_Mem_Read+0x448>)
 80050b0:	68f8      	ldr	r0, [r7, #12]
 80050b2:	f002 f857 	bl	8007164 <I2C_WaitOnFlagUntilTimeout>
 80050b6:	4603      	mov	r3, r0
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d001      	beq.n	80050c0 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80050bc:	2301      	movs	r3, #1
 80050be:	e0bf      	b.n	8005240 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	681a      	ldr	r2, [r3, #0]
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80050ce:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	691a      	ldr	r2, [r3, #16]
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050da:	b2d2      	uxtb	r2, r2
 80050dc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050e2:	1c5a      	adds	r2, r3, #1
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80050ec:	3b01      	subs	r3, #1
 80050ee:	b29a      	uxth	r2, r3
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050f8:	b29b      	uxth	r3, r3
 80050fa:	3b01      	subs	r3, #1
 80050fc:	b29a      	uxth	r2, r3
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005102:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005104:	9300      	str	r3, [sp, #0]
 8005106:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005108:	2200      	movs	r2, #0
 800510a:	494f      	ldr	r1, [pc, #316]	; (8005248 <HAL_I2C_Mem_Read+0x448>)
 800510c:	68f8      	ldr	r0, [r7, #12]
 800510e:	f002 f829 	bl	8007164 <I2C_WaitOnFlagUntilTimeout>
 8005112:	4603      	mov	r3, r0
 8005114:	2b00      	cmp	r3, #0
 8005116:	d001      	beq.n	800511c <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8005118:	2301      	movs	r3, #1
 800511a:	e091      	b.n	8005240 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	681a      	ldr	r2, [r3, #0]
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800512a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	691a      	ldr	r2, [r3, #16]
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005136:	b2d2      	uxtb	r2, r2
 8005138:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800513e:	1c5a      	adds	r2, r3, #1
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005148:	3b01      	subs	r3, #1
 800514a:	b29a      	uxth	r2, r3
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005154:	b29b      	uxth	r3, r3
 8005156:	3b01      	subs	r3, #1
 8005158:	b29a      	uxth	r2, r3
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	691a      	ldr	r2, [r3, #16]
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005168:	b2d2      	uxtb	r2, r2
 800516a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005170:	1c5a      	adds	r2, r3, #1
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800517a:	3b01      	subs	r3, #1
 800517c:	b29a      	uxth	r2, r3
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005186:	b29b      	uxth	r3, r3
 8005188:	3b01      	subs	r3, #1
 800518a:	b29a      	uxth	r2, r3
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005190:	e042      	b.n	8005218 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005192:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005194:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005196:	68f8      	ldr	r0, [r7, #12]
 8005198:	f002 f96e 	bl	8007478 <I2C_WaitOnRXNEFlagUntilTimeout>
 800519c:	4603      	mov	r3, r0
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d001      	beq.n	80051a6 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80051a2:	2301      	movs	r3, #1
 80051a4:	e04c      	b.n	8005240 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	691a      	ldr	r2, [r3, #16]
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051b0:	b2d2      	uxtb	r2, r2
 80051b2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051b8:	1c5a      	adds	r2, r3, #1
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80051c2:	3b01      	subs	r3, #1
 80051c4:	b29a      	uxth	r2, r3
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051ce:	b29b      	uxth	r3, r3
 80051d0:	3b01      	subs	r3, #1
 80051d2:	b29a      	uxth	r2, r3
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	695b      	ldr	r3, [r3, #20]
 80051de:	f003 0304 	and.w	r3, r3, #4
 80051e2:	2b04      	cmp	r3, #4
 80051e4:	d118      	bne.n	8005218 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	691a      	ldr	r2, [r3, #16]
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051f0:	b2d2      	uxtb	r2, r2
 80051f2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051f8:	1c5a      	adds	r2, r3, #1
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005202:	3b01      	subs	r3, #1
 8005204:	b29a      	uxth	r2, r3
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800520e:	b29b      	uxth	r3, r3
 8005210:	3b01      	subs	r3, #1
 8005212:	b29a      	uxth	r2, r3
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800521c:	2b00      	cmp	r3, #0
 800521e:	f47f aec2 	bne.w	8004fa6 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	2220      	movs	r2, #32
 8005226:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	2200      	movs	r2, #0
 800522e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	2200      	movs	r2, #0
 8005236:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800523a:	2300      	movs	r3, #0
 800523c:	e000      	b.n	8005240 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 800523e:	2302      	movs	r3, #2
  }
}
 8005240:	4618      	mov	r0, r3
 8005242:	3728      	adds	r7, #40	; 0x28
 8005244:	46bd      	mov	sp, r7
 8005246:	bd80      	pop	{r7, pc}
 8005248:	00010004 	.word	0x00010004

0800524c <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800524c:	b580      	push	{r7, lr}
 800524e:	b088      	sub	sp, #32
 8005250:	af00      	add	r7, sp, #0
 8005252:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8005254:	2300      	movs	r3, #0
 8005256:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	685b      	ldr	r3, [r3, #4]
 800525e:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005264:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800526c:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005274:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8005276:	7bfb      	ldrb	r3, [r7, #15]
 8005278:	2b10      	cmp	r3, #16
 800527a:	d003      	beq.n	8005284 <HAL_I2C_EV_IRQHandler+0x38>
 800527c:	7bfb      	ldrb	r3, [r7, #15]
 800527e:	2b40      	cmp	r3, #64	; 0x40
 8005280:	f040 80c1 	bne.w	8005406 <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	699b      	ldr	r3, [r3, #24]
 800528a:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	695b      	ldr	r3, [r3, #20]
 8005292:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8005294:	69fb      	ldr	r3, [r7, #28]
 8005296:	f003 0301 	and.w	r3, r3, #1
 800529a:	2b00      	cmp	r3, #0
 800529c:	d10d      	bne.n	80052ba <HAL_I2C_EV_IRQHandler+0x6e>
 800529e:	693b      	ldr	r3, [r7, #16]
 80052a0:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 80052a4:	d003      	beq.n	80052ae <HAL_I2C_EV_IRQHandler+0x62>
 80052a6:	693b      	ldr	r3, [r7, #16]
 80052a8:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80052ac:	d101      	bne.n	80052b2 <HAL_I2C_EV_IRQHandler+0x66>
 80052ae:	2301      	movs	r3, #1
 80052b0:	e000      	b.n	80052b4 <HAL_I2C_EV_IRQHandler+0x68>
 80052b2:	2300      	movs	r3, #0
 80052b4:	2b01      	cmp	r3, #1
 80052b6:	f000 8132 	beq.w	800551e <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80052ba:	69fb      	ldr	r3, [r7, #28]
 80052bc:	f003 0301 	and.w	r3, r3, #1
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d00c      	beq.n	80052de <HAL_I2C_EV_IRQHandler+0x92>
 80052c4:	697b      	ldr	r3, [r7, #20]
 80052c6:	0a5b      	lsrs	r3, r3, #9
 80052c8:	f003 0301 	and.w	r3, r3, #1
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d006      	beq.n	80052de <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 80052d0:	6878      	ldr	r0, [r7, #4]
 80052d2:	f002 f956 	bl	8007582 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 80052d6:	6878      	ldr	r0, [r7, #4]
 80052d8:	f000 fd6f 	bl	8005dba <I2C_Master_SB>
 80052dc:	e092      	b.n	8005404 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80052de:	69fb      	ldr	r3, [r7, #28]
 80052e0:	08db      	lsrs	r3, r3, #3
 80052e2:	f003 0301 	and.w	r3, r3, #1
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d009      	beq.n	80052fe <HAL_I2C_EV_IRQHandler+0xb2>
 80052ea:	697b      	ldr	r3, [r7, #20]
 80052ec:	0a5b      	lsrs	r3, r3, #9
 80052ee:	f003 0301 	and.w	r3, r3, #1
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d003      	beq.n	80052fe <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 80052f6:	6878      	ldr	r0, [r7, #4]
 80052f8:	f000 fde5 	bl	8005ec6 <I2C_Master_ADD10>
 80052fc:	e082      	b.n	8005404 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80052fe:	69fb      	ldr	r3, [r7, #28]
 8005300:	085b      	lsrs	r3, r3, #1
 8005302:	f003 0301 	and.w	r3, r3, #1
 8005306:	2b00      	cmp	r3, #0
 8005308:	d009      	beq.n	800531e <HAL_I2C_EV_IRQHandler+0xd2>
 800530a:	697b      	ldr	r3, [r7, #20]
 800530c:	0a5b      	lsrs	r3, r3, #9
 800530e:	f003 0301 	and.w	r3, r3, #1
 8005312:	2b00      	cmp	r3, #0
 8005314:	d003      	beq.n	800531e <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8005316:	6878      	ldr	r0, [r7, #4]
 8005318:	f000 fdff 	bl	8005f1a <I2C_Master_ADDR>
 800531c:	e072      	b.n	8005404 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 800531e:	69bb      	ldr	r3, [r7, #24]
 8005320:	089b      	lsrs	r3, r3, #2
 8005322:	f003 0301 	and.w	r3, r3, #1
 8005326:	2b00      	cmp	r3, #0
 8005328:	d03b      	beq.n	80053a2 <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	685b      	ldr	r3, [r3, #4]
 8005330:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005334:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005338:	f000 80f3 	beq.w	8005522 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800533c:	69fb      	ldr	r3, [r7, #28]
 800533e:	09db      	lsrs	r3, r3, #7
 8005340:	f003 0301 	and.w	r3, r3, #1
 8005344:	2b00      	cmp	r3, #0
 8005346:	d00f      	beq.n	8005368 <HAL_I2C_EV_IRQHandler+0x11c>
 8005348:	697b      	ldr	r3, [r7, #20]
 800534a:	0a9b      	lsrs	r3, r3, #10
 800534c:	f003 0301 	and.w	r3, r3, #1
 8005350:	2b00      	cmp	r3, #0
 8005352:	d009      	beq.n	8005368 <HAL_I2C_EV_IRQHandler+0x11c>
 8005354:	69fb      	ldr	r3, [r7, #28]
 8005356:	089b      	lsrs	r3, r3, #2
 8005358:	f003 0301 	and.w	r3, r3, #1
 800535c:	2b00      	cmp	r3, #0
 800535e:	d103      	bne.n	8005368 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8005360:	6878      	ldr	r0, [r7, #4]
 8005362:	f000 f9e9 	bl	8005738 <I2C_MasterTransmit_TXE>
 8005366:	e04d      	b.n	8005404 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005368:	69fb      	ldr	r3, [r7, #28]
 800536a:	089b      	lsrs	r3, r3, #2
 800536c:	f003 0301 	and.w	r3, r3, #1
 8005370:	2b00      	cmp	r3, #0
 8005372:	f000 80d6 	beq.w	8005522 <HAL_I2C_EV_IRQHandler+0x2d6>
 8005376:	697b      	ldr	r3, [r7, #20]
 8005378:	0a5b      	lsrs	r3, r3, #9
 800537a:	f003 0301 	and.w	r3, r3, #1
 800537e:	2b00      	cmp	r3, #0
 8005380:	f000 80cf 	beq.w	8005522 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8005384:	7bbb      	ldrb	r3, [r7, #14]
 8005386:	2b21      	cmp	r3, #33	; 0x21
 8005388:	d103      	bne.n	8005392 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 800538a:	6878      	ldr	r0, [r7, #4]
 800538c:	f000 fa70 	bl	8005870 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005390:	e0c7      	b.n	8005522 <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8005392:	7bfb      	ldrb	r3, [r7, #15]
 8005394:	2b40      	cmp	r3, #64	; 0x40
 8005396:	f040 80c4 	bne.w	8005522 <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 800539a:	6878      	ldr	r0, [r7, #4]
 800539c:	f000 fade 	bl	800595c <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80053a0:	e0bf      	b.n	8005522 <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	685b      	ldr	r3, [r3, #4]
 80053a8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80053ac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80053b0:	f000 80b7 	beq.w	8005522 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80053b4:	69fb      	ldr	r3, [r7, #28]
 80053b6:	099b      	lsrs	r3, r3, #6
 80053b8:	f003 0301 	and.w	r3, r3, #1
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d00f      	beq.n	80053e0 <HAL_I2C_EV_IRQHandler+0x194>
 80053c0:	697b      	ldr	r3, [r7, #20]
 80053c2:	0a9b      	lsrs	r3, r3, #10
 80053c4:	f003 0301 	and.w	r3, r3, #1
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d009      	beq.n	80053e0 <HAL_I2C_EV_IRQHandler+0x194>
 80053cc:	69fb      	ldr	r3, [r7, #28]
 80053ce:	089b      	lsrs	r3, r3, #2
 80053d0:	f003 0301 	and.w	r3, r3, #1
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d103      	bne.n	80053e0 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 80053d8:	6878      	ldr	r0, [r7, #4]
 80053da:	f000 fb53 	bl	8005a84 <I2C_MasterReceive_RXNE>
 80053de:	e011      	b.n	8005404 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80053e0:	69fb      	ldr	r3, [r7, #28]
 80053e2:	089b      	lsrs	r3, r3, #2
 80053e4:	f003 0301 	and.w	r3, r3, #1
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	f000 809a 	beq.w	8005522 <HAL_I2C_EV_IRQHandler+0x2d6>
 80053ee:	697b      	ldr	r3, [r7, #20]
 80053f0:	0a5b      	lsrs	r3, r3, #9
 80053f2:	f003 0301 	and.w	r3, r3, #1
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	f000 8093 	beq.w	8005522 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 80053fc:	6878      	ldr	r0, [r7, #4]
 80053fe:	f000 fbf2 	bl	8005be6 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005402:	e08e      	b.n	8005522 <HAL_I2C_EV_IRQHandler+0x2d6>
 8005404:	e08d      	b.n	8005522 <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800540a:	2b00      	cmp	r3, #0
 800540c:	d004      	beq.n	8005418 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	695b      	ldr	r3, [r3, #20]
 8005414:	61fb      	str	r3, [r7, #28]
 8005416:	e007      	b.n	8005428 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	699b      	ldr	r3, [r3, #24]
 800541e:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	695b      	ldr	r3, [r3, #20]
 8005426:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005428:	69fb      	ldr	r3, [r7, #28]
 800542a:	085b      	lsrs	r3, r3, #1
 800542c:	f003 0301 	and.w	r3, r3, #1
 8005430:	2b00      	cmp	r3, #0
 8005432:	d012      	beq.n	800545a <HAL_I2C_EV_IRQHandler+0x20e>
 8005434:	697b      	ldr	r3, [r7, #20]
 8005436:	0a5b      	lsrs	r3, r3, #9
 8005438:	f003 0301 	and.w	r3, r3, #1
 800543c:	2b00      	cmp	r3, #0
 800543e:	d00c      	beq.n	800545a <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005444:	2b00      	cmp	r3, #0
 8005446:	d003      	beq.n	8005450 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	699b      	ldr	r3, [r3, #24]
 800544e:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8005450:	69b9      	ldr	r1, [r7, #24]
 8005452:	6878      	ldr	r0, [r7, #4]
 8005454:	f000 ffb0 	bl	80063b8 <I2C_Slave_ADDR>
 8005458:	e066      	b.n	8005528 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800545a:	69fb      	ldr	r3, [r7, #28]
 800545c:	091b      	lsrs	r3, r3, #4
 800545e:	f003 0301 	and.w	r3, r3, #1
 8005462:	2b00      	cmp	r3, #0
 8005464:	d009      	beq.n	800547a <HAL_I2C_EV_IRQHandler+0x22e>
 8005466:	697b      	ldr	r3, [r7, #20]
 8005468:	0a5b      	lsrs	r3, r3, #9
 800546a:	f003 0301 	and.w	r3, r3, #1
 800546e:	2b00      	cmp	r3, #0
 8005470:	d003      	beq.n	800547a <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8005472:	6878      	ldr	r0, [r7, #4]
 8005474:	f000 ffea 	bl	800644c <I2C_Slave_STOPF>
 8005478:	e056      	b.n	8005528 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800547a:	7bbb      	ldrb	r3, [r7, #14]
 800547c:	2b21      	cmp	r3, #33	; 0x21
 800547e:	d002      	beq.n	8005486 <HAL_I2C_EV_IRQHandler+0x23a>
 8005480:	7bbb      	ldrb	r3, [r7, #14]
 8005482:	2b29      	cmp	r3, #41	; 0x29
 8005484:	d125      	bne.n	80054d2 <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005486:	69fb      	ldr	r3, [r7, #28]
 8005488:	09db      	lsrs	r3, r3, #7
 800548a:	f003 0301 	and.w	r3, r3, #1
 800548e:	2b00      	cmp	r3, #0
 8005490:	d00f      	beq.n	80054b2 <HAL_I2C_EV_IRQHandler+0x266>
 8005492:	697b      	ldr	r3, [r7, #20]
 8005494:	0a9b      	lsrs	r3, r3, #10
 8005496:	f003 0301 	and.w	r3, r3, #1
 800549a:	2b00      	cmp	r3, #0
 800549c:	d009      	beq.n	80054b2 <HAL_I2C_EV_IRQHandler+0x266>
 800549e:	69fb      	ldr	r3, [r7, #28]
 80054a0:	089b      	lsrs	r3, r3, #2
 80054a2:	f003 0301 	and.w	r3, r3, #1
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d103      	bne.n	80054b2 <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 80054aa:	6878      	ldr	r0, [r7, #4]
 80054ac:	f000 fec6 	bl	800623c <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80054b0:	e039      	b.n	8005526 <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80054b2:	69fb      	ldr	r3, [r7, #28]
 80054b4:	089b      	lsrs	r3, r3, #2
 80054b6:	f003 0301 	and.w	r3, r3, #1
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d033      	beq.n	8005526 <HAL_I2C_EV_IRQHandler+0x2da>
 80054be:	697b      	ldr	r3, [r7, #20]
 80054c0:	0a5b      	lsrs	r3, r3, #9
 80054c2:	f003 0301 	and.w	r3, r3, #1
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d02d      	beq.n	8005526 <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 80054ca:	6878      	ldr	r0, [r7, #4]
 80054cc:	f000 fef3 	bl	80062b6 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80054d0:	e029      	b.n	8005526 <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80054d2:	69fb      	ldr	r3, [r7, #28]
 80054d4:	099b      	lsrs	r3, r3, #6
 80054d6:	f003 0301 	and.w	r3, r3, #1
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d00f      	beq.n	80054fe <HAL_I2C_EV_IRQHandler+0x2b2>
 80054de:	697b      	ldr	r3, [r7, #20]
 80054e0:	0a9b      	lsrs	r3, r3, #10
 80054e2:	f003 0301 	and.w	r3, r3, #1
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d009      	beq.n	80054fe <HAL_I2C_EV_IRQHandler+0x2b2>
 80054ea:	69fb      	ldr	r3, [r7, #28]
 80054ec:	089b      	lsrs	r3, r3, #2
 80054ee:	f003 0301 	and.w	r3, r3, #1
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d103      	bne.n	80054fe <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 80054f6:	6878      	ldr	r0, [r7, #4]
 80054f8:	f000 fefe 	bl	80062f8 <I2C_SlaveReceive_RXNE>
 80054fc:	e014      	b.n	8005528 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80054fe:	69fb      	ldr	r3, [r7, #28]
 8005500:	089b      	lsrs	r3, r3, #2
 8005502:	f003 0301 	and.w	r3, r3, #1
 8005506:	2b00      	cmp	r3, #0
 8005508:	d00e      	beq.n	8005528 <HAL_I2C_EV_IRQHandler+0x2dc>
 800550a:	697b      	ldr	r3, [r7, #20]
 800550c:	0a5b      	lsrs	r3, r3, #9
 800550e:	f003 0301 	and.w	r3, r3, #1
 8005512:	2b00      	cmp	r3, #0
 8005514:	d008      	beq.n	8005528 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8005516:	6878      	ldr	r0, [r7, #4]
 8005518:	f000 ff2c 	bl	8006374 <I2C_SlaveReceive_BTF>
 800551c:	e004      	b.n	8005528 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 800551e:	bf00      	nop
 8005520:	e002      	b.n	8005528 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005522:	bf00      	nop
 8005524:	e000      	b.n	8005528 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005526:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8005528:	3720      	adds	r7, #32
 800552a:	46bd      	mov	sp, r7
 800552c:	bd80      	pop	{r7, pc}

0800552e <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800552e:	b580      	push	{r7, lr}
 8005530:	b08a      	sub	sp, #40	; 0x28
 8005532:	af00      	add	r7, sp, #0
 8005534:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	695b      	ldr	r3, [r3, #20]
 800553c:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	685b      	ldr	r3, [r3, #4]
 8005544:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8005546:	2300      	movs	r3, #0
 8005548:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005550:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8005552:	6a3b      	ldr	r3, [r7, #32]
 8005554:	0a1b      	lsrs	r3, r3, #8
 8005556:	f003 0301 	and.w	r3, r3, #1
 800555a:	2b00      	cmp	r3, #0
 800555c:	d00e      	beq.n	800557c <HAL_I2C_ER_IRQHandler+0x4e>
 800555e:	69fb      	ldr	r3, [r7, #28]
 8005560:	0a1b      	lsrs	r3, r3, #8
 8005562:	f003 0301 	and.w	r3, r3, #1
 8005566:	2b00      	cmp	r3, #0
 8005568:	d008      	beq.n	800557c <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 800556a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800556c:	f043 0301 	orr.w	r3, r3, #1
 8005570:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800557a:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800557c:	6a3b      	ldr	r3, [r7, #32]
 800557e:	0a5b      	lsrs	r3, r3, #9
 8005580:	f003 0301 	and.w	r3, r3, #1
 8005584:	2b00      	cmp	r3, #0
 8005586:	d00e      	beq.n	80055a6 <HAL_I2C_ER_IRQHandler+0x78>
 8005588:	69fb      	ldr	r3, [r7, #28]
 800558a:	0a1b      	lsrs	r3, r3, #8
 800558c:	f003 0301 	and.w	r3, r3, #1
 8005590:	2b00      	cmp	r3, #0
 8005592:	d008      	beq.n	80055a6 <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8005594:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005596:	f043 0302 	orr.w	r3, r3, #2
 800559a:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	f46f 7200 	mvn.w	r2, #512	; 0x200
 80055a4:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80055a6:	6a3b      	ldr	r3, [r7, #32]
 80055a8:	0a9b      	lsrs	r3, r3, #10
 80055aa:	f003 0301 	and.w	r3, r3, #1
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d03f      	beq.n	8005632 <HAL_I2C_ER_IRQHandler+0x104>
 80055b2:	69fb      	ldr	r3, [r7, #28]
 80055b4:	0a1b      	lsrs	r3, r3, #8
 80055b6:	f003 0301 	and.w	r3, r3, #1
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d039      	beq.n	8005632 <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 80055be:	7efb      	ldrb	r3, [r7, #27]
 80055c0:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80055c6:	b29b      	uxth	r3, r3
 80055c8:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80055d0:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055d6:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 80055d8:	7ebb      	ldrb	r3, [r7, #26]
 80055da:	2b20      	cmp	r3, #32
 80055dc:	d112      	bne.n	8005604 <HAL_I2C_ER_IRQHandler+0xd6>
 80055de:	697b      	ldr	r3, [r7, #20]
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d10f      	bne.n	8005604 <HAL_I2C_ER_IRQHandler+0xd6>
 80055e4:	7cfb      	ldrb	r3, [r7, #19]
 80055e6:	2b21      	cmp	r3, #33	; 0x21
 80055e8:	d008      	beq.n	80055fc <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 80055ea:	7cfb      	ldrb	r3, [r7, #19]
 80055ec:	2b29      	cmp	r3, #41	; 0x29
 80055ee:	d005      	beq.n	80055fc <HAL_I2C_ER_IRQHandler+0xce>
 80055f0:	7cfb      	ldrb	r3, [r7, #19]
 80055f2:	2b28      	cmp	r3, #40	; 0x28
 80055f4:	d106      	bne.n	8005604 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	2b21      	cmp	r3, #33	; 0x21
 80055fa:	d103      	bne.n	8005604 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 80055fc:	6878      	ldr	r0, [r7, #4]
 80055fe:	f001 f855 	bl	80066ac <I2C_Slave_AF>
 8005602:	e016      	b.n	8005632 <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800560c:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 800560e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005610:	f043 0304 	orr.w	r3, r3, #4
 8005614:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8005616:	7efb      	ldrb	r3, [r7, #27]
 8005618:	2b10      	cmp	r3, #16
 800561a:	d002      	beq.n	8005622 <HAL_I2C_ER_IRQHandler+0xf4>
 800561c:	7efb      	ldrb	r3, [r7, #27]
 800561e:	2b40      	cmp	r3, #64	; 0x40
 8005620:	d107      	bne.n	8005632 <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	681a      	ldr	r2, [r3, #0]
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005630:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8005632:	6a3b      	ldr	r3, [r7, #32]
 8005634:	0adb      	lsrs	r3, r3, #11
 8005636:	f003 0301 	and.w	r3, r3, #1
 800563a:	2b00      	cmp	r3, #0
 800563c:	d00e      	beq.n	800565c <HAL_I2C_ER_IRQHandler+0x12e>
 800563e:	69fb      	ldr	r3, [r7, #28]
 8005640:	0a1b      	lsrs	r3, r3, #8
 8005642:	f003 0301 	and.w	r3, r3, #1
 8005646:	2b00      	cmp	r3, #0
 8005648:	d008      	beq.n	800565c <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 800564a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800564c:	f043 0308 	orr.w	r3, r3, #8
 8005650:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 800565a:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 800565c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800565e:	2b00      	cmp	r3, #0
 8005660:	d008      	beq.n	8005674 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005666:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005668:	431a      	orrs	r2, r3
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 800566e:	6878      	ldr	r0, [r7, #4]
 8005670:	f001 f88c 	bl	800678c <I2C_ITError>
  }
}
 8005674:	bf00      	nop
 8005676:	3728      	adds	r7, #40	; 0x28
 8005678:	46bd      	mov	sp, r7
 800567a:	bd80      	pop	{r7, pc}

0800567c <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800567c:	b480      	push	{r7}
 800567e:	b083      	sub	sp, #12
 8005680:	af00      	add	r7, sp, #0
 8005682:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8005684:	bf00      	nop
 8005686:	370c      	adds	r7, #12
 8005688:	46bd      	mov	sp, r7
 800568a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800568e:	4770      	bx	lr

08005690 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005690:	b480      	push	{r7}
 8005692:	b083      	sub	sp, #12
 8005694:	af00      	add	r7, sp, #0
 8005696:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8005698:	bf00      	nop
 800569a:	370c      	adds	r7, #12
 800569c:	46bd      	mov	sp, r7
 800569e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a2:	4770      	bx	lr

080056a4 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80056a4:	b480      	push	{r7}
 80056a6:	b083      	sub	sp, #12
 80056a8:	af00      	add	r7, sp, #0
 80056aa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80056ac:	bf00      	nop
 80056ae:	370c      	adds	r7, #12
 80056b0:	46bd      	mov	sp, r7
 80056b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b6:	4770      	bx	lr

080056b8 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80056b8:	b480      	push	{r7}
 80056ba:	b083      	sub	sp, #12
 80056bc:	af00      	add	r7, sp, #0
 80056be:	6078      	str	r0, [r7, #4]
 80056c0:	460b      	mov	r3, r1
 80056c2:	70fb      	strb	r3, [r7, #3]
 80056c4:	4613      	mov	r3, r2
 80056c6:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80056c8:	bf00      	nop
 80056ca:	370c      	adds	r7, #12
 80056cc:	46bd      	mov	sp, r7
 80056ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d2:	4770      	bx	lr

080056d4 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80056d4:	b480      	push	{r7}
 80056d6:	b083      	sub	sp, #12
 80056d8:	af00      	add	r7, sp, #0
 80056da:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 80056dc:	bf00      	nop
 80056de:	370c      	adds	r7, #12
 80056e0:	46bd      	mov	sp, r7
 80056e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e6:	4770      	bx	lr

080056e8 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80056e8:	b480      	push	{r7}
 80056ea:	b083      	sub	sp, #12
 80056ec:	af00      	add	r7, sp, #0
 80056ee:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 80056f0:	bf00      	nop
 80056f2:	370c      	adds	r7, #12
 80056f4:	46bd      	mov	sp, r7
 80056f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056fa:	4770      	bx	lr

080056fc <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80056fc:	b480      	push	{r7}
 80056fe:	b083      	sub	sp, #12
 8005700:	af00      	add	r7, sp, #0
 8005702:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8005704:	bf00      	nop
 8005706:	370c      	adds	r7, #12
 8005708:	46bd      	mov	sp, r7
 800570a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800570e:	4770      	bx	lr

08005710 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8005710:	b480      	push	{r7}
 8005712:	b083      	sub	sp, #12
 8005714:	af00      	add	r7, sp, #0
 8005716:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8005718:	bf00      	nop
 800571a:	370c      	adds	r7, #12
 800571c:	46bd      	mov	sp, r7
 800571e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005722:	4770      	bx	lr

08005724 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005724:	b480      	push	{r7}
 8005726:	b083      	sub	sp, #12
 8005728:	af00      	add	r7, sp, #0
 800572a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800572c:	bf00      	nop
 800572e:	370c      	adds	r7, #12
 8005730:	46bd      	mov	sp, r7
 8005732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005736:	4770      	bx	lr

08005738 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8005738:	b580      	push	{r7, lr}
 800573a:	b084      	sub	sp, #16
 800573c:	af00      	add	r7, sp, #0
 800573e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005746:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800574e:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005754:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800575a:	2b00      	cmp	r3, #0
 800575c:	d150      	bne.n	8005800 <I2C_MasterTransmit_TXE+0xc8>
 800575e:	7bfb      	ldrb	r3, [r7, #15]
 8005760:	2b21      	cmp	r3, #33	; 0x21
 8005762:	d14d      	bne.n	8005800 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005764:	68bb      	ldr	r3, [r7, #8]
 8005766:	2b08      	cmp	r3, #8
 8005768:	d01d      	beq.n	80057a6 <I2C_MasterTransmit_TXE+0x6e>
 800576a:	68bb      	ldr	r3, [r7, #8]
 800576c:	2b20      	cmp	r3, #32
 800576e:	d01a      	beq.n	80057a6 <I2C_MasterTransmit_TXE+0x6e>
 8005770:	68bb      	ldr	r3, [r7, #8]
 8005772:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005776:	d016      	beq.n	80057a6 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	685a      	ldr	r2, [r3, #4]
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005786:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	2211      	movs	r2, #17
 800578c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	2200      	movs	r2, #0
 8005792:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	2220      	movs	r2, #32
 800579a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800579e:	6878      	ldr	r0, [r7, #4]
 80057a0:	f7ff ff6c 	bl	800567c <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80057a4:	e060      	b.n	8005868 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	685a      	ldr	r2, [r3, #4]
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80057b4:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	681a      	ldr	r2, [r3, #0]
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80057c4:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	2200      	movs	r2, #0
 80057ca:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	2220      	movs	r2, #32
 80057d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80057da:	b2db      	uxtb	r3, r3
 80057dc:	2b40      	cmp	r3, #64	; 0x40
 80057de:	d107      	bne.n	80057f0 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	2200      	movs	r2, #0
 80057e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 80057e8:	6878      	ldr	r0, [r7, #4]
 80057ea:	f7ff ff7d 	bl	80056e8 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80057ee:	e03b      	b.n	8005868 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	2200      	movs	r2, #0
 80057f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80057f8:	6878      	ldr	r0, [r7, #4]
 80057fa:	f7ff ff3f 	bl	800567c <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80057fe:	e033      	b.n	8005868 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8005800:	7bfb      	ldrb	r3, [r7, #15]
 8005802:	2b21      	cmp	r3, #33	; 0x21
 8005804:	d005      	beq.n	8005812 <I2C_MasterTransmit_TXE+0xda>
 8005806:	7bbb      	ldrb	r3, [r7, #14]
 8005808:	2b40      	cmp	r3, #64	; 0x40
 800580a:	d12d      	bne.n	8005868 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 800580c:	7bfb      	ldrb	r3, [r7, #15]
 800580e:	2b22      	cmp	r3, #34	; 0x22
 8005810:	d12a      	bne.n	8005868 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005816:	b29b      	uxth	r3, r3
 8005818:	2b00      	cmp	r3, #0
 800581a:	d108      	bne.n	800582e <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	685a      	ldr	r2, [r3, #4]
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800582a:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 800582c:	e01c      	b.n	8005868 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005834:	b2db      	uxtb	r3, r3
 8005836:	2b40      	cmp	r3, #64	; 0x40
 8005838:	d103      	bne.n	8005842 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 800583a:	6878      	ldr	r0, [r7, #4]
 800583c:	f000 f88e 	bl	800595c <I2C_MemoryTransmit_TXE_BTF>
}
 8005840:	e012      	b.n	8005868 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005846:	781a      	ldrb	r2, [r3, #0]
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005852:	1c5a      	adds	r2, r3, #1
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800585c:	b29b      	uxth	r3, r3
 800585e:	3b01      	subs	r3, #1
 8005860:	b29a      	uxth	r2, r3
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8005866:	e7ff      	b.n	8005868 <I2C_MasterTransmit_TXE+0x130>
 8005868:	bf00      	nop
 800586a:	3710      	adds	r7, #16
 800586c:	46bd      	mov	sp, r7
 800586e:	bd80      	pop	{r7, pc}

08005870 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8005870:	b580      	push	{r7, lr}
 8005872:	b084      	sub	sp, #16
 8005874:	af00      	add	r7, sp, #0
 8005876:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800587c:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005884:	b2db      	uxtb	r3, r3
 8005886:	2b21      	cmp	r3, #33	; 0x21
 8005888:	d164      	bne.n	8005954 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800588e:	b29b      	uxth	r3, r3
 8005890:	2b00      	cmp	r3, #0
 8005892:	d012      	beq.n	80058ba <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005898:	781a      	ldrb	r2, [r3, #0]
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058a4:	1c5a      	adds	r2, r3, #1
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80058ae:	b29b      	uxth	r3, r3
 80058b0:	3b01      	subs	r3, #1
 80058b2:	b29a      	uxth	r2, r3
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 80058b8:	e04c      	b.n	8005954 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	2b08      	cmp	r3, #8
 80058be:	d01d      	beq.n	80058fc <I2C_MasterTransmit_BTF+0x8c>
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	2b20      	cmp	r3, #32
 80058c4:	d01a      	beq.n	80058fc <I2C_MasterTransmit_BTF+0x8c>
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80058cc:	d016      	beq.n	80058fc <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	685a      	ldr	r2, [r3, #4]
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80058dc:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	2211      	movs	r2, #17
 80058e2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	2200      	movs	r2, #0
 80058e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	2220      	movs	r2, #32
 80058f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80058f4:	6878      	ldr	r0, [r7, #4]
 80058f6:	f7ff fec1 	bl	800567c <HAL_I2C_MasterTxCpltCallback>
}
 80058fa:	e02b      	b.n	8005954 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	685a      	ldr	r2, [r3, #4]
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800590a:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	681a      	ldr	r2, [r3, #0]
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800591a:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	2200      	movs	r2, #0
 8005920:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	2220      	movs	r2, #32
 8005926:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005930:	b2db      	uxtb	r3, r3
 8005932:	2b40      	cmp	r3, #64	; 0x40
 8005934:	d107      	bne.n	8005946 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	2200      	movs	r2, #0
 800593a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 800593e:	6878      	ldr	r0, [r7, #4]
 8005940:	f7ff fed2 	bl	80056e8 <HAL_I2C_MemTxCpltCallback>
}
 8005944:	e006      	b.n	8005954 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	2200      	movs	r2, #0
 800594a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 800594e:	6878      	ldr	r0, [r7, #4]
 8005950:	f7ff fe94 	bl	800567c <HAL_I2C_MasterTxCpltCallback>
}
 8005954:	bf00      	nop
 8005956:	3710      	adds	r7, #16
 8005958:	46bd      	mov	sp, r7
 800595a:	bd80      	pop	{r7, pc}

0800595c <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 800595c:	b580      	push	{r7, lr}
 800595e:	b084      	sub	sp, #16
 8005960:	af00      	add	r7, sp, #0
 8005962:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800596a:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005970:	2b00      	cmp	r3, #0
 8005972:	d11d      	bne.n	80059b0 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005978:	2b01      	cmp	r3, #1
 800597a:	d10b      	bne.n	8005994 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005980:	b2da      	uxtb	r2, r3
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800598c:	1c9a      	adds	r2, r3, #2
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8005992:	e073      	b.n	8005a7c <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005998:	b29b      	uxth	r3, r3
 800599a:	121b      	asrs	r3, r3, #8
 800599c:	b2da      	uxtb	r2, r3
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80059a8:	1c5a      	adds	r2, r3, #1
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	651a      	str	r2, [r3, #80]	; 0x50
}
 80059ae:	e065      	b.n	8005a7c <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80059b4:	2b01      	cmp	r3, #1
 80059b6:	d10b      	bne.n	80059d0 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80059bc:	b2da      	uxtb	r2, r3
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80059c8:	1c5a      	adds	r2, r3, #1
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	651a      	str	r2, [r3, #80]	; 0x50
}
 80059ce:	e055      	b.n	8005a7c <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80059d4:	2b02      	cmp	r3, #2
 80059d6:	d151      	bne.n	8005a7c <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 80059d8:	7bfb      	ldrb	r3, [r7, #15]
 80059da:	2b22      	cmp	r3, #34	; 0x22
 80059dc:	d10d      	bne.n	80059fa <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	681a      	ldr	r2, [r3, #0]
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80059ec:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80059f2:	1c5a      	adds	r2, r3, #1
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	651a      	str	r2, [r3, #80]	; 0x50
}
 80059f8:	e040      	b.n	8005a7c <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80059fe:	b29b      	uxth	r3, r3
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d015      	beq.n	8005a30 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8005a04:	7bfb      	ldrb	r3, [r7, #15]
 8005a06:	2b21      	cmp	r3, #33	; 0x21
 8005a08:	d112      	bne.n	8005a30 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a0e:	781a      	ldrb	r2, [r3, #0]
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a1a:	1c5a      	adds	r2, r3, #1
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a24:	b29b      	uxth	r3, r3
 8005a26:	3b01      	subs	r3, #1
 8005a28:	b29a      	uxth	r2, r3
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8005a2e:	e025      	b.n	8005a7c <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a34:	b29b      	uxth	r3, r3
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d120      	bne.n	8005a7c <I2C_MemoryTransmit_TXE_BTF+0x120>
 8005a3a:	7bfb      	ldrb	r3, [r7, #15]
 8005a3c:	2b21      	cmp	r3, #33	; 0x21
 8005a3e:	d11d      	bne.n	8005a7c <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	685a      	ldr	r2, [r3, #4]
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005a4e:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	681a      	ldr	r2, [r3, #0]
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005a5e:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	2200      	movs	r2, #0
 8005a64:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	2220      	movs	r2, #32
 8005a6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	2200      	movs	r2, #0
 8005a72:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8005a76:	6878      	ldr	r0, [r7, #4]
 8005a78:	f7ff fe36 	bl	80056e8 <HAL_I2C_MemTxCpltCallback>
}
 8005a7c:	bf00      	nop
 8005a7e:	3710      	adds	r7, #16
 8005a80:	46bd      	mov	sp, r7
 8005a82:	bd80      	pop	{r7, pc}

08005a84 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8005a84:	b580      	push	{r7, lr}
 8005a86:	b084      	sub	sp, #16
 8005a88:	af00      	add	r7, sp, #0
 8005a8a:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a92:	b2db      	uxtb	r3, r3
 8005a94:	2b22      	cmp	r3, #34	; 0x22
 8005a96:	f040 80a2 	bne.w	8005bde <I2C_MasterReceive_RXNE+0x15a>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a9e:	b29b      	uxth	r3, r3
 8005aa0:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	2b03      	cmp	r3, #3
 8005aa6:	d921      	bls.n	8005aec <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	691a      	ldr	r2, [r3, #16]
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ab2:	b2d2      	uxtb	r2, r2
 8005ab4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005aba:	1c5a      	adds	r2, r3, #1
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ac4:	b29b      	uxth	r3, r3
 8005ac6:	3b01      	subs	r3, #1
 8005ac8:	b29a      	uxth	r2, r3
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ad2:	b29b      	uxth	r3, r3
 8005ad4:	2b03      	cmp	r3, #3
 8005ad6:	f040 8082 	bne.w	8005bde <I2C_MasterReceive_RXNE+0x15a>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	685a      	ldr	r2, [r3, #4]
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005ae8:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 8005aea:	e078      	b.n	8005bde <I2C_MasterReceive_RXNE+0x15a>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005af0:	2b02      	cmp	r3, #2
 8005af2:	d074      	beq.n	8005bde <I2C_MasterReceive_RXNE+0x15a>
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	2b01      	cmp	r3, #1
 8005af8:	d002      	beq.n	8005b00 <I2C_MasterReceive_RXNE+0x7c>
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d16e      	bne.n	8005bde <I2C_MasterReceive_RXNE+0x15a>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8005b00:	6878      	ldr	r0, [r7, #4]
 8005b02:	f001 fc87 	bl	8007414 <I2C_WaitOnSTOPRequestThroughIT>
 8005b06:	4603      	mov	r3, r0
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d142      	bne.n	8005b92 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	681a      	ldr	r2, [r3, #0]
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005b1a:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	685a      	ldr	r2, [r3, #4]
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005b2a:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	691a      	ldr	r2, [r3, #16]
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b36:	b2d2      	uxtb	r2, r2
 8005b38:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b3e:	1c5a      	adds	r2, r3, #1
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b48:	b29b      	uxth	r3, r3
 8005b4a:	3b01      	subs	r3, #1
 8005b4c:	b29a      	uxth	r2, r3
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	2220      	movs	r2, #32
 8005b56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005b60:	b2db      	uxtb	r3, r3
 8005b62:	2b40      	cmp	r3, #64	; 0x40
 8005b64:	d10a      	bne.n	8005b7c <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	2200      	movs	r2, #0
 8005b6a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	2200      	movs	r2, #0
 8005b72:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8005b74:	6878      	ldr	r0, [r7, #4]
 8005b76:	f7ff fdc1 	bl	80056fc <HAL_I2C_MemRxCpltCallback>
}
 8005b7a:	e030      	b.n	8005bde <I2C_MasterReceive_RXNE+0x15a>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	2200      	movs	r2, #0
 8005b80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	2212      	movs	r2, #18
 8005b88:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8005b8a:	6878      	ldr	r0, [r7, #4]
 8005b8c:	f7fc f8d0 	bl	8001d30 <HAL_I2C_MasterRxCpltCallback>
}
 8005b90:	e025      	b.n	8005bde <I2C_MasterReceive_RXNE+0x15a>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	685a      	ldr	r2, [r3, #4]
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005ba0:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	691a      	ldr	r2, [r3, #16]
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bac:	b2d2      	uxtb	r2, r2
 8005bae:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bb4:	1c5a      	adds	r2, r3, #1
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005bbe:	b29b      	uxth	r3, r3
 8005bc0:	3b01      	subs	r3, #1
 8005bc2:	b29a      	uxth	r2, r3
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	2220      	movs	r2, #32
 8005bcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	2200      	movs	r2, #0
 8005bd4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8005bd8:	6878      	ldr	r0, [r7, #4]
 8005bda:	f7ff fd99 	bl	8005710 <HAL_I2C_ErrorCallback>
}
 8005bde:	bf00      	nop
 8005be0:	3710      	adds	r7, #16
 8005be2:	46bd      	mov	sp, r7
 8005be4:	bd80      	pop	{r7, pc}

08005be6 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8005be6:	b580      	push	{r7, lr}
 8005be8:	b084      	sub	sp, #16
 8005bea:	af00      	add	r7, sp, #0
 8005bec:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bf2:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005bf8:	b29b      	uxth	r3, r3
 8005bfa:	2b04      	cmp	r3, #4
 8005bfc:	d11b      	bne.n	8005c36 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	685a      	ldr	r2, [r3, #4]
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005c0c:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	691a      	ldr	r2, [r3, #16]
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c18:	b2d2      	uxtb	r2, r2
 8005c1a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c20:	1c5a      	adds	r2, r3, #1
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c2a:	b29b      	uxth	r3, r3
 8005c2c:	3b01      	subs	r3, #1
 8005c2e:	b29a      	uxth	r2, r3
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8005c34:	e0bd      	b.n	8005db2 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c3a:	b29b      	uxth	r3, r3
 8005c3c:	2b03      	cmp	r3, #3
 8005c3e:	d129      	bne.n	8005c94 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	685a      	ldr	r2, [r3, #4]
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005c4e:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	2b04      	cmp	r3, #4
 8005c54:	d00a      	beq.n	8005c6c <I2C_MasterReceive_BTF+0x86>
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	2b02      	cmp	r3, #2
 8005c5a:	d007      	beq.n	8005c6c <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	681a      	ldr	r2, [r3, #0]
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005c6a:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	691a      	ldr	r2, [r3, #16]
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c76:	b2d2      	uxtb	r2, r2
 8005c78:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c7e:	1c5a      	adds	r2, r3, #1
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c88:	b29b      	uxth	r3, r3
 8005c8a:	3b01      	subs	r3, #1
 8005c8c:	b29a      	uxth	r2, r3
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8005c92:	e08e      	b.n	8005db2 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c98:	b29b      	uxth	r3, r3
 8005c9a:	2b02      	cmp	r3, #2
 8005c9c:	d176      	bne.n	8005d8c <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	2b01      	cmp	r3, #1
 8005ca2:	d002      	beq.n	8005caa <I2C_MasterReceive_BTF+0xc4>
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	2b10      	cmp	r3, #16
 8005ca8:	d108      	bne.n	8005cbc <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	681a      	ldr	r2, [r3, #0]
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005cb8:	601a      	str	r2, [r3, #0]
 8005cba:	e019      	b.n	8005cf0 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	2b04      	cmp	r3, #4
 8005cc0:	d002      	beq.n	8005cc8 <I2C_MasterReceive_BTF+0xe2>
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	2b02      	cmp	r3, #2
 8005cc6:	d108      	bne.n	8005cda <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	681a      	ldr	r2, [r3, #0]
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005cd6:	601a      	str	r2, [r3, #0]
 8005cd8:	e00a      	b.n	8005cf0 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	2b10      	cmp	r3, #16
 8005cde:	d007      	beq.n	8005cf0 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	681a      	ldr	r2, [r3, #0]
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005cee:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	691a      	ldr	r2, [r3, #16]
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cfa:	b2d2      	uxtb	r2, r2
 8005cfc:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d02:	1c5a      	adds	r2, r3, #1
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d0c:	b29b      	uxth	r3, r3
 8005d0e:	3b01      	subs	r3, #1
 8005d10:	b29a      	uxth	r2, r3
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	691a      	ldr	r2, [r3, #16]
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d20:	b2d2      	uxtb	r2, r2
 8005d22:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d28:	1c5a      	adds	r2, r3, #1
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d32:	b29b      	uxth	r3, r3
 8005d34:	3b01      	subs	r3, #1
 8005d36:	b29a      	uxth	r2, r3
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	685a      	ldr	r2, [r3, #4]
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8005d4a:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	2220      	movs	r2, #32
 8005d50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005d5a:	b2db      	uxtb	r3, r3
 8005d5c:	2b40      	cmp	r3, #64	; 0x40
 8005d5e:	d10a      	bne.n	8005d76 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	2200      	movs	r2, #0
 8005d64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	2200      	movs	r2, #0
 8005d6c:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8005d6e:	6878      	ldr	r0, [r7, #4]
 8005d70:	f7ff fcc4 	bl	80056fc <HAL_I2C_MemRxCpltCallback>
}
 8005d74:	e01d      	b.n	8005db2 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	2200      	movs	r2, #0
 8005d7a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	2212      	movs	r2, #18
 8005d82:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8005d84:	6878      	ldr	r0, [r7, #4]
 8005d86:	f7fb ffd3 	bl	8001d30 <HAL_I2C_MasterRxCpltCallback>
}
 8005d8a:	e012      	b.n	8005db2 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	691a      	ldr	r2, [r3, #16]
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d96:	b2d2      	uxtb	r2, r2
 8005d98:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d9e:	1c5a      	adds	r2, r3, #1
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005da8:	b29b      	uxth	r3, r3
 8005daa:	3b01      	subs	r3, #1
 8005dac:	b29a      	uxth	r2, r3
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8005db2:	bf00      	nop
 8005db4:	3710      	adds	r7, #16
 8005db6:	46bd      	mov	sp, r7
 8005db8:	bd80      	pop	{r7, pc}

08005dba <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8005dba:	b480      	push	{r7}
 8005dbc:	b083      	sub	sp, #12
 8005dbe:	af00      	add	r7, sp, #0
 8005dc0:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005dc8:	b2db      	uxtb	r3, r3
 8005dca:	2b40      	cmp	r3, #64	; 0x40
 8005dcc:	d117      	bne.n	8005dfe <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d109      	bne.n	8005dea <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005dda:	b2db      	uxtb	r3, r3
 8005ddc:	461a      	mov	r2, r3
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005de6:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8005de8:	e067      	b.n	8005eba <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005dee:	b2db      	uxtb	r3, r3
 8005df0:	f043 0301 	orr.w	r3, r3, #1
 8005df4:	b2da      	uxtb	r2, r3
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	611a      	str	r2, [r3, #16]
}
 8005dfc:	e05d      	b.n	8005eba <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	691b      	ldr	r3, [r3, #16]
 8005e02:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005e06:	d133      	bne.n	8005e70 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e0e:	b2db      	uxtb	r3, r3
 8005e10:	2b21      	cmp	r3, #33	; 0x21
 8005e12:	d109      	bne.n	8005e28 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e18:	b2db      	uxtb	r3, r3
 8005e1a:	461a      	mov	r2, r3
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005e24:	611a      	str	r2, [r3, #16]
 8005e26:	e008      	b.n	8005e3a <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e2c:	b2db      	uxtb	r3, r3
 8005e2e:	f043 0301 	orr.w	r3, r3, #1
 8005e32:	b2da      	uxtb	r2, r3
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d004      	beq.n	8005e4c <I2C_Master_SB+0x92>
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d108      	bne.n	8005e5e <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d032      	beq.n	8005eba <I2C_Master_SB+0x100>
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d02d      	beq.n	8005eba <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	685a      	ldr	r2, [r3, #4]
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005e6c:	605a      	str	r2, [r3, #4]
}
 8005e6e:	e024      	b.n	8005eba <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d10e      	bne.n	8005e96 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e7c:	b29b      	uxth	r3, r3
 8005e7e:	11db      	asrs	r3, r3, #7
 8005e80:	b2db      	uxtb	r3, r3
 8005e82:	f003 0306 	and.w	r3, r3, #6
 8005e86:	b2db      	uxtb	r3, r3
 8005e88:	f063 030f 	orn	r3, r3, #15
 8005e8c:	b2da      	uxtb	r2, r3
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	611a      	str	r2, [r3, #16]
}
 8005e94:	e011      	b.n	8005eba <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e9a:	2b01      	cmp	r3, #1
 8005e9c:	d10d      	bne.n	8005eba <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ea2:	b29b      	uxth	r3, r3
 8005ea4:	11db      	asrs	r3, r3, #7
 8005ea6:	b2db      	uxtb	r3, r3
 8005ea8:	f003 0306 	and.w	r3, r3, #6
 8005eac:	b2db      	uxtb	r3, r3
 8005eae:	f063 030e 	orn	r3, r3, #14
 8005eb2:	b2da      	uxtb	r2, r3
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	611a      	str	r2, [r3, #16]
}
 8005eba:	bf00      	nop
 8005ebc:	370c      	adds	r7, #12
 8005ebe:	46bd      	mov	sp, r7
 8005ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec4:	4770      	bx	lr

08005ec6 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8005ec6:	b480      	push	{r7}
 8005ec8:	b083      	sub	sp, #12
 8005eca:	af00      	add	r7, sp, #0
 8005ecc:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ed2:	b2da      	uxtb	r2, r3
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d004      	beq.n	8005eec <I2C_Master_ADD10+0x26>
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ee6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d108      	bne.n	8005efe <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d00c      	beq.n	8005f0e <I2C_Master_ADD10+0x48>
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ef8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d007      	beq.n	8005f0e <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	685a      	ldr	r2, [r3, #4]
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005f0c:	605a      	str	r2, [r3, #4]
  }
}
 8005f0e:	bf00      	nop
 8005f10:	370c      	adds	r7, #12
 8005f12:	46bd      	mov	sp, r7
 8005f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f18:	4770      	bx	lr

08005f1a <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8005f1a:	b480      	push	{r7}
 8005f1c:	b091      	sub	sp, #68	; 0x44
 8005f1e:	af00      	add	r7, sp, #0
 8005f20:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005f28:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f30:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f36:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f3e:	b2db      	uxtb	r3, r3
 8005f40:	2b22      	cmp	r3, #34	; 0x22
 8005f42:	f040 8169 	bne.w	8006218 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d10f      	bne.n	8005f6e <I2C_Master_ADDR+0x54>
 8005f4e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8005f52:	2b40      	cmp	r3, #64	; 0x40
 8005f54:	d10b      	bne.n	8005f6e <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005f56:	2300      	movs	r3, #0
 8005f58:	633b      	str	r3, [r7, #48]	; 0x30
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	695b      	ldr	r3, [r3, #20]
 8005f60:	633b      	str	r3, [r7, #48]	; 0x30
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	699b      	ldr	r3, [r3, #24]
 8005f68:	633b      	str	r3, [r7, #48]	; 0x30
 8005f6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f6c:	e160      	b.n	8006230 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d11d      	bne.n	8005fb2 <I2C_Master_ADDR+0x98>
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	691b      	ldr	r3, [r3, #16]
 8005f7a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005f7e:	d118      	bne.n	8005fb2 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005f80:	2300      	movs	r3, #0
 8005f82:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	695b      	ldr	r3, [r3, #20]
 8005f8a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	699b      	ldr	r3, [r3, #24]
 8005f92:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005f94:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	681a      	ldr	r2, [r3, #0]
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005fa4:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005faa:	1c5a      	adds	r2, r3, #1
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	651a      	str	r2, [r3, #80]	; 0x50
 8005fb0:	e13e      	b.n	8006230 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005fb6:	b29b      	uxth	r3, r3
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d113      	bne.n	8005fe4 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005fbc:	2300      	movs	r3, #0
 8005fbe:	62bb      	str	r3, [r7, #40]	; 0x28
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	695b      	ldr	r3, [r3, #20]
 8005fc6:	62bb      	str	r3, [r7, #40]	; 0x28
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	699b      	ldr	r3, [r3, #24]
 8005fce:	62bb      	str	r3, [r7, #40]	; 0x28
 8005fd0:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	681a      	ldr	r2, [r3, #0]
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005fe0:	601a      	str	r2, [r3, #0]
 8005fe2:	e115      	b.n	8006210 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005fe8:	b29b      	uxth	r3, r3
 8005fea:	2b01      	cmp	r3, #1
 8005fec:	f040 808a 	bne.w	8006104 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8005ff0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ff2:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005ff6:	d137      	bne.n	8006068 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	681a      	ldr	r2, [r3, #0]
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006006:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	685b      	ldr	r3, [r3, #4]
 800600e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006012:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006016:	d113      	bne.n	8006040 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	681a      	ldr	r2, [r3, #0]
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006026:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006028:	2300      	movs	r3, #0
 800602a:	627b      	str	r3, [r7, #36]	; 0x24
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	695b      	ldr	r3, [r3, #20]
 8006032:	627b      	str	r3, [r7, #36]	; 0x24
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	699b      	ldr	r3, [r3, #24]
 800603a:	627b      	str	r3, [r7, #36]	; 0x24
 800603c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800603e:	e0e7      	b.n	8006210 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006040:	2300      	movs	r3, #0
 8006042:	623b      	str	r3, [r7, #32]
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	695b      	ldr	r3, [r3, #20]
 800604a:	623b      	str	r3, [r7, #32]
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	699b      	ldr	r3, [r3, #24]
 8006052:	623b      	str	r3, [r7, #32]
 8006054:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	681a      	ldr	r2, [r3, #0]
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006064:	601a      	str	r2, [r3, #0]
 8006066:	e0d3      	b.n	8006210 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8006068:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800606a:	2b08      	cmp	r3, #8
 800606c:	d02e      	beq.n	80060cc <I2C_Master_ADDR+0x1b2>
 800606e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006070:	2b20      	cmp	r3, #32
 8006072:	d02b      	beq.n	80060cc <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8006074:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006076:	2b12      	cmp	r3, #18
 8006078:	d102      	bne.n	8006080 <I2C_Master_ADDR+0x166>
 800607a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800607c:	2b01      	cmp	r3, #1
 800607e:	d125      	bne.n	80060cc <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8006080:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006082:	2b04      	cmp	r3, #4
 8006084:	d00e      	beq.n	80060a4 <I2C_Master_ADDR+0x18a>
 8006086:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006088:	2b02      	cmp	r3, #2
 800608a:	d00b      	beq.n	80060a4 <I2C_Master_ADDR+0x18a>
 800608c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800608e:	2b10      	cmp	r3, #16
 8006090:	d008      	beq.n	80060a4 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	681a      	ldr	r2, [r3, #0]
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80060a0:	601a      	str	r2, [r3, #0]
 80060a2:	e007      	b.n	80060b4 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	681a      	ldr	r2, [r3, #0]
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80060b2:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80060b4:	2300      	movs	r3, #0
 80060b6:	61fb      	str	r3, [r7, #28]
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	695b      	ldr	r3, [r3, #20]
 80060be:	61fb      	str	r3, [r7, #28]
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	699b      	ldr	r3, [r3, #24]
 80060c6:	61fb      	str	r3, [r7, #28]
 80060c8:	69fb      	ldr	r3, [r7, #28]
 80060ca:	e0a1      	b.n	8006210 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	681a      	ldr	r2, [r3, #0]
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80060da:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80060dc:	2300      	movs	r3, #0
 80060de:	61bb      	str	r3, [r7, #24]
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	695b      	ldr	r3, [r3, #20]
 80060e6:	61bb      	str	r3, [r7, #24]
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	699b      	ldr	r3, [r3, #24]
 80060ee:	61bb      	str	r3, [r7, #24]
 80060f0:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	681a      	ldr	r2, [r3, #0]
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006100:	601a      	str	r2, [r3, #0]
 8006102:	e085      	b.n	8006210 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006108:	b29b      	uxth	r3, r3
 800610a:	2b02      	cmp	r3, #2
 800610c:	d14d      	bne.n	80061aa <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800610e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006110:	2b04      	cmp	r3, #4
 8006112:	d016      	beq.n	8006142 <I2C_Master_ADDR+0x228>
 8006114:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006116:	2b02      	cmp	r3, #2
 8006118:	d013      	beq.n	8006142 <I2C_Master_ADDR+0x228>
 800611a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800611c:	2b10      	cmp	r3, #16
 800611e:	d010      	beq.n	8006142 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	681a      	ldr	r2, [r3, #0]
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800612e:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	681a      	ldr	r2, [r3, #0]
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800613e:	601a      	str	r2, [r3, #0]
 8006140:	e007      	b.n	8006152 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	681a      	ldr	r2, [r3, #0]
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006150:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	685b      	ldr	r3, [r3, #4]
 8006158:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800615c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006160:	d117      	bne.n	8006192 <I2C_Master_ADDR+0x278>
 8006162:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006164:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006168:	d00b      	beq.n	8006182 <I2C_Master_ADDR+0x268>
 800616a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800616c:	2b01      	cmp	r3, #1
 800616e:	d008      	beq.n	8006182 <I2C_Master_ADDR+0x268>
 8006170:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006172:	2b08      	cmp	r3, #8
 8006174:	d005      	beq.n	8006182 <I2C_Master_ADDR+0x268>
 8006176:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006178:	2b10      	cmp	r3, #16
 800617a:	d002      	beq.n	8006182 <I2C_Master_ADDR+0x268>
 800617c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800617e:	2b20      	cmp	r3, #32
 8006180:	d107      	bne.n	8006192 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	685a      	ldr	r2, [r3, #4]
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006190:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006192:	2300      	movs	r3, #0
 8006194:	617b      	str	r3, [r7, #20]
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	695b      	ldr	r3, [r3, #20]
 800619c:	617b      	str	r3, [r7, #20]
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	699b      	ldr	r3, [r3, #24]
 80061a4:	617b      	str	r3, [r7, #20]
 80061a6:	697b      	ldr	r3, [r7, #20]
 80061a8:	e032      	b.n	8006210 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	681a      	ldr	r2, [r3, #0]
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80061b8:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	685b      	ldr	r3, [r3, #4]
 80061c0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80061c4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80061c8:	d117      	bne.n	80061fa <I2C_Master_ADDR+0x2e0>
 80061ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061cc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80061d0:	d00b      	beq.n	80061ea <I2C_Master_ADDR+0x2d0>
 80061d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061d4:	2b01      	cmp	r3, #1
 80061d6:	d008      	beq.n	80061ea <I2C_Master_ADDR+0x2d0>
 80061d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061da:	2b08      	cmp	r3, #8
 80061dc:	d005      	beq.n	80061ea <I2C_Master_ADDR+0x2d0>
 80061de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061e0:	2b10      	cmp	r3, #16
 80061e2:	d002      	beq.n	80061ea <I2C_Master_ADDR+0x2d0>
 80061e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061e6:	2b20      	cmp	r3, #32
 80061e8:	d107      	bne.n	80061fa <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	685a      	ldr	r2, [r3, #4]
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80061f8:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80061fa:	2300      	movs	r3, #0
 80061fc:	613b      	str	r3, [r7, #16]
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	695b      	ldr	r3, [r3, #20]
 8006204:	613b      	str	r3, [r7, #16]
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	699b      	ldr	r3, [r3, #24]
 800620c:	613b      	str	r3, [r7, #16]
 800620e:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	2200      	movs	r2, #0
 8006214:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8006216:	e00b      	b.n	8006230 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006218:	2300      	movs	r3, #0
 800621a:	60fb      	str	r3, [r7, #12]
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	695b      	ldr	r3, [r3, #20]
 8006222:	60fb      	str	r3, [r7, #12]
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	699b      	ldr	r3, [r3, #24]
 800622a:	60fb      	str	r3, [r7, #12]
 800622c:	68fb      	ldr	r3, [r7, #12]
}
 800622e:	e7ff      	b.n	8006230 <I2C_Master_ADDR+0x316>
 8006230:	bf00      	nop
 8006232:	3744      	adds	r7, #68	; 0x44
 8006234:	46bd      	mov	sp, r7
 8006236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800623a:	4770      	bx	lr

0800623c <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800623c:	b580      	push	{r7, lr}
 800623e:	b084      	sub	sp, #16
 8006240:	af00      	add	r7, sp, #0
 8006242:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800624a:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006250:	b29b      	uxth	r3, r3
 8006252:	2b00      	cmp	r3, #0
 8006254:	d02b      	beq.n	80062ae <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800625a:	781a      	ldrb	r2, [r3, #0]
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006266:	1c5a      	adds	r2, r3, #1
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006270:	b29b      	uxth	r3, r3
 8006272:	3b01      	subs	r3, #1
 8006274:	b29a      	uxth	r2, r3
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800627e:	b29b      	uxth	r3, r3
 8006280:	2b00      	cmp	r3, #0
 8006282:	d114      	bne.n	80062ae <I2C_SlaveTransmit_TXE+0x72>
 8006284:	7bfb      	ldrb	r3, [r7, #15]
 8006286:	2b29      	cmp	r3, #41	; 0x29
 8006288:	d111      	bne.n	80062ae <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	685a      	ldr	r2, [r3, #4]
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006298:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	2221      	movs	r2, #33	; 0x21
 800629e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	2228      	movs	r2, #40	; 0x28
 80062a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80062a8:	6878      	ldr	r0, [r7, #4]
 80062aa:	f7ff f9f1 	bl	8005690 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80062ae:	bf00      	nop
 80062b0:	3710      	adds	r7, #16
 80062b2:	46bd      	mov	sp, r7
 80062b4:	bd80      	pop	{r7, pc}

080062b6 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80062b6:	b480      	push	{r7}
 80062b8:	b083      	sub	sp, #12
 80062ba:	af00      	add	r7, sp, #0
 80062bc:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80062c2:	b29b      	uxth	r3, r3
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d011      	beq.n	80062ec <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062cc:	781a      	ldrb	r2, [r3, #0]
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062d8:	1c5a      	adds	r2, r3, #1
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80062e2:	b29b      	uxth	r3, r3
 80062e4:	3b01      	subs	r3, #1
 80062e6:	b29a      	uxth	r2, r3
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80062ec:	bf00      	nop
 80062ee:	370c      	adds	r7, #12
 80062f0:	46bd      	mov	sp, r7
 80062f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f6:	4770      	bx	lr

080062f8 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80062f8:	b580      	push	{r7, lr}
 80062fa:	b084      	sub	sp, #16
 80062fc:	af00      	add	r7, sp, #0
 80062fe:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006306:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800630c:	b29b      	uxth	r3, r3
 800630e:	2b00      	cmp	r3, #0
 8006310:	d02c      	beq.n	800636c <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	691a      	ldr	r2, [r3, #16]
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800631c:	b2d2      	uxtb	r2, r2
 800631e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006324:	1c5a      	adds	r2, r3, #1
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800632e:	b29b      	uxth	r3, r3
 8006330:	3b01      	subs	r3, #1
 8006332:	b29a      	uxth	r2, r3
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800633c:	b29b      	uxth	r3, r3
 800633e:	2b00      	cmp	r3, #0
 8006340:	d114      	bne.n	800636c <I2C_SlaveReceive_RXNE+0x74>
 8006342:	7bfb      	ldrb	r3, [r7, #15]
 8006344:	2b2a      	cmp	r3, #42	; 0x2a
 8006346:	d111      	bne.n	800636c <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	685a      	ldr	r2, [r3, #4]
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006356:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	2222      	movs	r2, #34	; 0x22
 800635c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	2228      	movs	r2, #40	; 0x28
 8006362:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006366:	6878      	ldr	r0, [r7, #4]
 8006368:	f7ff f99c 	bl	80056a4 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800636c:	bf00      	nop
 800636e:	3710      	adds	r7, #16
 8006370:	46bd      	mov	sp, r7
 8006372:	bd80      	pop	{r7, pc}

08006374 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8006374:	b480      	push	{r7}
 8006376:	b083      	sub	sp, #12
 8006378:	af00      	add	r7, sp, #0
 800637a:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006380:	b29b      	uxth	r3, r3
 8006382:	2b00      	cmp	r3, #0
 8006384:	d012      	beq.n	80063ac <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	691a      	ldr	r2, [r3, #16]
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006390:	b2d2      	uxtb	r2, r2
 8006392:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006398:	1c5a      	adds	r2, r3, #1
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80063a2:	b29b      	uxth	r3, r3
 80063a4:	3b01      	subs	r3, #1
 80063a6:	b29a      	uxth	r2, r3
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80063ac:	bf00      	nop
 80063ae:	370c      	adds	r7, #12
 80063b0:	46bd      	mov	sp, r7
 80063b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b6:	4770      	bx	lr

080063b8 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 80063b8:	b580      	push	{r7, lr}
 80063ba:	b084      	sub	sp, #16
 80063bc:	af00      	add	r7, sp, #0
 80063be:	6078      	str	r0, [r7, #4]
 80063c0:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 80063c2:	2300      	movs	r3, #0
 80063c4:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80063cc:	b2db      	uxtb	r3, r3
 80063ce:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80063d2:	2b28      	cmp	r3, #40	; 0x28
 80063d4:	d127      	bne.n	8006426 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	685a      	ldr	r2, [r3, #4]
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80063e4:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 80063e6:	683b      	ldr	r3, [r7, #0]
 80063e8:	089b      	lsrs	r3, r3, #2
 80063ea:	f003 0301 	and.w	r3, r3, #1
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d101      	bne.n	80063f6 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 80063f2:	2301      	movs	r3, #1
 80063f4:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 80063f6:	683b      	ldr	r3, [r7, #0]
 80063f8:	09db      	lsrs	r3, r3, #7
 80063fa:	f003 0301 	and.w	r3, r3, #1
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d103      	bne.n	800640a <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	68db      	ldr	r3, [r3, #12]
 8006406:	81bb      	strh	r3, [r7, #12]
 8006408:	e002      	b.n	8006410 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	699b      	ldr	r3, [r3, #24]
 800640e:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	2200      	movs	r2, #0
 8006414:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8006418:	89ba      	ldrh	r2, [r7, #12]
 800641a:	7bfb      	ldrb	r3, [r7, #15]
 800641c:	4619      	mov	r1, r3
 800641e:	6878      	ldr	r0, [r7, #4]
 8006420:	f7ff f94a 	bl	80056b8 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8006424:	e00e      	b.n	8006444 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006426:	2300      	movs	r3, #0
 8006428:	60bb      	str	r3, [r7, #8]
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	695b      	ldr	r3, [r3, #20]
 8006430:	60bb      	str	r3, [r7, #8]
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	699b      	ldr	r3, [r3, #24]
 8006438:	60bb      	str	r3, [r7, #8]
 800643a:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	2200      	movs	r2, #0
 8006440:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8006444:	bf00      	nop
 8006446:	3710      	adds	r7, #16
 8006448:	46bd      	mov	sp, r7
 800644a:	bd80      	pop	{r7, pc}

0800644c <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 800644c:	b580      	push	{r7, lr}
 800644e:	b084      	sub	sp, #16
 8006450:	af00      	add	r7, sp, #0
 8006452:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800645a:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	685a      	ldr	r2, [r3, #4]
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800646a:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 800646c:	2300      	movs	r3, #0
 800646e:	60bb      	str	r3, [r7, #8]
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	695b      	ldr	r3, [r3, #20]
 8006476:	60bb      	str	r3, [r7, #8]
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	681a      	ldr	r2, [r3, #0]
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	f042 0201 	orr.w	r2, r2, #1
 8006486:	601a      	str	r2, [r3, #0]
 8006488:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	681a      	ldr	r2, [r3, #0]
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006498:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	685b      	ldr	r3, [r3, #4]
 80064a0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80064a4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80064a8:	d172      	bne.n	8006590 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80064aa:	7bfb      	ldrb	r3, [r7, #15]
 80064ac:	2b22      	cmp	r3, #34	; 0x22
 80064ae:	d002      	beq.n	80064b6 <I2C_Slave_STOPF+0x6a>
 80064b0:	7bfb      	ldrb	r3, [r7, #15]
 80064b2:	2b2a      	cmp	r3, #42	; 0x2a
 80064b4:	d135      	bne.n	8006522 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	685b      	ldr	r3, [r3, #4]
 80064be:	b29a      	uxth	r2, r3
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80064c8:	b29b      	uxth	r3, r3
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d005      	beq.n	80064da <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064d2:	f043 0204 	orr.w	r2, r3, #4
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	685a      	ldr	r2, [r3, #4]
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80064e8:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064ee:	4618      	mov	r0, r3
 80064f0:	f7fd fd52 	bl	8003f98 <HAL_DMA_GetState>
 80064f4:	4603      	mov	r3, r0
 80064f6:	2b01      	cmp	r3, #1
 80064f8:	d049      	beq.n	800658e <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064fe:	4a69      	ldr	r2, [pc, #420]	; (80066a4 <I2C_Slave_STOPF+0x258>)
 8006500:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006506:	4618      	mov	r0, r3
 8006508:	f7fd fb9a 	bl	8003c40 <HAL_DMA_Abort_IT>
 800650c:	4603      	mov	r3, r0
 800650e:	2b00      	cmp	r3, #0
 8006510:	d03d      	beq.n	800658e <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006516:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006518:	687a      	ldr	r2, [r7, #4]
 800651a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800651c:	4610      	mov	r0, r2
 800651e:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006520:	e035      	b.n	800658e <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	685b      	ldr	r3, [r3, #4]
 800652a:	b29a      	uxth	r2, r3
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006534:	b29b      	uxth	r3, r3
 8006536:	2b00      	cmp	r3, #0
 8006538:	d005      	beq.n	8006546 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800653e:	f043 0204 	orr.w	r2, r3, #4
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	685a      	ldr	r2, [r3, #4]
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006554:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800655a:	4618      	mov	r0, r3
 800655c:	f7fd fd1c 	bl	8003f98 <HAL_DMA_GetState>
 8006560:	4603      	mov	r3, r0
 8006562:	2b01      	cmp	r3, #1
 8006564:	d014      	beq.n	8006590 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800656a:	4a4e      	ldr	r2, [pc, #312]	; (80066a4 <I2C_Slave_STOPF+0x258>)
 800656c:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006572:	4618      	mov	r0, r3
 8006574:	f7fd fb64 	bl	8003c40 <HAL_DMA_Abort_IT>
 8006578:	4603      	mov	r3, r0
 800657a:	2b00      	cmp	r3, #0
 800657c:	d008      	beq.n	8006590 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006582:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006584:	687a      	ldr	r2, [r7, #4]
 8006586:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8006588:	4610      	mov	r0, r2
 800658a:	4798      	blx	r3
 800658c:	e000      	b.n	8006590 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800658e:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006594:	b29b      	uxth	r3, r3
 8006596:	2b00      	cmp	r3, #0
 8006598:	d03e      	beq.n	8006618 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	695b      	ldr	r3, [r3, #20]
 80065a0:	f003 0304 	and.w	r3, r3, #4
 80065a4:	2b04      	cmp	r3, #4
 80065a6:	d112      	bne.n	80065ce <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	691a      	ldr	r2, [r3, #16]
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065b2:	b2d2      	uxtb	r2, r2
 80065b4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065ba:	1c5a      	adds	r2, r3, #1
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80065c4:	b29b      	uxth	r3, r3
 80065c6:	3b01      	subs	r3, #1
 80065c8:	b29a      	uxth	r2, r3
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	695b      	ldr	r3, [r3, #20]
 80065d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065d8:	2b40      	cmp	r3, #64	; 0x40
 80065da:	d112      	bne.n	8006602 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	691a      	ldr	r2, [r3, #16]
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065e6:	b2d2      	uxtb	r2, r2
 80065e8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065ee:	1c5a      	adds	r2, r3, #1
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80065f8:	b29b      	uxth	r3, r3
 80065fa:	3b01      	subs	r3, #1
 80065fc:	b29a      	uxth	r2, r3
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006606:	b29b      	uxth	r3, r3
 8006608:	2b00      	cmp	r3, #0
 800660a:	d005      	beq.n	8006618 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006610:	f043 0204 	orr.w	r2, r3, #4
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800661c:	2b00      	cmp	r3, #0
 800661e:	d003      	beq.n	8006628 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8006620:	6878      	ldr	r0, [r7, #4]
 8006622:	f000 f8b3 	bl	800678c <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8006626:	e039      	b.n	800669c <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8006628:	7bfb      	ldrb	r3, [r7, #15]
 800662a:	2b2a      	cmp	r3, #42	; 0x2a
 800662c:	d109      	bne.n	8006642 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	2200      	movs	r2, #0
 8006632:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	2228      	movs	r2, #40	; 0x28
 8006638:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800663c:	6878      	ldr	r0, [r7, #4]
 800663e:	f7ff f831 	bl	80056a4 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006648:	b2db      	uxtb	r3, r3
 800664a:	2b28      	cmp	r3, #40	; 0x28
 800664c:	d111      	bne.n	8006672 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	4a15      	ldr	r2, [pc, #84]	; (80066a8 <I2C_Slave_STOPF+0x25c>)
 8006652:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	2200      	movs	r2, #0
 8006658:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	2220      	movs	r2, #32
 800665e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	2200      	movs	r2, #0
 8006666:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 800666a:	6878      	ldr	r0, [r7, #4]
 800666c:	f7ff f832 	bl	80056d4 <HAL_I2C_ListenCpltCallback>
}
 8006670:	e014      	b.n	800669c <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006676:	2b22      	cmp	r3, #34	; 0x22
 8006678:	d002      	beq.n	8006680 <I2C_Slave_STOPF+0x234>
 800667a:	7bfb      	ldrb	r3, [r7, #15]
 800667c:	2b22      	cmp	r3, #34	; 0x22
 800667e:	d10d      	bne.n	800669c <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	2200      	movs	r2, #0
 8006684:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	2220      	movs	r2, #32
 800668a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	2200      	movs	r2, #0
 8006692:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006696:	6878      	ldr	r0, [r7, #4]
 8006698:	f7ff f804 	bl	80056a4 <HAL_I2C_SlaveRxCpltCallback>
}
 800669c:	bf00      	nop
 800669e:	3710      	adds	r7, #16
 80066a0:	46bd      	mov	sp, r7
 80066a2:	bd80      	pop	{r7, pc}
 80066a4:	08007015 	.word	0x08007015
 80066a8:	ffff0000 	.word	0xffff0000

080066ac <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 80066ac:	b580      	push	{r7, lr}
 80066ae:	b084      	sub	sp, #16
 80066b0:	af00      	add	r7, sp, #0
 80066b2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80066ba:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066c0:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 80066c2:	68bb      	ldr	r3, [r7, #8]
 80066c4:	2b08      	cmp	r3, #8
 80066c6:	d002      	beq.n	80066ce <I2C_Slave_AF+0x22>
 80066c8:	68bb      	ldr	r3, [r7, #8]
 80066ca:	2b20      	cmp	r3, #32
 80066cc:	d129      	bne.n	8006722 <I2C_Slave_AF+0x76>
 80066ce:	7bfb      	ldrb	r3, [r7, #15]
 80066d0:	2b28      	cmp	r3, #40	; 0x28
 80066d2:	d126      	bne.n	8006722 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	4a2c      	ldr	r2, [pc, #176]	; (8006788 <I2C_Slave_AF+0xdc>)
 80066d8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	685a      	ldr	r2, [r3, #4]
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80066e8:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80066f2:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	681a      	ldr	r2, [r3, #0]
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006702:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	2200      	movs	r2, #0
 8006708:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	2220      	movs	r2, #32
 800670e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	2200      	movs	r2, #0
 8006716:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800671a:	6878      	ldr	r0, [r7, #4]
 800671c:	f7fe ffda 	bl	80056d4 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8006720:	e02e      	b.n	8006780 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8006722:	7bfb      	ldrb	r3, [r7, #15]
 8006724:	2b21      	cmp	r3, #33	; 0x21
 8006726:	d126      	bne.n	8006776 <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	4a17      	ldr	r2, [pc, #92]	; (8006788 <I2C_Slave_AF+0xdc>)
 800672c:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	2221      	movs	r2, #33	; 0x21
 8006732:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	2220      	movs	r2, #32
 8006738:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	2200      	movs	r2, #0
 8006740:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	685a      	ldr	r2, [r3, #4]
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006752:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800675c:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	681a      	ldr	r2, [r3, #0]
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800676c:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800676e:	6878      	ldr	r0, [r7, #4]
 8006770:	f7fe ff8e 	bl	8005690 <HAL_I2C_SlaveTxCpltCallback>
}
 8006774:	e004      	b.n	8006780 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800677e:	615a      	str	r2, [r3, #20]
}
 8006780:	bf00      	nop
 8006782:	3710      	adds	r7, #16
 8006784:	46bd      	mov	sp, r7
 8006786:	bd80      	pop	{r7, pc}
 8006788:	ffff0000 	.word	0xffff0000

0800678c <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 800678c:	b580      	push	{r7, lr}
 800678e:	b084      	sub	sp, #16
 8006790:	af00      	add	r7, sp, #0
 8006792:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800679a:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80067a2:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80067a4:	7bbb      	ldrb	r3, [r7, #14]
 80067a6:	2b10      	cmp	r3, #16
 80067a8:	d002      	beq.n	80067b0 <I2C_ITError+0x24>
 80067aa:	7bbb      	ldrb	r3, [r7, #14]
 80067ac:	2b40      	cmp	r3, #64	; 0x40
 80067ae:	d10a      	bne.n	80067c6 <I2C_ITError+0x3a>
 80067b0:	7bfb      	ldrb	r3, [r7, #15]
 80067b2:	2b22      	cmp	r3, #34	; 0x22
 80067b4:	d107      	bne.n	80067c6 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	681a      	ldr	r2, [r3, #0]
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80067c4:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80067c6:	7bfb      	ldrb	r3, [r7, #15]
 80067c8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80067cc:	2b28      	cmp	r3, #40	; 0x28
 80067ce:	d107      	bne.n	80067e0 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	2200      	movs	r2, #0
 80067d4:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	2228      	movs	r2, #40	; 0x28
 80067da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80067de:	e015      	b.n	800680c <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	685b      	ldr	r3, [r3, #4]
 80067e6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80067ea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80067ee:	d00a      	beq.n	8006806 <I2C_ITError+0x7a>
 80067f0:	7bfb      	ldrb	r3, [r7, #15]
 80067f2:	2b60      	cmp	r3, #96	; 0x60
 80067f4:	d007      	beq.n	8006806 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	2220      	movs	r2, #32
 80067fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	2200      	movs	r2, #0
 8006802:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	2200      	movs	r2, #0
 800680a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	685b      	ldr	r3, [r3, #4]
 8006812:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006816:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800681a:	d162      	bne.n	80068e2 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	685a      	ldr	r2, [r3, #4]
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800682a:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006830:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006834:	b2db      	uxtb	r3, r3
 8006836:	2b01      	cmp	r3, #1
 8006838:	d020      	beq.n	800687c <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800683e:	4a6a      	ldr	r2, [pc, #424]	; (80069e8 <I2C_ITError+0x25c>)
 8006840:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006846:	4618      	mov	r0, r3
 8006848:	f7fd f9fa 	bl	8003c40 <HAL_DMA_Abort_IT>
 800684c:	4603      	mov	r3, r0
 800684e:	2b00      	cmp	r3, #0
 8006850:	f000 8089 	beq.w	8006966 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	681a      	ldr	r2, [r3, #0]
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	f022 0201 	bic.w	r2, r2, #1
 8006862:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	2220      	movs	r2, #32
 8006868:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006870:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006872:	687a      	ldr	r2, [r7, #4]
 8006874:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8006876:	4610      	mov	r0, r2
 8006878:	4798      	blx	r3
 800687a:	e074      	b.n	8006966 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006880:	4a59      	ldr	r2, [pc, #356]	; (80069e8 <I2C_ITError+0x25c>)
 8006882:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006888:	4618      	mov	r0, r3
 800688a:	f7fd f9d9 	bl	8003c40 <HAL_DMA_Abort_IT>
 800688e:	4603      	mov	r3, r0
 8006890:	2b00      	cmp	r3, #0
 8006892:	d068      	beq.n	8006966 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	695b      	ldr	r3, [r3, #20]
 800689a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800689e:	2b40      	cmp	r3, #64	; 0x40
 80068a0:	d10b      	bne.n	80068ba <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	691a      	ldr	r2, [r3, #16]
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068ac:	b2d2      	uxtb	r2, r2
 80068ae:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068b4:	1c5a      	adds	r2, r3, #1
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	681a      	ldr	r2, [r3, #0]
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	f022 0201 	bic.w	r2, r2, #1
 80068c8:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	2220      	movs	r2, #32
 80068ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80068d8:	687a      	ldr	r2, [r7, #4]
 80068da:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80068dc:	4610      	mov	r0, r2
 80068de:	4798      	blx	r3
 80068e0:	e041      	b.n	8006966 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80068e8:	b2db      	uxtb	r3, r3
 80068ea:	2b60      	cmp	r3, #96	; 0x60
 80068ec:	d125      	bne.n	800693a <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	2220      	movs	r2, #32
 80068f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	2200      	movs	r2, #0
 80068fa:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	695b      	ldr	r3, [r3, #20]
 8006902:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006906:	2b40      	cmp	r3, #64	; 0x40
 8006908:	d10b      	bne.n	8006922 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	691a      	ldr	r2, [r3, #16]
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006914:	b2d2      	uxtb	r2, r2
 8006916:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800691c:	1c5a      	adds	r2, r3, #1
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	681a      	ldr	r2, [r3, #0]
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	f022 0201 	bic.w	r2, r2, #1
 8006930:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8006932:	6878      	ldr	r0, [r7, #4]
 8006934:	f7fe fef6 	bl	8005724 <HAL_I2C_AbortCpltCallback>
 8006938:	e015      	b.n	8006966 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	695b      	ldr	r3, [r3, #20]
 8006940:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006944:	2b40      	cmp	r3, #64	; 0x40
 8006946:	d10b      	bne.n	8006960 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	691a      	ldr	r2, [r3, #16]
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006952:	b2d2      	uxtb	r2, r2
 8006954:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800695a:	1c5a      	adds	r2, r3, #1
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8006960:	6878      	ldr	r0, [r7, #4]
 8006962:	f7fe fed5 	bl	8005710 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800696a:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 800696c:	68bb      	ldr	r3, [r7, #8]
 800696e:	f003 0301 	and.w	r3, r3, #1
 8006972:	2b00      	cmp	r3, #0
 8006974:	d10e      	bne.n	8006994 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8006976:	68bb      	ldr	r3, [r7, #8]
 8006978:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 800697c:	2b00      	cmp	r3, #0
 800697e:	d109      	bne.n	8006994 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8006980:	68bb      	ldr	r3, [r7, #8]
 8006982:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8006986:	2b00      	cmp	r3, #0
 8006988:	d104      	bne.n	8006994 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 800698a:	68bb      	ldr	r3, [r7, #8]
 800698c:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8006990:	2b00      	cmp	r3, #0
 8006992:	d007      	beq.n	80069a4 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	685a      	ldr	r2, [r3, #4]
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80069a2:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80069aa:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069b0:	f003 0304 	and.w	r3, r3, #4
 80069b4:	2b04      	cmp	r3, #4
 80069b6:	d113      	bne.n	80069e0 <I2C_ITError+0x254>
 80069b8:	7bfb      	ldrb	r3, [r7, #15]
 80069ba:	2b28      	cmp	r3, #40	; 0x28
 80069bc:	d110      	bne.n	80069e0 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	4a0a      	ldr	r2, [pc, #40]	; (80069ec <I2C_ITError+0x260>)
 80069c2:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	2200      	movs	r2, #0
 80069c8:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	2220      	movs	r2, #32
 80069ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	2200      	movs	r2, #0
 80069d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80069da:	6878      	ldr	r0, [r7, #4]
 80069dc:	f7fe fe7a 	bl	80056d4 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80069e0:	bf00      	nop
 80069e2:	3710      	adds	r7, #16
 80069e4:	46bd      	mov	sp, r7
 80069e6:	bd80      	pop	{r7, pc}
 80069e8:	08007015 	.word	0x08007015
 80069ec:	ffff0000 	.word	0xffff0000

080069f0 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80069f0:	b580      	push	{r7, lr}
 80069f2:	b088      	sub	sp, #32
 80069f4:	af02      	add	r7, sp, #8
 80069f6:	60f8      	str	r0, [r7, #12]
 80069f8:	607a      	str	r2, [r7, #4]
 80069fa:	603b      	str	r3, [r7, #0]
 80069fc:	460b      	mov	r3, r1
 80069fe:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a04:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8006a06:	697b      	ldr	r3, [r7, #20]
 8006a08:	2b08      	cmp	r3, #8
 8006a0a:	d006      	beq.n	8006a1a <I2C_MasterRequestWrite+0x2a>
 8006a0c:	697b      	ldr	r3, [r7, #20]
 8006a0e:	2b01      	cmp	r3, #1
 8006a10:	d003      	beq.n	8006a1a <I2C_MasterRequestWrite+0x2a>
 8006a12:	697b      	ldr	r3, [r7, #20]
 8006a14:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006a18:	d108      	bne.n	8006a2c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	681a      	ldr	r2, [r3, #0]
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006a28:	601a      	str	r2, [r3, #0]
 8006a2a:	e00b      	b.n	8006a44 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a30:	2b12      	cmp	r3, #18
 8006a32:	d107      	bne.n	8006a44 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	681a      	ldr	r2, [r3, #0]
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006a42:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006a44:	683b      	ldr	r3, [r7, #0]
 8006a46:	9300      	str	r3, [sp, #0]
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	2200      	movs	r2, #0
 8006a4c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006a50:	68f8      	ldr	r0, [r7, #12]
 8006a52:	f000 fb87 	bl	8007164 <I2C_WaitOnFlagUntilTimeout>
 8006a56:	4603      	mov	r3, r0
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d00d      	beq.n	8006a78 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a66:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006a6a:	d103      	bne.n	8006a74 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006a72:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006a74:	2303      	movs	r3, #3
 8006a76:	e035      	b.n	8006ae4 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	691b      	ldr	r3, [r3, #16]
 8006a7c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006a80:	d108      	bne.n	8006a94 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006a82:	897b      	ldrh	r3, [r7, #10]
 8006a84:	b2db      	uxtb	r3, r3
 8006a86:	461a      	mov	r2, r3
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006a90:	611a      	str	r2, [r3, #16]
 8006a92:	e01b      	b.n	8006acc <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8006a94:	897b      	ldrh	r3, [r7, #10]
 8006a96:	11db      	asrs	r3, r3, #7
 8006a98:	b2db      	uxtb	r3, r3
 8006a9a:	f003 0306 	and.w	r3, r3, #6
 8006a9e:	b2db      	uxtb	r3, r3
 8006aa0:	f063 030f 	orn	r3, r3, #15
 8006aa4:	b2da      	uxtb	r2, r3
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8006aac:	683b      	ldr	r3, [r7, #0]
 8006aae:	687a      	ldr	r2, [r7, #4]
 8006ab0:	490e      	ldr	r1, [pc, #56]	; (8006aec <I2C_MasterRequestWrite+0xfc>)
 8006ab2:	68f8      	ldr	r0, [r7, #12]
 8006ab4:	f000 fbad 	bl	8007212 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006ab8:	4603      	mov	r3, r0
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d001      	beq.n	8006ac2 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8006abe:	2301      	movs	r3, #1
 8006ac0:	e010      	b.n	8006ae4 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8006ac2:	897b      	ldrh	r3, [r7, #10]
 8006ac4:	b2da      	uxtb	r2, r3
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006acc:	683b      	ldr	r3, [r7, #0]
 8006ace:	687a      	ldr	r2, [r7, #4]
 8006ad0:	4907      	ldr	r1, [pc, #28]	; (8006af0 <I2C_MasterRequestWrite+0x100>)
 8006ad2:	68f8      	ldr	r0, [r7, #12]
 8006ad4:	f000 fb9d 	bl	8007212 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006ad8:	4603      	mov	r3, r0
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d001      	beq.n	8006ae2 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8006ade:	2301      	movs	r3, #1
 8006ae0:	e000      	b.n	8006ae4 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8006ae2:	2300      	movs	r3, #0
}
 8006ae4:	4618      	mov	r0, r3
 8006ae6:	3718      	adds	r7, #24
 8006ae8:	46bd      	mov	sp, r7
 8006aea:	bd80      	pop	{r7, pc}
 8006aec:	00010008 	.word	0x00010008
 8006af0:	00010002 	.word	0x00010002

08006af4 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006af4:	b580      	push	{r7, lr}
 8006af6:	b088      	sub	sp, #32
 8006af8:	af02      	add	r7, sp, #8
 8006afa:	60f8      	str	r0, [r7, #12]
 8006afc:	4608      	mov	r0, r1
 8006afe:	4611      	mov	r1, r2
 8006b00:	461a      	mov	r2, r3
 8006b02:	4603      	mov	r3, r0
 8006b04:	817b      	strh	r3, [r7, #10]
 8006b06:	460b      	mov	r3, r1
 8006b08:	813b      	strh	r3, [r7, #8]
 8006b0a:	4613      	mov	r3, r2
 8006b0c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	681a      	ldr	r2, [r3, #0]
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006b1c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006b1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b20:	9300      	str	r3, [sp, #0]
 8006b22:	6a3b      	ldr	r3, [r7, #32]
 8006b24:	2200      	movs	r2, #0
 8006b26:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006b2a:	68f8      	ldr	r0, [r7, #12]
 8006b2c:	f000 fb1a 	bl	8007164 <I2C_WaitOnFlagUntilTimeout>
 8006b30:	4603      	mov	r3, r0
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d00d      	beq.n	8006b52 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b40:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006b44:	d103      	bne.n	8006b4e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006b4c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006b4e:	2303      	movs	r3, #3
 8006b50:	e05f      	b.n	8006c12 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006b52:	897b      	ldrh	r3, [r7, #10]
 8006b54:	b2db      	uxtb	r3, r3
 8006b56:	461a      	mov	r2, r3
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006b60:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006b62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b64:	6a3a      	ldr	r2, [r7, #32]
 8006b66:	492d      	ldr	r1, [pc, #180]	; (8006c1c <I2C_RequestMemoryWrite+0x128>)
 8006b68:	68f8      	ldr	r0, [r7, #12]
 8006b6a:	f000 fb52 	bl	8007212 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006b6e:	4603      	mov	r3, r0
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d001      	beq.n	8006b78 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8006b74:	2301      	movs	r3, #1
 8006b76:	e04c      	b.n	8006c12 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006b78:	2300      	movs	r3, #0
 8006b7a:	617b      	str	r3, [r7, #20]
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	695b      	ldr	r3, [r3, #20]
 8006b82:	617b      	str	r3, [r7, #20]
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	699b      	ldr	r3, [r3, #24]
 8006b8a:	617b      	str	r3, [r7, #20]
 8006b8c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006b8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006b90:	6a39      	ldr	r1, [r7, #32]
 8006b92:	68f8      	ldr	r0, [r7, #12]
 8006b94:	f000 fbbc 	bl	8007310 <I2C_WaitOnTXEFlagUntilTimeout>
 8006b98:	4603      	mov	r3, r0
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d00d      	beq.n	8006bba <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ba2:	2b04      	cmp	r3, #4
 8006ba4:	d107      	bne.n	8006bb6 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	681a      	ldr	r2, [r3, #0]
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006bb4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006bb6:	2301      	movs	r3, #1
 8006bb8:	e02b      	b.n	8006c12 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006bba:	88fb      	ldrh	r3, [r7, #6]
 8006bbc:	2b01      	cmp	r3, #1
 8006bbe:	d105      	bne.n	8006bcc <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006bc0:	893b      	ldrh	r3, [r7, #8]
 8006bc2:	b2da      	uxtb	r2, r3
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	611a      	str	r2, [r3, #16]
 8006bca:	e021      	b.n	8006c10 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006bcc:	893b      	ldrh	r3, [r7, #8]
 8006bce:	0a1b      	lsrs	r3, r3, #8
 8006bd0:	b29b      	uxth	r3, r3
 8006bd2:	b2da      	uxtb	r2, r3
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006bda:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006bdc:	6a39      	ldr	r1, [r7, #32]
 8006bde:	68f8      	ldr	r0, [r7, #12]
 8006be0:	f000 fb96 	bl	8007310 <I2C_WaitOnTXEFlagUntilTimeout>
 8006be4:	4603      	mov	r3, r0
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d00d      	beq.n	8006c06 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bee:	2b04      	cmp	r3, #4
 8006bf0:	d107      	bne.n	8006c02 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	681a      	ldr	r2, [r3, #0]
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006c00:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006c02:	2301      	movs	r3, #1
 8006c04:	e005      	b.n	8006c12 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006c06:	893b      	ldrh	r3, [r7, #8]
 8006c08:	b2da      	uxtb	r2, r3
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8006c10:	2300      	movs	r3, #0
}
 8006c12:	4618      	mov	r0, r3
 8006c14:	3718      	adds	r7, #24
 8006c16:	46bd      	mov	sp, r7
 8006c18:	bd80      	pop	{r7, pc}
 8006c1a:	bf00      	nop
 8006c1c:	00010002 	.word	0x00010002

08006c20 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006c20:	b580      	push	{r7, lr}
 8006c22:	b088      	sub	sp, #32
 8006c24:	af02      	add	r7, sp, #8
 8006c26:	60f8      	str	r0, [r7, #12]
 8006c28:	4608      	mov	r0, r1
 8006c2a:	4611      	mov	r1, r2
 8006c2c:	461a      	mov	r2, r3
 8006c2e:	4603      	mov	r3, r0
 8006c30:	817b      	strh	r3, [r7, #10]
 8006c32:	460b      	mov	r3, r1
 8006c34:	813b      	strh	r3, [r7, #8]
 8006c36:	4613      	mov	r3, r2
 8006c38:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	681a      	ldr	r2, [r3, #0]
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006c48:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	681a      	ldr	r2, [r3, #0]
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006c58:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006c5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c5c:	9300      	str	r3, [sp, #0]
 8006c5e:	6a3b      	ldr	r3, [r7, #32]
 8006c60:	2200      	movs	r2, #0
 8006c62:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006c66:	68f8      	ldr	r0, [r7, #12]
 8006c68:	f000 fa7c 	bl	8007164 <I2C_WaitOnFlagUntilTimeout>
 8006c6c:	4603      	mov	r3, r0
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d00d      	beq.n	8006c8e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c7c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006c80:	d103      	bne.n	8006c8a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006c88:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006c8a:	2303      	movs	r3, #3
 8006c8c:	e0aa      	b.n	8006de4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006c8e:	897b      	ldrh	r3, [r7, #10]
 8006c90:	b2db      	uxtb	r3, r3
 8006c92:	461a      	mov	r2, r3
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006c9c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006c9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ca0:	6a3a      	ldr	r2, [r7, #32]
 8006ca2:	4952      	ldr	r1, [pc, #328]	; (8006dec <I2C_RequestMemoryRead+0x1cc>)
 8006ca4:	68f8      	ldr	r0, [r7, #12]
 8006ca6:	f000 fab4 	bl	8007212 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006caa:	4603      	mov	r3, r0
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d001      	beq.n	8006cb4 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8006cb0:	2301      	movs	r3, #1
 8006cb2:	e097      	b.n	8006de4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006cb4:	2300      	movs	r3, #0
 8006cb6:	617b      	str	r3, [r7, #20]
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	695b      	ldr	r3, [r3, #20]
 8006cbe:	617b      	str	r3, [r7, #20]
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	699b      	ldr	r3, [r3, #24]
 8006cc6:	617b      	str	r3, [r7, #20]
 8006cc8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006cca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006ccc:	6a39      	ldr	r1, [r7, #32]
 8006cce:	68f8      	ldr	r0, [r7, #12]
 8006cd0:	f000 fb1e 	bl	8007310 <I2C_WaitOnTXEFlagUntilTimeout>
 8006cd4:	4603      	mov	r3, r0
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d00d      	beq.n	8006cf6 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cde:	2b04      	cmp	r3, #4
 8006ce0:	d107      	bne.n	8006cf2 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	681a      	ldr	r2, [r3, #0]
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006cf0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006cf2:	2301      	movs	r3, #1
 8006cf4:	e076      	b.n	8006de4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006cf6:	88fb      	ldrh	r3, [r7, #6]
 8006cf8:	2b01      	cmp	r3, #1
 8006cfa:	d105      	bne.n	8006d08 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006cfc:	893b      	ldrh	r3, [r7, #8]
 8006cfe:	b2da      	uxtb	r2, r3
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	611a      	str	r2, [r3, #16]
 8006d06:	e021      	b.n	8006d4c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006d08:	893b      	ldrh	r3, [r7, #8]
 8006d0a:	0a1b      	lsrs	r3, r3, #8
 8006d0c:	b29b      	uxth	r3, r3
 8006d0e:	b2da      	uxtb	r2, r3
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006d16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006d18:	6a39      	ldr	r1, [r7, #32]
 8006d1a:	68f8      	ldr	r0, [r7, #12]
 8006d1c:	f000 faf8 	bl	8007310 <I2C_WaitOnTXEFlagUntilTimeout>
 8006d20:	4603      	mov	r3, r0
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d00d      	beq.n	8006d42 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d2a:	2b04      	cmp	r3, #4
 8006d2c:	d107      	bne.n	8006d3e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	681a      	ldr	r2, [r3, #0]
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006d3c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006d3e:	2301      	movs	r3, #1
 8006d40:	e050      	b.n	8006de4 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006d42:	893b      	ldrh	r3, [r7, #8]
 8006d44:	b2da      	uxtb	r2, r3
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006d4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006d4e:	6a39      	ldr	r1, [r7, #32]
 8006d50:	68f8      	ldr	r0, [r7, #12]
 8006d52:	f000 fadd 	bl	8007310 <I2C_WaitOnTXEFlagUntilTimeout>
 8006d56:	4603      	mov	r3, r0
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d00d      	beq.n	8006d78 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d60:	2b04      	cmp	r3, #4
 8006d62:	d107      	bne.n	8006d74 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	681a      	ldr	r2, [r3, #0]
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006d72:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006d74:	2301      	movs	r3, #1
 8006d76:	e035      	b.n	8006de4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	681a      	ldr	r2, [r3, #0]
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006d86:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006d88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d8a:	9300      	str	r3, [sp, #0]
 8006d8c:	6a3b      	ldr	r3, [r7, #32]
 8006d8e:	2200      	movs	r2, #0
 8006d90:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006d94:	68f8      	ldr	r0, [r7, #12]
 8006d96:	f000 f9e5 	bl	8007164 <I2C_WaitOnFlagUntilTimeout>
 8006d9a:	4603      	mov	r3, r0
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d00d      	beq.n	8006dbc <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006daa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006dae:	d103      	bne.n	8006db8 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006db6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006db8:	2303      	movs	r3, #3
 8006dba:	e013      	b.n	8006de4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8006dbc:	897b      	ldrh	r3, [r7, #10]
 8006dbe:	b2db      	uxtb	r3, r3
 8006dc0:	f043 0301 	orr.w	r3, r3, #1
 8006dc4:	b2da      	uxtb	r2, r3
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006dcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dce:	6a3a      	ldr	r2, [r7, #32]
 8006dd0:	4906      	ldr	r1, [pc, #24]	; (8006dec <I2C_RequestMemoryRead+0x1cc>)
 8006dd2:	68f8      	ldr	r0, [r7, #12]
 8006dd4:	f000 fa1d 	bl	8007212 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006dd8:	4603      	mov	r3, r0
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d001      	beq.n	8006de2 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8006dde:	2301      	movs	r3, #1
 8006de0:	e000      	b.n	8006de4 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8006de2:	2300      	movs	r3, #0
}
 8006de4:	4618      	mov	r0, r3
 8006de6:	3718      	adds	r7, #24
 8006de8:	46bd      	mov	sp, r7
 8006dea:	bd80      	pop	{r7, pc}
 8006dec:	00010002 	.word	0x00010002

08006df0 <I2C_DMAXferCplt>:
  * @brief  DMA I2C process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 8006df0:	b580      	push	{r7, lr}
 8006df2:	b086      	sub	sp, #24
 8006df4:	af00      	add	r7, sp, #0
 8006df6:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006dfc:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006dfe:	697b      	ldr	r3, [r7, #20]
 8006e00:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006e04:	74fb      	strb	r3, [r7, #19]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8006e06:	697b      	ldr	r3, [r7, #20]
 8006e08:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006e0c:	74bb      	strb	r3, [r7, #18]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8006e0e:	697b      	ldr	r3, [r7, #20]
 8006e10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e12:	60fb      	str	r3, [r7, #12]

  /* Disable EVT and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8006e14:	697b      	ldr	r3, [r7, #20]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	685a      	ldr	r2, [r3, #4]
 8006e1a:	697b      	ldr	r3, [r7, #20]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8006e22:	605a      	str	r2, [r3, #4]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8006e24:	697b      	ldr	r3, [r7, #20]
 8006e26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d003      	beq.n	8006e34 <I2C_DMAXferCplt+0x44>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8006e2c:	697b      	ldr	r3, [r7, #20]
 8006e2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e30:	2200      	movs	r2, #0
 8006e32:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8006e34:	697b      	ldr	r3, [r7, #20]
 8006e36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d003      	beq.n	8006e44 <I2C_DMAXferCplt+0x54>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8006e3c:	697b      	ldr	r3, [r7, #20]
 8006e3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e40:	2200      	movs	r2, #0
 8006e42:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  if ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_TX) == (uint32_t)HAL_I2C_STATE_BUSY_TX) || ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_RX) == (uint32_t)HAL_I2C_STATE_BUSY_RX) && (CurrentMode == HAL_I2C_MODE_SLAVE)))
 8006e44:	7cfb      	ldrb	r3, [r7, #19]
 8006e46:	f003 0321 	and.w	r3, r3, #33	; 0x21
 8006e4a:	2b21      	cmp	r3, #33	; 0x21
 8006e4c:	d007      	beq.n	8006e5e <I2C_DMAXferCplt+0x6e>
 8006e4e:	7cfb      	ldrb	r3, [r7, #19]
 8006e50:	f003 0322 	and.w	r3, r3, #34	; 0x22
 8006e54:	2b22      	cmp	r3, #34	; 0x22
 8006e56:	d131      	bne.n	8006ebc <I2C_DMAXferCplt+0xcc>
 8006e58:	7cbb      	ldrb	r3, [r7, #18]
 8006e5a:	2b20      	cmp	r3, #32
 8006e5c:	d12e      	bne.n	8006ebc <I2C_DMAXferCplt+0xcc>
  {
    /* Disable DMA Request */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8006e5e:	697b      	ldr	r3, [r7, #20]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	685a      	ldr	r2, [r3, #4]
 8006e64:	697b      	ldr	r3, [r7, #20]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006e6c:	605a      	str	r2, [r3, #4]

    hi2c->XferCount = 0U;
 8006e6e:	697b      	ldr	r3, [r7, #20]
 8006e70:	2200      	movs	r2, #0
 8006e72:	855a      	strh	r2, [r3, #42]	; 0x2a

    if (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8006e74:	7cfb      	ldrb	r3, [r7, #19]
 8006e76:	2b29      	cmp	r3, #41	; 0x29
 8006e78:	d10a      	bne.n	8006e90 <I2C_DMAXferCplt+0xa0>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8006e7a:	697b      	ldr	r3, [r7, #20]
 8006e7c:	2221      	movs	r2, #33	; 0x21
 8006e7e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8006e80:	697b      	ldr	r3, [r7, #20]
 8006e82:	2228      	movs	r2, #40	; 0x28
 8006e84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8006e88:	6978      	ldr	r0, [r7, #20]
 8006e8a:	f7fe fc01 	bl	8005690 <HAL_I2C_SlaveTxCpltCallback>
 8006e8e:	e00c      	b.n	8006eaa <I2C_DMAXferCplt+0xba>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8006e90:	7cfb      	ldrb	r3, [r7, #19]
 8006e92:	2b2a      	cmp	r3, #42	; 0x2a
 8006e94:	d109      	bne.n	8006eaa <I2C_DMAXferCplt+0xba>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8006e96:	697b      	ldr	r3, [r7, #20]
 8006e98:	2222      	movs	r2, #34	; 0x22
 8006e9a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8006e9c:	697b      	ldr	r3, [r7, #20]
 8006e9e:	2228      	movs	r2, #40	; 0x28
 8006ea0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006ea4:	6978      	ldr	r0, [r7, #20]
 8006ea6:	f7fe fbfd 	bl	80056a4 <HAL_I2C_SlaveRxCpltCallback>
    {
      /* Do nothing */
    }

    /* Enable EVT and ERR interrupt to treat end of transfer in IRQ handler */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8006eaa:	697b      	ldr	r3, [r7, #20]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	685a      	ldr	r2, [r3, #4]
 8006eb0:	697b      	ldr	r3, [r7, #20]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8006eb8:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8006eba:	e06a      	b.n	8006f92 <I2C_DMAXferCplt+0x1a2>
  else if (hi2c->Mode != HAL_I2C_MODE_NONE)
 8006ebc:	697b      	ldr	r3, [r7, #20]
 8006ebe:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006ec2:	b2db      	uxtb	r3, r3
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d064      	beq.n	8006f92 <I2C_DMAXferCplt+0x1a2>
    if (hi2c->XferCount == (uint16_t)1)
 8006ec8:	697b      	ldr	r3, [r7, #20]
 8006eca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ecc:	b29b      	uxth	r3, r3
 8006ece:	2b01      	cmp	r3, #1
 8006ed0:	d107      	bne.n	8006ee2 <I2C_DMAXferCplt+0xf2>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006ed2:	697b      	ldr	r3, [r7, #20]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	681a      	ldr	r2, [r3, #0]
 8006ed8:	697b      	ldr	r3, [r7, #20]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006ee0:	601a      	str	r2, [r3, #0]
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8006ee2:	697b      	ldr	r3, [r7, #20]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	685a      	ldr	r2, [r3, #4]
 8006ee8:	697b      	ldr	r3, [r7, #20]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8006ef0:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_OTHER_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006ef8:	d009      	beq.n	8006f0e <I2C_DMAXferCplt+0x11e>
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	2b08      	cmp	r3, #8
 8006efe:	d006      	beq.n	8006f0e <I2C_DMAXferCplt+0x11e>
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8006f06:	d002      	beq.n	8006f0e <I2C_DMAXferCplt+0x11e>
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	2b20      	cmp	r3, #32
 8006f0c:	d107      	bne.n	8006f1e <I2C_DMAXferCplt+0x12e>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006f0e:	697b      	ldr	r3, [r7, #20]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	681a      	ldr	r2, [r3, #0]
 8006f14:	697b      	ldr	r3, [r7, #20]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006f1c:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8006f1e:	697b      	ldr	r3, [r7, #20]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	685a      	ldr	r2, [r3, #4]
 8006f24:	697b      	ldr	r3, [r7, #20]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006f2c:	605a      	str	r2, [r3, #4]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8006f2e:	697b      	ldr	r3, [r7, #20]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	685a      	ldr	r2, [r3, #4]
 8006f34:	697b      	ldr	r3, [r7, #20]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006f3c:	605a      	str	r2, [r3, #4]
    hi2c->XferCount = 0U;
 8006f3e:	697b      	ldr	r3, [r7, #20]
 8006f40:	2200      	movs	r2, #0
 8006f42:	855a      	strh	r2, [r3, #42]	; 0x2a
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8006f44:	697b      	ldr	r3, [r7, #20]
 8006f46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d003      	beq.n	8006f54 <I2C_DMAXferCplt+0x164>
      HAL_I2C_ErrorCallback(hi2c);
 8006f4c:	6978      	ldr	r0, [r7, #20]
 8006f4e:	f7fe fbdf 	bl	8005710 <HAL_I2C_ErrorCallback>
}
 8006f52:	e01e      	b.n	8006f92 <I2C_DMAXferCplt+0x1a2>
      hi2c->State = HAL_I2C_STATE_READY;
 8006f54:	697b      	ldr	r3, [r7, #20]
 8006f56:	2220      	movs	r2, #32
 8006f58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006f5c:	697b      	ldr	r3, [r7, #20]
 8006f5e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006f62:	b2db      	uxtb	r3, r3
 8006f64:	2b40      	cmp	r3, #64	; 0x40
 8006f66:	d10a      	bne.n	8006f7e <I2C_DMAXferCplt+0x18e>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006f68:	697b      	ldr	r3, [r7, #20]
 8006f6a:	2200      	movs	r2, #0
 8006f6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 8006f70:	697b      	ldr	r3, [r7, #20]
 8006f72:	2200      	movs	r2, #0
 8006f74:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 8006f76:	6978      	ldr	r0, [r7, #20]
 8006f78:	f7fe fbc0 	bl	80056fc <HAL_I2C_MemRxCpltCallback>
}
 8006f7c:	e009      	b.n	8006f92 <I2C_DMAXferCplt+0x1a2>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006f7e:	697b      	ldr	r3, [r7, #20]
 8006f80:	2200      	movs	r2, #0
 8006f82:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8006f86:	697b      	ldr	r3, [r7, #20]
 8006f88:	2212      	movs	r2, #18
 8006f8a:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 8006f8c:	6978      	ldr	r0, [r7, #20]
 8006f8e:	f7fa fecf 	bl	8001d30 <HAL_I2C_MasterRxCpltCallback>
}
 8006f92:	bf00      	nop
 8006f94:	3718      	adds	r7, #24
 8006f96:	46bd      	mov	sp, r7
 8006f98:	bd80      	pop	{r7, pc}

08006f9a <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 8006f9a:	b580      	push	{r7, lr}
 8006f9c:	b084      	sub	sp, #16
 8006f9e:	af00      	add	r7, sp, #0
 8006fa0:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fa6:	60fb      	str	r3, [r7, #12]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d003      	beq.n	8006fb8 <I2C_DMAError+0x1e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006fb4:	2200      	movs	r2, #0
 8006fb6:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d003      	beq.n	8006fc8 <I2C_DMAError+0x2e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fc4:	2200      	movs	r2, #0
 8006fc6:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Ignore DMA FIFO error */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8006fc8:	6878      	ldr	r0, [r7, #4]
 8006fca:	f7fc fff3 	bl	8003fb4 <HAL_DMA_GetError>
 8006fce:	4603      	mov	r3, r0
 8006fd0:	2b02      	cmp	r3, #2
 8006fd2:	d01b      	beq.n	800700c <I2C_DMAError+0x72>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	681a      	ldr	r2, [r3, #0]
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006fe2:	601a      	str	r2, [r3, #0]

    hi2c->XferCount = 0U;
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	2200      	movs	r2, #0
 8006fe8:	855a      	strh	r2, [r3, #42]	; 0x2a

    hi2c->State = HAL_I2C_STATE_READY;
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	2220      	movs	r2, #32
 8006fee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	2200      	movs	r2, #0
 8006ff6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ffe:	f043 0210 	orr.w	r2, r3, #16
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	641a      	str	r2, [r3, #64]	; 0x40

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8007006:	68f8      	ldr	r0, [r7, #12]
 8007008:	f7fe fb82 	bl	8005710 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800700c:	bf00      	nop
 800700e:	3710      	adds	r7, #16
 8007010:	46bd      	mov	sp, r7
 8007012:	bd80      	pop	{r7, pc}

08007014 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8007014:	b580      	push	{r7, lr}
 8007016:	b086      	sub	sp, #24
 8007018:	af00      	add	r7, sp, #0
 800701a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800701c:	2300      	movs	r3, #0
 800701e:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007024:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007026:	697b      	ldr	r3, [r7, #20]
 8007028:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800702c:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800702e:	4b4b      	ldr	r3, [pc, #300]	; (800715c <I2C_DMAAbort+0x148>)
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	08db      	lsrs	r3, r3, #3
 8007034:	4a4a      	ldr	r2, [pc, #296]	; (8007160 <I2C_DMAAbort+0x14c>)
 8007036:	fba2 2303 	umull	r2, r3, r2, r3
 800703a:	0a1a      	lsrs	r2, r3, #8
 800703c:	4613      	mov	r3, r2
 800703e:	009b      	lsls	r3, r3, #2
 8007040:	4413      	add	r3, r2
 8007042:	00da      	lsls	r2, r3, #3
 8007044:	1ad3      	subs	r3, r2, r3
 8007046:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	2b00      	cmp	r3, #0
 800704c:	d106      	bne.n	800705c <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800704e:	697b      	ldr	r3, [r7, #20]
 8007050:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007052:	f043 0220 	orr.w	r2, r3, #32
 8007056:	697b      	ldr	r3, [r7, #20]
 8007058:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 800705a:	e00a      	b.n	8007072 <I2C_DMAAbort+0x5e>
    }
    count--;
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	3b01      	subs	r3, #1
 8007060:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8007062:	697b      	ldr	r3, [r7, #20]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800706c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007070:	d0ea      	beq.n	8007048 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8007072:	697b      	ldr	r3, [r7, #20]
 8007074:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007076:	2b00      	cmp	r3, #0
 8007078:	d003      	beq.n	8007082 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800707a:	697b      	ldr	r3, [r7, #20]
 800707c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800707e:	2200      	movs	r2, #0
 8007080:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8007082:	697b      	ldr	r3, [r7, #20]
 8007084:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007086:	2b00      	cmp	r3, #0
 8007088:	d003      	beq.n	8007092 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800708a:	697b      	ldr	r3, [r7, #20]
 800708c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800708e:	2200      	movs	r2, #0
 8007090:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007092:	697b      	ldr	r3, [r7, #20]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	681a      	ldr	r2, [r3, #0]
 8007098:	697b      	ldr	r3, [r7, #20]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80070a0:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 80070a2:	697b      	ldr	r3, [r7, #20]
 80070a4:	2200      	movs	r2, #0
 80070a6:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 80070a8:	697b      	ldr	r3, [r7, #20]
 80070aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d003      	beq.n	80070b8 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80070b0:	697b      	ldr	r3, [r7, #20]
 80070b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80070b4:	2200      	movs	r2, #0
 80070b6:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 80070b8:	697b      	ldr	r3, [r7, #20]
 80070ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d003      	beq.n	80070c8 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80070c0:	697b      	ldr	r3, [r7, #20]
 80070c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070c4:	2200      	movs	r2, #0
 80070c6:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 80070c8:	697b      	ldr	r3, [r7, #20]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	681a      	ldr	r2, [r3, #0]
 80070ce:	697b      	ldr	r3, [r7, #20]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	f022 0201 	bic.w	r2, r2, #1
 80070d6:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80070d8:	697b      	ldr	r3, [r7, #20]
 80070da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80070de:	b2db      	uxtb	r3, r3
 80070e0:	2b60      	cmp	r3, #96	; 0x60
 80070e2:	d10e      	bne.n	8007102 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 80070e4:	697b      	ldr	r3, [r7, #20]
 80070e6:	2220      	movs	r2, #32
 80070e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80070ec:	697b      	ldr	r3, [r7, #20]
 80070ee:	2200      	movs	r2, #0
 80070f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80070f4:	697b      	ldr	r3, [r7, #20]
 80070f6:	2200      	movs	r2, #0
 80070f8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80070fa:	6978      	ldr	r0, [r7, #20]
 80070fc:	f7fe fb12 	bl	8005724 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8007100:	e027      	b.n	8007152 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8007102:	7cfb      	ldrb	r3, [r7, #19]
 8007104:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8007108:	2b28      	cmp	r3, #40	; 0x28
 800710a:	d117      	bne.n	800713c <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 800710c:	697b      	ldr	r3, [r7, #20]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	681a      	ldr	r2, [r3, #0]
 8007112:	697b      	ldr	r3, [r7, #20]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	f042 0201 	orr.w	r2, r2, #1
 800711a:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800711c:	697b      	ldr	r3, [r7, #20]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	681a      	ldr	r2, [r3, #0]
 8007122:	697b      	ldr	r3, [r7, #20]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800712a:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800712c:	697b      	ldr	r3, [r7, #20]
 800712e:	2200      	movs	r2, #0
 8007130:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8007132:	697b      	ldr	r3, [r7, #20]
 8007134:	2228      	movs	r2, #40	; 0x28
 8007136:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800713a:	e007      	b.n	800714c <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 800713c:	697b      	ldr	r3, [r7, #20]
 800713e:	2220      	movs	r2, #32
 8007140:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007144:	697b      	ldr	r3, [r7, #20]
 8007146:	2200      	movs	r2, #0
 8007148:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 800714c:	6978      	ldr	r0, [r7, #20]
 800714e:	f7fe fadf 	bl	8005710 <HAL_I2C_ErrorCallback>
}
 8007152:	bf00      	nop
 8007154:	3718      	adds	r7, #24
 8007156:	46bd      	mov	sp, r7
 8007158:	bd80      	pop	{r7, pc}
 800715a:	bf00      	nop
 800715c:	20000018 	.word	0x20000018
 8007160:	14f8b589 	.word	0x14f8b589

08007164 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8007164:	b580      	push	{r7, lr}
 8007166:	b084      	sub	sp, #16
 8007168:	af00      	add	r7, sp, #0
 800716a:	60f8      	str	r0, [r7, #12]
 800716c:	60b9      	str	r1, [r7, #8]
 800716e:	603b      	str	r3, [r7, #0]
 8007170:	4613      	mov	r3, r2
 8007172:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007174:	e025      	b.n	80071c2 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007176:	683b      	ldr	r3, [r7, #0]
 8007178:	f1b3 3fff 	cmp.w	r3, #4294967295
 800717c:	d021      	beq.n	80071c2 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800717e:	f7fb fded 	bl	8002d5c <HAL_GetTick>
 8007182:	4602      	mov	r2, r0
 8007184:	69bb      	ldr	r3, [r7, #24]
 8007186:	1ad3      	subs	r3, r2, r3
 8007188:	683a      	ldr	r2, [r7, #0]
 800718a:	429a      	cmp	r2, r3
 800718c:	d302      	bcc.n	8007194 <I2C_WaitOnFlagUntilTimeout+0x30>
 800718e:	683b      	ldr	r3, [r7, #0]
 8007190:	2b00      	cmp	r3, #0
 8007192:	d116      	bne.n	80071c2 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	2200      	movs	r2, #0
 8007198:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	2220      	movs	r2, #32
 800719e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	2200      	movs	r2, #0
 80071a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071ae:	f043 0220 	orr.w	r2, r3, #32
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	2200      	movs	r2, #0
 80071ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80071be:	2301      	movs	r3, #1
 80071c0:	e023      	b.n	800720a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80071c2:	68bb      	ldr	r3, [r7, #8]
 80071c4:	0c1b      	lsrs	r3, r3, #16
 80071c6:	b2db      	uxtb	r3, r3
 80071c8:	2b01      	cmp	r3, #1
 80071ca:	d10d      	bne.n	80071e8 <I2C_WaitOnFlagUntilTimeout+0x84>
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	695b      	ldr	r3, [r3, #20]
 80071d2:	43da      	mvns	r2, r3
 80071d4:	68bb      	ldr	r3, [r7, #8]
 80071d6:	4013      	ands	r3, r2
 80071d8:	b29b      	uxth	r3, r3
 80071da:	2b00      	cmp	r3, #0
 80071dc:	bf0c      	ite	eq
 80071de:	2301      	moveq	r3, #1
 80071e0:	2300      	movne	r3, #0
 80071e2:	b2db      	uxtb	r3, r3
 80071e4:	461a      	mov	r2, r3
 80071e6:	e00c      	b.n	8007202 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	699b      	ldr	r3, [r3, #24]
 80071ee:	43da      	mvns	r2, r3
 80071f0:	68bb      	ldr	r3, [r7, #8]
 80071f2:	4013      	ands	r3, r2
 80071f4:	b29b      	uxth	r3, r3
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	bf0c      	ite	eq
 80071fa:	2301      	moveq	r3, #1
 80071fc:	2300      	movne	r3, #0
 80071fe:	b2db      	uxtb	r3, r3
 8007200:	461a      	mov	r2, r3
 8007202:	79fb      	ldrb	r3, [r7, #7]
 8007204:	429a      	cmp	r2, r3
 8007206:	d0b6      	beq.n	8007176 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007208:	2300      	movs	r3, #0
}
 800720a:	4618      	mov	r0, r3
 800720c:	3710      	adds	r7, #16
 800720e:	46bd      	mov	sp, r7
 8007210:	bd80      	pop	{r7, pc}

08007212 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8007212:	b580      	push	{r7, lr}
 8007214:	b084      	sub	sp, #16
 8007216:	af00      	add	r7, sp, #0
 8007218:	60f8      	str	r0, [r7, #12]
 800721a:	60b9      	str	r1, [r7, #8]
 800721c:	607a      	str	r2, [r7, #4]
 800721e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8007220:	e051      	b.n	80072c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	695b      	ldr	r3, [r3, #20]
 8007228:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800722c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007230:	d123      	bne.n	800727a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	681a      	ldr	r2, [r3, #0]
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007240:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800724a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	2200      	movs	r2, #0
 8007250:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	2220      	movs	r2, #32
 8007256:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	2200      	movs	r2, #0
 800725e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007266:	f043 0204 	orr.w	r2, r3, #4
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	2200      	movs	r2, #0
 8007272:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007276:	2301      	movs	r3, #1
 8007278:	e046      	b.n	8007308 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007280:	d021      	beq.n	80072c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007282:	f7fb fd6b 	bl	8002d5c <HAL_GetTick>
 8007286:	4602      	mov	r2, r0
 8007288:	683b      	ldr	r3, [r7, #0]
 800728a:	1ad3      	subs	r3, r2, r3
 800728c:	687a      	ldr	r2, [r7, #4]
 800728e:	429a      	cmp	r2, r3
 8007290:	d302      	bcc.n	8007298 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	2b00      	cmp	r3, #0
 8007296:	d116      	bne.n	80072c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	2200      	movs	r2, #0
 800729c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	2220      	movs	r2, #32
 80072a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	2200      	movs	r2, #0
 80072aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072b2:	f043 0220 	orr.w	r2, r3, #32
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	2200      	movs	r2, #0
 80072be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80072c2:	2301      	movs	r3, #1
 80072c4:	e020      	b.n	8007308 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80072c6:	68bb      	ldr	r3, [r7, #8]
 80072c8:	0c1b      	lsrs	r3, r3, #16
 80072ca:	b2db      	uxtb	r3, r3
 80072cc:	2b01      	cmp	r3, #1
 80072ce:	d10c      	bne.n	80072ea <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	695b      	ldr	r3, [r3, #20]
 80072d6:	43da      	mvns	r2, r3
 80072d8:	68bb      	ldr	r3, [r7, #8]
 80072da:	4013      	ands	r3, r2
 80072dc:	b29b      	uxth	r3, r3
 80072de:	2b00      	cmp	r3, #0
 80072e0:	bf14      	ite	ne
 80072e2:	2301      	movne	r3, #1
 80072e4:	2300      	moveq	r3, #0
 80072e6:	b2db      	uxtb	r3, r3
 80072e8:	e00b      	b.n	8007302 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	699b      	ldr	r3, [r3, #24]
 80072f0:	43da      	mvns	r2, r3
 80072f2:	68bb      	ldr	r3, [r7, #8]
 80072f4:	4013      	ands	r3, r2
 80072f6:	b29b      	uxth	r3, r3
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	bf14      	ite	ne
 80072fc:	2301      	movne	r3, #1
 80072fe:	2300      	moveq	r3, #0
 8007300:	b2db      	uxtb	r3, r3
 8007302:	2b00      	cmp	r3, #0
 8007304:	d18d      	bne.n	8007222 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8007306:	2300      	movs	r3, #0
}
 8007308:	4618      	mov	r0, r3
 800730a:	3710      	adds	r7, #16
 800730c:	46bd      	mov	sp, r7
 800730e:	bd80      	pop	{r7, pc}

08007310 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007310:	b580      	push	{r7, lr}
 8007312:	b084      	sub	sp, #16
 8007314:	af00      	add	r7, sp, #0
 8007316:	60f8      	str	r0, [r7, #12]
 8007318:	60b9      	str	r1, [r7, #8]
 800731a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800731c:	e02d      	b.n	800737a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800731e:	68f8      	ldr	r0, [r7, #12]
 8007320:	f000 f900 	bl	8007524 <I2C_IsAcknowledgeFailed>
 8007324:	4603      	mov	r3, r0
 8007326:	2b00      	cmp	r3, #0
 8007328:	d001      	beq.n	800732e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800732a:	2301      	movs	r3, #1
 800732c:	e02d      	b.n	800738a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800732e:	68bb      	ldr	r3, [r7, #8]
 8007330:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007334:	d021      	beq.n	800737a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007336:	f7fb fd11 	bl	8002d5c <HAL_GetTick>
 800733a:	4602      	mov	r2, r0
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	1ad3      	subs	r3, r2, r3
 8007340:	68ba      	ldr	r2, [r7, #8]
 8007342:	429a      	cmp	r2, r3
 8007344:	d302      	bcc.n	800734c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8007346:	68bb      	ldr	r3, [r7, #8]
 8007348:	2b00      	cmp	r3, #0
 800734a:	d116      	bne.n	800737a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	2200      	movs	r2, #0
 8007350:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	2220      	movs	r2, #32
 8007356:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	2200      	movs	r2, #0
 800735e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007366:	f043 0220 	orr.w	r2, r3, #32
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	2200      	movs	r2, #0
 8007372:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007376:	2301      	movs	r3, #1
 8007378:	e007      	b.n	800738a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	695b      	ldr	r3, [r3, #20]
 8007380:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007384:	2b80      	cmp	r3, #128	; 0x80
 8007386:	d1ca      	bne.n	800731e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007388:	2300      	movs	r3, #0
}
 800738a:	4618      	mov	r0, r3
 800738c:	3710      	adds	r7, #16
 800738e:	46bd      	mov	sp, r7
 8007390:	bd80      	pop	{r7, pc}

08007392 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007392:	b580      	push	{r7, lr}
 8007394:	b084      	sub	sp, #16
 8007396:	af00      	add	r7, sp, #0
 8007398:	60f8      	str	r0, [r7, #12]
 800739a:	60b9      	str	r1, [r7, #8]
 800739c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800739e:	e02d      	b.n	80073fc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80073a0:	68f8      	ldr	r0, [r7, #12]
 80073a2:	f000 f8bf 	bl	8007524 <I2C_IsAcknowledgeFailed>
 80073a6:	4603      	mov	r3, r0
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d001      	beq.n	80073b0 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80073ac:	2301      	movs	r3, #1
 80073ae:	e02d      	b.n	800740c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80073b0:	68bb      	ldr	r3, [r7, #8]
 80073b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80073b6:	d021      	beq.n	80073fc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80073b8:	f7fb fcd0 	bl	8002d5c <HAL_GetTick>
 80073bc:	4602      	mov	r2, r0
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	1ad3      	subs	r3, r2, r3
 80073c2:	68ba      	ldr	r2, [r7, #8]
 80073c4:	429a      	cmp	r2, r3
 80073c6:	d302      	bcc.n	80073ce <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80073c8:	68bb      	ldr	r3, [r7, #8]
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d116      	bne.n	80073fc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	2200      	movs	r2, #0
 80073d2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	2220      	movs	r2, #32
 80073d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	2200      	movs	r2, #0
 80073e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073e8:	f043 0220 	orr.w	r2, r3, #32
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	2200      	movs	r2, #0
 80073f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80073f8:	2301      	movs	r3, #1
 80073fa:	e007      	b.n	800740c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	695b      	ldr	r3, [r3, #20]
 8007402:	f003 0304 	and.w	r3, r3, #4
 8007406:	2b04      	cmp	r3, #4
 8007408:	d1ca      	bne.n	80073a0 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800740a:	2300      	movs	r3, #0
}
 800740c:	4618      	mov	r0, r3
 800740e:	3710      	adds	r7, #16
 8007410:	46bd      	mov	sp, r7
 8007412:	bd80      	pop	{r7, pc}

08007414 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8007414:	b480      	push	{r7}
 8007416:	b085      	sub	sp, #20
 8007418:	af00      	add	r7, sp, #0
 800741a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800741c:	2300      	movs	r3, #0
 800741e:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8007420:	4b13      	ldr	r3, [pc, #76]	; (8007470 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	08db      	lsrs	r3, r3, #3
 8007426:	4a13      	ldr	r2, [pc, #76]	; (8007474 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8007428:	fba2 2303 	umull	r2, r3, r2, r3
 800742c:	0a1a      	lsrs	r2, r3, #8
 800742e:	4613      	mov	r3, r2
 8007430:	009b      	lsls	r3, r3, #2
 8007432:	4413      	add	r3, r2
 8007434:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	3b01      	subs	r3, #1
 800743a:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	2b00      	cmp	r3, #0
 8007440:	d107      	bne.n	8007452 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007446:	f043 0220 	orr.w	r2, r3, #32
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800744e:	2301      	movs	r3, #1
 8007450:	e008      	b.n	8007464 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800745c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007460:	d0e9      	beq.n	8007436 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8007462:	2300      	movs	r3, #0
}
 8007464:	4618      	mov	r0, r3
 8007466:	3714      	adds	r7, #20
 8007468:	46bd      	mov	sp, r7
 800746a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800746e:	4770      	bx	lr
 8007470:	20000018 	.word	0x20000018
 8007474:	14f8b589 	.word	0x14f8b589

08007478 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007478:	b580      	push	{r7, lr}
 800747a:	b084      	sub	sp, #16
 800747c:	af00      	add	r7, sp, #0
 800747e:	60f8      	str	r0, [r7, #12]
 8007480:	60b9      	str	r1, [r7, #8]
 8007482:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007484:	e042      	b.n	800750c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	695b      	ldr	r3, [r3, #20]
 800748c:	f003 0310 	and.w	r3, r3, #16
 8007490:	2b10      	cmp	r3, #16
 8007492:	d119      	bne.n	80074c8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	f06f 0210 	mvn.w	r2, #16
 800749c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	2200      	movs	r2, #0
 80074a2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	2220      	movs	r2, #32
 80074a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	2200      	movs	r2, #0
 80074b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	2200      	movs	r2, #0
 80074c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80074c4:	2301      	movs	r3, #1
 80074c6:	e029      	b.n	800751c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80074c8:	f7fb fc48 	bl	8002d5c <HAL_GetTick>
 80074cc:	4602      	mov	r2, r0
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	1ad3      	subs	r3, r2, r3
 80074d2:	68ba      	ldr	r2, [r7, #8]
 80074d4:	429a      	cmp	r2, r3
 80074d6:	d302      	bcc.n	80074de <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80074d8:	68bb      	ldr	r3, [r7, #8]
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d116      	bne.n	800750c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	2200      	movs	r2, #0
 80074e2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	2220      	movs	r2, #32
 80074e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	2200      	movs	r2, #0
 80074f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074f8:	f043 0220 	orr.w	r2, r3, #32
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	2200      	movs	r2, #0
 8007504:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007508:	2301      	movs	r3, #1
 800750a:	e007      	b.n	800751c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	695b      	ldr	r3, [r3, #20]
 8007512:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007516:	2b40      	cmp	r3, #64	; 0x40
 8007518:	d1b5      	bne.n	8007486 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800751a:	2300      	movs	r3, #0
}
 800751c:	4618      	mov	r0, r3
 800751e:	3710      	adds	r7, #16
 8007520:	46bd      	mov	sp, r7
 8007522:	bd80      	pop	{r7, pc}

08007524 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8007524:	b480      	push	{r7}
 8007526:	b083      	sub	sp, #12
 8007528:	af00      	add	r7, sp, #0
 800752a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	695b      	ldr	r3, [r3, #20]
 8007532:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007536:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800753a:	d11b      	bne.n	8007574 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007544:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	2200      	movs	r2, #0
 800754a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	2220      	movs	r2, #32
 8007550:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	2200      	movs	r2, #0
 8007558:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007560:	f043 0204 	orr.w	r2, r3, #4
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	2200      	movs	r2, #0
 800756c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8007570:	2301      	movs	r3, #1
 8007572:	e000      	b.n	8007576 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8007574:	2300      	movs	r3, #0
}
 8007576:	4618      	mov	r0, r3
 8007578:	370c      	adds	r7, #12
 800757a:	46bd      	mov	sp, r7
 800757c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007580:	4770      	bx	lr

08007582 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8007582:	b480      	push	{r7}
 8007584:	b083      	sub	sp, #12
 8007586:	af00      	add	r7, sp, #0
 8007588:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800758e:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8007592:	d103      	bne.n	800759c <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	2201      	movs	r2, #1
 8007598:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 800759a:	e007      	b.n	80075ac <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075a0:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80075a4:	d102      	bne.n	80075ac <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	2208      	movs	r2, #8
 80075aa:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80075ac:	bf00      	nop
 80075ae:	370c      	adds	r7, #12
 80075b0:	46bd      	mov	sp, r7
 80075b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075b6:	4770      	bx	lr

080075b8 <HAL_PWR_EnterSLEEPMode>:
  *            @arg PWR_SLEEPENTRY_WFI: enter SLEEP mode with WFI instruction
  *            @arg PWR_SLEEPENTRY_WFE: enter SLEEP mode with WFE instruction
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 80075b8:	b480      	push	{r7}
 80075ba:	b083      	sub	sp, #12
 80075bc:	af00      	add	r7, sp, #0
 80075be:	6078      	str	r0, [r7, #4]
 80075c0:	460b      	mov	r3, r1
 80075c2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80075c4:	4b09      	ldr	r3, [pc, #36]	; (80075ec <HAL_PWR_EnterSLEEPMode+0x34>)
 80075c6:	691b      	ldr	r3, [r3, #16]
 80075c8:	4a08      	ldr	r2, [pc, #32]	; (80075ec <HAL_PWR_EnterSLEEPMode+0x34>)
 80075ca:	f023 0304 	bic.w	r3, r3, #4
 80075ce:	6113      	str	r3, [r2, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if(SLEEPEntry == PWR_SLEEPENTRY_WFI)
 80075d0:	78fb      	ldrb	r3, [r7, #3]
 80075d2:	2b01      	cmp	r3, #1
 80075d4:	d101      	bne.n	80075da <HAL_PWR_EnterSLEEPMode+0x22>
  {   
    /* Request Wait For Interrupt */
    __WFI();
 80075d6:	bf30      	wfi
    /* Request Wait For Event */
    __SEV();
    __WFE();
    __WFE();
  }
}
 80075d8:	e002      	b.n	80075e0 <HAL_PWR_EnterSLEEPMode+0x28>
    __SEV();
 80075da:	bf40      	sev
    __WFE();
 80075dc:	bf20      	wfe
    __WFE();
 80075de:	bf20      	wfe
}
 80075e0:	bf00      	nop
 80075e2:	370c      	adds	r7, #12
 80075e4:	46bd      	mov	sp, r7
 80075e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ea:	4770      	bx	lr
 80075ec:	e000ed00 	.word	0xe000ed00

080075f0 <HAL_PWR_EnableSleepOnExit>:
  *       Setting this bit is useful when the processor is expected to run only on
  *       interruptions handling.         
  * @retval None
  */
void HAL_PWR_EnableSleepOnExit(void)
{
 80075f0:	b480      	push	{r7}
 80075f2:	af00      	add	r7, sp, #0
  /* Set SLEEPONEXIT bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPONEXIT_Msk));
 80075f4:	4b05      	ldr	r3, [pc, #20]	; (800760c <HAL_PWR_EnableSleepOnExit+0x1c>)
 80075f6:	691b      	ldr	r3, [r3, #16]
 80075f8:	4a04      	ldr	r2, [pc, #16]	; (800760c <HAL_PWR_EnableSleepOnExit+0x1c>)
 80075fa:	f043 0302 	orr.w	r3, r3, #2
 80075fe:	6113      	str	r3, [r2, #16]
}
 8007600:	bf00      	nop
 8007602:	46bd      	mov	sp, r7
 8007604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007608:	4770      	bx	lr
 800760a:	bf00      	nop
 800760c:	e000ed00 	.word	0xe000ed00

08007610 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007610:	b580      	push	{r7, lr}
 8007612:	b086      	sub	sp, #24
 8007614:	af00      	add	r7, sp, #0
 8007616:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	2b00      	cmp	r3, #0
 800761c:	d101      	bne.n	8007622 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800761e:	2301      	movs	r3, #1
 8007620:	e264      	b.n	8007aec <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	f003 0301 	and.w	r3, r3, #1
 800762a:	2b00      	cmp	r3, #0
 800762c:	d075      	beq.n	800771a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800762e:	4ba3      	ldr	r3, [pc, #652]	; (80078bc <HAL_RCC_OscConfig+0x2ac>)
 8007630:	689b      	ldr	r3, [r3, #8]
 8007632:	f003 030c 	and.w	r3, r3, #12
 8007636:	2b04      	cmp	r3, #4
 8007638:	d00c      	beq.n	8007654 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800763a:	4ba0      	ldr	r3, [pc, #640]	; (80078bc <HAL_RCC_OscConfig+0x2ac>)
 800763c:	689b      	ldr	r3, [r3, #8]
 800763e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007642:	2b08      	cmp	r3, #8
 8007644:	d112      	bne.n	800766c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007646:	4b9d      	ldr	r3, [pc, #628]	; (80078bc <HAL_RCC_OscConfig+0x2ac>)
 8007648:	685b      	ldr	r3, [r3, #4]
 800764a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800764e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007652:	d10b      	bne.n	800766c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007654:	4b99      	ldr	r3, [pc, #612]	; (80078bc <HAL_RCC_OscConfig+0x2ac>)
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800765c:	2b00      	cmp	r3, #0
 800765e:	d05b      	beq.n	8007718 <HAL_RCC_OscConfig+0x108>
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	685b      	ldr	r3, [r3, #4]
 8007664:	2b00      	cmp	r3, #0
 8007666:	d157      	bne.n	8007718 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8007668:	2301      	movs	r3, #1
 800766a:	e23f      	b.n	8007aec <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	685b      	ldr	r3, [r3, #4]
 8007670:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007674:	d106      	bne.n	8007684 <HAL_RCC_OscConfig+0x74>
 8007676:	4b91      	ldr	r3, [pc, #580]	; (80078bc <HAL_RCC_OscConfig+0x2ac>)
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	4a90      	ldr	r2, [pc, #576]	; (80078bc <HAL_RCC_OscConfig+0x2ac>)
 800767c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007680:	6013      	str	r3, [r2, #0]
 8007682:	e01d      	b.n	80076c0 <HAL_RCC_OscConfig+0xb0>
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	685b      	ldr	r3, [r3, #4]
 8007688:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800768c:	d10c      	bne.n	80076a8 <HAL_RCC_OscConfig+0x98>
 800768e:	4b8b      	ldr	r3, [pc, #556]	; (80078bc <HAL_RCC_OscConfig+0x2ac>)
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	4a8a      	ldr	r2, [pc, #552]	; (80078bc <HAL_RCC_OscConfig+0x2ac>)
 8007694:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007698:	6013      	str	r3, [r2, #0]
 800769a:	4b88      	ldr	r3, [pc, #544]	; (80078bc <HAL_RCC_OscConfig+0x2ac>)
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	4a87      	ldr	r2, [pc, #540]	; (80078bc <HAL_RCC_OscConfig+0x2ac>)
 80076a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80076a4:	6013      	str	r3, [r2, #0]
 80076a6:	e00b      	b.n	80076c0 <HAL_RCC_OscConfig+0xb0>
 80076a8:	4b84      	ldr	r3, [pc, #528]	; (80078bc <HAL_RCC_OscConfig+0x2ac>)
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	4a83      	ldr	r2, [pc, #524]	; (80078bc <HAL_RCC_OscConfig+0x2ac>)
 80076ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80076b2:	6013      	str	r3, [r2, #0]
 80076b4:	4b81      	ldr	r3, [pc, #516]	; (80078bc <HAL_RCC_OscConfig+0x2ac>)
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	4a80      	ldr	r2, [pc, #512]	; (80078bc <HAL_RCC_OscConfig+0x2ac>)
 80076ba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80076be:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	685b      	ldr	r3, [r3, #4]
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	d013      	beq.n	80076f0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80076c8:	f7fb fb48 	bl	8002d5c <HAL_GetTick>
 80076cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80076ce:	e008      	b.n	80076e2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80076d0:	f7fb fb44 	bl	8002d5c <HAL_GetTick>
 80076d4:	4602      	mov	r2, r0
 80076d6:	693b      	ldr	r3, [r7, #16]
 80076d8:	1ad3      	subs	r3, r2, r3
 80076da:	2b64      	cmp	r3, #100	; 0x64
 80076dc:	d901      	bls.n	80076e2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80076de:	2303      	movs	r3, #3
 80076e0:	e204      	b.n	8007aec <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80076e2:	4b76      	ldr	r3, [pc, #472]	; (80078bc <HAL_RCC_OscConfig+0x2ac>)
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	d0f0      	beq.n	80076d0 <HAL_RCC_OscConfig+0xc0>
 80076ee:	e014      	b.n	800771a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80076f0:	f7fb fb34 	bl	8002d5c <HAL_GetTick>
 80076f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80076f6:	e008      	b.n	800770a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80076f8:	f7fb fb30 	bl	8002d5c <HAL_GetTick>
 80076fc:	4602      	mov	r2, r0
 80076fe:	693b      	ldr	r3, [r7, #16]
 8007700:	1ad3      	subs	r3, r2, r3
 8007702:	2b64      	cmp	r3, #100	; 0x64
 8007704:	d901      	bls.n	800770a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007706:	2303      	movs	r3, #3
 8007708:	e1f0      	b.n	8007aec <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800770a:	4b6c      	ldr	r3, [pc, #432]	; (80078bc <HAL_RCC_OscConfig+0x2ac>)
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007712:	2b00      	cmp	r3, #0
 8007714:	d1f0      	bne.n	80076f8 <HAL_RCC_OscConfig+0xe8>
 8007716:	e000      	b.n	800771a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007718:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	f003 0302 	and.w	r3, r3, #2
 8007722:	2b00      	cmp	r3, #0
 8007724:	d063      	beq.n	80077ee <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8007726:	4b65      	ldr	r3, [pc, #404]	; (80078bc <HAL_RCC_OscConfig+0x2ac>)
 8007728:	689b      	ldr	r3, [r3, #8]
 800772a:	f003 030c 	and.w	r3, r3, #12
 800772e:	2b00      	cmp	r3, #0
 8007730:	d00b      	beq.n	800774a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007732:	4b62      	ldr	r3, [pc, #392]	; (80078bc <HAL_RCC_OscConfig+0x2ac>)
 8007734:	689b      	ldr	r3, [r3, #8]
 8007736:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800773a:	2b08      	cmp	r3, #8
 800773c:	d11c      	bne.n	8007778 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800773e:	4b5f      	ldr	r3, [pc, #380]	; (80078bc <HAL_RCC_OscConfig+0x2ac>)
 8007740:	685b      	ldr	r3, [r3, #4]
 8007742:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007746:	2b00      	cmp	r3, #0
 8007748:	d116      	bne.n	8007778 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800774a:	4b5c      	ldr	r3, [pc, #368]	; (80078bc <HAL_RCC_OscConfig+0x2ac>)
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	f003 0302 	and.w	r3, r3, #2
 8007752:	2b00      	cmp	r3, #0
 8007754:	d005      	beq.n	8007762 <HAL_RCC_OscConfig+0x152>
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	68db      	ldr	r3, [r3, #12]
 800775a:	2b01      	cmp	r3, #1
 800775c:	d001      	beq.n	8007762 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800775e:	2301      	movs	r3, #1
 8007760:	e1c4      	b.n	8007aec <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007762:	4b56      	ldr	r3, [pc, #344]	; (80078bc <HAL_RCC_OscConfig+0x2ac>)
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	691b      	ldr	r3, [r3, #16]
 800776e:	00db      	lsls	r3, r3, #3
 8007770:	4952      	ldr	r1, [pc, #328]	; (80078bc <HAL_RCC_OscConfig+0x2ac>)
 8007772:	4313      	orrs	r3, r2
 8007774:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007776:	e03a      	b.n	80077ee <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	68db      	ldr	r3, [r3, #12]
 800777c:	2b00      	cmp	r3, #0
 800777e:	d020      	beq.n	80077c2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007780:	4b4f      	ldr	r3, [pc, #316]	; (80078c0 <HAL_RCC_OscConfig+0x2b0>)
 8007782:	2201      	movs	r2, #1
 8007784:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007786:	f7fb fae9 	bl	8002d5c <HAL_GetTick>
 800778a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800778c:	e008      	b.n	80077a0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800778e:	f7fb fae5 	bl	8002d5c <HAL_GetTick>
 8007792:	4602      	mov	r2, r0
 8007794:	693b      	ldr	r3, [r7, #16]
 8007796:	1ad3      	subs	r3, r2, r3
 8007798:	2b02      	cmp	r3, #2
 800779a:	d901      	bls.n	80077a0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800779c:	2303      	movs	r3, #3
 800779e:	e1a5      	b.n	8007aec <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80077a0:	4b46      	ldr	r3, [pc, #280]	; (80078bc <HAL_RCC_OscConfig+0x2ac>)
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	f003 0302 	and.w	r3, r3, #2
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	d0f0      	beq.n	800778e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80077ac:	4b43      	ldr	r3, [pc, #268]	; (80078bc <HAL_RCC_OscConfig+0x2ac>)
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	691b      	ldr	r3, [r3, #16]
 80077b8:	00db      	lsls	r3, r3, #3
 80077ba:	4940      	ldr	r1, [pc, #256]	; (80078bc <HAL_RCC_OscConfig+0x2ac>)
 80077bc:	4313      	orrs	r3, r2
 80077be:	600b      	str	r3, [r1, #0]
 80077c0:	e015      	b.n	80077ee <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80077c2:	4b3f      	ldr	r3, [pc, #252]	; (80078c0 <HAL_RCC_OscConfig+0x2b0>)
 80077c4:	2200      	movs	r2, #0
 80077c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80077c8:	f7fb fac8 	bl	8002d5c <HAL_GetTick>
 80077cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80077ce:	e008      	b.n	80077e2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80077d0:	f7fb fac4 	bl	8002d5c <HAL_GetTick>
 80077d4:	4602      	mov	r2, r0
 80077d6:	693b      	ldr	r3, [r7, #16]
 80077d8:	1ad3      	subs	r3, r2, r3
 80077da:	2b02      	cmp	r3, #2
 80077dc:	d901      	bls.n	80077e2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80077de:	2303      	movs	r3, #3
 80077e0:	e184      	b.n	8007aec <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80077e2:	4b36      	ldr	r3, [pc, #216]	; (80078bc <HAL_RCC_OscConfig+0x2ac>)
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	f003 0302 	and.w	r3, r3, #2
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d1f0      	bne.n	80077d0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	f003 0308 	and.w	r3, r3, #8
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d030      	beq.n	800785c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	695b      	ldr	r3, [r3, #20]
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d016      	beq.n	8007830 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007802:	4b30      	ldr	r3, [pc, #192]	; (80078c4 <HAL_RCC_OscConfig+0x2b4>)
 8007804:	2201      	movs	r2, #1
 8007806:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007808:	f7fb faa8 	bl	8002d5c <HAL_GetTick>
 800780c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800780e:	e008      	b.n	8007822 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007810:	f7fb faa4 	bl	8002d5c <HAL_GetTick>
 8007814:	4602      	mov	r2, r0
 8007816:	693b      	ldr	r3, [r7, #16]
 8007818:	1ad3      	subs	r3, r2, r3
 800781a:	2b02      	cmp	r3, #2
 800781c:	d901      	bls.n	8007822 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800781e:	2303      	movs	r3, #3
 8007820:	e164      	b.n	8007aec <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007822:	4b26      	ldr	r3, [pc, #152]	; (80078bc <HAL_RCC_OscConfig+0x2ac>)
 8007824:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007826:	f003 0302 	and.w	r3, r3, #2
 800782a:	2b00      	cmp	r3, #0
 800782c:	d0f0      	beq.n	8007810 <HAL_RCC_OscConfig+0x200>
 800782e:	e015      	b.n	800785c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007830:	4b24      	ldr	r3, [pc, #144]	; (80078c4 <HAL_RCC_OscConfig+0x2b4>)
 8007832:	2200      	movs	r2, #0
 8007834:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007836:	f7fb fa91 	bl	8002d5c <HAL_GetTick>
 800783a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800783c:	e008      	b.n	8007850 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800783e:	f7fb fa8d 	bl	8002d5c <HAL_GetTick>
 8007842:	4602      	mov	r2, r0
 8007844:	693b      	ldr	r3, [r7, #16]
 8007846:	1ad3      	subs	r3, r2, r3
 8007848:	2b02      	cmp	r3, #2
 800784a:	d901      	bls.n	8007850 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800784c:	2303      	movs	r3, #3
 800784e:	e14d      	b.n	8007aec <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007850:	4b1a      	ldr	r3, [pc, #104]	; (80078bc <HAL_RCC_OscConfig+0x2ac>)
 8007852:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007854:	f003 0302 	and.w	r3, r3, #2
 8007858:	2b00      	cmp	r3, #0
 800785a:	d1f0      	bne.n	800783e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	f003 0304 	and.w	r3, r3, #4
 8007864:	2b00      	cmp	r3, #0
 8007866:	f000 80a0 	beq.w	80079aa <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800786a:	2300      	movs	r3, #0
 800786c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800786e:	4b13      	ldr	r3, [pc, #76]	; (80078bc <HAL_RCC_OscConfig+0x2ac>)
 8007870:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007872:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007876:	2b00      	cmp	r3, #0
 8007878:	d10f      	bne.n	800789a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800787a:	2300      	movs	r3, #0
 800787c:	60bb      	str	r3, [r7, #8]
 800787e:	4b0f      	ldr	r3, [pc, #60]	; (80078bc <HAL_RCC_OscConfig+0x2ac>)
 8007880:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007882:	4a0e      	ldr	r2, [pc, #56]	; (80078bc <HAL_RCC_OscConfig+0x2ac>)
 8007884:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007888:	6413      	str	r3, [r2, #64]	; 0x40
 800788a:	4b0c      	ldr	r3, [pc, #48]	; (80078bc <HAL_RCC_OscConfig+0x2ac>)
 800788c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800788e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007892:	60bb      	str	r3, [r7, #8]
 8007894:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007896:	2301      	movs	r3, #1
 8007898:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800789a:	4b0b      	ldr	r3, [pc, #44]	; (80078c8 <HAL_RCC_OscConfig+0x2b8>)
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d121      	bne.n	80078ea <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80078a6:	4b08      	ldr	r3, [pc, #32]	; (80078c8 <HAL_RCC_OscConfig+0x2b8>)
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	4a07      	ldr	r2, [pc, #28]	; (80078c8 <HAL_RCC_OscConfig+0x2b8>)
 80078ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80078b0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80078b2:	f7fb fa53 	bl	8002d5c <HAL_GetTick>
 80078b6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80078b8:	e011      	b.n	80078de <HAL_RCC_OscConfig+0x2ce>
 80078ba:	bf00      	nop
 80078bc:	40023800 	.word	0x40023800
 80078c0:	42470000 	.word	0x42470000
 80078c4:	42470e80 	.word	0x42470e80
 80078c8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80078cc:	f7fb fa46 	bl	8002d5c <HAL_GetTick>
 80078d0:	4602      	mov	r2, r0
 80078d2:	693b      	ldr	r3, [r7, #16]
 80078d4:	1ad3      	subs	r3, r2, r3
 80078d6:	2b02      	cmp	r3, #2
 80078d8:	d901      	bls.n	80078de <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80078da:	2303      	movs	r3, #3
 80078dc:	e106      	b.n	8007aec <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80078de:	4b85      	ldr	r3, [pc, #532]	; (8007af4 <HAL_RCC_OscConfig+0x4e4>)
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d0f0      	beq.n	80078cc <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	689b      	ldr	r3, [r3, #8]
 80078ee:	2b01      	cmp	r3, #1
 80078f0:	d106      	bne.n	8007900 <HAL_RCC_OscConfig+0x2f0>
 80078f2:	4b81      	ldr	r3, [pc, #516]	; (8007af8 <HAL_RCC_OscConfig+0x4e8>)
 80078f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80078f6:	4a80      	ldr	r2, [pc, #512]	; (8007af8 <HAL_RCC_OscConfig+0x4e8>)
 80078f8:	f043 0301 	orr.w	r3, r3, #1
 80078fc:	6713      	str	r3, [r2, #112]	; 0x70
 80078fe:	e01c      	b.n	800793a <HAL_RCC_OscConfig+0x32a>
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	689b      	ldr	r3, [r3, #8]
 8007904:	2b05      	cmp	r3, #5
 8007906:	d10c      	bne.n	8007922 <HAL_RCC_OscConfig+0x312>
 8007908:	4b7b      	ldr	r3, [pc, #492]	; (8007af8 <HAL_RCC_OscConfig+0x4e8>)
 800790a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800790c:	4a7a      	ldr	r2, [pc, #488]	; (8007af8 <HAL_RCC_OscConfig+0x4e8>)
 800790e:	f043 0304 	orr.w	r3, r3, #4
 8007912:	6713      	str	r3, [r2, #112]	; 0x70
 8007914:	4b78      	ldr	r3, [pc, #480]	; (8007af8 <HAL_RCC_OscConfig+0x4e8>)
 8007916:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007918:	4a77      	ldr	r2, [pc, #476]	; (8007af8 <HAL_RCC_OscConfig+0x4e8>)
 800791a:	f043 0301 	orr.w	r3, r3, #1
 800791e:	6713      	str	r3, [r2, #112]	; 0x70
 8007920:	e00b      	b.n	800793a <HAL_RCC_OscConfig+0x32a>
 8007922:	4b75      	ldr	r3, [pc, #468]	; (8007af8 <HAL_RCC_OscConfig+0x4e8>)
 8007924:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007926:	4a74      	ldr	r2, [pc, #464]	; (8007af8 <HAL_RCC_OscConfig+0x4e8>)
 8007928:	f023 0301 	bic.w	r3, r3, #1
 800792c:	6713      	str	r3, [r2, #112]	; 0x70
 800792e:	4b72      	ldr	r3, [pc, #456]	; (8007af8 <HAL_RCC_OscConfig+0x4e8>)
 8007930:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007932:	4a71      	ldr	r2, [pc, #452]	; (8007af8 <HAL_RCC_OscConfig+0x4e8>)
 8007934:	f023 0304 	bic.w	r3, r3, #4
 8007938:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	689b      	ldr	r3, [r3, #8]
 800793e:	2b00      	cmp	r3, #0
 8007940:	d015      	beq.n	800796e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007942:	f7fb fa0b 	bl	8002d5c <HAL_GetTick>
 8007946:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007948:	e00a      	b.n	8007960 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800794a:	f7fb fa07 	bl	8002d5c <HAL_GetTick>
 800794e:	4602      	mov	r2, r0
 8007950:	693b      	ldr	r3, [r7, #16]
 8007952:	1ad3      	subs	r3, r2, r3
 8007954:	f241 3288 	movw	r2, #5000	; 0x1388
 8007958:	4293      	cmp	r3, r2
 800795a:	d901      	bls.n	8007960 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800795c:	2303      	movs	r3, #3
 800795e:	e0c5      	b.n	8007aec <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007960:	4b65      	ldr	r3, [pc, #404]	; (8007af8 <HAL_RCC_OscConfig+0x4e8>)
 8007962:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007964:	f003 0302 	and.w	r3, r3, #2
 8007968:	2b00      	cmp	r3, #0
 800796a:	d0ee      	beq.n	800794a <HAL_RCC_OscConfig+0x33a>
 800796c:	e014      	b.n	8007998 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800796e:	f7fb f9f5 	bl	8002d5c <HAL_GetTick>
 8007972:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007974:	e00a      	b.n	800798c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007976:	f7fb f9f1 	bl	8002d5c <HAL_GetTick>
 800797a:	4602      	mov	r2, r0
 800797c:	693b      	ldr	r3, [r7, #16]
 800797e:	1ad3      	subs	r3, r2, r3
 8007980:	f241 3288 	movw	r2, #5000	; 0x1388
 8007984:	4293      	cmp	r3, r2
 8007986:	d901      	bls.n	800798c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8007988:	2303      	movs	r3, #3
 800798a:	e0af      	b.n	8007aec <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800798c:	4b5a      	ldr	r3, [pc, #360]	; (8007af8 <HAL_RCC_OscConfig+0x4e8>)
 800798e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007990:	f003 0302 	and.w	r3, r3, #2
 8007994:	2b00      	cmp	r3, #0
 8007996:	d1ee      	bne.n	8007976 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007998:	7dfb      	ldrb	r3, [r7, #23]
 800799a:	2b01      	cmp	r3, #1
 800799c:	d105      	bne.n	80079aa <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800799e:	4b56      	ldr	r3, [pc, #344]	; (8007af8 <HAL_RCC_OscConfig+0x4e8>)
 80079a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079a2:	4a55      	ldr	r2, [pc, #340]	; (8007af8 <HAL_RCC_OscConfig+0x4e8>)
 80079a4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80079a8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	699b      	ldr	r3, [r3, #24]
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	f000 809b 	beq.w	8007aea <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80079b4:	4b50      	ldr	r3, [pc, #320]	; (8007af8 <HAL_RCC_OscConfig+0x4e8>)
 80079b6:	689b      	ldr	r3, [r3, #8]
 80079b8:	f003 030c 	and.w	r3, r3, #12
 80079bc:	2b08      	cmp	r3, #8
 80079be:	d05c      	beq.n	8007a7a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	699b      	ldr	r3, [r3, #24]
 80079c4:	2b02      	cmp	r3, #2
 80079c6:	d141      	bne.n	8007a4c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80079c8:	4b4c      	ldr	r3, [pc, #304]	; (8007afc <HAL_RCC_OscConfig+0x4ec>)
 80079ca:	2200      	movs	r2, #0
 80079cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80079ce:	f7fb f9c5 	bl	8002d5c <HAL_GetTick>
 80079d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80079d4:	e008      	b.n	80079e8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80079d6:	f7fb f9c1 	bl	8002d5c <HAL_GetTick>
 80079da:	4602      	mov	r2, r0
 80079dc:	693b      	ldr	r3, [r7, #16]
 80079de:	1ad3      	subs	r3, r2, r3
 80079e0:	2b02      	cmp	r3, #2
 80079e2:	d901      	bls.n	80079e8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80079e4:	2303      	movs	r3, #3
 80079e6:	e081      	b.n	8007aec <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80079e8:	4b43      	ldr	r3, [pc, #268]	; (8007af8 <HAL_RCC_OscConfig+0x4e8>)
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	d1f0      	bne.n	80079d6 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	69da      	ldr	r2, [r3, #28]
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	6a1b      	ldr	r3, [r3, #32]
 80079fc:	431a      	orrs	r2, r3
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a02:	019b      	lsls	r3, r3, #6
 8007a04:	431a      	orrs	r2, r3
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a0a:	085b      	lsrs	r3, r3, #1
 8007a0c:	3b01      	subs	r3, #1
 8007a0e:	041b      	lsls	r3, r3, #16
 8007a10:	431a      	orrs	r2, r3
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a16:	061b      	lsls	r3, r3, #24
 8007a18:	4937      	ldr	r1, [pc, #220]	; (8007af8 <HAL_RCC_OscConfig+0x4e8>)
 8007a1a:	4313      	orrs	r3, r2
 8007a1c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007a1e:	4b37      	ldr	r3, [pc, #220]	; (8007afc <HAL_RCC_OscConfig+0x4ec>)
 8007a20:	2201      	movs	r2, #1
 8007a22:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007a24:	f7fb f99a 	bl	8002d5c <HAL_GetTick>
 8007a28:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007a2a:	e008      	b.n	8007a3e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007a2c:	f7fb f996 	bl	8002d5c <HAL_GetTick>
 8007a30:	4602      	mov	r2, r0
 8007a32:	693b      	ldr	r3, [r7, #16]
 8007a34:	1ad3      	subs	r3, r2, r3
 8007a36:	2b02      	cmp	r3, #2
 8007a38:	d901      	bls.n	8007a3e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8007a3a:	2303      	movs	r3, #3
 8007a3c:	e056      	b.n	8007aec <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007a3e:	4b2e      	ldr	r3, [pc, #184]	; (8007af8 <HAL_RCC_OscConfig+0x4e8>)
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d0f0      	beq.n	8007a2c <HAL_RCC_OscConfig+0x41c>
 8007a4a:	e04e      	b.n	8007aea <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007a4c:	4b2b      	ldr	r3, [pc, #172]	; (8007afc <HAL_RCC_OscConfig+0x4ec>)
 8007a4e:	2200      	movs	r2, #0
 8007a50:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007a52:	f7fb f983 	bl	8002d5c <HAL_GetTick>
 8007a56:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007a58:	e008      	b.n	8007a6c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007a5a:	f7fb f97f 	bl	8002d5c <HAL_GetTick>
 8007a5e:	4602      	mov	r2, r0
 8007a60:	693b      	ldr	r3, [r7, #16]
 8007a62:	1ad3      	subs	r3, r2, r3
 8007a64:	2b02      	cmp	r3, #2
 8007a66:	d901      	bls.n	8007a6c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8007a68:	2303      	movs	r3, #3
 8007a6a:	e03f      	b.n	8007aec <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007a6c:	4b22      	ldr	r3, [pc, #136]	; (8007af8 <HAL_RCC_OscConfig+0x4e8>)
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	d1f0      	bne.n	8007a5a <HAL_RCC_OscConfig+0x44a>
 8007a78:	e037      	b.n	8007aea <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	699b      	ldr	r3, [r3, #24]
 8007a7e:	2b01      	cmp	r3, #1
 8007a80:	d101      	bne.n	8007a86 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8007a82:	2301      	movs	r3, #1
 8007a84:	e032      	b.n	8007aec <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8007a86:	4b1c      	ldr	r3, [pc, #112]	; (8007af8 <HAL_RCC_OscConfig+0x4e8>)
 8007a88:	685b      	ldr	r3, [r3, #4]
 8007a8a:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	699b      	ldr	r3, [r3, #24]
 8007a90:	2b01      	cmp	r3, #1
 8007a92:	d028      	beq.n	8007ae6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007a9e:	429a      	cmp	r2, r3
 8007aa0:	d121      	bne.n	8007ae6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007aac:	429a      	cmp	r2, r3
 8007aae:	d11a      	bne.n	8007ae6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007ab0:	68fa      	ldr	r2, [r7, #12]
 8007ab2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8007ab6:	4013      	ands	r3, r2
 8007ab8:	687a      	ldr	r2, [r7, #4]
 8007aba:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8007abc:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007abe:	4293      	cmp	r3, r2
 8007ac0:	d111      	bne.n	8007ae6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007acc:	085b      	lsrs	r3, r3, #1
 8007ace:	3b01      	subs	r3, #1
 8007ad0:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007ad2:	429a      	cmp	r2, r3
 8007ad4:	d107      	bne.n	8007ae6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ae0:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007ae2:	429a      	cmp	r2, r3
 8007ae4:	d001      	beq.n	8007aea <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8007ae6:	2301      	movs	r3, #1
 8007ae8:	e000      	b.n	8007aec <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8007aea:	2300      	movs	r3, #0
}
 8007aec:	4618      	mov	r0, r3
 8007aee:	3718      	adds	r7, #24
 8007af0:	46bd      	mov	sp, r7
 8007af2:	bd80      	pop	{r7, pc}
 8007af4:	40007000 	.word	0x40007000
 8007af8:	40023800 	.word	0x40023800
 8007afc:	42470060 	.word	0x42470060

08007b00 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007b00:	b580      	push	{r7, lr}
 8007b02:	b084      	sub	sp, #16
 8007b04:	af00      	add	r7, sp, #0
 8007b06:	6078      	str	r0, [r7, #4]
 8007b08:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d101      	bne.n	8007b14 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007b10:	2301      	movs	r3, #1
 8007b12:	e0cc      	b.n	8007cae <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007b14:	4b68      	ldr	r3, [pc, #416]	; (8007cb8 <HAL_RCC_ClockConfig+0x1b8>)
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	f003 0307 	and.w	r3, r3, #7
 8007b1c:	683a      	ldr	r2, [r7, #0]
 8007b1e:	429a      	cmp	r2, r3
 8007b20:	d90c      	bls.n	8007b3c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007b22:	4b65      	ldr	r3, [pc, #404]	; (8007cb8 <HAL_RCC_ClockConfig+0x1b8>)
 8007b24:	683a      	ldr	r2, [r7, #0]
 8007b26:	b2d2      	uxtb	r2, r2
 8007b28:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007b2a:	4b63      	ldr	r3, [pc, #396]	; (8007cb8 <HAL_RCC_ClockConfig+0x1b8>)
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	f003 0307 	and.w	r3, r3, #7
 8007b32:	683a      	ldr	r2, [r7, #0]
 8007b34:	429a      	cmp	r2, r3
 8007b36:	d001      	beq.n	8007b3c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8007b38:	2301      	movs	r3, #1
 8007b3a:	e0b8      	b.n	8007cae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	f003 0302 	and.w	r3, r3, #2
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	d020      	beq.n	8007b8a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	f003 0304 	and.w	r3, r3, #4
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	d005      	beq.n	8007b60 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007b54:	4b59      	ldr	r3, [pc, #356]	; (8007cbc <HAL_RCC_ClockConfig+0x1bc>)
 8007b56:	689b      	ldr	r3, [r3, #8]
 8007b58:	4a58      	ldr	r2, [pc, #352]	; (8007cbc <HAL_RCC_ClockConfig+0x1bc>)
 8007b5a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8007b5e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	f003 0308 	and.w	r3, r3, #8
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	d005      	beq.n	8007b78 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007b6c:	4b53      	ldr	r3, [pc, #332]	; (8007cbc <HAL_RCC_ClockConfig+0x1bc>)
 8007b6e:	689b      	ldr	r3, [r3, #8]
 8007b70:	4a52      	ldr	r2, [pc, #328]	; (8007cbc <HAL_RCC_ClockConfig+0x1bc>)
 8007b72:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8007b76:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007b78:	4b50      	ldr	r3, [pc, #320]	; (8007cbc <HAL_RCC_ClockConfig+0x1bc>)
 8007b7a:	689b      	ldr	r3, [r3, #8]
 8007b7c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	689b      	ldr	r3, [r3, #8]
 8007b84:	494d      	ldr	r1, [pc, #308]	; (8007cbc <HAL_RCC_ClockConfig+0x1bc>)
 8007b86:	4313      	orrs	r3, r2
 8007b88:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	f003 0301 	and.w	r3, r3, #1
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	d044      	beq.n	8007c20 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	685b      	ldr	r3, [r3, #4]
 8007b9a:	2b01      	cmp	r3, #1
 8007b9c:	d107      	bne.n	8007bae <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007b9e:	4b47      	ldr	r3, [pc, #284]	; (8007cbc <HAL_RCC_ClockConfig+0x1bc>)
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d119      	bne.n	8007bde <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007baa:	2301      	movs	r3, #1
 8007bac:	e07f      	b.n	8007cae <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	685b      	ldr	r3, [r3, #4]
 8007bb2:	2b02      	cmp	r3, #2
 8007bb4:	d003      	beq.n	8007bbe <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007bba:	2b03      	cmp	r3, #3
 8007bbc:	d107      	bne.n	8007bce <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007bbe:	4b3f      	ldr	r3, [pc, #252]	; (8007cbc <HAL_RCC_ClockConfig+0x1bc>)
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	d109      	bne.n	8007bde <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007bca:	2301      	movs	r3, #1
 8007bcc:	e06f      	b.n	8007cae <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007bce:	4b3b      	ldr	r3, [pc, #236]	; (8007cbc <HAL_RCC_ClockConfig+0x1bc>)
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	f003 0302 	and.w	r3, r3, #2
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d101      	bne.n	8007bde <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007bda:	2301      	movs	r3, #1
 8007bdc:	e067      	b.n	8007cae <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007bde:	4b37      	ldr	r3, [pc, #220]	; (8007cbc <HAL_RCC_ClockConfig+0x1bc>)
 8007be0:	689b      	ldr	r3, [r3, #8]
 8007be2:	f023 0203 	bic.w	r2, r3, #3
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	685b      	ldr	r3, [r3, #4]
 8007bea:	4934      	ldr	r1, [pc, #208]	; (8007cbc <HAL_RCC_ClockConfig+0x1bc>)
 8007bec:	4313      	orrs	r3, r2
 8007bee:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007bf0:	f7fb f8b4 	bl	8002d5c <HAL_GetTick>
 8007bf4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007bf6:	e00a      	b.n	8007c0e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007bf8:	f7fb f8b0 	bl	8002d5c <HAL_GetTick>
 8007bfc:	4602      	mov	r2, r0
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	1ad3      	subs	r3, r2, r3
 8007c02:	f241 3288 	movw	r2, #5000	; 0x1388
 8007c06:	4293      	cmp	r3, r2
 8007c08:	d901      	bls.n	8007c0e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007c0a:	2303      	movs	r3, #3
 8007c0c:	e04f      	b.n	8007cae <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007c0e:	4b2b      	ldr	r3, [pc, #172]	; (8007cbc <HAL_RCC_ClockConfig+0x1bc>)
 8007c10:	689b      	ldr	r3, [r3, #8]
 8007c12:	f003 020c 	and.w	r2, r3, #12
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	685b      	ldr	r3, [r3, #4]
 8007c1a:	009b      	lsls	r3, r3, #2
 8007c1c:	429a      	cmp	r2, r3
 8007c1e:	d1eb      	bne.n	8007bf8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007c20:	4b25      	ldr	r3, [pc, #148]	; (8007cb8 <HAL_RCC_ClockConfig+0x1b8>)
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	f003 0307 	and.w	r3, r3, #7
 8007c28:	683a      	ldr	r2, [r7, #0]
 8007c2a:	429a      	cmp	r2, r3
 8007c2c:	d20c      	bcs.n	8007c48 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007c2e:	4b22      	ldr	r3, [pc, #136]	; (8007cb8 <HAL_RCC_ClockConfig+0x1b8>)
 8007c30:	683a      	ldr	r2, [r7, #0]
 8007c32:	b2d2      	uxtb	r2, r2
 8007c34:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007c36:	4b20      	ldr	r3, [pc, #128]	; (8007cb8 <HAL_RCC_ClockConfig+0x1b8>)
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	f003 0307 	and.w	r3, r3, #7
 8007c3e:	683a      	ldr	r2, [r7, #0]
 8007c40:	429a      	cmp	r2, r3
 8007c42:	d001      	beq.n	8007c48 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8007c44:	2301      	movs	r3, #1
 8007c46:	e032      	b.n	8007cae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	f003 0304 	and.w	r3, r3, #4
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	d008      	beq.n	8007c66 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007c54:	4b19      	ldr	r3, [pc, #100]	; (8007cbc <HAL_RCC_ClockConfig+0x1bc>)
 8007c56:	689b      	ldr	r3, [r3, #8]
 8007c58:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	68db      	ldr	r3, [r3, #12]
 8007c60:	4916      	ldr	r1, [pc, #88]	; (8007cbc <HAL_RCC_ClockConfig+0x1bc>)
 8007c62:	4313      	orrs	r3, r2
 8007c64:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	f003 0308 	and.w	r3, r3, #8
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	d009      	beq.n	8007c86 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007c72:	4b12      	ldr	r3, [pc, #72]	; (8007cbc <HAL_RCC_ClockConfig+0x1bc>)
 8007c74:	689b      	ldr	r3, [r3, #8]
 8007c76:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	691b      	ldr	r3, [r3, #16]
 8007c7e:	00db      	lsls	r3, r3, #3
 8007c80:	490e      	ldr	r1, [pc, #56]	; (8007cbc <HAL_RCC_ClockConfig+0x1bc>)
 8007c82:	4313      	orrs	r3, r2
 8007c84:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8007c86:	f000 f821 	bl	8007ccc <HAL_RCC_GetSysClockFreq>
 8007c8a:	4602      	mov	r2, r0
 8007c8c:	4b0b      	ldr	r3, [pc, #44]	; (8007cbc <HAL_RCC_ClockConfig+0x1bc>)
 8007c8e:	689b      	ldr	r3, [r3, #8]
 8007c90:	091b      	lsrs	r3, r3, #4
 8007c92:	f003 030f 	and.w	r3, r3, #15
 8007c96:	490a      	ldr	r1, [pc, #40]	; (8007cc0 <HAL_RCC_ClockConfig+0x1c0>)
 8007c98:	5ccb      	ldrb	r3, [r1, r3]
 8007c9a:	fa22 f303 	lsr.w	r3, r2, r3
 8007c9e:	4a09      	ldr	r2, [pc, #36]	; (8007cc4 <HAL_RCC_ClockConfig+0x1c4>)
 8007ca0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8007ca2:	4b09      	ldr	r3, [pc, #36]	; (8007cc8 <HAL_RCC_ClockConfig+0x1c8>)
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	4618      	mov	r0, r3
 8007ca8:	f7fb f814 	bl	8002cd4 <HAL_InitTick>

  return HAL_OK;
 8007cac:	2300      	movs	r3, #0
}
 8007cae:	4618      	mov	r0, r3
 8007cb0:	3710      	adds	r7, #16
 8007cb2:	46bd      	mov	sp, r7
 8007cb4:	bd80      	pop	{r7, pc}
 8007cb6:	bf00      	nop
 8007cb8:	40023c00 	.word	0x40023c00
 8007cbc:	40023800 	.word	0x40023800
 8007cc0:	0800d11c 	.word	0x0800d11c
 8007cc4:	20000018 	.word	0x20000018
 8007cc8:	2000001c 	.word	0x2000001c

08007ccc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007ccc:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8007cd0:	b084      	sub	sp, #16
 8007cd2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8007cd4:	2300      	movs	r3, #0
 8007cd6:	607b      	str	r3, [r7, #4]
 8007cd8:	2300      	movs	r3, #0
 8007cda:	60fb      	str	r3, [r7, #12]
 8007cdc:	2300      	movs	r3, #0
 8007cde:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8007ce0:	2300      	movs	r3, #0
 8007ce2:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007ce4:	4b67      	ldr	r3, [pc, #412]	; (8007e84 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8007ce6:	689b      	ldr	r3, [r3, #8]
 8007ce8:	f003 030c 	and.w	r3, r3, #12
 8007cec:	2b08      	cmp	r3, #8
 8007cee:	d00d      	beq.n	8007d0c <HAL_RCC_GetSysClockFreq+0x40>
 8007cf0:	2b08      	cmp	r3, #8
 8007cf2:	f200 80bd 	bhi.w	8007e70 <HAL_RCC_GetSysClockFreq+0x1a4>
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	d002      	beq.n	8007d00 <HAL_RCC_GetSysClockFreq+0x34>
 8007cfa:	2b04      	cmp	r3, #4
 8007cfc:	d003      	beq.n	8007d06 <HAL_RCC_GetSysClockFreq+0x3a>
 8007cfe:	e0b7      	b.n	8007e70 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007d00:	4b61      	ldr	r3, [pc, #388]	; (8007e88 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8007d02:	60bb      	str	r3, [r7, #8]
       break;
 8007d04:	e0b7      	b.n	8007e76 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007d06:	4b61      	ldr	r3, [pc, #388]	; (8007e8c <HAL_RCC_GetSysClockFreq+0x1c0>)
 8007d08:	60bb      	str	r3, [r7, #8]
      break;
 8007d0a:	e0b4      	b.n	8007e76 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007d0c:	4b5d      	ldr	r3, [pc, #372]	; (8007e84 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8007d0e:	685b      	ldr	r3, [r3, #4]
 8007d10:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007d14:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007d16:	4b5b      	ldr	r3, [pc, #364]	; (8007e84 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8007d18:	685b      	ldr	r3, [r3, #4]
 8007d1a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d04d      	beq.n	8007dbe <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007d22:	4b58      	ldr	r3, [pc, #352]	; (8007e84 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8007d24:	685b      	ldr	r3, [r3, #4]
 8007d26:	099b      	lsrs	r3, r3, #6
 8007d28:	461a      	mov	r2, r3
 8007d2a:	f04f 0300 	mov.w	r3, #0
 8007d2e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8007d32:	f04f 0100 	mov.w	r1, #0
 8007d36:	ea02 0800 	and.w	r8, r2, r0
 8007d3a:	ea03 0901 	and.w	r9, r3, r1
 8007d3e:	4640      	mov	r0, r8
 8007d40:	4649      	mov	r1, r9
 8007d42:	f04f 0200 	mov.w	r2, #0
 8007d46:	f04f 0300 	mov.w	r3, #0
 8007d4a:	014b      	lsls	r3, r1, #5
 8007d4c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8007d50:	0142      	lsls	r2, r0, #5
 8007d52:	4610      	mov	r0, r2
 8007d54:	4619      	mov	r1, r3
 8007d56:	ebb0 0008 	subs.w	r0, r0, r8
 8007d5a:	eb61 0109 	sbc.w	r1, r1, r9
 8007d5e:	f04f 0200 	mov.w	r2, #0
 8007d62:	f04f 0300 	mov.w	r3, #0
 8007d66:	018b      	lsls	r3, r1, #6
 8007d68:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8007d6c:	0182      	lsls	r2, r0, #6
 8007d6e:	1a12      	subs	r2, r2, r0
 8007d70:	eb63 0301 	sbc.w	r3, r3, r1
 8007d74:	f04f 0000 	mov.w	r0, #0
 8007d78:	f04f 0100 	mov.w	r1, #0
 8007d7c:	00d9      	lsls	r1, r3, #3
 8007d7e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007d82:	00d0      	lsls	r0, r2, #3
 8007d84:	4602      	mov	r2, r0
 8007d86:	460b      	mov	r3, r1
 8007d88:	eb12 0208 	adds.w	r2, r2, r8
 8007d8c:	eb43 0309 	adc.w	r3, r3, r9
 8007d90:	f04f 0000 	mov.w	r0, #0
 8007d94:	f04f 0100 	mov.w	r1, #0
 8007d98:	0259      	lsls	r1, r3, #9
 8007d9a:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8007d9e:	0250      	lsls	r0, r2, #9
 8007da0:	4602      	mov	r2, r0
 8007da2:	460b      	mov	r3, r1
 8007da4:	4610      	mov	r0, r2
 8007da6:	4619      	mov	r1, r3
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	461a      	mov	r2, r3
 8007dac:	f04f 0300 	mov.w	r3, #0
 8007db0:	f7f8 ff4a 	bl	8000c48 <__aeabi_uldivmod>
 8007db4:	4602      	mov	r2, r0
 8007db6:	460b      	mov	r3, r1
 8007db8:	4613      	mov	r3, r2
 8007dba:	60fb      	str	r3, [r7, #12]
 8007dbc:	e04a      	b.n	8007e54 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007dbe:	4b31      	ldr	r3, [pc, #196]	; (8007e84 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8007dc0:	685b      	ldr	r3, [r3, #4]
 8007dc2:	099b      	lsrs	r3, r3, #6
 8007dc4:	461a      	mov	r2, r3
 8007dc6:	f04f 0300 	mov.w	r3, #0
 8007dca:	f240 10ff 	movw	r0, #511	; 0x1ff
 8007dce:	f04f 0100 	mov.w	r1, #0
 8007dd2:	ea02 0400 	and.w	r4, r2, r0
 8007dd6:	ea03 0501 	and.w	r5, r3, r1
 8007dda:	4620      	mov	r0, r4
 8007ddc:	4629      	mov	r1, r5
 8007dde:	f04f 0200 	mov.w	r2, #0
 8007de2:	f04f 0300 	mov.w	r3, #0
 8007de6:	014b      	lsls	r3, r1, #5
 8007de8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8007dec:	0142      	lsls	r2, r0, #5
 8007dee:	4610      	mov	r0, r2
 8007df0:	4619      	mov	r1, r3
 8007df2:	1b00      	subs	r0, r0, r4
 8007df4:	eb61 0105 	sbc.w	r1, r1, r5
 8007df8:	f04f 0200 	mov.w	r2, #0
 8007dfc:	f04f 0300 	mov.w	r3, #0
 8007e00:	018b      	lsls	r3, r1, #6
 8007e02:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8007e06:	0182      	lsls	r2, r0, #6
 8007e08:	1a12      	subs	r2, r2, r0
 8007e0a:	eb63 0301 	sbc.w	r3, r3, r1
 8007e0e:	f04f 0000 	mov.w	r0, #0
 8007e12:	f04f 0100 	mov.w	r1, #0
 8007e16:	00d9      	lsls	r1, r3, #3
 8007e18:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007e1c:	00d0      	lsls	r0, r2, #3
 8007e1e:	4602      	mov	r2, r0
 8007e20:	460b      	mov	r3, r1
 8007e22:	1912      	adds	r2, r2, r4
 8007e24:	eb45 0303 	adc.w	r3, r5, r3
 8007e28:	f04f 0000 	mov.w	r0, #0
 8007e2c:	f04f 0100 	mov.w	r1, #0
 8007e30:	0299      	lsls	r1, r3, #10
 8007e32:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8007e36:	0290      	lsls	r0, r2, #10
 8007e38:	4602      	mov	r2, r0
 8007e3a:	460b      	mov	r3, r1
 8007e3c:	4610      	mov	r0, r2
 8007e3e:	4619      	mov	r1, r3
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	461a      	mov	r2, r3
 8007e44:	f04f 0300 	mov.w	r3, #0
 8007e48:	f7f8 fefe 	bl	8000c48 <__aeabi_uldivmod>
 8007e4c:	4602      	mov	r2, r0
 8007e4e:	460b      	mov	r3, r1
 8007e50:	4613      	mov	r3, r2
 8007e52:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8007e54:	4b0b      	ldr	r3, [pc, #44]	; (8007e84 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8007e56:	685b      	ldr	r3, [r3, #4]
 8007e58:	0c1b      	lsrs	r3, r3, #16
 8007e5a:	f003 0303 	and.w	r3, r3, #3
 8007e5e:	3301      	adds	r3, #1
 8007e60:	005b      	lsls	r3, r3, #1
 8007e62:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8007e64:	68fa      	ldr	r2, [r7, #12]
 8007e66:	683b      	ldr	r3, [r7, #0]
 8007e68:	fbb2 f3f3 	udiv	r3, r2, r3
 8007e6c:	60bb      	str	r3, [r7, #8]
      break;
 8007e6e:	e002      	b.n	8007e76 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007e70:	4b05      	ldr	r3, [pc, #20]	; (8007e88 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8007e72:	60bb      	str	r3, [r7, #8]
      break;
 8007e74:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007e76:	68bb      	ldr	r3, [r7, #8]
}
 8007e78:	4618      	mov	r0, r3
 8007e7a:	3710      	adds	r7, #16
 8007e7c:	46bd      	mov	sp, r7
 8007e7e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8007e82:	bf00      	nop
 8007e84:	40023800 	.word	0x40023800
 8007e88:	00f42400 	.word	0x00f42400
 8007e8c:	007a1200 	.word	0x007a1200

08007e90 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007e90:	b480      	push	{r7}
 8007e92:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007e94:	4b03      	ldr	r3, [pc, #12]	; (8007ea4 <HAL_RCC_GetHCLKFreq+0x14>)
 8007e96:	681b      	ldr	r3, [r3, #0]
}
 8007e98:	4618      	mov	r0, r3
 8007e9a:	46bd      	mov	sp, r7
 8007e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ea0:	4770      	bx	lr
 8007ea2:	bf00      	nop
 8007ea4:	20000018 	.word	0x20000018

08007ea8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007ea8:	b580      	push	{r7, lr}
 8007eaa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8007eac:	f7ff fff0 	bl	8007e90 <HAL_RCC_GetHCLKFreq>
 8007eb0:	4602      	mov	r2, r0
 8007eb2:	4b05      	ldr	r3, [pc, #20]	; (8007ec8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007eb4:	689b      	ldr	r3, [r3, #8]
 8007eb6:	0a9b      	lsrs	r3, r3, #10
 8007eb8:	f003 0307 	and.w	r3, r3, #7
 8007ebc:	4903      	ldr	r1, [pc, #12]	; (8007ecc <HAL_RCC_GetPCLK1Freq+0x24>)
 8007ebe:	5ccb      	ldrb	r3, [r1, r3]
 8007ec0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007ec4:	4618      	mov	r0, r3
 8007ec6:	bd80      	pop	{r7, pc}
 8007ec8:	40023800 	.word	0x40023800
 8007ecc:	0800d12c 	.word	0x0800d12c

08007ed0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007ed0:	b580      	push	{r7, lr}
 8007ed2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8007ed4:	f7ff ffdc 	bl	8007e90 <HAL_RCC_GetHCLKFreq>
 8007ed8:	4602      	mov	r2, r0
 8007eda:	4b05      	ldr	r3, [pc, #20]	; (8007ef0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8007edc:	689b      	ldr	r3, [r3, #8]
 8007ede:	0b5b      	lsrs	r3, r3, #13
 8007ee0:	f003 0307 	and.w	r3, r3, #7
 8007ee4:	4903      	ldr	r1, [pc, #12]	; (8007ef4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007ee6:	5ccb      	ldrb	r3, [r1, r3]
 8007ee8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007eec:	4618      	mov	r0, r3
 8007eee:	bd80      	pop	{r7, pc}
 8007ef0:	40023800 	.word	0x40023800
 8007ef4:	0800d12c 	.word	0x0800d12c

08007ef8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007ef8:	b580      	push	{r7, lr}
 8007efa:	b082      	sub	sp, #8
 8007efc:	af00      	add	r7, sp, #0
 8007efe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d101      	bne.n	8007f0a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007f06:	2301      	movs	r3, #1
 8007f08:	e041      	b.n	8007f8e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007f10:	b2db      	uxtb	r3, r3
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d106      	bne.n	8007f24 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	2200      	movs	r2, #0
 8007f1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007f1e:	6878      	ldr	r0, [r7, #4]
 8007f20:	f7fa fc3e 	bl	80027a0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	2202      	movs	r2, #2
 8007f28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	681a      	ldr	r2, [r3, #0]
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	3304      	adds	r3, #4
 8007f34:	4619      	mov	r1, r3
 8007f36:	4610      	mov	r0, r2
 8007f38:	f000 fafe 	bl	8008538 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	2201      	movs	r2, #1
 8007f40:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	2201      	movs	r2, #1
 8007f48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	2201      	movs	r2, #1
 8007f50:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	2201      	movs	r2, #1
 8007f58:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	2201      	movs	r2, #1
 8007f60:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	2201      	movs	r2, #1
 8007f68:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	2201      	movs	r2, #1
 8007f70:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	2201      	movs	r2, #1
 8007f78:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	2201      	movs	r2, #1
 8007f80:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	2201      	movs	r2, #1
 8007f88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007f8c:	2300      	movs	r3, #0
}
 8007f8e:	4618      	mov	r0, r3
 8007f90:	3708      	adds	r7, #8
 8007f92:	46bd      	mov	sp, r7
 8007f94:	bd80      	pop	{r7, pc}
	...

08007f98 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8007f98:	b480      	push	{r7}
 8007f9a:	b085      	sub	sp, #20
 8007f9c:	af00      	add	r7, sp, #0
 8007f9e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007fa6:	b2db      	uxtb	r3, r3
 8007fa8:	2b01      	cmp	r3, #1
 8007faa:	d001      	beq.n	8007fb0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8007fac:	2301      	movs	r3, #1
 8007fae:	e046      	b.n	800803e <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	2202      	movs	r2, #2
 8007fb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	4a23      	ldr	r2, [pc, #140]	; (800804c <HAL_TIM_Base_Start+0xb4>)
 8007fbe:	4293      	cmp	r3, r2
 8007fc0:	d022      	beq.n	8008008 <HAL_TIM_Base_Start+0x70>
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007fca:	d01d      	beq.n	8008008 <HAL_TIM_Base_Start+0x70>
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	4a1f      	ldr	r2, [pc, #124]	; (8008050 <HAL_TIM_Base_Start+0xb8>)
 8007fd2:	4293      	cmp	r3, r2
 8007fd4:	d018      	beq.n	8008008 <HAL_TIM_Base_Start+0x70>
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	4a1e      	ldr	r2, [pc, #120]	; (8008054 <HAL_TIM_Base_Start+0xbc>)
 8007fdc:	4293      	cmp	r3, r2
 8007fde:	d013      	beq.n	8008008 <HAL_TIM_Base_Start+0x70>
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	4a1c      	ldr	r2, [pc, #112]	; (8008058 <HAL_TIM_Base_Start+0xc0>)
 8007fe6:	4293      	cmp	r3, r2
 8007fe8:	d00e      	beq.n	8008008 <HAL_TIM_Base_Start+0x70>
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	4a1b      	ldr	r2, [pc, #108]	; (800805c <HAL_TIM_Base_Start+0xc4>)
 8007ff0:	4293      	cmp	r3, r2
 8007ff2:	d009      	beq.n	8008008 <HAL_TIM_Base_Start+0x70>
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	4a19      	ldr	r2, [pc, #100]	; (8008060 <HAL_TIM_Base_Start+0xc8>)
 8007ffa:	4293      	cmp	r3, r2
 8007ffc:	d004      	beq.n	8008008 <HAL_TIM_Base_Start+0x70>
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	4a18      	ldr	r2, [pc, #96]	; (8008064 <HAL_TIM_Base_Start+0xcc>)
 8008004:	4293      	cmp	r3, r2
 8008006:	d111      	bne.n	800802c <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	689b      	ldr	r3, [r3, #8]
 800800e:	f003 0307 	and.w	r3, r3, #7
 8008012:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	2b06      	cmp	r3, #6
 8008018:	d010      	beq.n	800803c <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	681a      	ldr	r2, [r3, #0]
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	f042 0201 	orr.w	r2, r2, #1
 8008028:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800802a:	e007      	b.n	800803c <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	681a      	ldr	r2, [r3, #0]
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	f042 0201 	orr.w	r2, r2, #1
 800803a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800803c:	2300      	movs	r3, #0
}
 800803e:	4618      	mov	r0, r3
 8008040:	3714      	adds	r7, #20
 8008042:	46bd      	mov	sp, r7
 8008044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008048:	4770      	bx	lr
 800804a:	bf00      	nop
 800804c:	40010000 	.word	0x40010000
 8008050:	40000400 	.word	0x40000400
 8008054:	40000800 	.word	0x40000800
 8008058:	40000c00 	.word	0x40000c00
 800805c:	40010400 	.word	0x40010400
 8008060:	40014000 	.word	0x40014000
 8008064:	40001800 	.word	0x40001800

08008068 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008068:	b480      	push	{r7}
 800806a:	b085      	sub	sp, #20
 800806c:	af00      	add	r7, sp, #0
 800806e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008076:	b2db      	uxtb	r3, r3
 8008078:	2b01      	cmp	r3, #1
 800807a:	d001      	beq.n	8008080 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800807c:	2301      	movs	r3, #1
 800807e:	e04e      	b.n	800811e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	2202      	movs	r2, #2
 8008084:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	68da      	ldr	r2, [r3, #12]
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	f042 0201 	orr.w	r2, r2, #1
 8008096:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	4a23      	ldr	r2, [pc, #140]	; (800812c <HAL_TIM_Base_Start_IT+0xc4>)
 800809e:	4293      	cmp	r3, r2
 80080a0:	d022      	beq.n	80080e8 <HAL_TIM_Base_Start_IT+0x80>
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80080aa:	d01d      	beq.n	80080e8 <HAL_TIM_Base_Start_IT+0x80>
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	4a1f      	ldr	r2, [pc, #124]	; (8008130 <HAL_TIM_Base_Start_IT+0xc8>)
 80080b2:	4293      	cmp	r3, r2
 80080b4:	d018      	beq.n	80080e8 <HAL_TIM_Base_Start_IT+0x80>
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	4a1e      	ldr	r2, [pc, #120]	; (8008134 <HAL_TIM_Base_Start_IT+0xcc>)
 80080bc:	4293      	cmp	r3, r2
 80080be:	d013      	beq.n	80080e8 <HAL_TIM_Base_Start_IT+0x80>
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	4a1c      	ldr	r2, [pc, #112]	; (8008138 <HAL_TIM_Base_Start_IT+0xd0>)
 80080c6:	4293      	cmp	r3, r2
 80080c8:	d00e      	beq.n	80080e8 <HAL_TIM_Base_Start_IT+0x80>
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	4a1b      	ldr	r2, [pc, #108]	; (800813c <HAL_TIM_Base_Start_IT+0xd4>)
 80080d0:	4293      	cmp	r3, r2
 80080d2:	d009      	beq.n	80080e8 <HAL_TIM_Base_Start_IT+0x80>
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	4a19      	ldr	r2, [pc, #100]	; (8008140 <HAL_TIM_Base_Start_IT+0xd8>)
 80080da:	4293      	cmp	r3, r2
 80080dc:	d004      	beq.n	80080e8 <HAL_TIM_Base_Start_IT+0x80>
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	4a18      	ldr	r2, [pc, #96]	; (8008144 <HAL_TIM_Base_Start_IT+0xdc>)
 80080e4:	4293      	cmp	r3, r2
 80080e6:	d111      	bne.n	800810c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	689b      	ldr	r3, [r3, #8]
 80080ee:	f003 0307 	and.w	r3, r3, #7
 80080f2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	2b06      	cmp	r3, #6
 80080f8:	d010      	beq.n	800811c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	681a      	ldr	r2, [r3, #0]
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	f042 0201 	orr.w	r2, r2, #1
 8008108:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800810a:	e007      	b.n	800811c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	681a      	ldr	r2, [r3, #0]
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	f042 0201 	orr.w	r2, r2, #1
 800811a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800811c:	2300      	movs	r3, #0
}
 800811e:	4618      	mov	r0, r3
 8008120:	3714      	adds	r7, #20
 8008122:	46bd      	mov	sp, r7
 8008124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008128:	4770      	bx	lr
 800812a:	bf00      	nop
 800812c:	40010000 	.word	0x40010000
 8008130:	40000400 	.word	0x40000400
 8008134:	40000800 	.word	0x40000800
 8008138:	40000c00 	.word	0x40000c00
 800813c:	40010400 	.word	0x40010400
 8008140:	40014000 	.word	0x40014000
 8008144:	40001800 	.word	0x40001800

08008148 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008148:	b580      	push	{r7, lr}
 800814a:	b082      	sub	sp, #8
 800814c:	af00      	add	r7, sp, #0
 800814e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	691b      	ldr	r3, [r3, #16]
 8008156:	f003 0302 	and.w	r3, r3, #2
 800815a:	2b02      	cmp	r3, #2
 800815c:	d122      	bne.n	80081a4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	68db      	ldr	r3, [r3, #12]
 8008164:	f003 0302 	and.w	r3, r3, #2
 8008168:	2b02      	cmp	r3, #2
 800816a:	d11b      	bne.n	80081a4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	f06f 0202 	mvn.w	r2, #2
 8008174:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	2201      	movs	r2, #1
 800817a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	699b      	ldr	r3, [r3, #24]
 8008182:	f003 0303 	and.w	r3, r3, #3
 8008186:	2b00      	cmp	r3, #0
 8008188:	d003      	beq.n	8008192 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800818a:	6878      	ldr	r0, [r7, #4]
 800818c:	f000 f9b5 	bl	80084fa <HAL_TIM_IC_CaptureCallback>
 8008190:	e005      	b.n	800819e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008192:	6878      	ldr	r0, [r7, #4]
 8008194:	f000 f9a7 	bl	80084e6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008198:	6878      	ldr	r0, [r7, #4]
 800819a:	f000 f9b8 	bl	800850e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	2200      	movs	r2, #0
 80081a2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	691b      	ldr	r3, [r3, #16]
 80081aa:	f003 0304 	and.w	r3, r3, #4
 80081ae:	2b04      	cmp	r3, #4
 80081b0:	d122      	bne.n	80081f8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	68db      	ldr	r3, [r3, #12]
 80081b8:	f003 0304 	and.w	r3, r3, #4
 80081bc:	2b04      	cmp	r3, #4
 80081be:	d11b      	bne.n	80081f8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	f06f 0204 	mvn.w	r2, #4
 80081c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	2202      	movs	r2, #2
 80081ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	699b      	ldr	r3, [r3, #24]
 80081d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d003      	beq.n	80081e6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80081de:	6878      	ldr	r0, [r7, #4]
 80081e0:	f000 f98b 	bl	80084fa <HAL_TIM_IC_CaptureCallback>
 80081e4:	e005      	b.n	80081f2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80081e6:	6878      	ldr	r0, [r7, #4]
 80081e8:	f000 f97d 	bl	80084e6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80081ec:	6878      	ldr	r0, [r7, #4]
 80081ee:	f000 f98e 	bl	800850e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	2200      	movs	r2, #0
 80081f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	691b      	ldr	r3, [r3, #16]
 80081fe:	f003 0308 	and.w	r3, r3, #8
 8008202:	2b08      	cmp	r3, #8
 8008204:	d122      	bne.n	800824c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	68db      	ldr	r3, [r3, #12]
 800820c:	f003 0308 	and.w	r3, r3, #8
 8008210:	2b08      	cmp	r3, #8
 8008212:	d11b      	bne.n	800824c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	f06f 0208 	mvn.w	r2, #8
 800821c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	2204      	movs	r2, #4
 8008222:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	69db      	ldr	r3, [r3, #28]
 800822a:	f003 0303 	and.w	r3, r3, #3
 800822e:	2b00      	cmp	r3, #0
 8008230:	d003      	beq.n	800823a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008232:	6878      	ldr	r0, [r7, #4]
 8008234:	f000 f961 	bl	80084fa <HAL_TIM_IC_CaptureCallback>
 8008238:	e005      	b.n	8008246 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800823a:	6878      	ldr	r0, [r7, #4]
 800823c:	f000 f953 	bl	80084e6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008240:	6878      	ldr	r0, [r7, #4]
 8008242:	f000 f964 	bl	800850e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	2200      	movs	r2, #0
 800824a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	691b      	ldr	r3, [r3, #16]
 8008252:	f003 0310 	and.w	r3, r3, #16
 8008256:	2b10      	cmp	r3, #16
 8008258:	d122      	bne.n	80082a0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	68db      	ldr	r3, [r3, #12]
 8008260:	f003 0310 	and.w	r3, r3, #16
 8008264:	2b10      	cmp	r3, #16
 8008266:	d11b      	bne.n	80082a0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	f06f 0210 	mvn.w	r2, #16
 8008270:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	2208      	movs	r2, #8
 8008276:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	69db      	ldr	r3, [r3, #28]
 800827e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008282:	2b00      	cmp	r3, #0
 8008284:	d003      	beq.n	800828e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008286:	6878      	ldr	r0, [r7, #4]
 8008288:	f000 f937 	bl	80084fa <HAL_TIM_IC_CaptureCallback>
 800828c:	e005      	b.n	800829a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800828e:	6878      	ldr	r0, [r7, #4]
 8008290:	f000 f929 	bl	80084e6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008294:	6878      	ldr	r0, [r7, #4]
 8008296:	f000 f93a 	bl	800850e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	2200      	movs	r2, #0
 800829e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	691b      	ldr	r3, [r3, #16]
 80082a6:	f003 0301 	and.w	r3, r3, #1
 80082aa:	2b01      	cmp	r3, #1
 80082ac:	d10e      	bne.n	80082cc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	68db      	ldr	r3, [r3, #12]
 80082b4:	f003 0301 	and.w	r3, r3, #1
 80082b8:	2b01      	cmp	r3, #1
 80082ba:	d107      	bne.n	80082cc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	f06f 0201 	mvn.w	r2, #1
 80082c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80082c6:	6878      	ldr	r0, [r7, #4]
 80082c8:	f7f9 fb5c 	bl	8001984 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	691b      	ldr	r3, [r3, #16]
 80082d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80082d6:	2b80      	cmp	r3, #128	; 0x80
 80082d8:	d10e      	bne.n	80082f8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	68db      	ldr	r3, [r3, #12]
 80082e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80082e4:	2b80      	cmp	r3, #128	; 0x80
 80082e6:	d107      	bne.n	80082f8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80082f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80082f2:	6878      	ldr	r0, [r7, #4]
 80082f4:	f000 fae0 	bl	80088b8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	691b      	ldr	r3, [r3, #16]
 80082fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008302:	2b40      	cmp	r3, #64	; 0x40
 8008304:	d10e      	bne.n	8008324 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	68db      	ldr	r3, [r3, #12]
 800830c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008310:	2b40      	cmp	r3, #64	; 0x40
 8008312:	d107      	bne.n	8008324 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800831c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800831e:	6878      	ldr	r0, [r7, #4]
 8008320:	f000 f8ff 	bl	8008522 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	691b      	ldr	r3, [r3, #16]
 800832a:	f003 0320 	and.w	r3, r3, #32
 800832e:	2b20      	cmp	r3, #32
 8008330:	d10e      	bne.n	8008350 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	68db      	ldr	r3, [r3, #12]
 8008338:	f003 0320 	and.w	r3, r3, #32
 800833c:	2b20      	cmp	r3, #32
 800833e:	d107      	bne.n	8008350 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	f06f 0220 	mvn.w	r2, #32
 8008348:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800834a:	6878      	ldr	r0, [r7, #4]
 800834c:	f000 faaa 	bl	80088a4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008350:	bf00      	nop
 8008352:	3708      	adds	r7, #8
 8008354:	46bd      	mov	sp, r7
 8008356:	bd80      	pop	{r7, pc}

08008358 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008358:	b580      	push	{r7, lr}
 800835a:	b084      	sub	sp, #16
 800835c:	af00      	add	r7, sp, #0
 800835e:	6078      	str	r0, [r7, #4]
 8008360:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008362:	2300      	movs	r3, #0
 8008364:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800836c:	2b01      	cmp	r3, #1
 800836e:	d101      	bne.n	8008374 <HAL_TIM_ConfigClockSource+0x1c>
 8008370:	2302      	movs	r3, #2
 8008372:	e0b4      	b.n	80084de <HAL_TIM_ConfigClockSource+0x186>
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	2201      	movs	r2, #1
 8008378:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	2202      	movs	r2, #2
 8008380:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	689b      	ldr	r3, [r3, #8]
 800838a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800838c:	68bb      	ldr	r3, [r7, #8]
 800838e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8008392:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008394:	68bb      	ldr	r3, [r7, #8]
 8008396:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800839a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	68ba      	ldr	r2, [r7, #8]
 80083a2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80083a4:	683b      	ldr	r3, [r7, #0]
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80083ac:	d03e      	beq.n	800842c <HAL_TIM_ConfigClockSource+0xd4>
 80083ae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80083b2:	f200 8087 	bhi.w	80084c4 <HAL_TIM_ConfigClockSource+0x16c>
 80083b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80083ba:	f000 8086 	beq.w	80084ca <HAL_TIM_ConfigClockSource+0x172>
 80083be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80083c2:	d87f      	bhi.n	80084c4 <HAL_TIM_ConfigClockSource+0x16c>
 80083c4:	2b70      	cmp	r3, #112	; 0x70
 80083c6:	d01a      	beq.n	80083fe <HAL_TIM_ConfigClockSource+0xa6>
 80083c8:	2b70      	cmp	r3, #112	; 0x70
 80083ca:	d87b      	bhi.n	80084c4 <HAL_TIM_ConfigClockSource+0x16c>
 80083cc:	2b60      	cmp	r3, #96	; 0x60
 80083ce:	d050      	beq.n	8008472 <HAL_TIM_ConfigClockSource+0x11a>
 80083d0:	2b60      	cmp	r3, #96	; 0x60
 80083d2:	d877      	bhi.n	80084c4 <HAL_TIM_ConfigClockSource+0x16c>
 80083d4:	2b50      	cmp	r3, #80	; 0x50
 80083d6:	d03c      	beq.n	8008452 <HAL_TIM_ConfigClockSource+0xfa>
 80083d8:	2b50      	cmp	r3, #80	; 0x50
 80083da:	d873      	bhi.n	80084c4 <HAL_TIM_ConfigClockSource+0x16c>
 80083dc:	2b40      	cmp	r3, #64	; 0x40
 80083de:	d058      	beq.n	8008492 <HAL_TIM_ConfigClockSource+0x13a>
 80083e0:	2b40      	cmp	r3, #64	; 0x40
 80083e2:	d86f      	bhi.n	80084c4 <HAL_TIM_ConfigClockSource+0x16c>
 80083e4:	2b30      	cmp	r3, #48	; 0x30
 80083e6:	d064      	beq.n	80084b2 <HAL_TIM_ConfigClockSource+0x15a>
 80083e8:	2b30      	cmp	r3, #48	; 0x30
 80083ea:	d86b      	bhi.n	80084c4 <HAL_TIM_ConfigClockSource+0x16c>
 80083ec:	2b20      	cmp	r3, #32
 80083ee:	d060      	beq.n	80084b2 <HAL_TIM_ConfigClockSource+0x15a>
 80083f0:	2b20      	cmp	r3, #32
 80083f2:	d867      	bhi.n	80084c4 <HAL_TIM_ConfigClockSource+0x16c>
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	d05c      	beq.n	80084b2 <HAL_TIM_ConfigClockSource+0x15a>
 80083f8:	2b10      	cmp	r3, #16
 80083fa:	d05a      	beq.n	80084b2 <HAL_TIM_ConfigClockSource+0x15a>
 80083fc:	e062      	b.n	80084c4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	6818      	ldr	r0, [r3, #0]
 8008402:	683b      	ldr	r3, [r7, #0]
 8008404:	6899      	ldr	r1, [r3, #8]
 8008406:	683b      	ldr	r3, [r7, #0]
 8008408:	685a      	ldr	r2, [r3, #4]
 800840a:	683b      	ldr	r3, [r7, #0]
 800840c:	68db      	ldr	r3, [r3, #12]
 800840e:	f000 f9ad 	bl	800876c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	689b      	ldr	r3, [r3, #8]
 8008418:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800841a:	68bb      	ldr	r3, [r7, #8]
 800841c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8008420:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	68ba      	ldr	r2, [r7, #8]
 8008428:	609a      	str	r2, [r3, #8]
      break;
 800842a:	e04f      	b.n	80084cc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	6818      	ldr	r0, [r3, #0]
 8008430:	683b      	ldr	r3, [r7, #0]
 8008432:	6899      	ldr	r1, [r3, #8]
 8008434:	683b      	ldr	r3, [r7, #0]
 8008436:	685a      	ldr	r2, [r3, #4]
 8008438:	683b      	ldr	r3, [r7, #0]
 800843a:	68db      	ldr	r3, [r3, #12]
 800843c:	f000 f996 	bl	800876c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	689a      	ldr	r2, [r3, #8]
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800844e:	609a      	str	r2, [r3, #8]
      break;
 8008450:	e03c      	b.n	80084cc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	6818      	ldr	r0, [r3, #0]
 8008456:	683b      	ldr	r3, [r7, #0]
 8008458:	6859      	ldr	r1, [r3, #4]
 800845a:	683b      	ldr	r3, [r7, #0]
 800845c:	68db      	ldr	r3, [r3, #12]
 800845e:	461a      	mov	r2, r3
 8008460:	f000 f90a 	bl	8008678 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	2150      	movs	r1, #80	; 0x50
 800846a:	4618      	mov	r0, r3
 800846c:	f000 f963 	bl	8008736 <TIM_ITRx_SetConfig>
      break;
 8008470:	e02c      	b.n	80084cc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	6818      	ldr	r0, [r3, #0]
 8008476:	683b      	ldr	r3, [r7, #0]
 8008478:	6859      	ldr	r1, [r3, #4]
 800847a:	683b      	ldr	r3, [r7, #0]
 800847c:	68db      	ldr	r3, [r3, #12]
 800847e:	461a      	mov	r2, r3
 8008480:	f000 f929 	bl	80086d6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	2160      	movs	r1, #96	; 0x60
 800848a:	4618      	mov	r0, r3
 800848c:	f000 f953 	bl	8008736 <TIM_ITRx_SetConfig>
      break;
 8008490:	e01c      	b.n	80084cc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	6818      	ldr	r0, [r3, #0]
 8008496:	683b      	ldr	r3, [r7, #0]
 8008498:	6859      	ldr	r1, [r3, #4]
 800849a:	683b      	ldr	r3, [r7, #0]
 800849c:	68db      	ldr	r3, [r3, #12]
 800849e:	461a      	mov	r2, r3
 80084a0:	f000 f8ea 	bl	8008678 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	2140      	movs	r1, #64	; 0x40
 80084aa:	4618      	mov	r0, r3
 80084ac:	f000 f943 	bl	8008736 <TIM_ITRx_SetConfig>
      break;
 80084b0:	e00c      	b.n	80084cc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	681a      	ldr	r2, [r3, #0]
 80084b6:	683b      	ldr	r3, [r7, #0]
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	4619      	mov	r1, r3
 80084bc:	4610      	mov	r0, r2
 80084be:	f000 f93a 	bl	8008736 <TIM_ITRx_SetConfig>
      break;
 80084c2:	e003      	b.n	80084cc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80084c4:	2301      	movs	r3, #1
 80084c6:	73fb      	strb	r3, [r7, #15]
      break;
 80084c8:	e000      	b.n	80084cc <HAL_TIM_ConfigClockSource+0x174>
      break;
 80084ca:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	2201      	movs	r2, #1
 80084d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	2200      	movs	r2, #0
 80084d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80084dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80084de:	4618      	mov	r0, r3
 80084e0:	3710      	adds	r7, #16
 80084e2:	46bd      	mov	sp, r7
 80084e4:	bd80      	pop	{r7, pc}

080084e6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80084e6:	b480      	push	{r7}
 80084e8:	b083      	sub	sp, #12
 80084ea:	af00      	add	r7, sp, #0
 80084ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80084ee:	bf00      	nop
 80084f0:	370c      	adds	r7, #12
 80084f2:	46bd      	mov	sp, r7
 80084f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084f8:	4770      	bx	lr

080084fa <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80084fa:	b480      	push	{r7}
 80084fc:	b083      	sub	sp, #12
 80084fe:	af00      	add	r7, sp, #0
 8008500:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008502:	bf00      	nop
 8008504:	370c      	adds	r7, #12
 8008506:	46bd      	mov	sp, r7
 8008508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800850c:	4770      	bx	lr

0800850e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800850e:	b480      	push	{r7}
 8008510:	b083      	sub	sp, #12
 8008512:	af00      	add	r7, sp, #0
 8008514:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008516:	bf00      	nop
 8008518:	370c      	adds	r7, #12
 800851a:	46bd      	mov	sp, r7
 800851c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008520:	4770      	bx	lr

08008522 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008522:	b480      	push	{r7}
 8008524:	b083      	sub	sp, #12
 8008526:	af00      	add	r7, sp, #0
 8008528:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800852a:	bf00      	nop
 800852c:	370c      	adds	r7, #12
 800852e:	46bd      	mov	sp, r7
 8008530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008534:	4770      	bx	lr
	...

08008538 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008538:	b480      	push	{r7}
 800853a:	b085      	sub	sp, #20
 800853c:	af00      	add	r7, sp, #0
 800853e:	6078      	str	r0, [r7, #4]
 8008540:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	4a40      	ldr	r2, [pc, #256]	; (800864c <TIM_Base_SetConfig+0x114>)
 800854c:	4293      	cmp	r3, r2
 800854e:	d013      	beq.n	8008578 <TIM_Base_SetConfig+0x40>
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008556:	d00f      	beq.n	8008578 <TIM_Base_SetConfig+0x40>
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	4a3d      	ldr	r2, [pc, #244]	; (8008650 <TIM_Base_SetConfig+0x118>)
 800855c:	4293      	cmp	r3, r2
 800855e:	d00b      	beq.n	8008578 <TIM_Base_SetConfig+0x40>
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	4a3c      	ldr	r2, [pc, #240]	; (8008654 <TIM_Base_SetConfig+0x11c>)
 8008564:	4293      	cmp	r3, r2
 8008566:	d007      	beq.n	8008578 <TIM_Base_SetConfig+0x40>
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	4a3b      	ldr	r2, [pc, #236]	; (8008658 <TIM_Base_SetConfig+0x120>)
 800856c:	4293      	cmp	r3, r2
 800856e:	d003      	beq.n	8008578 <TIM_Base_SetConfig+0x40>
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	4a3a      	ldr	r2, [pc, #232]	; (800865c <TIM_Base_SetConfig+0x124>)
 8008574:	4293      	cmp	r3, r2
 8008576:	d108      	bne.n	800858a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008578:	68fb      	ldr	r3, [r7, #12]
 800857a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800857e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008580:	683b      	ldr	r3, [r7, #0]
 8008582:	685b      	ldr	r3, [r3, #4]
 8008584:	68fa      	ldr	r2, [r7, #12]
 8008586:	4313      	orrs	r3, r2
 8008588:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	4a2f      	ldr	r2, [pc, #188]	; (800864c <TIM_Base_SetConfig+0x114>)
 800858e:	4293      	cmp	r3, r2
 8008590:	d02b      	beq.n	80085ea <TIM_Base_SetConfig+0xb2>
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008598:	d027      	beq.n	80085ea <TIM_Base_SetConfig+0xb2>
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	4a2c      	ldr	r2, [pc, #176]	; (8008650 <TIM_Base_SetConfig+0x118>)
 800859e:	4293      	cmp	r3, r2
 80085a0:	d023      	beq.n	80085ea <TIM_Base_SetConfig+0xb2>
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	4a2b      	ldr	r2, [pc, #172]	; (8008654 <TIM_Base_SetConfig+0x11c>)
 80085a6:	4293      	cmp	r3, r2
 80085a8:	d01f      	beq.n	80085ea <TIM_Base_SetConfig+0xb2>
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	4a2a      	ldr	r2, [pc, #168]	; (8008658 <TIM_Base_SetConfig+0x120>)
 80085ae:	4293      	cmp	r3, r2
 80085b0:	d01b      	beq.n	80085ea <TIM_Base_SetConfig+0xb2>
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	4a29      	ldr	r2, [pc, #164]	; (800865c <TIM_Base_SetConfig+0x124>)
 80085b6:	4293      	cmp	r3, r2
 80085b8:	d017      	beq.n	80085ea <TIM_Base_SetConfig+0xb2>
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	4a28      	ldr	r2, [pc, #160]	; (8008660 <TIM_Base_SetConfig+0x128>)
 80085be:	4293      	cmp	r3, r2
 80085c0:	d013      	beq.n	80085ea <TIM_Base_SetConfig+0xb2>
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	4a27      	ldr	r2, [pc, #156]	; (8008664 <TIM_Base_SetConfig+0x12c>)
 80085c6:	4293      	cmp	r3, r2
 80085c8:	d00f      	beq.n	80085ea <TIM_Base_SetConfig+0xb2>
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	4a26      	ldr	r2, [pc, #152]	; (8008668 <TIM_Base_SetConfig+0x130>)
 80085ce:	4293      	cmp	r3, r2
 80085d0:	d00b      	beq.n	80085ea <TIM_Base_SetConfig+0xb2>
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	4a25      	ldr	r2, [pc, #148]	; (800866c <TIM_Base_SetConfig+0x134>)
 80085d6:	4293      	cmp	r3, r2
 80085d8:	d007      	beq.n	80085ea <TIM_Base_SetConfig+0xb2>
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	4a24      	ldr	r2, [pc, #144]	; (8008670 <TIM_Base_SetConfig+0x138>)
 80085de:	4293      	cmp	r3, r2
 80085e0:	d003      	beq.n	80085ea <TIM_Base_SetConfig+0xb2>
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	4a23      	ldr	r2, [pc, #140]	; (8008674 <TIM_Base_SetConfig+0x13c>)
 80085e6:	4293      	cmp	r3, r2
 80085e8:	d108      	bne.n	80085fc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80085ea:	68fb      	ldr	r3, [r7, #12]
 80085ec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80085f0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80085f2:	683b      	ldr	r3, [r7, #0]
 80085f4:	68db      	ldr	r3, [r3, #12]
 80085f6:	68fa      	ldr	r2, [r7, #12]
 80085f8:	4313      	orrs	r3, r2
 80085fa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008602:	683b      	ldr	r3, [r7, #0]
 8008604:	695b      	ldr	r3, [r3, #20]
 8008606:	4313      	orrs	r3, r2
 8008608:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	68fa      	ldr	r2, [r7, #12]
 800860e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008610:	683b      	ldr	r3, [r7, #0]
 8008612:	689a      	ldr	r2, [r3, #8]
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008618:	683b      	ldr	r3, [r7, #0]
 800861a:	681a      	ldr	r2, [r3, #0]
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	4a0a      	ldr	r2, [pc, #40]	; (800864c <TIM_Base_SetConfig+0x114>)
 8008624:	4293      	cmp	r3, r2
 8008626:	d003      	beq.n	8008630 <TIM_Base_SetConfig+0xf8>
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	4a0c      	ldr	r2, [pc, #48]	; (800865c <TIM_Base_SetConfig+0x124>)
 800862c:	4293      	cmp	r3, r2
 800862e:	d103      	bne.n	8008638 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008630:	683b      	ldr	r3, [r7, #0]
 8008632:	691a      	ldr	r2, [r3, #16]
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	2201      	movs	r2, #1
 800863c:	615a      	str	r2, [r3, #20]
}
 800863e:	bf00      	nop
 8008640:	3714      	adds	r7, #20
 8008642:	46bd      	mov	sp, r7
 8008644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008648:	4770      	bx	lr
 800864a:	bf00      	nop
 800864c:	40010000 	.word	0x40010000
 8008650:	40000400 	.word	0x40000400
 8008654:	40000800 	.word	0x40000800
 8008658:	40000c00 	.word	0x40000c00
 800865c:	40010400 	.word	0x40010400
 8008660:	40014000 	.word	0x40014000
 8008664:	40014400 	.word	0x40014400
 8008668:	40014800 	.word	0x40014800
 800866c:	40001800 	.word	0x40001800
 8008670:	40001c00 	.word	0x40001c00
 8008674:	40002000 	.word	0x40002000

08008678 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008678:	b480      	push	{r7}
 800867a:	b087      	sub	sp, #28
 800867c:	af00      	add	r7, sp, #0
 800867e:	60f8      	str	r0, [r7, #12]
 8008680:	60b9      	str	r1, [r7, #8]
 8008682:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008684:	68fb      	ldr	r3, [r7, #12]
 8008686:	6a1b      	ldr	r3, [r3, #32]
 8008688:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800868a:	68fb      	ldr	r3, [r7, #12]
 800868c:	6a1b      	ldr	r3, [r3, #32]
 800868e:	f023 0201 	bic.w	r2, r3, #1
 8008692:	68fb      	ldr	r3, [r7, #12]
 8008694:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	699b      	ldr	r3, [r3, #24]
 800869a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800869c:	693b      	ldr	r3, [r7, #16]
 800869e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80086a2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	011b      	lsls	r3, r3, #4
 80086a8:	693a      	ldr	r2, [r7, #16]
 80086aa:	4313      	orrs	r3, r2
 80086ac:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80086ae:	697b      	ldr	r3, [r7, #20]
 80086b0:	f023 030a 	bic.w	r3, r3, #10
 80086b4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80086b6:	697a      	ldr	r2, [r7, #20]
 80086b8:	68bb      	ldr	r3, [r7, #8]
 80086ba:	4313      	orrs	r3, r2
 80086bc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80086be:	68fb      	ldr	r3, [r7, #12]
 80086c0:	693a      	ldr	r2, [r7, #16]
 80086c2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80086c4:	68fb      	ldr	r3, [r7, #12]
 80086c6:	697a      	ldr	r2, [r7, #20]
 80086c8:	621a      	str	r2, [r3, #32]
}
 80086ca:	bf00      	nop
 80086cc:	371c      	adds	r7, #28
 80086ce:	46bd      	mov	sp, r7
 80086d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086d4:	4770      	bx	lr

080086d6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80086d6:	b480      	push	{r7}
 80086d8:	b087      	sub	sp, #28
 80086da:	af00      	add	r7, sp, #0
 80086dc:	60f8      	str	r0, [r7, #12]
 80086de:	60b9      	str	r1, [r7, #8]
 80086e0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80086e2:	68fb      	ldr	r3, [r7, #12]
 80086e4:	6a1b      	ldr	r3, [r3, #32]
 80086e6:	f023 0210 	bic.w	r2, r3, #16
 80086ea:	68fb      	ldr	r3, [r7, #12]
 80086ec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80086ee:	68fb      	ldr	r3, [r7, #12]
 80086f0:	699b      	ldr	r3, [r3, #24]
 80086f2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80086f4:	68fb      	ldr	r3, [r7, #12]
 80086f6:	6a1b      	ldr	r3, [r3, #32]
 80086f8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80086fa:	697b      	ldr	r3, [r7, #20]
 80086fc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008700:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	031b      	lsls	r3, r3, #12
 8008706:	697a      	ldr	r2, [r7, #20]
 8008708:	4313      	orrs	r3, r2
 800870a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800870c:	693b      	ldr	r3, [r7, #16]
 800870e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008712:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008714:	68bb      	ldr	r3, [r7, #8]
 8008716:	011b      	lsls	r3, r3, #4
 8008718:	693a      	ldr	r2, [r7, #16]
 800871a:	4313      	orrs	r3, r2
 800871c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800871e:	68fb      	ldr	r3, [r7, #12]
 8008720:	697a      	ldr	r2, [r7, #20]
 8008722:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008724:	68fb      	ldr	r3, [r7, #12]
 8008726:	693a      	ldr	r2, [r7, #16]
 8008728:	621a      	str	r2, [r3, #32]
}
 800872a:	bf00      	nop
 800872c:	371c      	adds	r7, #28
 800872e:	46bd      	mov	sp, r7
 8008730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008734:	4770      	bx	lr

08008736 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008736:	b480      	push	{r7}
 8008738:	b085      	sub	sp, #20
 800873a:	af00      	add	r7, sp, #0
 800873c:	6078      	str	r0, [r7, #4]
 800873e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	689b      	ldr	r3, [r3, #8]
 8008744:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008746:	68fb      	ldr	r3, [r7, #12]
 8008748:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800874c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800874e:	683a      	ldr	r2, [r7, #0]
 8008750:	68fb      	ldr	r3, [r7, #12]
 8008752:	4313      	orrs	r3, r2
 8008754:	f043 0307 	orr.w	r3, r3, #7
 8008758:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	68fa      	ldr	r2, [r7, #12]
 800875e:	609a      	str	r2, [r3, #8]
}
 8008760:	bf00      	nop
 8008762:	3714      	adds	r7, #20
 8008764:	46bd      	mov	sp, r7
 8008766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800876a:	4770      	bx	lr

0800876c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800876c:	b480      	push	{r7}
 800876e:	b087      	sub	sp, #28
 8008770:	af00      	add	r7, sp, #0
 8008772:	60f8      	str	r0, [r7, #12]
 8008774:	60b9      	str	r1, [r7, #8]
 8008776:	607a      	str	r2, [r7, #4]
 8008778:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800877a:	68fb      	ldr	r3, [r7, #12]
 800877c:	689b      	ldr	r3, [r3, #8]
 800877e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008780:	697b      	ldr	r3, [r7, #20]
 8008782:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008786:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008788:	683b      	ldr	r3, [r7, #0]
 800878a:	021a      	lsls	r2, r3, #8
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	431a      	orrs	r2, r3
 8008790:	68bb      	ldr	r3, [r7, #8]
 8008792:	4313      	orrs	r3, r2
 8008794:	697a      	ldr	r2, [r7, #20]
 8008796:	4313      	orrs	r3, r2
 8008798:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800879a:	68fb      	ldr	r3, [r7, #12]
 800879c:	697a      	ldr	r2, [r7, #20]
 800879e:	609a      	str	r2, [r3, #8]
}
 80087a0:	bf00      	nop
 80087a2:	371c      	adds	r7, #28
 80087a4:	46bd      	mov	sp, r7
 80087a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087aa:	4770      	bx	lr

080087ac <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80087ac:	b480      	push	{r7}
 80087ae:	b085      	sub	sp, #20
 80087b0:	af00      	add	r7, sp, #0
 80087b2:	6078      	str	r0, [r7, #4]
 80087b4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80087bc:	2b01      	cmp	r3, #1
 80087be:	d101      	bne.n	80087c4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80087c0:	2302      	movs	r3, #2
 80087c2:	e05a      	b.n	800887a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	2201      	movs	r2, #1
 80087c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	2202      	movs	r2, #2
 80087d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	685b      	ldr	r3, [r3, #4]
 80087da:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	689b      	ldr	r3, [r3, #8]
 80087e2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80087e4:	68fb      	ldr	r3, [r7, #12]
 80087e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80087ea:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80087ec:	683b      	ldr	r3, [r7, #0]
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	68fa      	ldr	r2, [r7, #12]
 80087f2:	4313      	orrs	r3, r2
 80087f4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	68fa      	ldr	r2, [r7, #12]
 80087fc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	4a21      	ldr	r2, [pc, #132]	; (8008888 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8008804:	4293      	cmp	r3, r2
 8008806:	d022      	beq.n	800884e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008810:	d01d      	beq.n	800884e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	4a1d      	ldr	r2, [pc, #116]	; (800888c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8008818:	4293      	cmp	r3, r2
 800881a:	d018      	beq.n	800884e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	4a1b      	ldr	r2, [pc, #108]	; (8008890 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8008822:	4293      	cmp	r3, r2
 8008824:	d013      	beq.n	800884e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	4a1a      	ldr	r2, [pc, #104]	; (8008894 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800882c:	4293      	cmp	r3, r2
 800882e:	d00e      	beq.n	800884e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	4a18      	ldr	r2, [pc, #96]	; (8008898 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8008836:	4293      	cmp	r3, r2
 8008838:	d009      	beq.n	800884e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	4a17      	ldr	r2, [pc, #92]	; (800889c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8008840:	4293      	cmp	r3, r2
 8008842:	d004      	beq.n	800884e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	4a15      	ldr	r2, [pc, #84]	; (80088a0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800884a:	4293      	cmp	r3, r2
 800884c:	d10c      	bne.n	8008868 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800884e:	68bb      	ldr	r3, [r7, #8]
 8008850:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008854:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008856:	683b      	ldr	r3, [r7, #0]
 8008858:	685b      	ldr	r3, [r3, #4]
 800885a:	68ba      	ldr	r2, [r7, #8]
 800885c:	4313      	orrs	r3, r2
 800885e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	68ba      	ldr	r2, [r7, #8]
 8008866:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	2201      	movs	r2, #1
 800886c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	2200      	movs	r2, #0
 8008874:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008878:	2300      	movs	r3, #0
}
 800887a:	4618      	mov	r0, r3
 800887c:	3714      	adds	r7, #20
 800887e:	46bd      	mov	sp, r7
 8008880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008884:	4770      	bx	lr
 8008886:	bf00      	nop
 8008888:	40010000 	.word	0x40010000
 800888c:	40000400 	.word	0x40000400
 8008890:	40000800 	.word	0x40000800
 8008894:	40000c00 	.word	0x40000c00
 8008898:	40010400 	.word	0x40010400
 800889c:	40014000 	.word	0x40014000
 80088a0:	40001800 	.word	0x40001800

080088a4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80088a4:	b480      	push	{r7}
 80088a6:	b083      	sub	sp, #12
 80088a8:	af00      	add	r7, sp, #0
 80088aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80088ac:	bf00      	nop
 80088ae:	370c      	adds	r7, #12
 80088b0:	46bd      	mov	sp, r7
 80088b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088b6:	4770      	bx	lr

080088b8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80088b8:	b480      	push	{r7}
 80088ba:	b083      	sub	sp, #12
 80088bc:	af00      	add	r7, sp, #0
 80088be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80088c0:	bf00      	nop
 80088c2:	370c      	adds	r7, #12
 80088c4:	46bd      	mov	sp, r7
 80088c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ca:	4770      	bx	lr

080088cc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80088cc:	b580      	push	{r7, lr}
 80088ce:	b082      	sub	sp, #8
 80088d0:	af00      	add	r7, sp, #0
 80088d2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	2b00      	cmp	r3, #0
 80088d8:	d101      	bne.n	80088de <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80088da:	2301      	movs	r3, #1
 80088dc:	e03f      	b.n	800895e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80088e4:	b2db      	uxtb	r3, r3
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	d106      	bne.n	80088f8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	2200      	movs	r2, #0
 80088ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80088f2:	6878      	ldr	r0, [r7, #4]
 80088f4:	f7f9 ffae 	bl	8002854 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	2224      	movs	r2, #36	; 0x24
 80088fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	68da      	ldr	r2, [r3, #12]
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800890e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008910:	6878      	ldr	r0, [r7, #4]
 8008912:	f000 f929 	bl	8008b68 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	691a      	ldr	r2, [r3, #16]
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008924:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	695a      	ldr	r2, [r3, #20]
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008934:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	68da      	ldr	r2, [r3, #12]
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008944:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	2200      	movs	r2, #0
 800894a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	2220      	movs	r2, #32
 8008950:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	2220      	movs	r2, #32
 8008958:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800895c:	2300      	movs	r3, #0
}
 800895e:	4618      	mov	r0, r3
 8008960:	3708      	adds	r7, #8
 8008962:	46bd      	mov	sp, r7
 8008964:	bd80      	pop	{r7, pc}

08008966 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008966:	b580      	push	{r7, lr}
 8008968:	b08a      	sub	sp, #40	; 0x28
 800896a:	af02      	add	r7, sp, #8
 800896c:	60f8      	str	r0, [r7, #12]
 800896e:	60b9      	str	r1, [r7, #8]
 8008970:	603b      	str	r3, [r7, #0]
 8008972:	4613      	mov	r3, r2
 8008974:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8008976:	2300      	movs	r3, #0
 8008978:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800897a:	68fb      	ldr	r3, [r7, #12]
 800897c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008980:	b2db      	uxtb	r3, r3
 8008982:	2b20      	cmp	r3, #32
 8008984:	d17c      	bne.n	8008a80 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8008986:	68bb      	ldr	r3, [r7, #8]
 8008988:	2b00      	cmp	r3, #0
 800898a:	d002      	beq.n	8008992 <HAL_UART_Transmit+0x2c>
 800898c:	88fb      	ldrh	r3, [r7, #6]
 800898e:	2b00      	cmp	r3, #0
 8008990:	d101      	bne.n	8008996 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8008992:	2301      	movs	r3, #1
 8008994:	e075      	b.n	8008a82 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008996:	68fb      	ldr	r3, [r7, #12]
 8008998:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800899c:	2b01      	cmp	r3, #1
 800899e:	d101      	bne.n	80089a4 <HAL_UART_Transmit+0x3e>
 80089a0:	2302      	movs	r3, #2
 80089a2:	e06e      	b.n	8008a82 <HAL_UART_Transmit+0x11c>
 80089a4:	68fb      	ldr	r3, [r7, #12]
 80089a6:	2201      	movs	r2, #1
 80089a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80089ac:	68fb      	ldr	r3, [r7, #12]
 80089ae:	2200      	movs	r2, #0
 80089b0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80089b2:	68fb      	ldr	r3, [r7, #12]
 80089b4:	2221      	movs	r2, #33	; 0x21
 80089b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80089ba:	f7fa f9cf 	bl	8002d5c <HAL_GetTick>
 80089be:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80089c0:	68fb      	ldr	r3, [r7, #12]
 80089c2:	88fa      	ldrh	r2, [r7, #6]
 80089c4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80089c6:	68fb      	ldr	r3, [r7, #12]
 80089c8:	88fa      	ldrh	r2, [r7, #6]
 80089ca:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80089cc:	68fb      	ldr	r3, [r7, #12]
 80089ce:	689b      	ldr	r3, [r3, #8]
 80089d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80089d4:	d108      	bne.n	80089e8 <HAL_UART_Transmit+0x82>
 80089d6:	68fb      	ldr	r3, [r7, #12]
 80089d8:	691b      	ldr	r3, [r3, #16]
 80089da:	2b00      	cmp	r3, #0
 80089dc:	d104      	bne.n	80089e8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80089de:	2300      	movs	r3, #0
 80089e0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80089e2:	68bb      	ldr	r3, [r7, #8]
 80089e4:	61bb      	str	r3, [r7, #24]
 80089e6:	e003      	b.n	80089f0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80089e8:	68bb      	ldr	r3, [r7, #8]
 80089ea:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80089ec:	2300      	movs	r3, #0
 80089ee:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80089f0:	68fb      	ldr	r3, [r7, #12]
 80089f2:	2200      	movs	r2, #0
 80089f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80089f8:	e02a      	b.n	8008a50 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80089fa:	683b      	ldr	r3, [r7, #0]
 80089fc:	9300      	str	r3, [sp, #0]
 80089fe:	697b      	ldr	r3, [r7, #20]
 8008a00:	2200      	movs	r2, #0
 8008a02:	2180      	movs	r1, #128	; 0x80
 8008a04:	68f8      	ldr	r0, [r7, #12]
 8008a06:	f000 f840 	bl	8008a8a <UART_WaitOnFlagUntilTimeout>
 8008a0a:	4603      	mov	r3, r0
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	d001      	beq.n	8008a14 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8008a10:	2303      	movs	r3, #3
 8008a12:	e036      	b.n	8008a82 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8008a14:	69fb      	ldr	r3, [r7, #28]
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	d10b      	bne.n	8008a32 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008a1a:	69bb      	ldr	r3, [r7, #24]
 8008a1c:	881b      	ldrh	r3, [r3, #0]
 8008a1e:	461a      	mov	r2, r3
 8008a20:	68fb      	ldr	r3, [r7, #12]
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008a28:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8008a2a:	69bb      	ldr	r3, [r7, #24]
 8008a2c:	3302      	adds	r3, #2
 8008a2e:	61bb      	str	r3, [r7, #24]
 8008a30:	e007      	b.n	8008a42 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8008a32:	69fb      	ldr	r3, [r7, #28]
 8008a34:	781a      	ldrb	r2, [r3, #0]
 8008a36:	68fb      	ldr	r3, [r7, #12]
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8008a3c:	69fb      	ldr	r3, [r7, #28]
 8008a3e:	3301      	adds	r3, #1
 8008a40:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008a42:	68fb      	ldr	r3, [r7, #12]
 8008a44:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008a46:	b29b      	uxth	r3, r3
 8008a48:	3b01      	subs	r3, #1
 8008a4a:	b29a      	uxth	r2, r3
 8008a4c:	68fb      	ldr	r3, [r7, #12]
 8008a4e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8008a50:	68fb      	ldr	r3, [r7, #12]
 8008a52:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008a54:	b29b      	uxth	r3, r3
 8008a56:	2b00      	cmp	r3, #0
 8008a58:	d1cf      	bne.n	80089fa <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008a5a:	683b      	ldr	r3, [r7, #0]
 8008a5c:	9300      	str	r3, [sp, #0]
 8008a5e:	697b      	ldr	r3, [r7, #20]
 8008a60:	2200      	movs	r2, #0
 8008a62:	2140      	movs	r1, #64	; 0x40
 8008a64:	68f8      	ldr	r0, [r7, #12]
 8008a66:	f000 f810 	bl	8008a8a <UART_WaitOnFlagUntilTimeout>
 8008a6a:	4603      	mov	r3, r0
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	d001      	beq.n	8008a74 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8008a70:	2303      	movs	r3, #3
 8008a72:	e006      	b.n	8008a82 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008a74:	68fb      	ldr	r3, [r7, #12]
 8008a76:	2220      	movs	r2, #32
 8008a78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8008a7c:	2300      	movs	r3, #0
 8008a7e:	e000      	b.n	8008a82 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8008a80:	2302      	movs	r3, #2
  }
}
 8008a82:	4618      	mov	r0, r3
 8008a84:	3720      	adds	r7, #32
 8008a86:	46bd      	mov	sp, r7
 8008a88:	bd80      	pop	{r7, pc}

08008a8a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8008a8a:	b580      	push	{r7, lr}
 8008a8c:	b090      	sub	sp, #64	; 0x40
 8008a8e:	af00      	add	r7, sp, #0
 8008a90:	60f8      	str	r0, [r7, #12]
 8008a92:	60b9      	str	r1, [r7, #8]
 8008a94:	603b      	str	r3, [r7, #0]
 8008a96:	4613      	mov	r3, r2
 8008a98:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008a9a:	e050      	b.n	8008b3e <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008a9c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008a9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008aa2:	d04c      	beq.n	8008b3e <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8008aa4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008aa6:	2b00      	cmp	r3, #0
 8008aa8:	d007      	beq.n	8008aba <UART_WaitOnFlagUntilTimeout+0x30>
 8008aaa:	f7fa f957 	bl	8002d5c <HAL_GetTick>
 8008aae:	4602      	mov	r2, r0
 8008ab0:	683b      	ldr	r3, [r7, #0]
 8008ab2:	1ad3      	subs	r3, r2, r3
 8008ab4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008ab6:	429a      	cmp	r2, r3
 8008ab8:	d241      	bcs.n	8008b3e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008aba:	68fb      	ldr	r3, [r7, #12]
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	330c      	adds	r3, #12
 8008ac0:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ac2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ac4:	e853 3f00 	ldrex	r3, [r3]
 8008ac8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008aca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008acc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008ad0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008ad2:	68fb      	ldr	r3, [r7, #12]
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	330c      	adds	r3, #12
 8008ad8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008ada:	637a      	str	r2, [r7, #52]	; 0x34
 8008adc:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ade:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008ae0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008ae2:	e841 2300 	strex	r3, r2, [r1]
 8008ae6:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008ae8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008aea:	2b00      	cmp	r3, #0
 8008aec:	d1e5      	bne.n	8008aba <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008aee:	68fb      	ldr	r3, [r7, #12]
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	3314      	adds	r3, #20
 8008af4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008af6:	697b      	ldr	r3, [r7, #20]
 8008af8:	e853 3f00 	ldrex	r3, [r3]
 8008afc:	613b      	str	r3, [r7, #16]
   return(result);
 8008afe:	693b      	ldr	r3, [r7, #16]
 8008b00:	f023 0301 	bic.w	r3, r3, #1
 8008b04:	63bb      	str	r3, [r7, #56]	; 0x38
 8008b06:	68fb      	ldr	r3, [r7, #12]
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	3314      	adds	r3, #20
 8008b0c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008b0e:	623a      	str	r2, [r7, #32]
 8008b10:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b12:	69f9      	ldr	r1, [r7, #28]
 8008b14:	6a3a      	ldr	r2, [r7, #32]
 8008b16:	e841 2300 	strex	r3, r2, [r1]
 8008b1a:	61bb      	str	r3, [r7, #24]
   return(result);
 8008b1c:	69bb      	ldr	r3, [r7, #24]
 8008b1e:	2b00      	cmp	r3, #0
 8008b20:	d1e5      	bne.n	8008aee <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8008b22:	68fb      	ldr	r3, [r7, #12]
 8008b24:	2220      	movs	r2, #32
 8008b26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8008b2a:	68fb      	ldr	r3, [r7, #12]
 8008b2c:	2220      	movs	r2, #32
 8008b2e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8008b32:	68fb      	ldr	r3, [r7, #12]
 8008b34:	2200      	movs	r2, #0
 8008b36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8008b3a:	2303      	movs	r3, #3
 8008b3c:	e00f      	b.n	8008b5e <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008b3e:	68fb      	ldr	r3, [r7, #12]
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	681a      	ldr	r2, [r3, #0]
 8008b44:	68bb      	ldr	r3, [r7, #8]
 8008b46:	4013      	ands	r3, r2
 8008b48:	68ba      	ldr	r2, [r7, #8]
 8008b4a:	429a      	cmp	r2, r3
 8008b4c:	bf0c      	ite	eq
 8008b4e:	2301      	moveq	r3, #1
 8008b50:	2300      	movne	r3, #0
 8008b52:	b2db      	uxtb	r3, r3
 8008b54:	461a      	mov	r2, r3
 8008b56:	79fb      	ldrb	r3, [r7, #7]
 8008b58:	429a      	cmp	r2, r3
 8008b5a:	d09f      	beq.n	8008a9c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008b5c:	2300      	movs	r3, #0
}
 8008b5e:	4618      	mov	r0, r3
 8008b60:	3740      	adds	r7, #64	; 0x40
 8008b62:	46bd      	mov	sp, r7
 8008b64:	bd80      	pop	{r7, pc}
	...

08008b68 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008b68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b6c:	b09f      	sub	sp, #124	; 0x7c
 8008b6e:	af00      	add	r7, sp, #0
 8008b70:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008b72:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	691b      	ldr	r3, [r3, #16]
 8008b78:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8008b7c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008b7e:	68d9      	ldr	r1, [r3, #12]
 8008b80:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008b82:	681a      	ldr	r2, [r3, #0]
 8008b84:	ea40 0301 	orr.w	r3, r0, r1
 8008b88:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008b8a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008b8c:	689a      	ldr	r2, [r3, #8]
 8008b8e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008b90:	691b      	ldr	r3, [r3, #16]
 8008b92:	431a      	orrs	r2, r3
 8008b94:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008b96:	695b      	ldr	r3, [r3, #20]
 8008b98:	431a      	orrs	r2, r3
 8008b9a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008b9c:	69db      	ldr	r3, [r3, #28]
 8008b9e:	4313      	orrs	r3, r2
 8008ba0:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8008ba2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008ba4:	681b      	ldr	r3, [r3, #0]
 8008ba6:	68db      	ldr	r3, [r3, #12]
 8008ba8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8008bac:	f021 010c 	bic.w	r1, r1, #12
 8008bb0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008bb2:	681a      	ldr	r2, [r3, #0]
 8008bb4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008bb6:	430b      	orrs	r3, r1
 8008bb8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008bba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008bbc:	681b      	ldr	r3, [r3, #0]
 8008bbe:	695b      	ldr	r3, [r3, #20]
 8008bc0:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8008bc4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008bc6:	6999      	ldr	r1, [r3, #24]
 8008bc8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008bca:	681a      	ldr	r2, [r3, #0]
 8008bcc:	ea40 0301 	orr.w	r3, r0, r1
 8008bd0:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008bd2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008bd4:	681a      	ldr	r2, [r3, #0]
 8008bd6:	4bc5      	ldr	r3, [pc, #788]	; (8008eec <UART_SetConfig+0x384>)
 8008bd8:	429a      	cmp	r2, r3
 8008bda:	d004      	beq.n	8008be6 <UART_SetConfig+0x7e>
 8008bdc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008bde:	681a      	ldr	r2, [r3, #0]
 8008be0:	4bc3      	ldr	r3, [pc, #780]	; (8008ef0 <UART_SetConfig+0x388>)
 8008be2:	429a      	cmp	r2, r3
 8008be4:	d103      	bne.n	8008bee <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008be6:	f7ff f973 	bl	8007ed0 <HAL_RCC_GetPCLK2Freq>
 8008bea:	6778      	str	r0, [r7, #116]	; 0x74
 8008bec:	e002      	b.n	8008bf4 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8008bee:	f7ff f95b 	bl	8007ea8 <HAL_RCC_GetPCLK1Freq>
 8008bf2:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008bf4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008bf6:	69db      	ldr	r3, [r3, #28]
 8008bf8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008bfc:	f040 80b6 	bne.w	8008d6c <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008c00:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008c02:	461c      	mov	r4, r3
 8008c04:	f04f 0500 	mov.w	r5, #0
 8008c08:	4622      	mov	r2, r4
 8008c0a:	462b      	mov	r3, r5
 8008c0c:	1891      	adds	r1, r2, r2
 8008c0e:	6439      	str	r1, [r7, #64]	; 0x40
 8008c10:	415b      	adcs	r3, r3
 8008c12:	647b      	str	r3, [r7, #68]	; 0x44
 8008c14:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8008c18:	1912      	adds	r2, r2, r4
 8008c1a:	eb45 0303 	adc.w	r3, r5, r3
 8008c1e:	f04f 0000 	mov.w	r0, #0
 8008c22:	f04f 0100 	mov.w	r1, #0
 8008c26:	00d9      	lsls	r1, r3, #3
 8008c28:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8008c2c:	00d0      	lsls	r0, r2, #3
 8008c2e:	4602      	mov	r2, r0
 8008c30:	460b      	mov	r3, r1
 8008c32:	1911      	adds	r1, r2, r4
 8008c34:	6639      	str	r1, [r7, #96]	; 0x60
 8008c36:	416b      	adcs	r3, r5
 8008c38:	667b      	str	r3, [r7, #100]	; 0x64
 8008c3a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008c3c:	685b      	ldr	r3, [r3, #4]
 8008c3e:	461a      	mov	r2, r3
 8008c40:	f04f 0300 	mov.w	r3, #0
 8008c44:	1891      	adds	r1, r2, r2
 8008c46:	63b9      	str	r1, [r7, #56]	; 0x38
 8008c48:	415b      	adcs	r3, r3
 8008c4a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008c4c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8008c50:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8008c54:	f7f7 fff8 	bl	8000c48 <__aeabi_uldivmod>
 8008c58:	4602      	mov	r2, r0
 8008c5a:	460b      	mov	r3, r1
 8008c5c:	4ba5      	ldr	r3, [pc, #660]	; (8008ef4 <UART_SetConfig+0x38c>)
 8008c5e:	fba3 2302 	umull	r2, r3, r3, r2
 8008c62:	095b      	lsrs	r3, r3, #5
 8008c64:	011e      	lsls	r6, r3, #4
 8008c66:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008c68:	461c      	mov	r4, r3
 8008c6a:	f04f 0500 	mov.w	r5, #0
 8008c6e:	4622      	mov	r2, r4
 8008c70:	462b      	mov	r3, r5
 8008c72:	1891      	adds	r1, r2, r2
 8008c74:	6339      	str	r1, [r7, #48]	; 0x30
 8008c76:	415b      	adcs	r3, r3
 8008c78:	637b      	str	r3, [r7, #52]	; 0x34
 8008c7a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8008c7e:	1912      	adds	r2, r2, r4
 8008c80:	eb45 0303 	adc.w	r3, r5, r3
 8008c84:	f04f 0000 	mov.w	r0, #0
 8008c88:	f04f 0100 	mov.w	r1, #0
 8008c8c:	00d9      	lsls	r1, r3, #3
 8008c8e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8008c92:	00d0      	lsls	r0, r2, #3
 8008c94:	4602      	mov	r2, r0
 8008c96:	460b      	mov	r3, r1
 8008c98:	1911      	adds	r1, r2, r4
 8008c9a:	65b9      	str	r1, [r7, #88]	; 0x58
 8008c9c:	416b      	adcs	r3, r5
 8008c9e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008ca0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008ca2:	685b      	ldr	r3, [r3, #4]
 8008ca4:	461a      	mov	r2, r3
 8008ca6:	f04f 0300 	mov.w	r3, #0
 8008caa:	1891      	adds	r1, r2, r2
 8008cac:	62b9      	str	r1, [r7, #40]	; 0x28
 8008cae:	415b      	adcs	r3, r3
 8008cb0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008cb2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008cb6:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8008cba:	f7f7 ffc5 	bl	8000c48 <__aeabi_uldivmod>
 8008cbe:	4602      	mov	r2, r0
 8008cc0:	460b      	mov	r3, r1
 8008cc2:	4b8c      	ldr	r3, [pc, #560]	; (8008ef4 <UART_SetConfig+0x38c>)
 8008cc4:	fba3 1302 	umull	r1, r3, r3, r2
 8008cc8:	095b      	lsrs	r3, r3, #5
 8008cca:	2164      	movs	r1, #100	; 0x64
 8008ccc:	fb01 f303 	mul.w	r3, r1, r3
 8008cd0:	1ad3      	subs	r3, r2, r3
 8008cd2:	00db      	lsls	r3, r3, #3
 8008cd4:	3332      	adds	r3, #50	; 0x32
 8008cd6:	4a87      	ldr	r2, [pc, #540]	; (8008ef4 <UART_SetConfig+0x38c>)
 8008cd8:	fba2 2303 	umull	r2, r3, r2, r3
 8008cdc:	095b      	lsrs	r3, r3, #5
 8008cde:	005b      	lsls	r3, r3, #1
 8008ce0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008ce4:	441e      	add	r6, r3
 8008ce6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008ce8:	4618      	mov	r0, r3
 8008cea:	f04f 0100 	mov.w	r1, #0
 8008cee:	4602      	mov	r2, r0
 8008cf0:	460b      	mov	r3, r1
 8008cf2:	1894      	adds	r4, r2, r2
 8008cf4:	623c      	str	r4, [r7, #32]
 8008cf6:	415b      	adcs	r3, r3
 8008cf8:	627b      	str	r3, [r7, #36]	; 0x24
 8008cfa:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008cfe:	1812      	adds	r2, r2, r0
 8008d00:	eb41 0303 	adc.w	r3, r1, r3
 8008d04:	f04f 0400 	mov.w	r4, #0
 8008d08:	f04f 0500 	mov.w	r5, #0
 8008d0c:	00dd      	lsls	r5, r3, #3
 8008d0e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8008d12:	00d4      	lsls	r4, r2, #3
 8008d14:	4622      	mov	r2, r4
 8008d16:	462b      	mov	r3, r5
 8008d18:	1814      	adds	r4, r2, r0
 8008d1a:	653c      	str	r4, [r7, #80]	; 0x50
 8008d1c:	414b      	adcs	r3, r1
 8008d1e:	657b      	str	r3, [r7, #84]	; 0x54
 8008d20:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008d22:	685b      	ldr	r3, [r3, #4]
 8008d24:	461a      	mov	r2, r3
 8008d26:	f04f 0300 	mov.w	r3, #0
 8008d2a:	1891      	adds	r1, r2, r2
 8008d2c:	61b9      	str	r1, [r7, #24]
 8008d2e:	415b      	adcs	r3, r3
 8008d30:	61fb      	str	r3, [r7, #28]
 8008d32:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008d36:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8008d3a:	f7f7 ff85 	bl	8000c48 <__aeabi_uldivmod>
 8008d3e:	4602      	mov	r2, r0
 8008d40:	460b      	mov	r3, r1
 8008d42:	4b6c      	ldr	r3, [pc, #432]	; (8008ef4 <UART_SetConfig+0x38c>)
 8008d44:	fba3 1302 	umull	r1, r3, r3, r2
 8008d48:	095b      	lsrs	r3, r3, #5
 8008d4a:	2164      	movs	r1, #100	; 0x64
 8008d4c:	fb01 f303 	mul.w	r3, r1, r3
 8008d50:	1ad3      	subs	r3, r2, r3
 8008d52:	00db      	lsls	r3, r3, #3
 8008d54:	3332      	adds	r3, #50	; 0x32
 8008d56:	4a67      	ldr	r2, [pc, #412]	; (8008ef4 <UART_SetConfig+0x38c>)
 8008d58:	fba2 2303 	umull	r2, r3, r2, r3
 8008d5c:	095b      	lsrs	r3, r3, #5
 8008d5e:	f003 0207 	and.w	r2, r3, #7
 8008d62:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	4432      	add	r2, r6
 8008d68:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8008d6a:	e0b9      	b.n	8008ee0 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008d6c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008d6e:	461c      	mov	r4, r3
 8008d70:	f04f 0500 	mov.w	r5, #0
 8008d74:	4622      	mov	r2, r4
 8008d76:	462b      	mov	r3, r5
 8008d78:	1891      	adds	r1, r2, r2
 8008d7a:	6139      	str	r1, [r7, #16]
 8008d7c:	415b      	adcs	r3, r3
 8008d7e:	617b      	str	r3, [r7, #20]
 8008d80:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8008d84:	1912      	adds	r2, r2, r4
 8008d86:	eb45 0303 	adc.w	r3, r5, r3
 8008d8a:	f04f 0000 	mov.w	r0, #0
 8008d8e:	f04f 0100 	mov.w	r1, #0
 8008d92:	00d9      	lsls	r1, r3, #3
 8008d94:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8008d98:	00d0      	lsls	r0, r2, #3
 8008d9a:	4602      	mov	r2, r0
 8008d9c:	460b      	mov	r3, r1
 8008d9e:	eb12 0804 	adds.w	r8, r2, r4
 8008da2:	eb43 0905 	adc.w	r9, r3, r5
 8008da6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008da8:	685b      	ldr	r3, [r3, #4]
 8008daa:	4618      	mov	r0, r3
 8008dac:	f04f 0100 	mov.w	r1, #0
 8008db0:	f04f 0200 	mov.w	r2, #0
 8008db4:	f04f 0300 	mov.w	r3, #0
 8008db8:	008b      	lsls	r3, r1, #2
 8008dba:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8008dbe:	0082      	lsls	r2, r0, #2
 8008dc0:	4640      	mov	r0, r8
 8008dc2:	4649      	mov	r1, r9
 8008dc4:	f7f7 ff40 	bl	8000c48 <__aeabi_uldivmod>
 8008dc8:	4602      	mov	r2, r0
 8008dca:	460b      	mov	r3, r1
 8008dcc:	4b49      	ldr	r3, [pc, #292]	; (8008ef4 <UART_SetConfig+0x38c>)
 8008dce:	fba3 2302 	umull	r2, r3, r3, r2
 8008dd2:	095b      	lsrs	r3, r3, #5
 8008dd4:	011e      	lsls	r6, r3, #4
 8008dd6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008dd8:	4618      	mov	r0, r3
 8008dda:	f04f 0100 	mov.w	r1, #0
 8008dde:	4602      	mov	r2, r0
 8008de0:	460b      	mov	r3, r1
 8008de2:	1894      	adds	r4, r2, r2
 8008de4:	60bc      	str	r4, [r7, #8]
 8008de6:	415b      	adcs	r3, r3
 8008de8:	60fb      	str	r3, [r7, #12]
 8008dea:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008dee:	1812      	adds	r2, r2, r0
 8008df0:	eb41 0303 	adc.w	r3, r1, r3
 8008df4:	f04f 0400 	mov.w	r4, #0
 8008df8:	f04f 0500 	mov.w	r5, #0
 8008dfc:	00dd      	lsls	r5, r3, #3
 8008dfe:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8008e02:	00d4      	lsls	r4, r2, #3
 8008e04:	4622      	mov	r2, r4
 8008e06:	462b      	mov	r3, r5
 8008e08:	1814      	adds	r4, r2, r0
 8008e0a:	64bc      	str	r4, [r7, #72]	; 0x48
 8008e0c:	414b      	adcs	r3, r1
 8008e0e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008e10:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008e12:	685b      	ldr	r3, [r3, #4]
 8008e14:	4618      	mov	r0, r3
 8008e16:	f04f 0100 	mov.w	r1, #0
 8008e1a:	f04f 0200 	mov.w	r2, #0
 8008e1e:	f04f 0300 	mov.w	r3, #0
 8008e22:	008b      	lsls	r3, r1, #2
 8008e24:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8008e28:	0082      	lsls	r2, r0, #2
 8008e2a:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8008e2e:	f7f7 ff0b 	bl	8000c48 <__aeabi_uldivmod>
 8008e32:	4602      	mov	r2, r0
 8008e34:	460b      	mov	r3, r1
 8008e36:	4b2f      	ldr	r3, [pc, #188]	; (8008ef4 <UART_SetConfig+0x38c>)
 8008e38:	fba3 1302 	umull	r1, r3, r3, r2
 8008e3c:	095b      	lsrs	r3, r3, #5
 8008e3e:	2164      	movs	r1, #100	; 0x64
 8008e40:	fb01 f303 	mul.w	r3, r1, r3
 8008e44:	1ad3      	subs	r3, r2, r3
 8008e46:	011b      	lsls	r3, r3, #4
 8008e48:	3332      	adds	r3, #50	; 0x32
 8008e4a:	4a2a      	ldr	r2, [pc, #168]	; (8008ef4 <UART_SetConfig+0x38c>)
 8008e4c:	fba2 2303 	umull	r2, r3, r2, r3
 8008e50:	095b      	lsrs	r3, r3, #5
 8008e52:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008e56:	441e      	add	r6, r3
 8008e58:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008e5a:	4618      	mov	r0, r3
 8008e5c:	f04f 0100 	mov.w	r1, #0
 8008e60:	4602      	mov	r2, r0
 8008e62:	460b      	mov	r3, r1
 8008e64:	1894      	adds	r4, r2, r2
 8008e66:	603c      	str	r4, [r7, #0]
 8008e68:	415b      	adcs	r3, r3
 8008e6a:	607b      	str	r3, [r7, #4]
 8008e6c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008e70:	1812      	adds	r2, r2, r0
 8008e72:	eb41 0303 	adc.w	r3, r1, r3
 8008e76:	f04f 0400 	mov.w	r4, #0
 8008e7a:	f04f 0500 	mov.w	r5, #0
 8008e7e:	00dd      	lsls	r5, r3, #3
 8008e80:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8008e84:	00d4      	lsls	r4, r2, #3
 8008e86:	4622      	mov	r2, r4
 8008e88:	462b      	mov	r3, r5
 8008e8a:	eb12 0a00 	adds.w	sl, r2, r0
 8008e8e:	eb43 0b01 	adc.w	fp, r3, r1
 8008e92:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008e94:	685b      	ldr	r3, [r3, #4]
 8008e96:	4618      	mov	r0, r3
 8008e98:	f04f 0100 	mov.w	r1, #0
 8008e9c:	f04f 0200 	mov.w	r2, #0
 8008ea0:	f04f 0300 	mov.w	r3, #0
 8008ea4:	008b      	lsls	r3, r1, #2
 8008ea6:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8008eaa:	0082      	lsls	r2, r0, #2
 8008eac:	4650      	mov	r0, sl
 8008eae:	4659      	mov	r1, fp
 8008eb0:	f7f7 feca 	bl	8000c48 <__aeabi_uldivmod>
 8008eb4:	4602      	mov	r2, r0
 8008eb6:	460b      	mov	r3, r1
 8008eb8:	4b0e      	ldr	r3, [pc, #56]	; (8008ef4 <UART_SetConfig+0x38c>)
 8008eba:	fba3 1302 	umull	r1, r3, r3, r2
 8008ebe:	095b      	lsrs	r3, r3, #5
 8008ec0:	2164      	movs	r1, #100	; 0x64
 8008ec2:	fb01 f303 	mul.w	r3, r1, r3
 8008ec6:	1ad3      	subs	r3, r2, r3
 8008ec8:	011b      	lsls	r3, r3, #4
 8008eca:	3332      	adds	r3, #50	; 0x32
 8008ecc:	4a09      	ldr	r2, [pc, #36]	; (8008ef4 <UART_SetConfig+0x38c>)
 8008ece:	fba2 2303 	umull	r2, r3, r2, r3
 8008ed2:	095b      	lsrs	r3, r3, #5
 8008ed4:	f003 020f 	and.w	r2, r3, #15
 8008ed8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008eda:	681b      	ldr	r3, [r3, #0]
 8008edc:	4432      	add	r2, r6
 8008ede:	609a      	str	r2, [r3, #8]
}
 8008ee0:	bf00      	nop
 8008ee2:	377c      	adds	r7, #124	; 0x7c
 8008ee4:	46bd      	mov	sp, r7
 8008ee6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008eea:	bf00      	nop
 8008eec:	40011000 	.word	0x40011000
 8008ef0:	40011400 	.word	0x40011400
 8008ef4:	51eb851f 	.word	0x51eb851f

08008ef8 <__errno>:
 8008ef8:	4b01      	ldr	r3, [pc, #4]	; (8008f00 <__errno+0x8>)
 8008efa:	6818      	ldr	r0, [r3, #0]
 8008efc:	4770      	bx	lr
 8008efe:	bf00      	nop
 8008f00:	20000024 	.word	0x20000024

08008f04 <__libc_init_array>:
 8008f04:	b570      	push	{r4, r5, r6, lr}
 8008f06:	4d0d      	ldr	r5, [pc, #52]	; (8008f3c <__libc_init_array+0x38>)
 8008f08:	4c0d      	ldr	r4, [pc, #52]	; (8008f40 <__libc_init_array+0x3c>)
 8008f0a:	1b64      	subs	r4, r4, r5
 8008f0c:	10a4      	asrs	r4, r4, #2
 8008f0e:	2600      	movs	r6, #0
 8008f10:	42a6      	cmp	r6, r4
 8008f12:	d109      	bne.n	8008f28 <__libc_init_array+0x24>
 8008f14:	4d0b      	ldr	r5, [pc, #44]	; (8008f44 <__libc_init_array+0x40>)
 8008f16:	4c0c      	ldr	r4, [pc, #48]	; (8008f48 <__libc_init_array+0x44>)
 8008f18:	f004 f804 	bl	800cf24 <_init>
 8008f1c:	1b64      	subs	r4, r4, r5
 8008f1e:	10a4      	asrs	r4, r4, #2
 8008f20:	2600      	movs	r6, #0
 8008f22:	42a6      	cmp	r6, r4
 8008f24:	d105      	bne.n	8008f32 <__libc_init_array+0x2e>
 8008f26:	bd70      	pop	{r4, r5, r6, pc}
 8008f28:	f855 3b04 	ldr.w	r3, [r5], #4
 8008f2c:	4798      	blx	r3
 8008f2e:	3601      	adds	r6, #1
 8008f30:	e7ee      	b.n	8008f10 <__libc_init_array+0xc>
 8008f32:	f855 3b04 	ldr.w	r3, [r5], #4
 8008f36:	4798      	blx	r3
 8008f38:	3601      	adds	r6, #1
 8008f3a:	e7f2      	b.n	8008f22 <__libc_init_array+0x1e>
 8008f3c:	0800d568 	.word	0x0800d568
 8008f40:	0800d568 	.word	0x0800d568
 8008f44:	0800d568 	.word	0x0800d568
 8008f48:	0800d56c 	.word	0x0800d56c

08008f4c <memset>:
 8008f4c:	4402      	add	r2, r0
 8008f4e:	4603      	mov	r3, r0
 8008f50:	4293      	cmp	r3, r2
 8008f52:	d100      	bne.n	8008f56 <memset+0xa>
 8008f54:	4770      	bx	lr
 8008f56:	f803 1b01 	strb.w	r1, [r3], #1
 8008f5a:	e7f9      	b.n	8008f50 <memset+0x4>

08008f5c <__cvt>:
 8008f5c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008f60:	ec55 4b10 	vmov	r4, r5, d0
 8008f64:	2d00      	cmp	r5, #0
 8008f66:	460e      	mov	r6, r1
 8008f68:	4619      	mov	r1, r3
 8008f6a:	462b      	mov	r3, r5
 8008f6c:	bfbb      	ittet	lt
 8008f6e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8008f72:	461d      	movlt	r5, r3
 8008f74:	2300      	movge	r3, #0
 8008f76:	232d      	movlt	r3, #45	; 0x2d
 8008f78:	700b      	strb	r3, [r1, #0]
 8008f7a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008f7c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8008f80:	4691      	mov	r9, r2
 8008f82:	f023 0820 	bic.w	r8, r3, #32
 8008f86:	bfbc      	itt	lt
 8008f88:	4622      	movlt	r2, r4
 8008f8a:	4614      	movlt	r4, r2
 8008f8c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008f90:	d005      	beq.n	8008f9e <__cvt+0x42>
 8008f92:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8008f96:	d100      	bne.n	8008f9a <__cvt+0x3e>
 8008f98:	3601      	adds	r6, #1
 8008f9a:	2102      	movs	r1, #2
 8008f9c:	e000      	b.n	8008fa0 <__cvt+0x44>
 8008f9e:	2103      	movs	r1, #3
 8008fa0:	ab03      	add	r3, sp, #12
 8008fa2:	9301      	str	r3, [sp, #4]
 8008fa4:	ab02      	add	r3, sp, #8
 8008fa6:	9300      	str	r3, [sp, #0]
 8008fa8:	ec45 4b10 	vmov	d0, r4, r5
 8008fac:	4653      	mov	r3, sl
 8008fae:	4632      	mov	r2, r6
 8008fb0:	f000 ff12 	bl	8009dd8 <_dtoa_r>
 8008fb4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8008fb8:	4607      	mov	r7, r0
 8008fba:	d102      	bne.n	8008fc2 <__cvt+0x66>
 8008fbc:	f019 0f01 	tst.w	r9, #1
 8008fc0:	d022      	beq.n	8009008 <__cvt+0xac>
 8008fc2:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008fc6:	eb07 0906 	add.w	r9, r7, r6
 8008fca:	d110      	bne.n	8008fee <__cvt+0x92>
 8008fcc:	783b      	ldrb	r3, [r7, #0]
 8008fce:	2b30      	cmp	r3, #48	; 0x30
 8008fd0:	d10a      	bne.n	8008fe8 <__cvt+0x8c>
 8008fd2:	2200      	movs	r2, #0
 8008fd4:	2300      	movs	r3, #0
 8008fd6:	4620      	mov	r0, r4
 8008fd8:	4629      	mov	r1, r5
 8008fda:	f7f7 fd75 	bl	8000ac8 <__aeabi_dcmpeq>
 8008fde:	b918      	cbnz	r0, 8008fe8 <__cvt+0x8c>
 8008fe0:	f1c6 0601 	rsb	r6, r6, #1
 8008fe4:	f8ca 6000 	str.w	r6, [sl]
 8008fe8:	f8da 3000 	ldr.w	r3, [sl]
 8008fec:	4499      	add	r9, r3
 8008fee:	2200      	movs	r2, #0
 8008ff0:	2300      	movs	r3, #0
 8008ff2:	4620      	mov	r0, r4
 8008ff4:	4629      	mov	r1, r5
 8008ff6:	f7f7 fd67 	bl	8000ac8 <__aeabi_dcmpeq>
 8008ffa:	b108      	cbz	r0, 8009000 <__cvt+0xa4>
 8008ffc:	f8cd 900c 	str.w	r9, [sp, #12]
 8009000:	2230      	movs	r2, #48	; 0x30
 8009002:	9b03      	ldr	r3, [sp, #12]
 8009004:	454b      	cmp	r3, r9
 8009006:	d307      	bcc.n	8009018 <__cvt+0xbc>
 8009008:	9b03      	ldr	r3, [sp, #12]
 800900a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800900c:	1bdb      	subs	r3, r3, r7
 800900e:	4638      	mov	r0, r7
 8009010:	6013      	str	r3, [r2, #0]
 8009012:	b004      	add	sp, #16
 8009014:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009018:	1c59      	adds	r1, r3, #1
 800901a:	9103      	str	r1, [sp, #12]
 800901c:	701a      	strb	r2, [r3, #0]
 800901e:	e7f0      	b.n	8009002 <__cvt+0xa6>

08009020 <__exponent>:
 8009020:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009022:	4603      	mov	r3, r0
 8009024:	2900      	cmp	r1, #0
 8009026:	bfb8      	it	lt
 8009028:	4249      	neglt	r1, r1
 800902a:	f803 2b02 	strb.w	r2, [r3], #2
 800902e:	bfb4      	ite	lt
 8009030:	222d      	movlt	r2, #45	; 0x2d
 8009032:	222b      	movge	r2, #43	; 0x2b
 8009034:	2909      	cmp	r1, #9
 8009036:	7042      	strb	r2, [r0, #1]
 8009038:	dd2a      	ble.n	8009090 <__exponent+0x70>
 800903a:	f10d 0407 	add.w	r4, sp, #7
 800903e:	46a4      	mov	ip, r4
 8009040:	270a      	movs	r7, #10
 8009042:	46a6      	mov	lr, r4
 8009044:	460a      	mov	r2, r1
 8009046:	fb91 f6f7 	sdiv	r6, r1, r7
 800904a:	fb07 1516 	mls	r5, r7, r6, r1
 800904e:	3530      	adds	r5, #48	; 0x30
 8009050:	2a63      	cmp	r2, #99	; 0x63
 8009052:	f104 34ff 	add.w	r4, r4, #4294967295
 8009056:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800905a:	4631      	mov	r1, r6
 800905c:	dcf1      	bgt.n	8009042 <__exponent+0x22>
 800905e:	3130      	adds	r1, #48	; 0x30
 8009060:	f1ae 0502 	sub.w	r5, lr, #2
 8009064:	f804 1c01 	strb.w	r1, [r4, #-1]
 8009068:	1c44      	adds	r4, r0, #1
 800906a:	4629      	mov	r1, r5
 800906c:	4561      	cmp	r1, ip
 800906e:	d30a      	bcc.n	8009086 <__exponent+0x66>
 8009070:	f10d 0209 	add.w	r2, sp, #9
 8009074:	eba2 020e 	sub.w	r2, r2, lr
 8009078:	4565      	cmp	r5, ip
 800907a:	bf88      	it	hi
 800907c:	2200      	movhi	r2, #0
 800907e:	4413      	add	r3, r2
 8009080:	1a18      	subs	r0, r3, r0
 8009082:	b003      	add	sp, #12
 8009084:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009086:	f811 2b01 	ldrb.w	r2, [r1], #1
 800908a:	f804 2f01 	strb.w	r2, [r4, #1]!
 800908e:	e7ed      	b.n	800906c <__exponent+0x4c>
 8009090:	2330      	movs	r3, #48	; 0x30
 8009092:	3130      	adds	r1, #48	; 0x30
 8009094:	7083      	strb	r3, [r0, #2]
 8009096:	70c1      	strb	r1, [r0, #3]
 8009098:	1d03      	adds	r3, r0, #4
 800909a:	e7f1      	b.n	8009080 <__exponent+0x60>

0800909c <_printf_float>:
 800909c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80090a0:	ed2d 8b02 	vpush	{d8}
 80090a4:	b08d      	sub	sp, #52	; 0x34
 80090a6:	460c      	mov	r4, r1
 80090a8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80090ac:	4616      	mov	r6, r2
 80090ae:	461f      	mov	r7, r3
 80090b0:	4605      	mov	r5, r0
 80090b2:	f001 fe35 	bl	800ad20 <_localeconv_r>
 80090b6:	f8d0 a000 	ldr.w	sl, [r0]
 80090ba:	4650      	mov	r0, sl
 80090bc:	f7f7 f888 	bl	80001d0 <strlen>
 80090c0:	2300      	movs	r3, #0
 80090c2:	930a      	str	r3, [sp, #40]	; 0x28
 80090c4:	6823      	ldr	r3, [r4, #0]
 80090c6:	9305      	str	r3, [sp, #20]
 80090c8:	f8d8 3000 	ldr.w	r3, [r8]
 80090cc:	f894 b018 	ldrb.w	fp, [r4, #24]
 80090d0:	3307      	adds	r3, #7
 80090d2:	f023 0307 	bic.w	r3, r3, #7
 80090d6:	f103 0208 	add.w	r2, r3, #8
 80090da:	f8c8 2000 	str.w	r2, [r8]
 80090de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090e2:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80090e6:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80090ea:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80090ee:	9307      	str	r3, [sp, #28]
 80090f0:	f8cd 8018 	str.w	r8, [sp, #24]
 80090f4:	ee08 0a10 	vmov	s16, r0
 80090f8:	4b9f      	ldr	r3, [pc, #636]	; (8009378 <_printf_float+0x2dc>)
 80090fa:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80090fe:	f04f 32ff 	mov.w	r2, #4294967295
 8009102:	f7f7 fd13 	bl	8000b2c <__aeabi_dcmpun>
 8009106:	bb88      	cbnz	r0, 800916c <_printf_float+0xd0>
 8009108:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800910c:	4b9a      	ldr	r3, [pc, #616]	; (8009378 <_printf_float+0x2dc>)
 800910e:	f04f 32ff 	mov.w	r2, #4294967295
 8009112:	f7f7 fced 	bl	8000af0 <__aeabi_dcmple>
 8009116:	bb48      	cbnz	r0, 800916c <_printf_float+0xd0>
 8009118:	2200      	movs	r2, #0
 800911a:	2300      	movs	r3, #0
 800911c:	4640      	mov	r0, r8
 800911e:	4649      	mov	r1, r9
 8009120:	f7f7 fcdc 	bl	8000adc <__aeabi_dcmplt>
 8009124:	b110      	cbz	r0, 800912c <_printf_float+0x90>
 8009126:	232d      	movs	r3, #45	; 0x2d
 8009128:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800912c:	4b93      	ldr	r3, [pc, #588]	; (800937c <_printf_float+0x2e0>)
 800912e:	4894      	ldr	r0, [pc, #592]	; (8009380 <_printf_float+0x2e4>)
 8009130:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8009134:	bf94      	ite	ls
 8009136:	4698      	movls	r8, r3
 8009138:	4680      	movhi	r8, r0
 800913a:	2303      	movs	r3, #3
 800913c:	6123      	str	r3, [r4, #16]
 800913e:	9b05      	ldr	r3, [sp, #20]
 8009140:	f023 0204 	bic.w	r2, r3, #4
 8009144:	6022      	str	r2, [r4, #0]
 8009146:	f04f 0900 	mov.w	r9, #0
 800914a:	9700      	str	r7, [sp, #0]
 800914c:	4633      	mov	r3, r6
 800914e:	aa0b      	add	r2, sp, #44	; 0x2c
 8009150:	4621      	mov	r1, r4
 8009152:	4628      	mov	r0, r5
 8009154:	f000 f9d8 	bl	8009508 <_printf_common>
 8009158:	3001      	adds	r0, #1
 800915a:	f040 8090 	bne.w	800927e <_printf_float+0x1e2>
 800915e:	f04f 30ff 	mov.w	r0, #4294967295
 8009162:	b00d      	add	sp, #52	; 0x34
 8009164:	ecbd 8b02 	vpop	{d8}
 8009168:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800916c:	4642      	mov	r2, r8
 800916e:	464b      	mov	r3, r9
 8009170:	4640      	mov	r0, r8
 8009172:	4649      	mov	r1, r9
 8009174:	f7f7 fcda 	bl	8000b2c <__aeabi_dcmpun>
 8009178:	b140      	cbz	r0, 800918c <_printf_float+0xf0>
 800917a:	464b      	mov	r3, r9
 800917c:	2b00      	cmp	r3, #0
 800917e:	bfbc      	itt	lt
 8009180:	232d      	movlt	r3, #45	; 0x2d
 8009182:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8009186:	487f      	ldr	r0, [pc, #508]	; (8009384 <_printf_float+0x2e8>)
 8009188:	4b7f      	ldr	r3, [pc, #508]	; (8009388 <_printf_float+0x2ec>)
 800918a:	e7d1      	b.n	8009130 <_printf_float+0x94>
 800918c:	6863      	ldr	r3, [r4, #4]
 800918e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8009192:	9206      	str	r2, [sp, #24]
 8009194:	1c5a      	adds	r2, r3, #1
 8009196:	d13f      	bne.n	8009218 <_printf_float+0x17c>
 8009198:	2306      	movs	r3, #6
 800919a:	6063      	str	r3, [r4, #4]
 800919c:	9b05      	ldr	r3, [sp, #20]
 800919e:	6861      	ldr	r1, [r4, #4]
 80091a0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80091a4:	2300      	movs	r3, #0
 80091a6:	9303      	str	r3, [sp, #12]
 80091a8:	ab0a      	add	r3, sp, #40	; 0x28
 80091aa:	e9cd b301 	strd	fp, r3, [sp, #4]
 80091ae:	ab09      	add	r3, sp, #36	; 0x24
 80091b0:	ec49 8b10 	vmov	d0, r8, r9
 80091b4:	9300      	str	r3, [sp, #0]
 80091b6:	6022      	str	r2, [r4, #0]
 80091b8:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80091bc:	4628      	mov	r0, r5
 80091be:	f7ff fecd 	bl	8008f5c <__cvt>
 80091c2:	9b06      	ldr	r3, [sp, #24]
 80091c4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80091c6:	2b47      	cmp	r3, #71	; 0x47
 80091c8:	4680      	mov	r8, r0
 80091ca:	d108      	bne.n	80091de <_printf_float+0x142>
 80091cc:	1cc8      	adds	r0, r1, #3
 80091ce:	db02      	blt.n	80091d6 <_printf_float+0x13a>
 80091d0:	6863      	ldr	r3, [r4, #4]
 80091d2:	4299      	cmp	r1, r3
 80091d4:	dd41      	ble.n	800925a <_printf_float+0x1be>
 80091d6:	f1ab 0b02 	sub.w	fp, fp, #2
 80091da:	fa5f fb8b 	uxtb.w	fp, fp
 80091de:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80091e2:	d820      	bhi.n	8009226 <_printf_float+0x18a>
 80091e4:	3901      	subs	r1, #1
 80091e6:	465a      	mov	r2, fp
 80091e8:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80091ec:	9109      	str	r1, [sp, #36]	; 0x24
 80091ee:	f7ff ff17 	bl	8009020 <__exponent>
 80091f2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80091f4:	1813      	adds	r3, r2, r0
 80091f6:	2a01      	cmp	r2, #1
 80091f8:	4681      	mov	r9, r0
 80091fa:	6123      	str	r3, [r4, #16]
 80091fc:	dc02      	bgt.n	8009204 <_printf_float+0x168>
 80091fe:	6822      	ldr	r2, [r4, #0]
 8009200:	07d2      	lsls	r2, r2, #31
 8009202:	d501      	bpl.n	8009208 <_printf_float+0x16c>
 8009204:	3301      	adds	r3, #1
 8009206:	6123      	str	r3, [r4, #16]
 8009208:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800920c:	2b00      	cmp	r3, #0
 800920e:	d09c      	beq.n	800914a <_printf_float+0xae>
 8009210:	232d      	movs	r3, #45	; 0x2d
 8009212:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009216:	e798      	b.n	800914a <_printf_float+0xae>
 8009218:	9a06      	ldr	r2, [sp, #24]
 800921a:	2a47      	cmp	r2, #71	; 0x47
 800921c:	d1be      	bne.n	800919c <_printf_float+0x100>
 800921e:	2b00      	cmp	r3, #0
 8009220:	d1bc      	bne.n	800919c <_printf_float+0x100>
 8009222:	2301      	movs	r3, #1
 8009224:	e7b9      	b.n	800919a <_printf_float+0xfe>
 8009226:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800922a:	d118      	bne.n	800925e <_printf_float+0x1c2>
 800922c:	2900      	cmp	r1, #0
 800922e:	6863      	ldr	r3, [r4, #4]
 8009230:	dd0b      	ble.n	800924a <_printf_float+0x1ae>
 8009232:	6121      	str	r1, [r4, #16]
 8009234:	b913      	cbnz	r3, 800923c <_printf_float+0x1a0>
 8009236:	6822      	ldr	r2, [r4, #0]
 8009238:	07d0      	lsls	r0, r2, #31
 800923a:	d502      	bpl.n	8009242 <_printf_float+0x1a6>
 800923c:	3301      	adds	r3, #1
 800923e:	440b      	add	r3, r1
 8009240:	6123      	str	r3, [r4, #16]
 8009242:	65a1      	str	r1, [r4, #88]	; 0x58
 8009244:	f04f 0900 	mov.w	r9, #0
 8009248:	e7de      	b.n	8009208 <_printf_float+0x16c>
 800924a:	b913      	cbnz	r3, 8009252 <_printf_float+0x1b6>
 800924c:	6822      	ldr	r2, [r4, #0]
 800924e:	07d2      	lsls	r2, r2, #31
 8009250:	d501      	bpl.n	8009256 <_printf_float+0x1ba>
 8009252:	3302      	adds	r3, #2
 8009254:	e7f4      	b.n	8009240 <_printf_float+0x1a4>
 8009256:	2301      	movs	r3, #1
 8009258:	e7f2      	b.n	8009240 <_printf_float+0x1a4>
 800925a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800925e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009260:	4299      	cmp	r1, r3
 8009262:	db05      	blt.n	8009270 <_printf_float+0x1d4>
 8009264:	6823      	ldr	r3, [r4, #0]
 8009266:	6121      	str	r1, [r4, #16]
 8009268:	07d8      	lsls	r0, r3, #31
 800926a:	d5ea      	bpl.n	8009242 <_printf_float+0x1a6>
 800926c:	1c4b      	adds	r3, r1, #1
 800926e:	e7e7      	b.n	8009240 <_printf_float+0x1a4>
 8009270:	2900      	cmp	r1, #0
 8009272:	bfd4      	ite	le
 8009274:	f1c1 0202 	rsble	r2, r1, #2
 8009278:	2201      	movgt	r2, #1
 800927a:	4413      	add	r3, r2
 800927c:	e7e0      	b.n	8009240 <_printf_float+0x1a4>
 800927e:	6823      	ldr	r3, [r4, #0]
 8009280:	055a      	lsls	r2, r3, #21
 8009282:	d407      	bmi.n	8009294 <_printf_float+0x1f8>
 8009284:	6923      	ldr	r3, [r4, #16]
 8009286:	4642      	mov	r2, r8
 8009288:	4631      	mov	r1, r6
 800928a:	4628      	mov	r0, r5
 800928c:	47b8      	blx	r7
 800928e:	3001      	adds	r0, #1
 8009290:	d12c      	bne.n	80092ec <_printf_float+0x250>
 8009292:	e764      	b.n	800915e <_printf_float+0xc2>
 8009294:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8009298:	f240 80e0 	bls.w	800945c <_printf_float+0x3c0>
 800929c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80092a0:	2200      	movs	r2, #0
 80092a2:	2300      	movs	r3, #0
 80092a4:	f7f7 fc10 	bl	8000ac8 <__aeabi_dcmpeq>
 80092a8:	2800      	cmp	r0, #0
 80092aa:	d034      	beq.n	8009316 <_printf_float+0x27a>
 80092ac:	4a37      	ldr	r2, [pc, #220]	; (800938c <_printf_float+0x2f0>)
 80092ae:	2301      	movs	r3, #1
 80092b0:	4631      	mov	r1, r6
 80092b2:	4628      	mov	r0, r5
 80092b4:	47b8      	blx	r7
 80092b6:	3001      	adds	r0, #1
 80092b8:	f43f af51 	beq.w	800915e <_printf_float+0xc2>
 80092bc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80092c0:	429a      	cmp	r2, r3
 80092c2:	db02      	blt.n	80092ca <_printf_float+0x22e>
 80092c4:	6823      	ldr	r3, [r4, #0]
 80092c6:	07d8      	lsls	r0, r3, #31
 80092c8:	d510      	bpl.n	80092ec <_printf_float+0x250>
 80092ca:	ee18 3a10 	vmov	r3, s16
 80092ce:	4652      	mov	r2, sl
 80092d0:	4631      	mov	r1, r6
 80092d2:	4628      	mov	r0, r5
 80092d4:	47b8      	blx	r7
 80092d6:	3001      	adds	r0, #1
 80092d8:	f43f af41 	beq.w	800915e <_printf_float+0xc2>
 80092dc:	f04f 0800 	mov.w	r8, #0
 80092e0:	f104 091a 	add.w	r9, r4, #26
 80092e4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80092e6:	3b01      	subs	r3, #1
 80092e8:	4543      	cmp	r3, r8
 80092ea:	dc09      	bgt.n	8009300 <_printf_float+0x264>
 80092ec:	6823      	ldr	r3, [r4, #0]
 80092ee:	079b      	lsls	r3, r3, #30
 80092f0:	f100 8105 	bmi.w	80094fe <_printf_float+0x462>
 80092f4:	68e0      	ldr	r0, [r4, #12]
 80092f6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80092f8:	4298      	cmp	r0, r3
 80092fa:	bfb8      	it	lt
 80092fc:	4618      	movlt	r0, r3
 80092fe:	e730      	b.n	8009162 <_printf_float+0xc6>
 8009300:	2301      	movs	r3, #1
 8009302:	464a      	mov	r2, r9
 8009304:	4631      	mov	r1, r6
 8009306:	4628      	mov	r0, r5
 8009308:	47b8      	blx	r7
 800930a:	3001      	adds	r0, #1
 800930c:	f43f af27 	beq.w	800915e <_printf_float+0xc2>
 8009310:	f108 0801 	add.w	r8, r8, #1
 8009314:	e7e6      	b.n	80092e4 <_printf_float+0x248>
 8009316:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009318:	2b00      	cmp	r3, #0
 800931a:	dc39      	bgt.n	8009390 <_printf_float+0x2f4>
 800931c:	4a1b      	ldr	r2, [pc, #108]	; (800938c <_printf_float+0x2f0>)
 800931e:	2301      	movs	r3, #1
 8009320:	4631      	mov	r1, r6
 8009322:	4628      	mov	r0, r5
 8009324:	47b8      	blx	r7
 8009326:	3001      	adds	r0, #1
 8009328:	f43f af19 	beq.w	800915e <_printf_float+0xc2>
 800932c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009330:	4313      	orrs	r3, r2
 8009332:	d102      	bne.n	800933a <_printf_float+0x29e>
 8009334:	6823      	ldr	r3, [r4, #0]
 8009336:	07d9      	lsls	r1, r3, #31
 8009338:	d5d8      	bpl.n	80092ec <_printf_float+0x250>
 800933a:	ee18 3a10 	vmov	r3, s16
 800933e:	4652      	mov	r2, sl
 8009340:	4631      	mov	r1, r6
 8009342:	4628      	mov	r0, r5
 8009344:	47b8      	blx	r7
 8009346:	3001      	adds	r0, #1
 8009348:	f43f af09 	beq.w	800915e <_printf_float+0xc2>
 800934c:	f04f 0900 	mov.w	r9, #0
 8009350:	f104 0a1a 	add.w	sl, r4, #26
 8009354:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009356:	425b      	negs	r3, r3
 8009358:	454b      	cmp	r3, r9
 800935a:	dc01      	bgt.n	8009360 <_printf_float+0x2c4>
 800935c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800935e:	e792      	b.n	8009286 <_printf_float+0x1ea>
 8009360:	2301      	movs	r3, #1
 8009362:	4652      	mov	r2, sl
 8009364:	4631      	mov	r1, r6
 8009366:	4628      	mov	r0, r5
 8009368:	47b8      	blx	r7
 800936a:	3001      	adds	r0, #1
 800936c:	f43f aef7 	beq.w	800915e <_printf_float+0xc2>
 8009370:	f109 0901 	add.w	r9, r9, #1
 8009374:	e7ee      	b.n	8009354 <_printf_float+0x2b8>
 8009376:	bf00      	nop
 8009378:	7fefffff 	.word	0x7fefffff
 800937c:	0800d140 	.word	0x0800d140
 8009380:	0800d144 	.word	0x0800d144
 8009384:	0800d14c 	.word	0x0800d14c
 8009388:	0800d148 	.word	0x0800d148
 800938c:	0800d150 	.word	0x0800d150
 8009390:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009392:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009394:	429a      	cmp	r2, r3
 8009396:	bfa8      	it	ge
 8009398:	461a      	movge	r2, r3
 800939a:	2a00      	cmp	r2, #0
 800939c:	4691      	mov	r9, r2
 800939e:	dc37      	bgt.n	8009410 <_printf_float+0x374>
 80093a0:	f04f 0b00 	mov.w	fp, #0
 80093a4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80093a8:	f104 021a 	add.w	r2, r4, #26
 80093ac:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80093ae:	9305      	str	r3, [sp, #20]
 80093b0:	eba3 0309 	sub.w	r3, r3, r9
 80093b4:	455b      	cmp	r3, fp
 80093b6:	dc33      	bgt.n	8009420 <_printf_float+0x384>
 80093b8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80093bc:	429a      	cmp	r2, r3
 80093be:	db3b      	blt.n	8009438 <_printf_float+0x39c>
 80093c0:	6823      	ldr	r3, [r4, #0]
 80093c2:	07da      	lsls	r2, r3, #31
 80093c4:	d438      	bmi.n	8009438 <_printf_float+0x39c>
 80093c6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80093c8:	9b05      	ldr	r3, [sp, #20]
 80093ca:	9909      	ldr	r1, [sp, #36]	; 0x24
 80093cc:	1ad3      	subs	r3, r2, r3
 80093ce:	eba2 0901 	sub.w	r9, r2, r1
 80093d2:	4599      	cmp	r9, r3
 80093d4:	bfa8      	it	ge
 80093d6:	4699      	movge	r9, r3
 80093d8:	f1b9 0f00 	cmp.w	r9, #0
 80093dc:	dc35      	bgt.n	800944a <_printf_float+0x3ae>
 80093de:	f04f 0800 	mov.w	r8, #0
 80093e2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80093e6:	f104 0a1a 	add.w	sl, r4, #26
 80093ea:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80093ee:	1a9b      	subs	r3, r3, r2
 80093f0:	eba3 0309 	sub.w	r3, r3, r9
 80093f4:	4543      	cmp	r3, r8
 80093f6:	f77f af79 	ble.w	80092ec <_printf_float+0x250>
 80093fa:	2301      	movs	r3, #1
 80093fc:	4652      	mov	r2, sl
 80093fe:	4631      	mov	r1, r6
 8009400:	4628      	mov	r0, r5
 8009402:	47b8      	blx	r7
 8009404:	3001      	adds	r0, #1
 8009406:	f43f aeaa 	beq.w	800915e <_printf_float+0xc2>
 800940a:	f108 0801 	add.w	r8, r8, #1
 800940e:	e7ec      	b.n	80093ea <_printf_float+0x34e>
 8009410:	4613      	mov	r3, r2
 8009412:	4631      	mov	r1, r6
 8009414:	4642      	mov	r2, r8
 8009416:	4628      	mov	r0, r5
 8009418:	47b8      	blx	r7
 800941a:	3001      	adds	r0, #1
 800941c:	d1c0      	bne.n	80093a0 <_printf_float+0x304>
 800941e:	e69e      	b.n	800915e <_printf_float+0xc2>
 8009420:	2301      	movs	r3, #1
 8009422:	4631      	mov	r1, r6
 8009424:	4628      	mov	r0, r5
 8009426:	9205      	str	r2, [sp, #20]
 8009428:	47b8      	blx	r7
 800942a:	3001      	adds	r0, #1
 800942c:	f43f ae97 	beq.w	800915e <_printf_float+0xc2>
 8009430:	9a05      	ldr	r2, [sp, #20]
 8009432:	f10b 0b01 	add.w	fp, fp, #1
 8009436:	e7b9      	b.n	80093ac <_printf_float+0x310>
 8009438:	ee18 3a10 	vmov	r3, s16
 800943c:	4652      	mov	r2, sl
 800943e:	4631      	mov	r1, r6
 8009440:	4628      	mov	r0, r5
 8009442:	47b8      	blx	r7
 8009444:	3001      	adds	r0, #1
 8009446:	d1be      	bne.n	80093c6 <_printf_float+0x32a>
 8009448:	e689      	b.n	800915e <_printf_float+0xc2>
 800944a:	9a05      	ldr	r2, [sp, #20]
 800944c:	464b      	mov	r3, r9
 800944e:	4442      	add	r2, r8
 8009450:	4631      	mov	r1, r6
 8009452:	4628      	mov	r0, r5
 8009454:	47b8      	blx	r7
 8009456:	3001      	adds	r0, #1
 8009458:	d1c1      	bne.n	80093de <_printf_float+0x342>
 800945a:	e680      	b.n	800915e <_printf_float+0xc2>
 800945c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800945e:	2a01      	cmp	r2, #1
 8009460:	dc01      	bgt.n	8009466 <_printf_float+0x3ca>
 8009462:	07db      	lsls	r3, r3, #31
 8009464:	d538      	bpl.n	80094d8 <_printf_float+0x43c>
 8009466:	2301      	movs	r3, #1
 8009468:	4642      	mov	r2, r8
 800946a:	4631      	mov	r1, r6
 800946c:	4628      	mov	r0, r5
 800946e:	47b8      	blx	r7
 8009470:	3001      	adds	r0, #1
 8009472:	f43f ae74 	beq.w	800915e <_printf_float+0xc2>
 8009476:	ee18 3a10 	vmov	r3, s16
 800947a:	4652      	mov	r2, sl
 800947c:	4631      	mov	r1, r6
 800947e:	4628      	mov	r0, r5
 8009480:	47b8      	blx	r7
 8009482:	3001      	adds	r0, #1
 8009484:	f43f ae6b 	beq.w	800915e <_printf_float+0xc2>
 8009488:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800948c:	2200      	movs	r2, #0
 800948e:	2300      	movs	r3, #0
 8009490:	f7f7 fb1a 	bl	8000ac8 <__aeabi_dcmpeq>
 8009494:	b9d8      	cbnz	r0, 80094ce <_printf_float+0x432>
 8009496:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009498:	f108 0201 	add.w	r2, r8, #1
 800949c:	3b01      	subs	r3, #1
 800949e:	4631      	mov	r1, r6
 80094a0:	4628      	mov	r0, r5
 80094a2:	47b8      	blx	r7
 80094a4:	3001      	adds	r0, #1
 80094a6:	d10e      	bne.n	80094c6 <_printf_float+0x42a>
 80094a8:	e659      	b.n	800915e <_printf_float+0xc2>
 80094aa:	2301      	movs	r3, #1
 80094ac:	4652      	mov	r2, sl
 80094ae:	4631      	mov	r1, r6
 80094b0:	4628      	mov	r0, r5
 80094b2:	47b8      	blx	r7
 80094b4:	3001      	adds	r0, #1
 80094b6:	f43f ae52 	beq.w	800915e <_printf_float+0xc2>
 80094ba:	f108 0801 	add.w	r8, r8, #1
 80094be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80094c0:	3b01      	subs	r3, #1
 80094c2:	4543      	cmp	r3, r8
 80094c4:	dcf1      	bgt.n	80094aa <_printf_float+0x40e>
 80094c6:	464b      	mov	r3, r9
 80094c8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80094cc:	e6dc      	b.n	8009288 <_printf_float+0x1ec>
 80094ce:	f04f 0800 	mov.w	r8, #0
 80094d2:	f104 0a1a 	add.w	sl, r4, #26
 80094d6:	e7f2      	b.n	80094be <_printf_float+0x422>
 80094d8:	2301      	movs	r3, #1
 80094da:	4642      	mov	r2, r8
 80094dc:	e7df      	b.n	800949e <_printf_float+0x402>
 80094de:	2301      	movs	r3, #1
 80094e0:	464a      	mov	r2, r9
 80094e2:	4631      	mov	r1, r6
 80094e4:	4628      	mov	r0, r5
 80094e6:	47b8      	blx	r7
 80094e8:	3001      	adds	r0, #1
 80094ea:	f43f ae38 	beq.w	800915e <_printf_float+0xc2>
 80094ee:	f108 0801 	add.w	r8, r8, #1
 80094f2:	68e3      	ldr	r3, [r4, #12]
 80094f4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80094f6:	1a5b      	subs	r3, r3, r1
 80094f8:	4543      	cmp	r3, r8
 80094fa:	dcf0      	bgt.n	80094de <_printf_float+0x442>
 80094fc:	e6fa      	b.n	80092f4 <_printf_float+0x258>
 80094fe:	f04f 0800 	mov.w	r8, #0
 8009502:	f104 0919 	add.w	r9, r4, #25
 8009506:	e7f4      	b.n	80094f2 <_printf_float+0x456>

08009508 <_printf_common>:
 8009508:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800950c:	4616      	mov	r6, r2
 800950e:	4699      	mov	r9, r3
 8009510:	688a      	ldr	r2, [r1, #8]
 8009512:	690b      	ldr	r3, [r1, #16]
 8009514:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009518:	4293      	cmp	r3, r2
 800951a:	bfb8      	it	lt
 800951c:	4613      	movlt	r3, r2
 800951e:	6033      	str	r3, [r6, #0]
 8009520:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009524:	4607      	mov	r7, r0
 8009526:	460c      	mov	r4, r1
 8009528:	b10a      	cbz	r2, 800952e <_printf_common+0x26>
 800952a:	3301      	adds	r3, #1
 800952c:	6033      	str	r3, [r6, #0]
 800952e:	6823      	ldr	r3, [r4, #0]
 8009530:	0699      	lsls	r1, r3, #26
 8009532:	bf42      	ittt	mi
 8009534:	6833      	ldrmi	r3, [r6, #0]
 8009536:	3302      	addmi	r3, #2
 8009538:	6033      	strmi	r3, [r6, #0]
 800953a:	6825      	ldr	r5, [r4, #0]
 800953c:	f015 0506 	ands.w	r5, r5, #6
 8009540:	d106      	bne.n	8009550 <_printf_common+0x48>
 8009542:	f104 0a19 	add.w	sl, r4, #25
 8009546:	68e3      	ldr	r3, [r4, #12]
 8009548:	6832      	ldr	r2, [r6, #0]
 800954a:	1a9b      	subs	r3, r3, r2
 800954c:	42ab      	cmp	r3, r5
 800954e:	dc26      	bgt.n	800959e <_printf_common+0x96>
 8009550:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009554:	1e13      	subs	r3, r2, #0
 8009556:	6822      	ldr	r2, [r4, #0]
 8009558:	bf18      	it	ne
 800955a:	2301      	movne	r3, #1
 800955c:	0692      	lsls	r2, r2, #26
 800955e:	d42b      	bmi.n	80095b8 <_printf_common+0xb0>
 8009560:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009564:	4649      	mov	r1, r9
 8009566:	4638      	mov	r0, r7
 8009568:	47c0      	blx	r8
 800956a:	3001      	adds	r0, #1
 800956c:	d01e      	beq.n	80095ac <_printf_common+0xa4>
 800956e:	6823      	ldr	r3, [r4, #0]
 8009570:	68e5      	ldr	r5, [r4, #12]
 8009572:	6832      	ldr	r2, [r6, #0]
 8009574:	f003 0306 	and.w	r3, r3, #6
 8009578:	2b04      	cmp	r3, #4
 800957a:	bf08      	it	eq
 800957c:	1aad      	subeq	r5, r5, r2
 800957e:	68a3      	ldr	r3, [r4, #8]
 8009580:	6922      	ldr	r2, [r4, #16]
 8009582:	bf0c      	ite	eq
 8009584:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009588:	2500      	movne	r5, #0
 800958a:	4293      	cmp	r3, r2
 800958c:	bfc4      	itt	gt
 800958e:	1a9b      	subgt	r3, r3, r2
 8009590:	18ed      	addgt	r5, r5, r3
 8009592:	2600      	movs	r6, #0
 8009594:	341a      	adds	r4, #26
 8009596:	42b5      	cmp	r5, r6
 8009598:	d11a      	bne.n	80095d0 <_printf_common+0xc8>
 800959a:	2000      	movs	r0, #0
 800959c:	e008      	b.n	80095b0 <_printf_common+0xa8>
 800959e:	2301      	movs	r3, #1
 80095a0:	4652      	mov	r2, sl
 80095a2:	4649      	mov	r1, r9
 80095a4:	4638      	mov	r0, r7
 80095a6:	47c0      	blx	r8
 80095a8:	3001      	adds	r0, #1
 80095aa:	d103      	bne.n	80095b4 <_printf_common+0xac>
 80095ac:	f04f 30ff 	mov.w	r0, #4294967295
 80095b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80095b4:	3501      	adds	r5, #1
 80095b6:	e7c6      	b.n	8009546 <_printf_common+0x3e>
 80095b8:	18e1      	adds	r1, r4, r3
 80095ba:	1c5a      	adds	r2, r3, #1
 80095bc:	2030      	movs	r0, #48	; 0x30
 80095be:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80095c2:	4422      	add	r2, r4
 80095c4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80095c8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80095cc:	3302      	adds	r3, #2
 80095ce:	e7c7      	b.n	8009560 <_printf_common+0x58>
 80095d0:	2301      	movs	r3, #1
 80095d2:	4622      	mov	r2, r4
 80095d4:	4649      	mov	r1, r9
 80095d6:	4638      	mov	r0, r7
 80095d8:	47c0      	blx	r8
 80095da:	3001      	adds	r0, #1
 80095dc:	d0e6      	beq.n	80095ac <_printf_common+0xa4>
 80095de:	3601      	adds	r6, #1
 80095e0:	e7d9      	b.n	8009596 <_printf_common+0x8e>
	...

080095e4 <_printf_i>:
 80095e4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80095e8:	460c      	mov	r4, r1
 80095ea:	4691      	mov	r9, r2
 80095ec:	7e27      	ldrb	r7, [r4, #24]
 80095ee:	990c      	ldr	r1, [sp, #48]	; 0x30
 80095f0:	2f78      	cmp	r7, #120	; 0x78
 80095f2:	4680      	mov	r8, r0
 80095f4:	469a      	mov	sl, r3
 80095f6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80095fa:	d807      	bhi.n	800960c <_printf_i+0x28>
 80095fc:	2f62      	cmp	r7, #98	; 0x62
 80095fe:	d80a      	bhi.n	8009616 <_printf_i+0x32>
 8009600:	2f00      	cmp	r7, #0
 8009602:	f000 80d8 	beq.w	80097b6 <_printf_i+0x1d2>
 8009606:	2f58      	cmp	r7, #88	; 0x58
 8009608:	f000 80a3 	beq.w	8009752 <_printf_i+0x16e>
 800960c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8009610:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009614:	e03a      	b.n	800968c <_printf_i+0xa8>
 8009616:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800961a:	2b15      	cmp	r3, #21
 800961c:	d8f6      	bhi.n	800960c <_printf_i+0x28>
 800961e:	a001      	add	r0, pc, #4	; (adr r0, 8009624 <_printf_i+0x40>)
 8009620:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8009624:	0800967d 	.word	0x0800967d
 8009628:	08009691 	.word	0x08009691
 800962c:	0800960d 	.word	0x0800960d
 8009630:	0800960d 	.word	0x0800960d
 8009634:	0800960d 	.word	0x0800960d
 8009638:	0800960d 	.word	0x0800960d
 800963c:	08009691 	.word	0x08009691
 8009640:	0800960d 	.word	0x0800960d
 8009644:	0800960d 	.word	0x0800960d
 8009648:	0800960d 	.word	0x0800960d
 800964c:	0800960d 	.word	0x0800960d
 8009650:	0800979d 	.word	0x0800979d
 8009654:	080096c1 	.word	0x080096c1
 8009658:	0800977f 	.word	0x0800977f
 800965c:	0800960d 	.word	0x0800960d
 8009660:	0800960d 	.word	0x0800960d
 8009664:	080097bf 	.word	0x080097bf
 8009668:	0800960d 	.word	0x0800960d
 800966c:	080096c1 	.word	0x080096c1
 8009670:	0800960d 	.word	0x0800960d
 8009674:	0800960d 	.word	0x0800960d
 8009678:	08009787 	.word	0x08009787
 800967c:	680b      	ldr	r3, [r1, #0]
 800967e:	1d1a      	adds	r2, r3, #4
 8009680:	681b      	ldr	r3, [r3, #0]
 8009682:	600a      	str	r2, [r1, #0]
 8009684:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8009688:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800968c:	2301      	movs	r3, #1
 800968e:	e0a3      	b.n	80097d8 <_printf_i+0x1f4>
 8009690:	6825      	ldr	r5, [r4, #0]
 8009692:	6808      	ldr	r0, [r1, #0]
 8009694:	062e      	lsls	r6, r5, #24
 8009696:	f100 0304 	add.w	r3, r0, #4
 800969a:	d50a      	bpl.n	80096b2 <_printf_i+0xce>
 800969c:	6805      	ldr	r5, [r0, #0]
 800969e:	600b      	str	r3, [r1, #0]
 80096a0:	2d00      	cmp	r5, #0
 80096a2:	da03      	bge.n	80096ac <_printf_i+0xc8>
 80096a4:	232d      	movs	r3, #45	; 0x2d
 80096a6:	426d      	negs	r5, r5
 80096a8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80096ac:	485e      	ldr	r0, [pc, #376]	; (8009828 <_printf_i+0x244>)
 80096ae:	230a      	movs	r3, #10
 80096b0:	e019      	b.n	80096e6 <_printf_i+0x102>
 80096b2:	f015 0f40 	tst.w	r5, #64	; 0x40
 80096b6:	6805      	ldr	r5, [r0, #0]
 80096b8:	600b      	str	r3, [r1, #0]
 80096ba:	bf18      	it	ne
 80096bc:	b22d      	sxthne	r5, r5
 80096be:	e7ef      	b.n	80096a0 <_printf_i+0xbc>
 80096c0:	680b      	ldr	r3, [r1, #0]
 80096c2:	6825      	ldr	r5, [r4, #0]
 80096c4:	1d18      	adds	r0, r3, #4
 80096c6:	6008      	str	r0, [r1, #0]
 80096c8:	0628      	lsls	r0, r5, #24
 80096ca:	d501      	bpl.n	80096d0 <_printf_i+0xec>
 80096cc:	681d      	ldr	r5, [r3, #0]
 80096ce:	e002      	b.n	80096d6 <_printf_i+0xf2>
 80096d0:	0669      	lsls	r1, r5, #25
 80096d2:	d5fb      	bpl.n	80096cc <_printf_i+0xe8>
 80096d4:	881d      	ldrh	r5, [r3, #0]
 80096d6:	4854      	ldr	r0, [pc, #336]	; (8009828 <_printf_i+0x244>)
 80096d8:	2f6f      	cmp	r7, #111	; 0x6f
 80096da:	bf0c      	ite	eq
 80096dc:	2308      	moveq	r3, #8
 80096de:	230a      	movne	r3, #10
 80096e0:	2100      	movs	r1, #0
 80096e2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80096e6:	6866      	ldr	r6, [r4, #4]
 80096e8:	60a6      	str	r6, [r4, #8]
 80096ea:	2e00      	cmp	r6, #0
 80096ec:	bfa2      	ittt	ge
 80096ee:	6821      	ldrge	r1, [r4, #0]
 80096f0:	f021 0104 	bicge.w	r1, r1, #4
 80096f4:	6021      	strge	r1, [r4, #0]
 80096f6:	b90d      	cbnz	r5, 80096fc <_printf_i+0x118>
 80096f8:	2e00      	cmp	r6, #0
 80096fa:	d04d      	beq.n	8009798 <_printf_i+0x1b4>
 80096fc:	4616      	mov	r6, r2
 80096fe:	fbb5 f1f3 	udiv	r1, r5, r3
 8009702:	fb03 5711 	mls	r7, r3, r1, r5
 8009706:	5dc7      	ldrb	r7, [r0, r7]
 8009708:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800970c:	462f      	mov	r7, r5
 800970e:	42bb      	cmp	r3, r7
 8009710:	460d      	mov	r5, r1
 8009712:	d9f4      	bls.n	80096fe <_printf_i+0x11a>
 8009714:	2b08      	cmp	r3, #8
 8009716:	d10b      	bne.n	8009730 <_printf_i+0x14c>
 8009718:	6823      	ldr	r3, [r4, #0]
 800971a:	07df      	lsls	r7, r3, #31
 800971c:	d508      	bpl.n	8009730 <_printf_i+0x14c>
 800971e:	6923      	ldr	r3, [r4, #16]
 8009720:	6861      	ldr	r1, [r4, #4]
 8009722:	4299      	cmp	r1, r3
 8009724:	bfde      	ittt	le
 8009726:	2330      	movle	r3, #48	; 0x30
 8009728:	f806 3c01 	strble.w	r3, [r6, #-1]
 800972c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8009730:	1b92      	subs	r2, r2, r6
 8009732:	6122      	str	r2, [r4, #16]
 8009734:	f8cd a000 	str.w	sl, [sp]
 8009738:	464b      	mov	r3, r9
 800973a:	aa03      	add	r2, sp, #12
 800973c:	4621      	mov	r1, r4
 800973e:	4640      	mov	r0, r8
 8009740:	f7ff fee2 	bl	8009508 <_printf_common>
 8009744:	3001      	adds	r0, #1
 8009746:	d14c      	bne.n	80097e2 <_printf_i+0x1fe>
 8009748:	f04f 30ff 	mov.w	r0, #4294967295
 800974c:	b004      	add	sp, #16
 800974e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009752:	4835      	ldr	r0, [pc, #212]	; (8009828 <_printf_i+0x244>)
 8009754:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8009758:	6823      	ldr	r3, [r4, #0]
 800975a:	680e      	ldr	r6, [r1, #0]
 800975c:	061f      	lsls	r7, r3, #24
 800975e:	f856 5b04 	ldr.w	r5, [r6], #4
 8009762:	600e      	str	r6, [r1, #0]
 8009764:	d514      	bpl.n	8009790 <_printf_i+0x1ac>
 8009766:	07d9      	lsls	r1, r3, #31
 8009768:	bf44      	itt	mi
 800976a:	f043 0320 	orrmi.w	r3, r3, #32
 800976e:	6023      	strmi	r3, [r4, #0]
 8009770:	b91d      	cbnz	r5, 800977a <_printf_i+0x196>
 8009772:	6823      	ldr	r3, [r4, #0]
 8009774:	f023 0320 	bic.w	r3, r3, #32
 8009778:	6023      	str	r3, [r4, #0]
 800977a:	2310      	movs	r3, #16
 800977c:	e7b0      	b.n	80096e0 <_printf_i+0xfc>
 800977e:	6823      	ldr	r3, [r4, #0]
 8009780:	f043 0320 	orr.w	r3, r3, #32
 8009784:	6023      	str	r3, [r4, #0]
 8009786:	2378      	movs	r3, #120	; 0x78
 8009788:	4828      	ldr	r0, [pc, #160]	; (800982c <_printf_i+0x248>)
 800978a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800978e:	e7e3      	b.n	8009758 <_printf_i+0x174>
 8009790:	065e      	lsls	r6, r3, #25
 8009792:	bf48      	it	mi
 8009794:	b2ad      	uxthmi	r5, r5
 8009796:	e7e6      	b.n	8009766 <_printf_i+0x182>
 8009798:	4616      	mov	r6, r2
 800979a:	e7bb      	b.n	8009714 <_printf_i+0x130>
 800979c:	680b      	ldr	r3, [r1, #0]
 800979e:	6826      	ldr	r6, [r4, #0]
 80097a0:	6960      	ldr	r0, [r4, #20]
 80097a2:	1d1d      	adds	r5, r3, #4
 80097a4:	600d      	str	r5, [r1, #0]
 80097a6:	0635      	lsls	r5, r6, #24
 80097a8:	681b      	ldr	r3, [r3, #0]
 80097aa:	d501      	bpl.n	80097b0 <_printf_i+0x1cc>
 80097ac:	6018      	str	r0, [r3, #0]
 80097ae:	e002      	b.n	80097b6 <_printf_i+0x1d2>
 80097b0:	0671      	lsls	r1, r6, #25
 80097b2:	d5fb      	bpl.n	80097ac <_printf_i+0x1c8>
 80097b4:	8018      	strh	r0, [r3, #0]
 80097b6:	2300      	movs	r3, #0
 80097b8:	6123      	str	r3, [r4, #16]
 80097ba:	4616      	mov	r6, r2
 80097bc:	e7ba      	b.n	8009734 <_printf_i+0x150>
 80097be:	680b      	ldr	r3, [r1, #0]
 80097c0:	1d1a      	adds	r2, r3, #4
 80097c2:	600a      	str	r2, [r1, #0]
 80097c4:	681e      	ldr	r6, [r3, #0]
 80097c6:	6862      	ldr	r2, [r4, #4]
 80097c8:	2100      	movs	r1, #0
 80097ca:	4630      	mov	r0, r6
 80097cc:	f7f6 fd08 	bl	80001e0 <memchr>
 80097d0:	b108      	cbz	r0, 80097d6 <_printf_i+0x1f2>
 80097d2:	1b80      	subs	r0, r0, r6
 80097d4:	6060      	str	r0, [r4, #4]
 80097d6:	6863      	ldr	r3, [r4, #4]
 80097d8:	6123      	str	r3, [r4, #16]
 80097da:	2300      	movs	r3, #0
 80097dc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80097e0:	e7a8      	b.n	8009734 <_printf_i+0x150>
 80097e2:	6923      	ldr	r3, [r4, #16]
 80097e4:	4632      	mov	r2, r6
 80097e6:	4649      	mov	r1, r9
 80097e8:	4640      	mov	r0, r8
 80097ea:	47d0      	blx	sl
 80097ec:	3001      	adds	r0, #1
 80097ee:	d0ab      	beq.n	8009748 <_printf_i+0x164>
 80097f0:	6823      	ldr	r3, [r4, #0]
 80097f2:	079b      	lsls	r3, r3, #30
 80097f4:	d413      	bmi.n	800981e <_printf_i+0x23a>
 80097f6:	68e0      	ldr	r0, [r4, #12]
 80097f8:	9b03      	ldr	r3, [sp, #12]
 80097fa:	4298      	cmp	r0, r3
 80097fc:	bfb8      	it	lt
 80097fe:	4618      	movlt	r0, r3
 8009800:	e7a4      	b.n	800974c <_printf_i+0x168>
 8009802:	2301      	movs	r3, #1
 8009804:	4632      	mov	r2, r6
 8009806:	4649      	mov	r1, r9
 8009808:	4640      	mov	r0, r8
 800980a:	47d0      	blx	sl
 800980c:	3001      	adds	r0, #1
 800980e:	d09b      	beq.n	8009748 <_printf_i+0x164>
 8009810:	3501      	adds	r5, #1
 8009812:	68e3      	ldr	r3, [r4, #12]
 8009814:	9903      	ldr	r1, [sp, #12]
 8009816:	1a5b      	subs	r3, r3, r1
 8009818:	42ab      	cmp	r3, r5
 800981a:	dcf2      	bgt.n	8009802 <_printf_i+0x21e>
 800981c:	e7eb      	b.n	80097f6 <_printf_i+0x212>
 800981e:	2500      	movs	r5, #0
 8009820:	f104 0619 	add.w	r6, r4, #25
 8009824:	e7f5      	b.n	8009812 <_printf_i+0x22e>
 8009826:	bf00      	nop
 8009828:	0800d152 	.word	0x0800d152
 800982c:	0800d163 	.word	0x0800d163

08009830 <iprintf>:
 8009830:	b40f      	push	{r0, r1, r2, r3}
 8009832:	4b0a      	ldr	r3, [pc, #40]	; (800985c <iprintf+0x2c>)
 8009834:	b513      	push	{r0, r1, r4, lr}
 8009836:	681c      	ldr	r4, [r3, #0]
 8009838:	b124      	cbz	r4, 8009844 <iprintf+0x14>
 800983a:	69a3      	ldr	r3, [r4, #24]
 800983c:	b913      	cbnz	r3, 8009844 <iprintf+0x14>
 800983e:	4620      	mov	r0, r4
 8009840:	f001 f9d0 	bl	800abe4 <__sinit>
 8009844:	ab05      	add	r3, sp, #20
 8009846:	9a04      	ldr	r2, [sp, #16]
 8009848:	68a1      	ldr	r1, [r4, #8]
 800984a:	9301      	str	r3, [sp, #4]
 800984c:	4620      	mov	r0, r4
 800984e:	f002 f8a7 	bl	800b9a0 <_vfiprintf_r>
 8009852:	b002      	add	sp, #8
 8009854:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009858:	b004      	add	sp, #16
 800985a:	4770      	bx	lr
 800985c:	20000024 	.word	0x20000024

08009860 <_puts_r>:
 8009860:	b570      	push	{r4, r5, r6, lr}
 8009862:	460e      	mov	r6, r1
 8009864:	4605      	mov	r5, r0
 8009866:	b118      	cbz	r0, 8009870 <_puts_r+0x10>
 8009868:	6983      	ldr	r3, [r0, #24]
 800986a:	b90b      	cbnz	r3, 8009870 <_puts_r+0x10>
 800986c:	f001 f9ba 	bl	800abe4 <__sinit>
 8009870:	69ab      	ldr	r3, [r5, #24]
 8009872:	68ac      	ldr	r4, [r5, #8]
 8009874:	b913      	cbnz	r3, 800987c <_puts_r+0x1c>
 8009876:	4628      	mov	r0, r5
 8009878:	f001 f9b4 	bl	800abe4 <__sinit>
 800987c:	4b2c      	ldr	r3, [pc, #176]	; (8009930 <_puts_r+0xd0>)
 800987e:	429c      	cmp	r4, r3
 8009880:	d120      	bne.n	80098c4 <_puts_r+0x64>
 8009882:	686c      	ldr	r4, [r5, #4]
 8009884:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009886:	07db      	lsls	r3, r3, #31
 8009888:	d405      	bmi.n	8009896 <_puts_r+0x36>
 800988a:	89a3      	ldrh	r3, [r4, #12]
 800988c:	0598      	lsls	r0, r3, #22
 800988e:	d402      	bmi.n	8009896 <_puts_r+0x36>
 8009890:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009892:	f001 fa4a 	bl	800ad2a <__retarget_lock_acquire_recursive>
 8009896:	89a3      	ldrh	r3, [r4, #12]
 8009898:	0719      	lsls	r1, r3, #28
 800989a:	d51d      	bpl.n	80098d8 <_puts_r+0x78>
 800989c:	6923      	ldr	r3, [r4, #16]
 800989e:	b1db      	cbz	r3, 80098d8 <_puts_r+0x78>
 80098a0:	3e01      	subs	r6, #1
 80098a2:	68a3      	ldr	r3, [r4, #8]
 80098a4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80098a8:	3b01      	subs	r3, #1
 80098aa:	60a3      	str	r3, [r4, #8]
 80098ac:	bb39      	cbnz	r1, 80098fe <_puts_r+0x9e>
 80098ae:	2b00      	cmp	r3, #0
 80098b0:	da38      	bge.n	8009924 <_puts_r+0xc4>
 80098b2:	4622      	mov	r2, r4
 80098b4:	210a      	movs	r1, #10
 80098b6:	4628      	mov	r0, r5
 80098b8:	f000 f942 	bl	8009b40 <__swbuf_r>
 80098bc:	3001      	adds	r0, #1
 80098be:	d011      	beq.n	80098e4 <_puts_r+0x84>
 80098c0:	250a      	movs	r5, #10
 80098c2:	e011      	b.n	80098e8 <_puts_r+0x88>
 80098c4:	4b1b      	ldr	r3, [pc, #108]	; (8009934 <_puts_r+0xd4>)
 80098c6:	429c      	cmp	r4, r3
 80098c8:	d101      	bne.n	80098ce <_puts_r+0x6e>
 80098ca:	68ac      	ldr	r4, [r5, #8]
 80098cc:	e7da      	b.n	8009884 <_puts_r+0x24>
 80098ce:	4b1a      	ldr	r3, [pc, #104]	; (8009938 <_puts_r+0xd8>)
 80098d0:	429c      	cmp	r4, r3
 80098d2:	bf08      	it	eq
 80098d4:	68ec      	ldreq	r4, [r5, #12]
 80098d6:	e7d5      	b.n	8009884 <_puts_r+0x24>
 80098d8:	4621      	mov	r1, r4
 80098da:	4628      	mov	r0, r5
 80098dc:	f000 f982 	bl	8009be4 <__swsetup_r>
 80098e0:	2800      	cmp	r0, #0
 80098e2:	d0dd      	beq.n	80098a0 <_puts_r+0x40>
 80098e4:	f04f 35ff 	mov.w	r5, #4294967295
 80098e8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80098ea:	07da      	lsls	r2, r3, #31
 80098ec:	d405      	bmi.n	80098fa <_puts_r+0x9a>
 80098ee:	89a3      	ldrh	r3, [r4, #12]
 80098f0:	059b      	lsls	r3, r3, #22
 80098f2:	d402      	bmi.n	80098fa <_puts_r+0x9a>
 80098f4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80098f6:	f001 fa19 	bl	800ad2c <__retarget_lock_release_recursive>
 80098fa:	4628      	mov	r0, r5
 80098fc:	bd70      	pop	{r4, r5, r6, pc}
 80098fe:	2b00      	cmp	r3, #0
 8009900:	da04      	bge.n	800990c <_puts_r+0xac>
 8009902:	69a2      	ldr	r2, [r4, #24]
 8009904:	429a      	cmp	r2, r3
 8009906:	dc06      	bgt.n	8009916 <_puts_r+0xb6>
 8009908:	290a      	cmp	r1, #10
 800990a:	d004      	beq.n	8009916 <_puts_r+0xb6>
 800990c:	6823      	ldr	r3, [r4, #0]
 800990e:	1c5a      	adds	r2, r3, #1
 8009910:	6022      	str	r2, [r4, #0]
 8009912:	7019      	strb	r1, [r3, #0]
 8009914:	e7c5      	b.n	80098a2 <_puts_r+0x42>
 8009916:	4622      	mov	r2, r4
 8009918:	4628      	mov	r0, r5
 800991a:	f000 f911 	bl	8009b40 <__swbuf_r>
 800991e:	3001      	adds	r0, #1
 8009920:	d1bf      	bne.n	80098a2 <_puts_r+0x42>
 8009922:	e7df      	b.n	80098e4 <_puts_r+0x84>
 8009924:	6823      	ldr	r3, [r4, #0]
 8009926:	250a      	movs	r5, #10
 8009928:	1c5a      	adds	r2, r3, #1
 800992a:	6022      	str	r2, [r4, #0]
 800992c:	701d      	strb	r5, [r3, #0]
 800992e:	e7db      	b.n	80098e8 <_puts_r+0x88>
 8009930:	0800d228 	.word	0x0800d228
 8009934:	0800d248 	.word	0x0800d248
 8009938:	0800d208 	.word	0x0800d208

0800993c <puts>:
 800993c:	4b02      	ldr	r3, [pc, #8]	; (8009948 <puts+0xc>)
 800993e:	4601      	mov	r1, r0
 8009940:	6818      	ldr	r0, [r3, #0]
 8009942:	f7ff bf8d 	b.w	8009860 <_puts_r>
 8009946:	bf00      	nop
 8009948:	20000024 	.word	0x20000024

0800994c <setvbuf>:
 800994c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009950:	461d      	mov	r5, r3
 8009952:	4b5d      	ldr	r3, [pc, #372]	; (8009ac8 <setvbuf+0x17c>)
 8009954:	681f      	ldr	r7, [r3, #0]
 8009956:	4604      	mov	r4, r0
 8009958:	460e      	mov	r6, r1
 800995a:	4690      	mov	r8, r2
 800995c:	b127      	cbz	r7, 8009968 <setvbuf+0x1c>
 800995e:	69bb      	ldr	r3, [r7, #24]
 8009960:	b913      	cbnz	r3, 8009968 <setvbuf+0x1c>
 8009962:	4638      	mov	r0, r7
 8009964:	f001 f93e 	bl	800abe4 <__sinit>
 8009968:	4b58      	ldr	r3, [pc, #352]	; (8009acc <setvbuf+0x180>)
 800996a:	429c      	cmp	r4, r3
 800996c:	d167      	bne.n	8009a3e <setvbuf+0xf2>
 800996e:	687c      	ldr	r4, [r7, #4]
 8009970:	f1b8 0f02 	cmp.w	r8, #2
 8009974:	d006      	beq.n	8009984 <setvbuf+0x38>
 8009976:	f1b8 0f01 	cmp.w	r8, #1
 800997a:	f200 809f 	bhi.w	8009abc <setvbuf+0x170>
 800997e:	2d00      	cmp	r5, #0
 8009980:	f2c0 809c 	blt.w	8009abc <setvbuf+0x170>
 8009984:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009986:	07db      	lsls	r3, r3, #31
 8009988:	d405      	bmi.n	8009996 <setvbuf+0x4a>
 800998a:	89a3      	ldrh	r3, [r4, #12]
 800998c:	0598      	lsls	r0, r3, #22
 800998e:	d402      	bmi.n	8009996 <setvbuf+0x4a>
 8009990:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009992:	f001 f9ca 	bl	800ad2a <__retarget_lock_acquire_recursive>
 8009996:	4621      	mov	r1, r4
 8009998:	4638      	mov	r0, r7
 800999a:	f001 f88f 	bl	800aabc <_fflush_r>
 800999e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80099a0:	b141      	cbz	r1, 80099b4 <setvbuf+0x68>
 80099a2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80099a6:	4299      	cmp	r1, r3
 80099a8:	d002      	beq.n	80099b0 <setvbuf+0x64>
 80099aa:	4638      	mov	r0, r7
 80099ac:	f001 fdc8 	bl	800b540 <_free_r>
 80099b0:	2300      	movs	r3, #0
 80099b2:	6363      	str	r3, [r4, #52]	; 0x34
 80099b4:	2300      	movs	r3, #0
 80099b6:	61a3      	str	r3, [r4, #24]
 80099b8:	6063      	str	r3, [r4, #4]
 80099ba:	89a3      	ldrh	r3, [r4, #12]
 80099bc:	0619      	lsls	r1, r3, #24
 80099be:	d503      	bpl.n	80099c8 <setvbuf+0x7c>
 80099c0:	6921      	ldr	r1, [r4, #16]
 80099c2:	4638      	mov	r0, r7
 80099c4:	f001 fdbc 	bl	800b540 <_free_r>
 80099c8:	89a3      	ldrh	r3, [r4, #12]
 80099ca:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 80099ce:	f023 0303 	bic.w	r3, r3, #3
 80099d2:	f1b8 0f02 	cmp.w	r8, #2
 80099d6:	81a3      	strh	r3, [r4, #12]
 80099d8:	d06c      	beq.n	8009ab4 <setvbuf+0x168>
 80099da:	ab01      	add	r3, sp, #4
 80099dc:	466a      	mov	r2, sp
 80099de:	4621      	mov	r1, r4
 80099e0:	4638      	mov	r0, r7
 80099e2:	f001 f9a4 	bl	800ad2e <__swhatbuf_r>
 80099e6:	89a3      	ldrh	r3, [r4, #12]
 80099e8:	4318      	orrs	r0, r3
 80099ea:	81a0      	strh	r0, [r4, #12]
 80099ec:	2d00      	cmp	r5, #0
 80099ee:	d130      	bne.n	8009a52 <setvbuf+0x106>
 80099f0:	9d00      	ldr	r5, [sp, #0]
 80099f2:	4628      	mov	r0, r5
 80099f4:	f001 fa00 	bl	800adf8 <malloc>
 80099f8:	4606      	mov	r6, r0
 80099fa:	2800      	cmp	r0, #0
 80099fc:	d155      	bne.n	8009aaa <setvbuf+0x15e>
 80099fe:	f8dd 9000 	ldr.w	r9, [sp]
 8009a02:	45a9      	cmp	r9, r5
 8009a04:	d14a      	bne.n	8009a9c <setvbuf+0x150>
 8009a06:	f04f 35ff 	mov.w	r5, #4294967295
 8009a0a:	2200      	movs	r2, #0
 8009a0c:	60a2      	str	r2, [r4, #8]
 8009a0e:	f104 0247 	add.w	r2, r4, #71	; 0x47
 8009a12:	6022      	str	r2, [r4, #0]
 8009a14:	6122      	str	r2, [r4, #16]
 8009a16:	2201      	movs	r2, #1
 8009a18:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009a1c:	6162      	str	r2, [r4, #20]
 8009a1e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009a20:	f043 0302 	orr.w	r3, r3, #2
 8009a24:	07d2      	lsls	r2, r2, #31
 8009a26:	81a3      	strh	r3, [r4, #12]
 8009a28:	d405      	bmi.n	8009a36 <setvbuf+0xea>
 8009a2a:	f413 7f00 	tst.w	r3, #512	; 0x200
 8009a2e:	d102      	bne.n	8009a36 <setvbuf+0xea>
 8009a30:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009a32:	f001 f97b 	bl	800ad2c <__retarget_lock_release_recursive>
 8009a36:	4628      	mov	r0, r5
 8009a38:	b003      	add	sp, #12
 8009a3a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009a3e:	4b24      	ldr	r3, [pc, #144]	; (8009ad0 <setvbuf+0x184>)
 8009a40:	429c      	cmp	r4, r3
 8009a42:	d101      	bne.n	8009a48 <setvbuf+0xfc>
 8009a44:	68bc      	ldr	r4, [r7, #8]
 8009a46:	e793      	b.n	8009970 <setvbuf+0x24>
 8009a48:	4b22      	ldr	r3, [pc, #136]	; (8009ad4 <setvbuf+0x188>)
 8009a4a:	429c      	cmp	r4, r3
 8009a4c:	bf08      	it	eq
 8009a4e:	68fc      	ldreq	r4, [r7, #12]
 8009a50:	e78e      	b.n	8009970 <setvbuf+0x24>
 8009a52:	2e00      	cmp	r6, #0
 8009a54:	d0cd      	beq.n	80099f2 <setvbuf+0xa6>
 8009a56:	69bb      	ldr	r3, [r7, #24]
 8009a58:	b913      	cbnz	r3, 8009a60 <setvbuf+0x114>
 8009a5a:	4638      	mov	r0, r7
 8009a5c:	f001 f8c2 	bl	800abe4 <__sinit>
 8009a60:	f1b8 0f01 	cmp.w	r8, #1
 8009a64:	bf08      	it	eq
 8009a66:	89a3      	ldrheq	r3, [r4, #12]
 8009a68:	6026      	str	r6, [r4, #0]
 8009a6a:	bf04      	itt	eq
 8009a6c:	f043 0301 	orreq.w	r3, r3, #1
 8009a70:	81a3      	strheq	r3, [r4, #12]
 8009a72:	89a2      	ldrh	r2, [r4, #12]
 8009a74:	f012 0308 	ands.w	r3, r2, #8
 8009a78:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8009a7c:	d01c      	beq.n	8009ab8 <setvbuf+0x16c>
 8009a7e:	07d3      	lsls	r3, r2, #31
 8009a80:	bf41      	itttt	mi
 8009a82:	2300      	movmi	r3, #0
 8009a84:	426d      	negmi	r5, r5
 8009a86:	60a3      	strmi	r3, [r4, #8]
 8009a88:	61a5      	strmi	r5, [r4, #24]
 8009a8a:	bf58      	it	pl
 8009a8c:	60a5      	strpl	r5, [r4, #8]
 8009a8e:	6e65      	ldr	r5, [r4, #100]	; 0x64
 8009a90:	f015 0501 	ands.w	r5, r5, #1
 8009a94:	d115      	bne.n	8009ac2 <setvbuf+0x176>
 8009a96:	f412 7f00 	tst.w	r2, #512	; 0x200
 8009a9a:	e7c8      	b.n	8009a2e <setvbuf+0xe2>
 8009a9c:	4648      	mov	r0, r9
 8009a9e:	f001 f9ab 	bl	800adf8 <malloc>
 8009aa2:	4606      	mov	r6, r0
 8009aa4:	2800      	cmp	r0, #0
 8009aa6:	d0ae      	beq.n	8009a06 <setvbuf+0xba>
 8009aa8:	464d      	mov	r5, r9
 8009aaa:	89a3      	ldrh	r3, [r4, #12]
 8009aac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009ab0:	81a3      	strh	r3, [r4, #12]
 8009ab2:	e7d0      	b.n	8009a56 <setvbuf+0x10a>
 8009ab4:	2500      	movs	r5, #0
 8009ab6:	e7a8      	b.n	8009a0a <setvbuf+0xbe>
 8009ab8:	60a3      	str	r3, [r4, #8]
 8009aba:	e7e8      	b.n	8009a8e <setvbuf+0x142>
 8009abc:	f04f 35ff 	mov.w	r5, #4294967295
 8009ac0:	e7b9      	b.n	8009a36 <setvbuf+0xea>
 8009ac2:	2500      	movs	r5, #0
 8009ac4:	e7b7      	b.n	8009a36 <setvbuf+0xea>
 8009ac6:	bf00      	nop
 8009ac8:	20000024 	.word	0x20000024
 8009acc:	0800d228 	.word	0x0800d228
 8009ad0:	0800d248 	.word	0x0800d248
 8009ad4:	0800d208 	.word	0x0800d208

08009ad8 <sniprintf>:
 8009ad8:	b40c      	push	{r2, r3}
 8009ada:	b530      	push	{r4, r5, lr}
 8009adc:	4b17      	ldr	r3, [pc, #92]	; (8009b3c <sniprintf+0x64>)
 8009ade:	1e0c      	subs	r4, r1, #0
 8009ae0:	681d      	ldr	r5, [r3, #0]
 8009ae2:	b09d      	sub	sp, #116	; 0x74
 8009ae4:	da08      	bge.n	8009af8 <sniprintf+0x20>
 8009ae6:	238b      	movs	r3, #139	; 0x8b
 8009ae8:	602b      	str	r3, [r5, #0]
 8009aea:	f04f 30ff 	mov.w	r0, #4294967295
 8009aee:	b01d      	add	sp, #116	; 0x74
 8009af0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009af4:	b002      	add	sp, #8
 8009af6:	4770      	bx	lr
 8009af8:	f44f 7302 	mov.w	r3, #520	; 0x208
 8009afc:	f8ad 3014 	strh.w	r3, [sp, #20]
 8009b00:	bf14      	ite	ne
 8009b02:	f104 33ff 	addne.w	r3, r4, #4294967295
 8009b06:	4623      	moveq	r3, r4
 8009b08:	9304      	str	r3, [sp, #16]
 8009b0a:	9307      	str	r3, [sp, #28]
 8009b0c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009b10:	9002      	str	r0, [sp, #8]
 8009b12:	9006      	str	r0, [sp, #24]
 8009b14:	f8ad 3016 	strh.w	r3, [sp, #22]
 8009b18:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8009b1a:	ab21      	add	r3, sp, #132	; 0x84
 8009b1c:	a902      	add	r1, sp, #8
 8009b1e:	4628      	mov	r0, r5
 8009b20:	9301      	str	r3, [sp, #4]
 8009b22:	f001 fe13 	bl	800b74c <_svfiprintf_r>
 8009b26:	1c43      	adds	r3, r0, #1
 8009b28:	bfbc      	itt	lt
 8009b2a:	238b      	movlt	r3, #139	; 0x8b
 8009b2c:	602b      	strlt	r3, [r5, #0]
 8009b2e:	2c00      	cmp	r4, #0
 8009b30:	d0dd      	beq.n	8009aee <sniprintf+0x16>
 8009b32:	9b02      	ldr	r3, [sp, #8]
 8009b34:	2200      	movs	r2, #0
 8009b36:	701a      	strb	r2, [r3, #0]
 8009b38:	e7d9      	b.n	8009aee <sniprintf+0x16>
 8009b3a:	bf00      	nop
 8009b3c:	20000024 	.word	0x20000024

08009b40 <__swbuf_r>:
 8009b40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b42:	460e      	mov	r6, r1
 8009b44:	4614      	mov	r4, r2
 8009b46:	4605      	mov	r5, r0
 8009b48:	b118      	cbz	r0, 8009b52 <__swbuf_r+0x12>
 8009b4a:	6983      	ldr	r3, [r0, #24]
 8009b4c:	b90b      	cbnz	r3, 8009b52 <__swbuf_r+0x12>
 8009b4e:	f001 f849 	bl	800abe4 <__sinit>
 8009b52:	4b21      	ldr	r3, [pc, #132]	; (8009bd8 <__swbuf_r+0x98>)
 8009b54:	429c      	cmp	r4, r3
 8009b56:	d12b      	bne.n	8009bb0 <__swbuf_r+0x70>
 8009b58:	686c      	ldr	r4, [r5, #4]
 8009b5a:	69a3      	ldr	r3, [r4, #24]
 8009b5c:	60a3      	str	r3, [r4, #8]
 8009b5e:	89a3      	ldrh	r3, [r4, #12]
 8009b60:	071a      	lsls	r2, r3, #28
 8009b62:	d52f      	bpl.n	8009bc4 <__swbuf_r+0x84>
 8009b64:	6923      	ldr	r3, [r4, #16]
 8009b66:	b36b      	cbz	r3, 8009bc4 <__swbuf_r+0x84>
 8009b68:	6923      	ldr	r3, [r4, #16]
 8009b6a:	6820      	ldr	r0, [r4, #0]
 8009b6c:	1ac0      	subs	r0, r0, r3
 8009b6e:	6963      	ldr	r3, [r4, #20]
 8009b70:	b2f6      	uxtb	r6, r6
 8009b72:	4283      	cmp	r3, r0
 8009b74:	4637      	mov	r7, r6
 8009b76:	dc04      	bgt.n	8009b82 <__swbuf_r+0x42>
 8009b78:	4621      	mov	r1, r4
 8009b7a:	4628      	mov	r0, r5
 8009b7c:	f000 ff9e 	bl	800aabc <_fflush_r>
 8009b80:	bb30      	cbnz	r0, 8009bd0 <__swbuf_r+0x90>
 8009b82:	68a3      	ldr	r3, [r4, #8]
 8009b84:	3b01      	subs	r3, #1
 8009b86:	60a3      	str	r3, [r4, #8]
 8009b88:	6823      	ldr	r3, [r4, #0]
 8009b8a:	1c5a      	adds	r2, r3, #1
 8009b8c:	6022      	str	r2, [r4, #0]
 8009b8e:	701e      	strb	r6, [r3, #0]
 8009b90:	6963      	ldr	r3, [r4, #20]
 8009b92:	3001      	adds	r0, #1
 8009b94:	4283      	cmp	r3, r0
 8009b96:	d004      	beq.n	8009ba2 <__swbuf_r+0x62>
 8009b98:	89a3      	ldrh	r3, [r4, #12]
 8009b9a:	07db      	lsls	r3, r3, #31
 8009b9c:	d506      	bpl.n	8009bac <__swbuf_r+0x6c>
 8009b9e:	2e0a      	cmp	r6, #10
 8009ba0:	d104      	bne.n	8009bac <__swbuf_r+0x6c>
 8009ba2:	4621      	mov	r1, r4
 8009ba4:	4628      	mov	r0, r5
 8009ba6:	f000 ff89 	bl	800aabc <_fflush_r>
 8009baa:	b988      	cbnz	r0, 8009bd0 <__swbuf_r+0x90>
 8009bac:	4638      	mov	r0, r7
 8009bae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009bb0:	4b0a      	ldr	r3, [pc, #40]	; (8009bdc <__swbuf_r+0x9c>)
 8009bb2:	429c      	cmp	r4, r3
 8009bb4:	d101      	bne.n	8009bba <__swbuf_r+0x7a>
 8009bb6:	68ac      	ldr	r4, [r5, #8]
 8009bb8:	e7cf      	b.n	8009b5a <__swbuf_r+0x1a>
 8009bba:	4b09      	ldr	r3, [pc, #36]	; (8009be0 <__swbuf_r+0xa0>)
 8009bbc:	429c      	cmp	r4, r3
 8009bbe:	bf08      	it	eq
 8009bc0:	68ec      	ldreq	r4, [r5, #12]
 8009bc2:	e7ca      	b.n	8009b5a <__swbuf_r+0x1a>
 8009bc4:	4621      	mov	r1, r4
 8009bc6:	4628      	mov	r0, r5
 8009bc8:	f000 f80c 	bl	8009be4 <__swsetup_r>
 8009bcc:	2800      	cmp	r0, #0
 8009bce:	d0cb      	beq.n	8009b68 <__swbuf_r+0x28>
 8009bd0:	f04f 37ff 	mov.w	r7, #4294967295
 8009bd4:	e7ea      	b.n	8009bac <__swbuf_r+0x6c>
 8009bd6:	bf00      	nop
 8009bd8:	0800d228 	.word	0x0800d228
 8009bdc:	0800d248 	.word	0x0800d248
 8009be0:	0800d208 	.word	0x0800d208

08009be4 <__swsetup_r>:
 8009be4:	4b32      	ldr	r3, [pc, #200]	; (8009cb0 <__swsetup_r+0xcc>)
 8009be6:	b570      	push	{r4, r5, r6, lr}
 8009be8:	681d      	ldr	r5, [r3, #0]
 8009bea:	4606      	mov	r6, r0
 8009bec:	460c      	mov	r4, r1
 8009bee:	b125      	cbz	r5, 8009bfa <__swsetup_r+0x16>
 8009bf0:	69ab      	ldr	r3, [r5, #24]
 8009bf2:	b913      	cbnz	r3, 8009bfa <__swsetup_r+0x16>
 8009bf4:	4628      	mov	r0, r5
 8009bf6:	f000 fff5 	bl	800abe4 <__sinit>
 8009bfa:	4b2e      	ldr	r3, [pc, #184]	; (8009cb4 <__swsetup_r+0xd0>)
 8009bfc:	429c      	cmp	r4, r3
 8009bfe:	d10f      	bne.n	8009c20 <__swsetup_r+0x3c>
 8009c00:	686c      	ldr	r4, [r5, #4]
 8009c02:	89a3      	ldrh	r3, [r4, #12]
 8009c04:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009c08:	0719      	lsls	r1, r3, #28
 8009c0a:	d42c      	bmi.n	8009c66 <__swsetup_r+0x82>
 8009c0c:	06dd      	lsls	r5, r3, #27
 8009c0e:	d411      	bmi.n	8009c34 <__swsetup_r+0x50>
 8009c10:	2309      	movs	r3, #9
 8009c12:	6033      	str	r3, [r6, #0]
 8009c14:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009c18:	81a3      	strh	r3, [r4, #12]
 8009c1a:	f04f 30ff 	mov.w	r0, #4294967295
 8009c1e:	e03e      	b.n	8009c9e <__swsetup_r+0xba>
 8009c20:	4b25      	ldr	r3, [pc, #148]	; (8009cb8 <__swsetup_r+0xd4>)
 8009c22:	429c      	cmp	r4, r3
 8009c24:	d101      	bne.n	8009c2a <__swsetup_r+0x46>
 8009c26:	68ac      	ldr	r4, [r5, #8]
 8009c28:	e7eb      	b.n	8009c02 <__swsetup_r+0x1e>
 8009c2a:	4b24      	ldr	r3, [pc, #144]	; (8009cbc <__swsetup_r+0xd8>)
 8009c2c:	429c      	cmp	r4, r3
 8009c2e:	bf08      	it	eq
 8009c30:	68ec      	ldreq	r4, [r5, #12]
 8009c32:	e7e6      	b.n	8009c02 <__swsetup_r+0x1e>
 8009c34:	0758      	lsls	r0, r3, #29
 8009c36:	d512      	bpl.n	8009c5e <__swsetup_r+0x7a>
 8009c38:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009c3a:	b141      	cbz	r1, 8009c4e <__swsetup_r+0x6a>
 8009c3c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009c40:	4299      	cmp	r1, r3
 8009c42:	d002      	beq.n	8009c4a <__swsetup_r+0x66>
 8009c44:	4630      	mov	r0, r6
 8009c46:	f001 fc7b 	bl	800b540 <_free_r>
 8009c4a:	2300      	movs	r3, #0
 8009c4c:	6363      	str	r3, [r4, #52]	; 0x34
 8009c4e:	89a3      	ldrh	r3, [r4, #12]
 8009c50:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009c54:	81a3      	strh	r3, [r4, #12]
 8009c56:	2300      	movs	r3, #0
 8009c58:	6063      	str	r3, [r4, #4]
 8009c5a:	6923      	ldr	r3, [r4, #16]
 8009c5c:	6023      	str	r3, [r4, #0]
 8009c5e:	89a3      	ldrh	r3, [r4, #12]
 8009c60:	f043 0308 	orr.w	r3, r3, #8
 8009c64:	81a3      	strh	r3, [r4, #12]
 8009c66:	6923      	ldr	r3, [r4, #16]
 8009c68:	b94b      	cbnz	r3, 8009c7e <__swsetup_r+0x9a>
 8009c6a:	89a3      	ldrh	r3, [r4, #12]
 8009c6c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009c70:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009c74:	d003      	beq.n	8009c7e <__swsetup_r+0x9a>
 8009c76:	4621      	mov	r1, r4
 8009c78:	4630      	mov	r0, r6
 8009c7a:	f001 f87d 	bl	800ad78 <__smakebuf_r>
 8009c7e:	89a0      	ldrh	r0, [r4, #12]
 8009c80:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009c84:	f010 0301 	ands.w	r3, r0, #1
 8009c88:	d00a      	beq.n	8009ca0 <__swsetup_r+0xbc>
 8009c8a:	2300      	movs	r3, #0
 8009c8c:	60a3      	str	r3, [r4, #8]
 8009c8e:	6963      	ldr	r3, [r4, #20]
 8009c90:	425b      	negs	r3, r3
 8009c92:	61a3      	str	r3, [r4, #24]
 8009c94:	6923      	ldr	r3, [r4, #16]
 8009c96:	b943      	cbnz	r3, 8009caa <__swsetup_r+0xc6>
 8009c98:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009c9c:	d1ba      	bne.n	8009c14 <__swsetup_r+0x30>
 8009c9e:	bd70      	pop	{r4, r5, r6, pc}
 8009ca0:	0781      	lsls	r1, r0, #30
 8009ca2:	bf58      	it	pl
 8009ca4:	6963      	ldrpl	r3, [r4, #20]
 8009ca6:	60a3      	str	r3, [r4, #8]
 8009ca8:	e7f4      	b.n	8009c94 <__swsetup_r+0xb0>
 8009caa:	2000      	movs	r0, #0
 8009cac:	e7f7      	b.n	8009c9e <__swsetup_r+0xba>
 8009cae:	bf00      	nop
 8009cb0:	20000024 	.word	0x20000024
 8009cb4:	0800d228 	.word	0x0800d228
 8009cb8:	0800d248 	.word	0x0800d248
 8009cbc:	0800d208 	.word	0x0800d208

08009cc0 <quorem>:
 8009cc0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009cc4:	6903      	ldr	r3, [r0, #16]
 8009cc6:	690c      	ldr	r4, [r1, #16]
 8009cc8:	42a3      	cmp	r3, r4
 8009cca:	4607      	mov	r7, r0
 8009ccc:	f2c0 8081 	blt.w	8009dd2 <quorem+0x112>
 8009cd0:	3c01      	subs	r4, #1
 8009cd2:	f101 0814 	add.w	r8, r1, #20
 8009cd6:	f100 0514 	add.w	r5, r0, #20
 8009cda:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009cde:	9301      	str	r3, [sp, #4]
 8009ce0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009ce4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009ce8:	3301      	adds	r3, #1
 8009cea:	429a      	cmp	r2, r3
 8009cec:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8009cf0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009cf4:	fbb2 f6f3 	udiv	r6, r2, r3
 8009cf8:	d331      	bcc.n	8009d5e <quorem+0x9e>
 8009cfa:	f04f 0e00 	mov.w	lr, #0
 8009cfe:	4640      	mov	r0, r8
 8009d00:	46ac      	mov	ip, r5
 8009d02:	46f2      	mov	sl, lr
 8009d04:	f850 2b04 	ldr.w	r2, [r0], #4
 8009d08:	b293      	uxth	r3, r2
 8009d0a:	fb06 e303 	mla	r3, r6, r3, lr
 8009d0e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8009d12:	b29b      	uxth	r3, r3
 8009d14:	ebaa 0303 	sub.w	r3, sl, r3
 8009d18:	0c12      	lsrs	r2, r2, #16
 8009d1a:	f8dc a000 	ldr.w	sl, [ip]
 8009d1e:	fb06 e202 	mla	r2, r6, r2, lr
 8009d22:	fa13 f38a 	uxtah	r3, r3, sl
 8009d26:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8009d2a:	fa1f fa82 	uxth.w	sl, r2
 8009d2e:	f8dc 2000 	ldr.w	r2, [ip]
 8009d32:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8009d36:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009d3a:	b29b      	uxth	r3, r3
 8009d3c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009d40:	4581      	cmp	r9, r0
 8009d42:	f84c 3b04 	str.w	r3, [ip], #4
 8009d46:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8009d4a:	d2db      	bcs.n	8009d04 <quorem+0x44>
 8009d4c:	f855 300b 	ldr.w	r3, [r5, fp]
 8009d50:	b92b      	cbnz	r3, 8009d5e <quorem+0x9e>
 8009d52:	9b01      	ldr	r3, [sp, #4]
 8009d54:	3b04      	subs	r3, #4
 8009d56:	429d      	cmp	r5, r3
 8009d58:	461a      	mov	r2, r3
 8009d5a:	d32e      	bcc.n	8009dba <quorem+0xfa>
 8009d5c:	613c      	str	r4, [r7, #16]
 8009d5e:	4638      	mov	r0, r7
 8009d60:	f001 fade 	bl	800b320 <__mcmp>
 8009d64:	2800      	cmp	r0, #0
 8009d66:	db24      	blt.n	8009db2 <quorem+0xf2>
 8009d68:	3601      	adds	r6, #1
 8009d6a:	4628      	mov	r0, r5
 8009d6c:	f04f 0c00 	mov.w	ip, #0
 8009d70:	f858 2b04 	ldr.w	r2, [r8], #4
 8009d74:	f8d0 e000 	ldr.w	lr, [r0]
 8009d78:	b293      	uxth	r3, r2
 8009d7a:	ebac 0303 	sub.w	r3, ip, r3
 8009d7e:	0c12      	lsrs	r2, r2, #16
 8009d80:	fa13 f38e 	uxtah	r3, r3, lr
 8009d84:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8009d88:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009d8c:	b29b      	uxth	r3, r3
 8009d8e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009d92:	45c1      	cmp	r9, r8
 8009d94:	f840 3b04 	str.w	r3, [r0], #4
 8009d98:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8009d9c:	d2e8      	bcs.n	8009d70 <quorem+0xb0>
 8009d9e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009da2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009da6:	b922      	cbnz	r2, 8009db2 <quorem+0xf2>
 8009da8:	3b04      	subs	r3, #4
 8009daa:	429d      	cmp	r5, r3
 8009dac:	461a      	mov	r2, r3
 8009dae:	d30a      	bcc.n	8009dc6 <quorem+0x106>
 8009db0:	613c      	str	r4, [r7, #16]
 8009db2:	4630      	mov	r0, r6
 8009db4:	b003      	add	sp, #12
 8009db6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009dba:	6812      	ldr	r2, [r2, #0]
 8009dbc:	3b04      	subs	r3, #4
 8009dbe:	2a00      	cmp	r2, #0
 8009dc0:	d1cc      	bne.n	8009d5c <quorem+0x9c>
 8009dc2:	3c01      	subs	r4, #1
 8009dc4:	e7c7      	b.n	8009d56 <quorem+0x96>
 8009dc6:	6812      	ldr	r2, [r2, #0]
 8009dc8:	3b04      	subs	r3, #4
 8009dca:	2a00      	cmp	r2, #0
 8009dcc:	d1f0      	bne.n	8009db0 <quorem+0xf0>
 8009dce:	3c01      	subs	r4, #1
 8009dd0:	e7eb      	b.n	8009daa <quorem+0xea>
 8009dd2:	2000      	movs	r0, #0
 8009dd4:	e7ee      	b.n	8009db4 <quorem+0xf4>
	...

08009dd8 <_dtoa_r>:
 8009dd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ddc:	ed2d 8b02 	vpush	{d8}
 8009de0:	ec57 6b10 	vmov	r6, r7, d0
 8009de4:	b095      	sub	sp, #84	; 0x54
 8009de6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8009de8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8009dec:	9105      	str	r1, [sp, #20]
 8009dee:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8009df2:	4604      	mov	r4, r0
 8009df4:	9209      	str	r2, [sp, #36]	; 0x24
 8009df6:	930f      	str	r3, [sp, #60]	; 0x3c
 8009df8:	b975      	cbnz	r5, 8009e18 <_dtoa_r+0x40>
 8009dfa:	2010      	movs	r0, #16
 8009dfc:	f000 fffc 	bl	800adf8 <malloc>
 8009e00:	4602      	mov	r2, r0
 8009e02:	6260      	str	r0, [r4, #36]	; 0x24
 8009e04:	b920      	cbnz	r0, 8009e10 <_dtoa_r+0x38>
 8009e06:	4bb2      	ldr	r3, [pc, #712]	; (800a0d0 <_dtoa_r+0x2f8>)
 8009e08:	21ea      	movs	r1, #234	; 0xea
 8009e0a:	48b2      	ldr	r0, [pc, #712]	; (800a0d4 <_dtoa_r+0x2fc>)
 8009e0c:	f001 ff5e 	bl	800bccc <__assert_func>
 8009e10:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8009e14:	6005      	str	r5, [r0, #0]
 8009e16:	60c5      	str	r5, [r0, #12]
 8009e18:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009e1a:	6819      	ldr	r1, [r3, #0]
 8009e1c:	b151      	cbz	r1, 8009e34 <_dtoa_r+0x5c>
 8009e1e:	685a      	ldr	r2, [r3, #4]
 8009e20:	604a      	str	r2, [r1, #4]
 8009e22:	2301      	movs	r3, #1
 8009e24:	4093      	lsls	r3, r2
 8009e26:	608b      	str	r3, [r1, #8]
 8009e28:	4620      	mov	r0, r4
 8009e2a:	f001 f83b 	bl	800aea4 <_Bfree>
 8009e2e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009e30:	2200      	movs	r2, #0
 8009e32:	601a      	str	r2, [r3, #0]
 8009e34:	1e3b      	subs	r3, r7, #0
 8009e36:	bfb9      	ittee	lt
 8009e38:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8009e3c:	9303      	strlt	r3, [sp, #12]
 8009e3e:	2300      	movge	r3, #0
 8009e40:	f8c8 3000 	strge.w	r3, [r8]
 8009e44:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8009e48:	4ba3      	ldr	r3, [pc, #652]	; (800a0d8 <_dtoa_r+0x300>)
 8009e4a:	bfbc      	itt	lt
 8009e4c:	2201      	movlt	r2, #1
 8009e4e:	f8c8 2000 	strlt.w	r2, [r8]
 8009e52:	ea33 0309 	bics.w	r3, r3, r9
 8009e56:	d11b      	bne.n	8009e90 <_dtoa_r+0xb8>
 8009e58:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009e5a:	f242 730f 	movw	r3, #9999	; 0x270f
 8009e5e:	6013      	str	r3, [r2, #0]
 8009e60:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009e64:	4333      	orrs	r3, r6
 8009e66:	f000 857a 	beq.w	800a95e <_dtoa_r+0xb86>
 8009e6a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009e6c:	b963      	cbnz	r3, 8009e88 <_dtoa_r+0xb0>
 8009e6e:	4b9b      	ldr	r3, [pc, #620]	; (800a0dc <_dtoa_r+0x304>)
 8009e70:	e024      	b.n	8009ebc <_dtoa_r+0xe4>
 8009e72:	4b9b      	ldr	r3, [pc, #620]	; (800a0e0 <_dtoa_r+0x308>)
 8009e74:	9300      	str	r3, [sp, #0]
 8009e76:	3308      	adds	r3, #8
 8009e78:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8009e7a:	6013      	str	r3, [r2, #0]
 8009e7c:	9800      	ldr	r0, [sp, #0]
 8009e7e:	b015      	add	sp, #84	; 0x54
 8009e80:	ecbd 8b02 	vpop	{d8}
 8009e84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e88:	4b94      	ldr	r3, [pc, #592]	; (800a0dc <_dtoa_r+0x304>)
 8009e8a:	9300      	str	r3, [sp, #0]
 8009e8c:	3303      	adds	r3, #3
 8009e8e:	e7f3      	b.n	8009e78 <_dtoa_r+0xa0>
 8009e90:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009e94:	2200      	movs	r2, #0
 8009e96:	ec51 0b17 	vmov	r0, r1, d7
 8009e9a:	2300      	movs	r3, #0
 8009e9c:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8009ea0:	f7f6 fe12 	bl	8000ac8 <__aeabi_dcmpeq>
 8009ea4:	4680      	mov	r8, r0
 8009ea6:	b158      	cbz	r0, 8009ec0 <_dtoa_r+0xe8>
 8009ea8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009eaa:	2301      	movs	r3, #1
 8009eac:	6013      	str	r3, [r2, #0]
 8009eae:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009eb0:	2b00      	cmp	r3, #0
 8009eb2:	f000 8551 	beq.w	800a958 <_dtoa_r+0xb80>
 8009eb6:	488b      	ldr	r0, [pc, #556]	; (800a0e4 <_dtoa_r+0x30c>)
 8009eb8:	6018      	str	r0, [r3, #0]
 8009eba:	1e43      	subs	r3, r0, #1
 8009ebc:	9300      	str	r3, [sp, #0]
 8009ebe:	e7dd      	b.n	8009e7c <_dtoa_r+0xa4>
 8009ec0:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8009ec4:	aa12      	add	r2, sp, #72	; 0x48
 8009ec6:	a913      	add	r1, sp, #76	; 0x4c
 8009ec8:	4620      	mov	r0, r4
 8009eca:	f001 facd 	bl	800b468 <__d2b>
 8009ece:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8009ed2:	4683      	mov	fp, r0
 8009ed4:	2d00      	cmp	r5, #0
 8009ed6:	d07c      	beq.n	8009fd2 <_dtoa_r+0x1fa>
 8009ed8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009eda:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8009ede:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009ee2:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8009ee6:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8009eea:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8009eee:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8009ef2:	4b7d      	ldr	r3, [pc, #500]	; (800a0e8 <_dtoa_r+0x310>)
 8009ef4:	2200      	movs	r2, #0
 8009ef6:	4630      	mov	r0, r6
 8009ef8:	4639      	mov	r1, r7
 8009efa:	f7f6 f9c5 	bl	8000288 <__aeabi_dsub>
 8009efe:	a36e      	add	r3, pc, #440	; (adr r3, 800a0b8 <_dtoa_r+0x2e0>)
 8009f00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f04:	f7f6 fb78 	bl	80005f8 <__aeabi_dmul>
 8009f08:	a36d      	add	r3, pc, #436	; (adr r3, 800a0c0 <_dtoa_r+0x2e8>)
 8009f0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f0e:	f7f6 f9bd 	bl	800028c <__adddf3>
 8009f12:	4606      	mov	r6, r0
 8009f14:	4628      	mov	r0, r5
 8009f16:	460f      	mov	r7, r1
 8009f18:	f7f6 fb04 	bl	8000524 <__aeabi_i2d>
 8009f1c:	a36a      	add	r3, pc, #424	; (adr r3, 800a0c8 <_dtoa_r+0x2f0>)
 8009f1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f22:	f7f6 fb69 	bl	80005f8 <__aeabi_dmul>
 8009f26:	4602      	mov	r2, r0
 8009f28:	460b      	mov	r3, r1
 8009f2a:	4630      	mov	r0, r6
 8009f2c:	4639      	mov	r1, r7
 8009f2e:	f7f6 f9ad 	bl	800028c <__adddf3>
 8009f32:	4606      	mov	r6, r0
 8009f34:	460f      	mov	r7, r1
 8009f36:	f7f6 fe0f 	bl	8000b58 <__aeabi_d2iz>
 8009f3a:	2200      	movs	r2, #0
 8009f3c:	4682      	mov	sl, r0
 8009f3e:	2300      	movs	r3, #0
 8009f40:	4630      	mov	r0, r6
 8009f42:	4639      	mov	r1, r7
 8009f44:	f7f6 fdca 	bl	8000adc <__aeabi_dcmplt>
 8009f48:	b148      	cbz	r0, 8009f5e <_dtoa_r+0x186>
 8009f4a:	4650      	mov	r0, sl
 8009f4c:	f7f6 faea 	bl	8000524 <__aeabi_i2d>
 8009f50:	4632      	mov	r2, r6
 8009f52:	463b      	mov	r3, r7
 8009f54:	f7f6 fdb8 	bl	8000ac8 <__aeabi_dcmpeq>
 8009f58:	b908      	cbnz	r0, 8009f5e <_dtoa_r+0x186>
 8009f5a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009f5e:	f1ba 0f16 	cmp.w	sl, #22
 8009f62:	d854      	bhi.n	800a00e <_dtoa_r+0x236>
 8009f64:	4b61      	ldr	r3, [pc, #388]	; (800a0ec <_dtoa_r+0x314>)
 8009f66:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8009f6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f6e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8009f72:	f7f6 fdb3 	bl	8000adc <__aeabi_dcmplt>
 8009f76:	2800      	cmp	r0, #0
 8009f78:	d04b      	beq.n	800a012 <_dtoa_r+0x23a>
 8009f7a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009f7e:	2300      	movs	r3, #0
 8009f80:	930e      	str	r3, [sp, #56]	; 0x38
 8009f82:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009f84:	1b5d      	subs	r5, r3, r5
 8009f86:	1e6b      	subs	r3, r5, #1
 8009f88:	9304      	str	r3, [sp, #16]
 8009f8a:	bf43      	ittte	mi
 8009f8c:	2300      	movmi	r3, #0
 8009f8e:	f1c5 0801 	rsbmi	r8, r5, #1
 8009f92:	9304      	strmi	r3, [sp, #16]
 8009f94:	f04f 0800 	movpl.w	r8, #0
 8009f98:	f1ba 0f00 	cmp.w	sl, #0
 8009f9c:	db3b      	blt.n	800a016 <_dtoa_r+0x23e>
 8009f9e:	9b04      	ldr	r3, [sp, #16]
 8009fa0:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8009fa4:	4453      	add	r3, sl
 8009fa6:	9304      	str	r3, [sp, #16]
 8009fa8:	2300      	movs	r3, #0
 8009faa:	9306      	str	r3, [sp, #24]
 8009fac:	9b05      	ldr	r3, [sp, #20]
 8009fae:	2b09      	cmp	r3, #9
 8009fb0:	d869      	bhi.n	800a086 <_dtoa_r+0x2ae>
 8009fb2:	2b05      	cmp	r3, #5
 8009fb4:	bfc4      	itt	gt
 8009fb6:	3b04      	subgt	r3, #4
 8009fb8:	9305      	strgt	r3, [sp, #20]
 8009fba:	9b05      	ldr	r3, [sp, #20]
 8009fbc:	f1a3 0302 	sub.w	r3, r3, #2
 8009fc0:	bfcc      	ite	gt
 8009fc2:	2500      	movgt	r5, #0
 8009fc4:	2501      	movle	r5, #1
 8009fc6:	2b03      	cmp	r3, #3
 8009fc8:	d869      	bhi.n	800a09e <_dtoa_r+0x2c6>
 8009fca:	e8df f003 	tbb	[pc, r3]
 8009fce:	4e2c      	.short	0x4e2c
 8009fd0:	5a4c      	.short	0x5a4c
 8009fd2:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8009fd6:	441d      	add	r5, r3
 8009fd8:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8009fdc:	2b20      	cmp	r3, #32
 8009fde:	bfc1      	itttt	gt
 8009fe0:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8009fe4:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8009fe8:	fa09 f303 	lslgt.w	r3, r9, r3
 8009fec:	fa26 f000 	lsrgt.w	r0, r6, r0
 8009ff0:	bfda      	itte	le
 8009ff2:	f1c3 0320 	rsble	r3, r3, #32
 8009ff6:	fa06 f003 	lslle.w	r0, r6, r3
 8009ffa:	4318      	orrgt	r0, r3
 8009ffc:	f7f6 fa82 	bl	8000504 <__aeabi_ui2d>
 800a000:	2301      	movs	r3, #1
 800a002:	4606      	mov	r6, r0
 800a004:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800a008:	3d01      	subs	r5, #1
 800a00a:	9310      	str	r3, [sp, #64]	; 0x40
 800a00c:	e771      	b.n	8009ef2 <_dtoa_r+0x11a>
 800a00e:	2301      	movs	r3, #1
 800a010:	e7b6      	b.n	8009f80 <_dtoa_r+0x1a8>
 800a012:	900e      	str	r0, [sp, #56]	; 0x38
 800a014:	e7b5      	b.n	8009f82 <_dtoa_r+0x1aa>
 800a016:	f1ca 0300 	rsb	r3, sl, #0
 800a01a:	9306      	str	r3, [sp, #24]
 800a01c:	2300      	movs	r3, #0
 800a01e:	eba8 080a 	sub.w	r8, r8, sl
 800a022:	930d      	str	r3, [sp, #52]	; 0x34
 800a024:	e7c2      	b.n	8009fac <_dtoa_r+0x1d4>
 800a026:	2300      	movs	r3, #0
 800a028:	9308      	str	r3, [sp, #32]
 800a02a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a02c:	2b00      	cmp	r3, #0
 800a02e:	dc39      	bgt.n	800a0a4 <_dtoa_r+0x2cc>
 800a030:	f04f 0901 	mov.w	r9, #1
 800a034:	f8cd 9004 	str.w	r9, [sp, #4]
 800a038:	464b      	mov	r3, r9
 800a03a:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800a03e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800a040:	2200      	movs	r2, #0
 800a042:	6042      	str	r2, [r0, #4]
 800a044:	2204      	movs	r2, #4
 800a046:	f102 0614 	add.w	r6, r2, #20
 800a04a:	429e      	cmp	r6, r3
 800a04c:	6841      	ldr	r1, [r0, #4]
 800a04e:	d92f      	bls.n	800a0b0 <_dtoa_r+0x2d8>
 800a050:	4620      	mov	r0, r4
 800a052:	f000 fee7 	bl	800ae24 <_Balloc>
 800a056:	9000      	str	r0, [sp, #0]
 800a058:	2800      	cmp	r0, #0
 800a05a:	d14b      	bne.n	800a0f4 <_dtoa_r+0x31c>
 800a05c:	4b24      	ldr	r3, [pc, #144]	; (800a0f0 <_dtoa_r+0x318>)
 800a05e:	4602      	mov	r2, r0
 800a060:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800a064:	e6d1      	b.n	8009e0a <_dtoa_r+0x32>
 800a066:	2301      	movs	r3, #1
 800a068:	e7de      	b.n	800a028 <_dtoa_r+0x250>
 800a06a:	2300      	movs	r3, #0
 800a06c:	9308      	str	r3, [sp, #32]
 800a06e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a070:	eb0a 0903 	add.w	r9, sl, r3
 800a074:	f109 0301 	add.w	r3, r9, #1
 800a078:	2b01      	cmp	r3, #1
 800a07a:	9301      	str	r3, [sp, #4]
 800a07c:	bfb8      	it	lt
 800a07e:	2301      	movlt	r3, #1
 800a080:	e7dd      	b.n	800a03e <_dtoa_r+0x266>
 800a082:	2301      	movs	r3, #1
 800a084:	e7f2      	b.n	800a06c <_dtoa_r+0x294>
 800a086:	2501      	movs	r5, #1
 800a088:	2300      	movs	r3, #0
 800a08a:	9305      	str	r3, [sp, #20]
 800a08c:	9508      	str	r5, [sp, #32]
 800a08e:	f04f 39ff 	mov.w	r9, #4294967295
 800a092:	2200      	movs	r2, #0
 800a094:	f8cd 9004 	str.w	r9, [sp, #4]
 800a098:	2312      	movs	r3, #18
 800a09a:	9209      	str	r2, [sp, #36]	; 0x24
 800a09c:	e7cf      	b.n	800a03e <_dtoa_r+0x266>
 800a09e:	2301      	movs	r3, #1
 800a0a0:	9308      	str	r3, [sp, #32]
 800a0a2:	e7f4      	b.n	800a08e <_dtoa_r+0x2b6>
 800a0a4:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800a0a8:	f8cd 9004 	str.w	r9, [sp, #4]
 800a0ac:	464b      	mov	r3, r9
 800a0ae:	e7c6      	b.n	800a03e <_dtoa_r+0x266>
 800a0b0:	3101      	adds	r1, #1
 800a0b2:	6041      	str	r1, [r0, #4]
 800a0b4:	0052      	lsls	r2, r2, #1
 800a0b6:	e7c6      	b.n	800a046 <_dtoa_r+0x26e>
 800a0b8:	636f4361 	.word	0x636f4361
 800a0bc:	3fd287a7 	.word	0x3fd287a7
 800a0c0:	8b60c8b3 	.word	0x8b60c8b3
 800a0c4:	3fc68a28 	.word	0x3fc68a28
 800a0c8:	509f79fb 	.word	0x509f79fb
 800a0cc:	3fd34413 	.word	0x3fd34413
 800a0d0:	0800d181 	.word	0x0800d181
 800a0d4:	0800d198 	.word	0x0800d198
 800a0d8:	7ff00000 	.word	0x7ff00000
 800a0dc:	0800d17d 	.word	0x0800d17d
 800a0e0:	0800d174 	.word	0x0800d174
 800a0e4:	0800d151 	.word	0x0800d151
 800a0e8:	3ff80000 	.word	0x3ff80000
 800a0ec:	0800d2f0 	.word	0x0800d2f0
 800a0f0:	0800d1f7 	.word	0x0800d1f7
 800a0f4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a0f6:	9a00      	ldr	r2, [sp, #0]
 800a0f8:	601a      	str	r2, [r3, #0]
 800a0fa:	9b01      	ldr	r3, [sp, #4]
 800a0fc:	2b0e      	cmp	r3, #14
 800a0fe:	f200 80ad 	bhi.w	800a25c <_dtoa_r+0x484>
 800a102:	2d00      	cmp	r5, #0
 800a104:	f000 80aa 	beq.w	800a25c <_dtoa_r+0x484>
 800a108:	f1ba 0f00 	cmp.w	sl, #0
 800a10c:	dd36      	ble.n	800a17c <_dtoa_r+0x3a4>
 800a10e:	4ac3      	ldr	r2, [pc, #780]	; (800a41c <_dtoa_r+0x644>)
 800a110:	f00a 030f 	and.w	r3, sl, #15
 800a114:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800a118:	ed93 7b00 	vldr	d7, [r3]
 800a11c:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800a120:	ea4f 172a 	mov.w	r7, sl, asr #4
 800a124:	eeb0 8a47 	vmov.f32	s16, s14
 800a128:	eef0 8a67 	vmov.f32	s17, s15
 800a12c:	d016      	beq.n	800a15c <_dtoa_r+0x384>
 800a12e:	4bbc      	ldr	r3, [pc, #752]	; (800a420 <_dtoa_r+0x648>)
 800a130:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800a134:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a138:	f7f6 fb88 	bl	800084c <__aeabi_ddiv>
 800a13c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a140:	f007 070f 	and.w	r7, r7, #15
 800a144:	2503      	movs	r5, #3
 800a146:	4eb6      	ldr	r6, [pc, #728]	; (800a420 <_dtoa_r+0x648>)
 800a148:	b957      	cbnz	r7, 800a160 <_dtoa_r+0x388>
 800a14a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a14e:	ec53 2b18 	vmov	r2, r3, d8
 800a152:	f7f6 fb7b 	bl	800084c <__aeabi_ddiv>
 800a156:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a15a:	e029      	b.n	800a1b0 <_dtoa_r+0x3d8>
 800a15c:	2502      	movs	r5, #2
 800a15e:	e7f2      	b.n	800a146 <_dtoa_r+0x36e>
 800a160:	07f9      	lsls	r1, r7, #31
 800a162:	d508      	bpl.n	800a176 <_dtoa_r+0x39e>
 800a164:	ec51 0b18 	vmov	r0, r1, d8
 800a168:	e9d6 2300 	ldrd	r2, r3, [r6]
 800a16c:	f7f6 fa44 	bl	80005f8 <__aeabi_dmul>
 800a170:	ec41 0b18 	vmov	d8, r0, r1
 800a174:	3501      	adds	r5, #1
 800a176:	107f      	asrs	r7, r7, #1
 800a178:	3608      	adds	r6, #8
 800a17a:	e7e5      	b.n	800a148 <_dtoa_r+0x370>
 800a17c:	f000 80a6 	beq.w	800a2cc <_dtoa_r+0x4f4>
 800a180:	f1ca 0600 	rsb	r6, sl, #0
 800a184:	4ba5      	ldr	r3, [pc, #660]	; (800a41c <_dtoa_r+0x644>)
 800a186:	4fa6      	ldr	r7, [pc, #664]	; (800a420 <_dtoa_r+0x648>)
 800a188:	f006 020f 	and.w	r2, r6, #15
 800a18c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a190:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a194:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800a198:	f7f6 fa2e 	bl	80005f8 <__aeabi_dmul>
 800a19c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a1a0:	1136      	asrs	r6, r6, #4
 800a1a2:	2300      	movs	r3, #0
 800a1a4:	2502      	movs	r5, #2
 800a1a6:	2e00      	cmp	r6, #0
 800a1a8:	f040 8085 	bne.w	800a2b6 <_dtoa_r+0x4de>
 800a1ac:	2b00      	cmp	r3, #0
 800a1ae:	d1d2      	bne.n	800a156 <_dtoa_r+0x37e>
 800a1b0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a1b2:	2b00      	cmp	r3, #0
 800a1b4:	f000 808c 	beq.w	800a2d0 <_dtoa_r+0x4f8>
 800a1b8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800a1bc:	4b99      	ldr	r3, [pc, #612]	; (800a424 <_dtoa_r+0x64c>)
 800a1be:	2200      	movs	r2, #0
 800a1c0:	4630      	mov	r0, r6
 800a1c2:	4639      	mov	r1, r7
 800a1c4:	f7f6 fc8a 	bl	8000adc <__aeabi_dcmplt>
 800a1c8:	2800      	cmp	r0, #0
 800a1ca:	f000 8081 	beq.w	800a2d0 <_dtoa_r+0x4f8>
 800a1ce:	9b01      	ldr	r3, [sp, #4]
 800a1d0:	2b00      	cmp	r3, #0
 800a1d2:	d07d      	beq.n	800a2d0 <_dtoa_r+0x4f8>
 800a1d4:	f1b9 0f00 	cmp.w	r9, #0
 800a1d8:	dd3c      	ble.n	800a254 <_dtoa_r+0x47c>
 800a1da:	f10a 33ff 	add.w	r3, sl, #4294967295
 800a1de:	9307      	str	r3, [sp, #28]
 800a1e0:	2200      	movs	r2, #0
 800a1e2:	4b91      	ldr	r3, [pc, #580]	; (800a428 <_dtoa_r+0x650>)
 800a1e4:	4630      	mov	r0, r6
 800a1e6:	4639      	mov	r1, r7
 800a1e8:	f7f6 fa06 	bl	80005f8 <__aeabi_dmul>
 800a1ec:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a1f0:	3501      	adds	r5, #1
 800a1f2:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 800a1f6:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800a1fa:	4628      	mov	r0, r5
 800a1fc:	f7f6 f992 	bl	8000524 <__aeabi_i2d>
 800a200:	4632      	mov	r2, r6
 800a202:	463b      	mov	r3, r7
 800a204:	f7f6 f9f8 	bl	80005f8 <__aeabi_dmul>
 800a208:	4b88      	ldr	r3, [pc, #544]	; (800a42c <_dtoa_r+0x654>)
 800a20a:	2200      	movs	r2, #0
 800a20c:	f7f6 f83e 	bl	800028c <__adddf3>
 800a210:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800a214:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a218:	9303      	str	r3, [sp, #12]
 800a21a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a21c:	2b00      	cmp	r3, #0
 800a21e:	d15c      	bne.n	800a2da <_dtoa_r+0x502>
 800a220:	4b83      	ldr	r3, [pc, #524]	; (800a430 <_dtoa_r+0x658>)
 800a222:	2200      	movs	r2, #0
 800a224:	4630      	mov	r0, r6
 800a226:	4639      	mov	r1, r7
 800a228:	f7f6 f82e 	bl	8000288 <__aeabi_dsub>
 800a22c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a230:	4606      	mov	r6, r0
 800a232:	460f      	mov	r7, r1
 800a234:	f7f6 fc70 	bl	8000b18 <__aeabi_dcmpgt>
 800a238:	2800      	cmp	r0, #0
 800a23a:	f040 8296 	bne.w	800a76a <_dtoa_r+0x992>
 800a23e:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800a242:	4630      	mov	r0, r6
 800a244:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a248:	4639      	mov	r1, r7
 800a24a:	f7f6 fc47 	bl	8000adc <__aeabi_dcmplt>
 800a24e:	2800      	cmp	r0, #0
 800a250:	f040 8288 	bne.w	800a764 <_dtoa_r+0x98c>
 800a254:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800a258:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a25c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a25e:	2b00      	cmp	r3, #0
 800a260:	f2c0 8158 	blt.w	800a514 <_dtoa_r+0x73c>
 800a264:	f1ba 0f0e 	cmp.w	sl, #14
 800a268:	f300 8154 	bgt.w	800a514 <_dtoa_r+0x73c>
 800a26c:	4b6b      	ldr	r3, [pc, #428]	; (800a41c <_dtoa_r+0x644>)
 800a26e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800a272:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a276:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a278:	2b00      	cmp	r3, #0
 800a27a:	f280 80e3 	bge.w	800a444 <_dtoa_r+0x66c>
 800a27e:	9b01      	ldr	r3, [sp, #4]
 800a280:	2b00      	cmp	r3, #0
 800a282:	f300 80df 	bgt.w	800a444 <_dtoa_r+0x66c>
 800a286:	f040 826d 	bne.w	800a764 <_dtoa_r+0x98c>
 800a28a:	4b69      	ldr	r3, [pc, #420]	; (800a430 <_dtoa_r+0x658>)
 800a28c:	2200      	movs	r2, #0
 800a28e:	4640      	mov	r0, r8
 800a290:	4649      	mov	r1, r9
 800a292:	f7f6 f9b1 	bl	80005f8 <__aeabi_dmul>
 800a296:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a29a:	f7f6 fc33 	bl	8000b04 <__aeabi_dcmpge>
 800a29e:	9e01      	ldr	r6, [sp, #4]
 800a2a0:	4637      	mov	r7, r6
 800a2a2:	2800      	cmp	r0, #0
 800a2a4:	f040 8243 	bne.w	800a72e <_dtoa_r+0x956>
 800a2a8:	9d00      	ldr	r5, [sp, #0]
 800a2aa:	2331      	movs	r3, #49	; 0x31
 800a2ac:	f805 3b01 	strb.w	r3, [r5], #1
 800a2b0:	f10a 0a01 	add.w	sl, sl, #1
 800a2b4:	e23f      	b.n	800a736 <_dtoa_r+0x95e>
 800a2b6:	07f2      	lsls	r2, r6, #31
 800a2b8:	d505      	bpl.n	800a2c6 <_dtoa_r+0x4ee>
 800a2ba:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a2be:	f7f6 f99b 	bl	80005f8 <__aeabi_dmul>
 800a2c2:	3501      	adds	r5, #1
 800a2c4:	2301      	movs	r3, #1
 800a2c6:	1076      	asrs	r6, r6, #1
 800a2c8:	3708      	adds	r7, #8
 800a2ca:	e76c      	b.n	800a1a6 <_dtoa_r+0x3ce>
 800a2cc:	2502      	movs	r5, #2
 800a2ce:	e76f      	b.n	800a1b0 <_dtoa_r+0x3d8>
 800a2d0:	9b01      	ldr	r3, [sp, #4]
 800a2d2:	f8cd a01c 	str.w	sl, [sp, #28]
 800a2d6:	930c      	str	r3, [sp, #48]	; 0x30
 800a2d8:	e78d      	b.n	800a1f6 <_dtoa_r+0x41e>
 800a2da:	9900      	ldr	r1, [sp, #0]
 800a2dc:	980c      	ldr	r0, [sp, #48]	; 0x30
 800a2de:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a2e0:	4b4e      	ldr	r3, [pc, #312]	; (800a41c <_dtoa_r+0x644>)
 800a2e2:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a2e6:	4401      	add	r1, r0
 800a2e8:	9102      	str	r1, [sp, #8]
 800a2ea:	9908      	ldr	r1, [sp, #32]
 800a2ec:	eeb0 8a47 	vmov.f32	s16, s14
 800a2f0:	eef0 8a67 	vmov.f32	s17, s15
 800a2f4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a2f8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800a2fc:	2900      	cmp	r1, #0
 800a2fe:	d045      	beq.n	800a38c <_dtoa_r+0x5b4>
 800a300:	494c      	ldr	r1, [pc, #304]	; (800a434 <_dtoa_r+0x65c>)
 800a302:	2000      	movs	r0, #0
 800a304:	f7f6 faa2 	bl	800084c <__aeabi_ddiv>
 800a308:	ec53 2b18 	vmov	r2, r3, d8
 800a30c:	f7f5 ffbc 	bl	8000288 <__aeabi_dsub>
 800a310:	9d00      	ldr	r5, [sp, #0]
 800a312:	ec41 0b18 	vmov	d8, r0, r1
 800a316:	4639      	mov	r1, r7
 800a318:	4630      	mov	r0, r6
 800a31a:	f7f6 fc1d 	bl	8000b58 <__aeabi_d2iz>
 800a31e:	900c      	str	r0, [sp, #48]	; 0x30
 800a320:	f7f6 f900 	bl	8000524 <__aeabi_i2d>
 800a324:	4602      	mov	r2, r0
 800a326:	460b      	mov	r3, r1
 800a328:	4630      	mov	r0, r6
 800a32a:	4639      	mov	r1, r7
 800a32c:	f7f5 ffac 	bl	8000288 <__aeabi_dsub>
 800a330:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a332:	3330      	adds	r3, #48	; 0x30
 800a334:	f805 3b01 	strb.w	r3, [r5], #1
 800a338:	ec53 2b18 	vmov	r2, r3, d8
 800a33c:	4606      	mov	r6, r0
 800a33e:	460f      	mov	r7, r1
 800a340:	f7f6 fbcc 	bl	8000adc <__aeabi_dcmplt>
 800a344:	2800      	cmp	r0, #0
 800a346:	d165      	bne.n	800a414 <_dtoa_r+0x63c>
 800a348:	4632      	mov	r2, r6
 800a34a:	463b      	mov	r3, r7
 800a34c:	4935      	ldr	r1, [pc, #212]	; (800a424 <_dtoa_r+0x64c>)
 800a34e:	2000      	movs	r0, #0
 800a350:	f7f5 ff9a 	bl	8000288 <__aeabi_dsub>
 800a354:	ec53 2b18 	vmov	r2, r3, d8
 800a358:	f7f6 fbc0 	bl	8000adc <__aeabi_dcmplt>
 800a35c:	2800      	cmp	r0, #0
 800a35e:	f040 80b9 	bne.w	800a4d4 <_dtoa_r+0x6fc>
 800a362:	9b02      	ldr	r3, [sp, #8]
 800a364:	429d      	cmp	r5, r3
 800a366:	f43f af75 	beq.w	800a254 <_dtoa_r+0x47c>
 800a36a:	4b2f      	ldr	r3, [pc, #188]	; (800a428 <_dtoa_r+0x650>)
 800a36c:	ec51 0b18 	vmov	r0, r1, d8
 800a370:	2200      	movs	r2, #0
 800a372:	f7f6 f941 	bl	80005f8 <__aeabi_dmul>
 800a376:	4b2c      	ldr	r3, [pc, #176]	; (800a428 <_dtoa_r+0x650>)
 800a378:	ec41 0b18 	vmov	d8, r0, r1
 800a37c:	2200      	movs	r2, #0
 800a37e:	4630      	mov	r0, r6
 800a380:	4639      	mov	r1, r7
 800a382:	f7f6 f939 	bl	80005f8 <__aeabi_dmul>
 800a386:	4606      	mov	r6, r0
 800a388:	460f      	mov	r7, r1
 800a38a:	e7c4      	b.n	800a316 <_dtoa_r+0x53e>
 800a38c:	ec51 0b17 	vmov	r0, r1, d7
 800a390:	f7f6 f932 	bl	80005f8 <__aeabi_dmul>
 800a394:	9b02      	ldr	r3, [sp, #8]
 800a396:	9d00      	ldr	r5, [sp, #0]
 800a398:	930c      	str	r3, [sp, #48]	; 0x30
 800a39a:	ec41 0b18 	vmov	d8, r0, r1
 800a39e:	4639      	mov	r1, r7
 800a3a0:	4630      	mov	r0, r6
 800a3a2:	f7f6 fbd9 	bl	8000b58 <__aeabi_d2iz>
 800a3a6:	9011      	str	r0, [sp, #68]	; 0x44
 800a3a8:	f7f6 f8bc 	bl	8000524 <__aeabi_i2d>
 800a3ac:	4602      	mov	r2, r0
 800a3ae:	460b      	mov	r3, r1
 800a3b0:	4630      	mov	r0, r6
 800a3b2:	4639      	mov	r1, r7
 800a3b4:	f7f5 ff68 	bl	8000288 <__aeabi_dsub>
 800a3b8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a3ba:	3330      	adds	r3, #48	; 0x30
 800a3bc:	f805 3b01 	strb.w	r3, [r5], #1
 800a3c0:	9b02      	ldr	r3, [sp, #8]
 800a3c2:	429d      	cmp	r5, r3
 800a3c4:	4606      	mov	r6, r0
 800a3c6:	460f      	mov	r7, r1
 800a3c8:	f04f 0200 	mov.w	r2, #0
 800a3cc:	d134      	bne.n	800a438 <_dtoa_r+0x660>
 800a3ce:	4b19      	ldr	r3, [pc, #100]	; (800a434 <_dtoa_r+0x65c>)
 800a3d0:	ec51 0b18 	vmov	r0, r1, d8
 800a3d4:	f7f5 ff5a 	bl	800028c <__adddf3>
 800a3d8:	4602      	mov	r2, r0
 800a3da:	460b      	mov	r3, r1
 800a3dc:	4630      	mov	r0, r6
 800a3de:	4639      	mov	r1, r7
 800a3e0:	f7f6 fb9a 	bl	8000b18 <__aeabi_dcmpgt>
 800a3e4:	2800      	cmp	r0, #0
 800a3e6:	d175      	bne.n	800a4d4 <_dtoa_r+0x6fc>
 800a3e8:	ec53 2b18 	vmov	r2, r3, d8
 800a3ec:	4911      	ldr	r1, [pc, #68]	; (800a434 <_dtoa_r+0x65c>)
 800a3ee:	2000      	movs	r0, #0
 800a3f0:	f7f5 ff4a 	bl	8000288 <__aeabi_dsub>
 800a3f4:	4602      	mov	r2, r0
 800a3f6:	460b      	mov	r3, r1
 800a3f8:	4630      	mov	r0, r6
 800a3fa:	4639      	mov	r1, r7
 800a3fc:	f7f6 fb6e 	bl	8000adc <__aeabi_dcmplt>
 800a400:	2800      	cmp	r0, #0
 800a402:	f43f af27 	beq.w	800a254 <_dtoa_r+0x47c>
 800a406:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a408:	1e6b      	subs	r3, r5, #1
 800a40a:	930c      	str	r3, [sp, #48]	; 0x30
 800a40c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800a410:	2b30      	cmp	r3, #48	; 0x30
 800a412:	d0f8      	beq.n	800a406 <_dtoa_r+0x62e>
 800a414:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800a418:	e04a      	b.n	800a4b0 <_dtoa_r+0x6d8>
 800a41a:	bf00      	nop
 800a41c:	0800d2f0 	.word	0x0800d2f0
 800a420:	0800d2c8 	.word	0x0800d2c8
 800a424:	3ff00000 	.word	0x3ff00000
 800a428:	40240000 	.word	0x40240000
 800a42c:	401c0000 	.word	0x401c0000
 800a430:	40140000 	.word	0x40140000
 800a434:	3fe00000 	.word	0x3fe00000
 800a438:	4baf      	ldr	r3, [pc, #700]	; (800a6f8 <_dtoa_r+0x920>)
 800a43a:	f7f6 f8dd 	bl	80005f8 <__aeabi_dmul>
 800a43e:	4606      	mov	r6, r0
 800a440:	460f      	mov	r7, r1
 800a442:	e7ac      	b.n	800a39e <_dtoa_r+0x5c6>
 800a444:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800a448:	9d00      	ldr	r5, [sp, #0]
 800a44a:	4642      	mov	r2, r8
 800a44c:	464b      	mov	r3, r9
 800a44e:	4630      	mov	r0, r6
 800a450:	4639      	mov	r1, r7
 800a452:	f7f6 f9fb 	bl	800084c <__aeabi_ddiv>
 800a456:	f7f6 fb7f 	bl	8000b58 <__aeabi_d2iz>
 800a45a:	9002      	str	r0, [sp, #8]
 800a45c:	f7f6 f862 	bl	8000524 <__aeabi_i2d>
 800a460:	4642      	mov	r2, r8
 800a462:	464b      	mov	r3, r9
 800a464:	f7f6 f8c8 	bl	80005f8 <__aeabi_dmul>
 800a468:	4602      	mov	r2, r0
 800a46a:	460b      	mov	r3, r1
 800a46c:	4630      	mov	r0, r6
 800a46e:	4639      	mov	r1, r7
 800a470:	f7f5 ff0a 	bl	8000288 <__aeabi_dsub>
 800a474:	9e02      	ldr	r6, [sp, #8]
 800a476:	9f01      	ldr	r7, [sp, #4]
 800a478:	3630      	adds	r6, #48	; 0x30
 800a47a:	f805 6b01 	strb.w	r6, [r5], #1
 800a47e:	9e00      	ldr	r6, [sp, #0]
 800a480:	1bae      	subs	r6, r5, r6
 800a482:	42b7      	cmp	r7, r6
 800a484:	4602      	mov	r2, r0
 800a486:	460b      	mov	r3, r1
 800a488:	d137      	bne.n	800a4fa <_dtoa_r+0x722>
 800a48a:	f7f5 feff 	bl	800028c <__adddf3>
 800a48e:	4642      	mov	r2, r8
 800a490:	464b      	mov	r3, r9
 800a492:	4606      	mov	r6, r0
 800a494:	460f      	mov	r7, r1
 800a496:	f7f6 fb3f 	bl	8000b18 <__aeabi_dcmpgt>
 800a49a:	b9c8      	cbnz	r0, 800a4d0 <_dtoa_r+0x6f8>
 800a49c:	4642      	mov	r2, r8
 800a49e:	464b      	mov	r3, r9
 800a4a0:	4630      	mov	r0, r6
 800a4a2:	4639      	mov	r1, r7
 800a4a4:	f7f6 fb10 	bl	8000ac8 <__aeabi_dcmpeq>
 800a4a8:	b110      	cbz	r0, 800a4b0 <_dtoa_r+0x6d8>
 800a4aa:	9b02      	ldr	r3, [sp, #8]
 800a4ac:	07d9      	lsls	r1, r3, #31
 800a4ae:	d40f      	bmi.n	800a4d0 <_dtoa_r+0x6f8>
 800a4b0:	4620      	mov	r0, r4
 800a4b2:	4659      	mov	r1, fp
 800a4b4:	f000 fcf6 	bl	800aea4 <_Bfree>
 800a4b8:	2300      	movs	r3, #0
 800a4ba:	702b      	strb	r3, [r5, #0]
 800a4bc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a4be:	f10a 0001 	add.w	r0, sl, #1
 800a4c2:	6018      	str	r0, [r3, #0]
 800a4c4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a4c6:	2b00      	cmp	r3, #0
 800a4c8:	f43f acd8 	beq.w	8009e7c <_dtoa_r+0xa4>
 800a4cc:	601d      	str	r5, [r3, #0]
 800a4ce:	e4d5      	b.n	8009e7c <_dtoa_r+0xa4>
 800a4d0:	f8cd a01c 	str.w	sl, [sp, #28]
 800a4d4:	462b      	mov	r3, r5
 800a4d6:	461d      	mov	r5, r3
 800a4d8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a4dc:	2a39      	cmp	r2, #57	; 0x39
 800a4de:	d108      	bne.n	800a4f2 <_dtoa_r+0x71a>
 800a4e0:	9a00      	ldr	r2, [sp, #0]
 800a4e2:	429a      	cmp	r2, r3
 800a4e4:	d1f7      	bne.n	800a4d6 <_dtoa_r+0x6fe>
 800a4e6:	9a07      	ldr	r2, [sp, #28]
 800a4e8:	9900      	ldr	r1, [sp, #0]
 800a4ea:	3201      	adds	r2, #1
 800a4ec:	9207      	str	r2, [sp, #28]
 800a4ee:	2230      	movs	r2, #48	; 0x30
 800a4f0:	700a      	strb	r2, [r1, #0]
 800a4f2:	781a      	ldrb	r2, [r3, #0]
 800a4f4:	3201      	adds	r2, #1
 800a4f6:	701a      	strb	r2, [r3, #0]
 800a4f8:	e78c      	b.n	800a414 <_dtoa_r+0x63c>
 800a4fa:	4b7f      	ldr	r3, [pc, #508]	; (800a6f8 <_dtoa_r+0x920>)
 800a4fc:	2200      	movs	r2, #0
 800a4fe:	f7f6 f87b 	bl	80005f8 <__aeabi_dmul>
 800a502:	2200      	movs	r2, #0
 800a504:	2300      	movs	r3, #0
 800a506:	4606      	mov	r6, r0
 800a508:	460f      	mov	r7, r1
 800a50a:	f7f6 fadd 	bl	8000ac8 <__aeabi_dcmpeq>
 800a50e:	2800      	cmp	r0, #0
 800a510:	d09b      	beq.n	800a44a <_dtoa_r+0x672>
 800a512:	e7cd      	b.n	800a4b0 <_dtoa_r+0x6d8>
 800a514:	9a08      	ldr	r2, [sp, #32]
 800a516:	2a00      	cmp	r2, #0
 800a518:	f000 80c4 	beq.w	800a6a4 <_dtoa_r+0x8cc>
 800a51c:	9a05      	ldr	r2, [sp, #20]
 800a51e:	2a01      	cmp	r2, #1
 800a520:	f300 80a8 	bgt.w	800a674 <_dtoa_r+0x89c>
 800a524:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800a526:	2a00      	cmp	r2, #0
 800a528:	f000 80a0 	beq.w	800a66c <_dtoa_r+0x894>
 800a52c:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800a530:	9e06      	ldr	r6, [sp, #24]
 800a532:	4645      	mov	r5, r8
 800a534:	9a04      	ldr	r2, [sp, #16]
 800a536:	2101      	movs	r1, #1
 800a538:	441a      	add	r2, r3
 800a53a:	4620      	mov	r0, r4
 800a53c:	4498      	add	r8, r3
 800a53e:	9204      	str	r2, [sp, #16]
 800a540:	f000 fd6c 	bl	800b01c <__i2b>
 800a544:	4607      	mov	r7, r0
 800a546:	2d00      	cmp	r5, #0
 800a548:	dd0b      	ble.n	800a562 <_dtoa_r+0x78a>
 800a54a:	9b04      	ldr	r3, [sp, #16]
 800a54c:	2b00      	cmp	r3, #0
 800a54e:	dd08      	ble.n	800a562 <_dtoa_r+0x78a>
 800a550:	42ab      	cmp	r3, r5
 800a552:	9a04      	ldr	r2, [sp, #16]
 800a554:	bfa8      	it	ge
 800a556:	462b      	movge	r3, r5
 800a558:	eba8 0803 	sub.w	r8, r8, r3
 800a55c:	1aed      	subs	r5, r5, r3
 800a55e:	1ad3      	subs	r3, r2, r3
 800a560:	9304      	str	r3, [sp, #16]
 800a562:	9b06      	ldr	r3, [sp, #24]
 800a564:	b1fb      	cbz	r3, 800a5a6 <_dtoa_r+0x7ce>
 800a566:	9b08      	ldr	r3, [sp, #32]
 800a568:	2b00      	cmp	r3, #0
 800a56a:	f000 809f 	beq.w	800a6ac <_dtoa_r+0x8d4>
 800a56e:	2e00      	cmp	r6, #0
 800a570:	dd11      	ble.n	800a596 <_dtoa_r+0x7be>
 800a572:	4639      	mov	r1, r7
 800a574:	4632      	mov	r2, r6
 800a576:	4620      	mov	r0, r4
 800a578:	f000 fe0c 	bl	800b194 <__pow5mult>
 800a57c:	465a      	mov	r2, fp
 800a57e:	4601      	mov	r1, r0
 800a580:	4607      	mov	r7, r0
 800a582:	4620      	mov	r0, r4
 800a584:	f000 fd60 	bl	800b048 <__multiply>
 800a588:	4659      	mov	r1, fp
 800a58a:	9007      	str	r0, [sp, #28]
 800a58c:	4620      	mov	r0, r4
 800a58e:	f000 fc89 	bl	800aea4 <_Bfree>
 800a592:	9b07      	ldr	r3, [sp, #28]
 800a594:	469b      	mov	fp, r3
 800a596:	9b06      	ldr	r3, [sp, #24]
 800a598:	1b9a      	subs	r2, r3, r6
 800a59a:	d004      	beq.n	800a5a6 <_dtoa_r+0x7ce>
 800a59c:	4659      	mov	r1, fp
 800a59e:	4620      	mov	r0, r4
 800a5a0:	f000 fdf8 	bl	800b194 <__pow5mult>
 800a5a4:	4683      	mov	fp, r0
 800a5a6:	2101      	movs	r1, #1
 800a5a8:	4620      	mov	r0, r4
 800a5aa:	f000 fd37 	bl	800b01c <__i2b>
 800a5ae:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a5b0:	2b00      	cmp	r3, #0
 800a5b2:	4606      	mov	r6, r0
 800a5b4:	dd7c      	ble.n	800a6b0 <_dtoa_r+0x8d8>
 800a5b6:	461a      	mov	r2, r3
 800a5b8:	4601      	mov	r1, r0
 800a5ba:	4620      	mov	r0, r4
 800a5bc:	f000 fdea 	bl	800b194 <__pow5mult>
 800a5c0:	9b05      	ldr	r3, [sp, #20]
 800a5c2:	2b01      	cmp	r3, #1
 800a5c4:	4606      	mov	r6, r0
 800a5c6:	dd76      	ble.n	800a6b6 <_dtoa_r+0x8de>
 800a5c8:	2300      	movs	r3, #0
 800a5ca:	9306      	str	r3, [sp, #24]
 800a5cc:	6933      	ldr	r3, [r6, #16]
 800a5ce:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800a5d2:	6918      	ldr	r0, [r3, #16]
 800a5d4:	f000 fcd2 	bl	800af7c <__hi0bits>
 800a5d8:	f1c0 0020 	rsb	r0, r0, #32
 800a5dc:	9b04      	ldr	r3, [sp, #16]
 800a5de:	4418      	add	r0, r3
 800a5e0:	f010 001f 	ands.w	r0, r0, #31
 800a5e4:	f000 8086 	beq.w	800a6f4 <_dtoa_r+0x91c>
 800a5e8:	f1c0 0320 	rsb	r3, r0, #32
 800a5ec:	2b04      	cmp	r3, #4
 800a5ee:	dd7f      	ble.n	800a6f0 <_dtoa_r+0x918>
 800a5f0:	f1c0 001c 	rsb	r0, r0, #28
 800a5f4:	9b04      	ldr	r3, [sp, #16]
 800a5f6:	4403      	add	r3, r0
 800a5f8:	4480      	add	r8, r0
 800a5fa:	4405      	add	r5, r0
 800a5fc:	9304      	str	r3, [sp, #16]
 800a5fe:	f1b8 0f00 	cmp.w	r8, #0
 800a602:	dd05      	ble.n	800a610 <_dtoa_r+0x838>
 800a604:	4659      	mov	r1, fp
 800a606:	4642      	mov	r2, r8
 800a608:	4620      	mov	r0, r4
 800a60a:	f000 fe1d 	bl	800b248 <__lshift>
 800a60e:	4683      	mov	fp, r0
 800a610:	9b04      	ldr	r3, [sp, #16]
 800a612:	2b00      	cmp	r3, #0
 800a614:	dd05      	ble.n	800a622 <_dtoa_r+0x84a>
 800a616:	4631      	mov	r1, r6
 800a618:	461a      	mov	r2, r3
 800a61a:	4620      	mov	r0, r4
 800a61c:	f000 fe14 	bl	800b248 <__lshift>
 800a620:	4606      	mov	r6, r0
 800a622:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a624:	2b00      	cmp	r3, #0
 800a626:	d069      	beq.n	800a6fc <_dtoa_r+0x924>
 800a628:	4631      	mov	r1, r6
 800a62a:	4658      	mov	r0, fp
 800a62c:	f000 fe78 	bl	800b320 <__mcmp>
 800a630:	2800      	cmp	r0, #0
 800a632:	da63      	bge.n	800a6fc <_dtoa_r+0x924>
 800a634:	2300      	movs	r3, #0
 800a636:	4659      	mov	r1, fp
 800a638:	220a      	movs	r2, #10
 800a63a:	4620      	mov	r0, r4
 800a63c:	f000 fc54 	bl	800aee8 <__multadd>
 800a640:	9b08      	ldr	r3, [sp, #32]
 800a642:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a646:	4683      	mov	fp, r0
 800a648:	2b00      	cmp	r3, #0
 800a64a:	f000 818f 	beq.w	800a96c <_dtoa_r+0xb94>
 800a64e:	4639      	mov	r1, r7
 800a650:	2300      	movs	r3, #0
 800a652:	220a      	movs	r2, #10
 800a654:	4620      	mov	r0, r4
 800a656:	f000 fc47 	bl	800aee8 <__multadd>
 800a65a:	f1b9 0f00 	cmp.w	r9, #0
 800a65e:	4607      	mov	r7, r0
 800a660:	f300 808e 	bgt.w	800a780 <_dtoa_r+0x9a8>
 800a664:	9b05      	ldr	r3, [sp, #20]
 800a666:	2b02      	cmp	r3, #2
 800a668:	dc50      	bgt.n	800a70c <_dtoa_r+0x934>
 800a66a:	e089      	b.n	800a780 <_dtoa_r+0x9a8>
 800a66c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a66e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800a672:	e75d      	b.n	800a530 <_dtoa_r+0x758>
 800a674:	9b01      	ldr	r3, [sp, #4]
 800a676:	1e5e      	subs	r6, r3, #1
 800a678:	9b06      	ldr	r3, [sp, #24]
 800a67a:	42b3      	cmp	r3, r6
 800a67c:	bfbf      	itttt	lt
 800a67e:	9b06      	ldrlt	r3, [sp, #24]
 800a680:	9606      	strlt	r6, [sp, #24]
 800a682:	1af2      	sublt	r2, r6, r3
 800a684:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 800a686:	bfb6      	itet	lt
 800a688:	189b      	addlt	r3, r3, r2
 800a68a:	1b9e      	subge	r6, r3, r6
 800a68c:	930d      	strlt	r3, [sp, #52]	; 0x34
 800a68e:	9b01      	ldr	r3, [sp, #4]
 800a690:	bfb8      	it	lt
 800a692:	2600      	movlt	r6, #0
 800a694:	2b00      	cmp	r3, #0
 800a696:	bfb5      	itete	lt
 800a698:	eba8 0503 	sublt.w	r5, r8, r3
 800a69c:	9b01      	ldrge	r3, [sp, #4]
 800a69e:	2300      	movlt	r3, #0
 800a6a0:	4645      	movge	r5, r8
 800a6a2:	e747      	b.n	800a534 <_dtoa_r+0x75c>
 800a6a4:	9e06      	ldr	r6, [sp, #24]
 800a6a6:	9f08      	ldr	r7, [sp, #32]
 800a6a8:	4645      	mov	r5, r8
 800a6aa:	e74c      	b.n	800a546 <_dtoa_r+0x76e>
 800a6ac:	9a06      	ldr	r2, [sp, #24]
 800a6ae:	e775      	b.n	800a59c <_dtoa_r+0x7c4>
 800a6b0:	9b05      	ldr	r3, [sp, #20]
 800a6b2:	2b01      	cmp	r3, #1
 800a6b4:	dc18      	bgt.n	800a6e8 <_dtoa_r+0x910>
 800a6b6:	9b02      	ldr	r3, [sp, #8]
 800a6b8:	b9b3      	cbnz	r3, 800a6e8 <_dtoa_r+0x910>
 800a6ba:	9b03      	ldr	r3, [sp, #12]
 800a6bc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a6c0:	b9a3      	cbnz	r3, 800a6ec <_dtoa_r+0x914>
 800a6c2:	9b03      	ldr	r3, [sp, #12]
 800a6c4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a6c8:	0d1b      	lsrs	r3, r3, #20
 800a6ca:	051b      	lsls	r3, r3, #20
 800a6cc:	b12b      	cbz	r3, 800a6da <_dtoa_r+0x902>
 800a6ce:	9b04      	ldr	r3, [sp, #16]
 800a6d0:	3301      	adds	r3, #1
 800a6d2:	9304      	str	r3, [sp, #16]
 800a6d4:	f108 0801 	add.w	r8, r8, #1
 800a6d8:	2301      	movs	r3, #1
 800a6da:	9306      	str	r3, [sp, #24]
 800a6dc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a6de:	2b00      	cmp	r3, #0
 800a6e0:	f47f af74 	bne.w	800a5cc <_dtoa_r+0x7f4>
 800a6e4:	2001      	movs	r0, #1
 800a6e6:	e779      	b.n	800a5dc <_dtoa_r+0x804>
 800a6e8:	2300      	movs	r3, #0
 800a6ea:	e7f6      	b.n	800a6da <_dtoa_r+0x902>
 800a6ec:	9b02      	ldr	r3, [sp, #8]
 800a6ee:	e7f4      	b.n	800a6da <_dtoa_r+0x902>
 800a6f0:	d085      	beq.n	800a5fe <_dtoa_r+0x826>
 800a6f2:	4618      	mov	r0, r3
 800a6f4:	301c      	adds	r0, #28
 800a6f6:	e77d      	b.n	800a5f4 <_dtoa_r+0x81c>
 800a6f8:	40240000 	.word	0x40240000
 800a6fc:	9b01      	ldr	r3, [sp, #4]
 800a6fe:	2b00      	cmp	r3, #0
 800a700:	dc38      	bgt.n	800a774 <_dtoa_r+0x99c>
 800a702:	9b05      	ldr	r3, [sp, #20]
 800a704:	2b02      	cmp	r3, #2
 800a706:	dd35      	ble.n	800a774 <_dtoa_r+0x99c>
 800a708:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800a70c:	f1b9 0f00 	cmp.w	r9, #0
 800a710:	d10d      	bne.n	800a72e <_dtoa_r+0x956>
 800a712:	4631      	mov	r1, r6
 800a714:	464b      	mov	r3, r9
 800a716:	2205      	movs	r2, #5
 800a718:	4620      	mov	r0, r4
 800a71a:	f000 fbe5 	bl	800aee8 <__multadd>
 800a71e:	4601      	mov	r1, r0
 800a720:	4606      	mov	r6, r0
 800a722:	4658      	mov	r0, fp
 800a724:	f000 fdfc 	bl	800b320 <__mcmp>
 800a728:	2800      	cmp	r0, #0
 800a72a:	f73f adbd 	bgt.w	800a2a8 <_dtoa_r+0x4d0>
 800a72e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a730:	9d00      	ldr	r5, [sp, #0]
 800a732:	ea6f 0a03 	mvn.w	sl, r3
 800a736:	f04f 0800 	mov.w	r8, #0
 800a73a:	4631      	mov	r1, r6
 800a73c:	4620      	mov	r0, r4
 800a73e:	f000 fbb1 	bl	800aea4 <_Bfree>
 800a742:	2f00      	cmp	r7, #0
 800a744:	f43f aeb4 	beq.w	800a4b0 <_dtoa_r+0x6d8>
 800a748:	f1b8 0f00 	cmp.w	r8, #0
 800a74c:	d005      	beq.n	800a75a <_dtoa_r+0x982>
 800a74e:	45b8      	cmp	r8, r7
 800a750:	d003      	beq.n	800a75a <_dtoa_r+0x982>
 800a752:	4641      	mov	r1, r8
 800a754:	4620      	mov	r0, r4
 800a756:	f000 fba5 	bl	800aea4 <_Bfree>
 800a75a:	4639      	mov	r1, r7
 800a75c:	4620      	mov	r0, r4
 800a75e:	f000 fba1 	bl	800aea4 <_Bfree>
 800a762:	e6a5      	b.n	800a4b0 <_dtoa_r+0x6d8>
 800a764:	2600      	movs	r6, #0
 800a766:	4637      	mov	r7, r6
 800a768:	e7e1      	b.n	800a72e <_dtoa_r+0x956>
 800a76a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800a76c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800a770:	4637      	mov	r7, r6
 800a772:	e599      	b.n	800a2a8 <_dtoa_r+0x4d0>
 800a774:	9b08      	ldr	r3, [sp, #32]
 800a776:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800a77a:	2b00      	cmp	r3, #0
 800a77c:	f000 80fd 	beq.w	800a97a <_dtoa_r+0xba2>
 800a780:	2d00      	cmp	r5, #0
 800a782:	dd05      	ble.n	800a790 <_dtoa_r+0x9b8>
 800a784:	4639      	mov	r1, r7
 800a786:	462a      	mov	r2, r5
 800a788:	4620      	mov	r0, r4
 800a78a:	f000 fd5d 	bl	800b248 <__lshift>
 800a78e:	4607      	mov	r7, r0
 800a790:	9b06      	ldr	r3, [sp, #24]
 800a792:	2b00      	cmp	r3, #0
 800a794:	d05c      	beq.n	800a850 <_dtoa_r+0xa78>
 800a796:	6879      	ldr	r1, [r7, #4]
 800a798:	4620      	mov	r0, r4
 800a79a:	f000 fb43 	bl	800ae24 <_Balloc>
 800a79e:	4605      	mov	r5, r0
 800a7a0:	b928      	cbnz	r0, 800a7ae <_dtoa_r+0x9d6>
 800a7a2:	4b80      	ldr	r3, [pc, #512]	; (800a9a4 <_dtoa_r+0xbcc>)
 800a7a4:	4602      	mov	r2, r0
 800a7a6:	f240 21ea 	movw	r1, #746	; 0x2ea
 800a7aa:	f7ff bb2e 	b.w	8009e0a <_dtoa_r+0x32>
 800a7ae:	693a      	ldr	r2, [r7, #16]
 800a7b0:	3202      	adds	r2, #2
 800a7b2:	0092      	lsls	r2, r2, #2
 800a7b4:	f107 010c 	add.w	r1, r7, #12
 800a7b8:	300c      	adds	r0, #12
 800a7ba:	f000 fb25 	bl	800ae08 <memcpy>
 800a7be:	2201      	movs	r2, #1
 800a7c0:	4629      	mov	r1, r5
 800a7c2:	4620      	mov	r0, r4
 800a7c4:	f000 fd40 	bl	800b248 <__lshift>
 800a7c8:	9b00      	ldr	r3, [sp, #0]
 800a7ca:	3301      	adds	r3, #1
 800a7cc:	9301      	str	r3, [sp, #4]
 800a7ce:	9b00      	ldr	r3, [sp, #0]
 800a7d0:	444b      	add	r3, r9
 800a7d2:	9307      	str	r3, [sp, #28]
 800a7d4:	9b02      	ldr	r3, [sp, #8]
 800a7d6:	f003 0301 	and.w	r3, r3, #1
 800a7da:	46b8      	mov	r8, r7
 800a7dc:	9306      	str	r3, [sp, #24]
 800a7de:	4607      	mov	r7, r0
 800a7e0:	9b01      	ldr	r3, [sp, #4]
 800a7e2:	4631      	mov	r1, r6
 800a7e4:	3b01      	subs	r3, #1
 800a7e6:	4658      	mov	r0, fp
 800a7e8:	9302      	str	r3, [sp, #8]
 800a7ea:	f7ff fa69 	bl	8009cc0 <quorem>
 800a7ee:	4603      	mov	r3, r0
 800a7f0:	3330      	adds	r3, #48	; 0x30
 800a7f2:	9004      	str	r0, [sp, #16]
 800a7f4:	4641      	mov	r1, r8
 800a7f6:	4658      	mov	r0, fp
 800a7f8:	9308      	str	r3, [sp, #32]
 800a7fa:	f000 fd91 	bl	800b320 <__mcmp>
 800a7fe:	463a      	mov	r2, r7
 800a800:	4681      	mov	r9, r0
 800a802:	4631      	mov	r1, r6
 800a804:	4620      	mov	r0, r4
 800a806:	f000 fda7 	bl	800b358 <__mdiff>
 800a80a:	68c2      	ldr	r2, [r0, #12]
 800a80c:	9b08      	ldr	r3, [sp, #32]
 800a80e:	4605      	mov	r5, r0
 800a810:	bb02      	cbnz	r2, 800a854 <_dtoa_r+0xa7c>
 800a812:	4601      	mov	r1, r0
 800a814:	4658      	mov	r0, fp
 800a816:	f000 fd83 	bl	800b320 <__mcmp>
 800a81a:	9b08      	ldr	r3, [sp, #32]
 800a81c:	4602      	mov	r2, r0
 800a81e:	4629      	mov	r1, r5
 800a820:	4620      	mov	r0, r4
 800a822:	e9cd 3208 	strd	r3, r2, [sp, #32]
 800a826:	f000 fb3d 	bl	800aea4 <_Bfree>
 800a82a:	9b05      	ldr	r3, [sp, #20]
 800a82c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a82e:	9d01      	ldr	r5, [sp, #4]
 800a830:	ea43 0102 	orr.w	r1, r3, r2
 800a834:	9b06      	ldr	r3, [sp, #24]
 800a836:	430b      	orrs	r3, r1
 800a838:	9b08      	ldr	r3, [sp, #32]
 800a83a:	d10d      	bne.n	800a858 <_dtoa_r+0xa80>
 800a83c:	2b39      	cmp	r3, #57	; 0x39
 800a83e:	d029      	beq.n	800a894 <_dtoa_r+0xabc>
 800a840:	f1b9 0f00 	cmp.w	r9, #0
 800a844:	dd01      	ble.n	800a84a <_dtoa_r+0xa72>
 800a846:	9b04      	ldr	r3, [sp, #16]
 800a848:	3331      	adds	r3, #49	; 0x31
 800a84a:	9a02      	ldr	r2, [sp, #8]
 800a84c:	7013      	strb	r3, [r2, #0]
 800a84e:	e774      	b.n	800a73a <_dtoa_r+0x962>
 800a850:	4638      	mov	r0, r7
 800a852:	e7b9      	b.n	800a7c8 <_dtoa_r+0x9f0>
 800a854:	2201      	movs	r2, #1
 800a856:	e7e2      	b.n	800a81e <_dtoa_r+0xa46>
 800a858:	f1b9 0f00 	cmp.w	r9, #0
 800a85c:	db06      	blt.n	800a86c <_dtoa_r+0xa94>
 800a85e:	9905      	ldr	r1, [sp, #20]
 800a860:	ea41 0909 	orr.w	r9, r1, r9
 800a864:	9906      	ldr	r1, [sp, #24]
 800a866:	ea59 0101 	orrs.w	r1, r9, r1
 800a86a:	d120      	bne.n	800a8ae <_dtoa_r+0xad6>
 800a86c:	2a00      	cmp	r2, #0
 800a86e:	ddec      	ble.n	800a84a <_dtoa_r+0xa72>
 800a870:	4659      	mov	r1, fp
 800a872:	2201      	movs	r2, #1
 800a874:	4620      	mov	r0, r4
 800a876:	9301      	str	r3, [sp, #4]
 800a878:	f000 fce6 	bl	800b248 <__lshift>
 800a87c:	4631      	mov	r1, r6
 800a87e:	4683      	mov	fp, r0
 800a880:	f000 fd4e 	bl	800b320 <__mcmp>
 800a884:	2800      	cmp	r0, #0
 800a886:	9b01      	ldr	r3, [sp, #4]
 800a888:	dc02      	bgt.n	800a890 <_dtoa_r+0xab8>
 800a88a:	d1de      	bne.n	800a84a <_dtoa_r+0xa72>
 800a88c:	07da      	lsls	r2, r3, #31
 800a88e:	d5dc      	bpl.n	800a84a <_dtoa_r+0xa72>
 800a890:	2b39      	cmp	r3, #57	; 0x39
 800a892:	d1d8      	bne.n	800a846 <_dtoa_r+0xa6e>
 800a894:	9a02      	ldr	r2, [sp, #8]
 800a896:	2339      	movs	r3, #57	; 0x39
 800a898:	7013      	strb	r3, [r2, #0]
 800a89a:	462b      	mov	r3, r5
 800a89c:	461d      	mov	r5, r3
 800a89e:	3b01      	subs	r3, #1
 800a8a0:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800a8a4:	2a39      	cmp	r2, #57	; 0x39
 800a8a6:	d050      	beq.n	800a94a <_dtoa_r+0xb72>
 800a8a8:	3201      	adds	r2, #1
 800a8aa:	701a      	strb	r2, [r3, #0]
 800a8ac:	e745      	b.n	800a73a <_dtoa_r+0x962>
 800a8ae:	2a00      	cmp	r2, #0
 800a8b0:	dd03      	ble.n	800a8ba <_dtoa_r+0xae2>
 800a8b2:	2b39      	cmp	r3, #57	; 0x39
 800a8b4:	d0ee      	beq.n	800a894 <_dtoa_r+0xabc>
 800a8b6:	3301      	adds	r3, #1
 800a8b8:	e7c7      	b.n	800a84a <_dtoa_r+0xa72>
 800a8ba:	9a01      	ldr	r2, [sp, #4]
 800a8bc:	9907      	ldr	r1, [sp, #28]
 800a8be:	f802 3c01 	strb.w	r3, [r2, #-1]
 800a8c2:	428a      	cmp	r2, r1
 800a8c4:	d02a      	beq.n	800a91c <_dtoa_r+0xb44>
 800a8c6:	4659      	mov	r1, fp
 800a8c8:	2300      	movs	r3, #0
 800a8ca:	220a      	movs	r2, #10
 800a8cc:	4620      	mov	r0, r4
 800a8ce:	f000 fb0b 	bl	800aee8 <__multadd>
 800a8d2:	45b8      	cmp	r8, r7
 800a8d4:	4683      	mov	fp, r0
 800a8d6:	f04f 0300 	mov.w	r3, #0
 800a8da:	f04f 020a 	mov.w	r2, #10
 800a8de:	4641      	mov	r1, r8
 800a8e0:	4620      	mov	r0, r4
 800a8e2:	d107      	bne.n	800a8f4 <_dtoa_r+0xb1c>
 800a8e4:	f000 fb00 	bl	800aee8 <__multadd>
 800a8e8:	4680      	mov	r8, r0
 800a8ea:	4607      	mov	r7, r0
 800a8ec:	9b01      	ldr	r3, [sp, #4]
 800a8ee:	3301      	adds	r3, #1
 800a8f0:	9301      	str	r3, [sp, #4]
 800a8f2:	e775      	b.n	800a7e0 <_dtoa_r+0xa08>
 800a8f4:	f000 faf8 	bl	800aee8 <__multadd>
 800a8f8:	4639      	mov	r1, r7
 800a8fa:	4680      	mov	r8, r0
 800a8fc:	2300      	movs	r3, #0
 800a8fe:	220a      	movs	r2, #10
 800a900:	4620      	mov	r0, r4
 800a902:	f000 faf1 	bl	800aee8 <__multadd>
 800a906:	4607      	mov	r7, r0
 800a908:	e7f0      	b.n	800a8ec <_dtoa_r+0xb14>
 800a90a:	f1b9 0f00 	cmp.w	r9, #0
 800a90e:	9a00      	ldr	r2, [sp, #0]
 800a910:	bfcc      	ite	gt
 800a912:	464d      	movgt	r5, r9
 800a914:	2501      	movle	r5, #1
 800a916:	4415      	add	r5, r2
 800a918:	f04f 0800 	mov.w	r8, #0
 800a91c:	4659      	mov	r1, fp
 800a91e:	2201      	movs	r2, #1
 800a920:	4620      	mov	r0, r4
 800a922:	9301      	str	r3, [sp, #4]
 800a924:	f000 fc90 	bl	800b248 <__lshift>
 800a928:	4631      	mov	r1, r6
 800a92a:	4683      	mov	fp, r0
 800a92c:	f000 fcf8 	bl	800b320 <__mcmp>
 800a930:	2800      	cmp	r0, #0
 800a932:	dcb2      	bgt.n	800a89a <_dtoa_r+0xac2>
 800a934:	d102      	bne.n	800a93c <_dtoa_r+0xb64>
 800a936:	9b01      	ldr	r3, [sp, #4]
 800a938:	07db      	lsls	r3, r3, #31
 800a93a:	d4ae      	bmi.n	800a89a <_dtoa_r+0xac2>
 800a93c:	462b      	mov	r3, r5
 800a93e:	461d      	mov	r5, r3
 800a940:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a944:	2a30      	cmp	r2, #48	; 0x30
 800a946:	d0fa      	beq.n	800a93e <_dtoa_r+0xb66>
 800a948:	e6f7      	b.n	800a73a <_dtoa_r+0x962>
 800a94a:	9a00      	ldr	r2, [sp, #0]
 800a94c:	429a      	cmp	r2, r3
 800a94e:	d1a5      	bne.n	800a89c <_dtoa_r+0xac4>
 800a950:	f10a 0a01 	add.w	sl, sl, #1
 800a954:	2331      	movs	r3, #49	; 0x31
 800a956:	e779      	b.n	800a84c <_dtoa_r+0xa74>
 800a958:	4b13      	ldr	r3, [pc, #76]	; (800a9a8 <_dtoa_r+0xbd0>)
 800a95a:	f7ff baaf 	b.w	8009ebc <_dtoa_r+0xe4>
 800a95e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a960:	2b00      	cmp	r3, #0
 800a962:	f47f aa86 	bne.w	8009e72 <_dtoa_r+0x9a>
 800a966:	4b11      	ldr	r3, [pc, #68]	; (800a9ac <_dtoa_r+0xbd4>)
 800a968:	f7ff baa8 	b.w	8009ebc <_dtoa_r+0xe4>
 800a96c:	f1b9 0f00 	cmp.w	r9, #0
 800a970:	dc03      	bgt.n	800a97a <_dtoa_r+0xba2>
 800a972:	9b05      	ldr	r3, [sp, #20]
 800a974:	2b02      	cmp	r3, #2
 800a976:	f73f aec9 	bgt.w	800a70c <_dtoa_r+0x934>
 800a97a:	9d00      	ldr	r5, [sp, #0]
 800a97c:	4631      	mov	r1, r6
 800a97e:	4658      	mov	r0, fp
 800a980:	f7ff f99e 	bl	8009cc0 <quorem>
 800a984:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800a988:	f805 3b01 	strb.w	r3, [r5], #1
 800a98c:	9a00      	ldr	r2, [sp, #0]
 800a98e:	1aaa      	subs	r2, r5, r2
 800a990:	4591      	cmp	r9, r2
 800a992:	ddba      	ble.n	800a90a <_dtoa_r+0xb32>
 800a994:	4659      	mov	r1, fp
 800a996:	2300      	movs	r3, #0
 800a998:	220a      	movs	r2, #10
 800a99a:	4620      	mov	r0, r4
 800a99c:	f000 faa4 	bl	800aee8 <__multadd>
 800a9a0:	4683      	mov	fp, r0
 800a9a2:	e7eb      	b.n	800a97c <_dtoa_r+0xba4>
 800a9a4:	0800d1f7 	.word	0x0800d1f7
 800a9a8:	0800d150 	.word	0x0800d150
 800a9ac:	0800d174 	.word	0x0800d174

0800a9b0 <__sflush_r>:
 800a9b0:	898a      	ldrh	r2, [r1, #12]
 800a9b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a9b6:	4605      	mov	r5, r0
 800a9b8:	0710      	lsls	r0, r2, #28
 800a9ba:	460c      	mov	r4, r1
 800a9bc:	d458      	bmi.n	800aa70 <__sflush_r+0xc0>
 800a9be:	684b      	ldr	r3, [r1, #4]
 800a9c0:	2b00      	cmp	r3, #0
 800a9c2:	dc05      	bgt.n	800a9d0 <__sflush_r+0x20>
 800a9c4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a9c6:	2b00      	cmp	r3, #0
 800a9c8:	dc02      	bgt.n	800a9d0 <__sflush_r+0x20>
 800a9ca:	2000      	movs	r0, #0
 800a9cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a9d0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a9d2:	2e00      	cmp	r6, #0
 800a9d4:	d0f9      	beq.n	800a9ca <__sflush_r+0x1a>
 800a9d6:	2300      	movs	r3, #0
 800a9d8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a9dc:	682f      	ldr	r7, [r5, #0]
 800a9de:	602b      	str	r3, [r5, #0]
 800a9e0:	d032      	beq.n	800aa48 <__sflush_r+0x98>
 800a9e2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a9e4:	89a3      	ldrh	r3, [r4, #12]
 800a9e6:	075a      	lsls	r2, r3, #29
 800a9e8:	d505      	bpl.n	800a9f6 <__sflush_r+0x46>
 800a9ea:	6863      	ldr	r3, [r4, #4]
 800a9ec:	1ac0      	subs	r0, r0, r3
 800a9ee:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a9f0:	b10b      	cbz	r3, 800a9f6 <__sflush_r+0x46>
 800a9f2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a9f4:	1ac0      	subs	r0, r0, r3
 800a9f6:	2300      	movs	r3, #0
 800a9f8:	4602      	mov	r2, r0
 800a9fa:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a9fc:	6a21      	ldr	r1, [r4, #32]
 800a9fe:	4628      	mov	r0, r5
 800aa00:	47b0      	blx	r6
 800aa02:	1c43      	adds	r3, r0, #1
 800aa04:	89a3      	ldrh	r3, [r4, #12]
 800aa06:	d106      	bne.n	800aa16 <__sflush_r+0x66>
 800aa08:	6829      	ldr	r1, [r5, #0]
 800aa0a:	291d      	cmp	r1, #29
 800aa0c:	d82c      	bhi.n	800aa68 <__sflush_r+0xb8>
 800aa0e:	4a2a      	ldr	r2, [pc, #168]	; (800aab8 <__sflush_r+0x108>)
 800aa10:	40ca      	lsrs	r2, r1
 800aa12:	07d6      	lsls	r6, r2, #31
 800aa14:	d528      	bpl.n	800aa68 <__sflush_r+0xb8>
 800aa16:	2200      	movs	r2, #0
 800aa18:	6062      	str	r2, [r4, #4]
 800aa1a:	04d9      	lsls	r1, r3, #19
 800aa1c:	6922      	ldr	r2, [r4, #16]
 800aa1e:	6022      	str	r2, [r4, #0]
 800aa20:	d504      	bpl.n	800aa2c <__sflush_r+0x7c>
 800aa22:	1c42      	adds	r2, r0, #1
 800aa24:	d101      	bne.n	800aa2a <__sflush_r+0x7a>
 800aa26:	682b      	ldr	r3, [r5, #0]
 800aa28:	b903      	cbnz	r3, 800aa2c <__sflush_r+0x7c>
 800aa2a:	6560      	str	r0, [r4, #84]	; 0x54
 800aa2c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800aa2e:	602f      	str	r7, [r5, #0]
 800aa30:	2900      	cmp	r1, #0
 800aa32:	d0ca      	beq.n	800a9ca <__sflush_r+0x1a>
 800aa34:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800aa38:	4299      	cmp	r1, r3
 800aa3a:	d002      	beq.n	800aa42 <__sflush_r+0x92>
 800aa3c:	4628      	mov	r0, r5
 800aa3e:	f000 fd7f 	bl	800b540 <_free_r>
 800aa42:	2000      	movs	r0, #0
 800aa44:	6360      	str	r0, [r4, #52]	; 0x34
 800aa46:	e7c1      	b.n	800a9cc <__sflush_r+0x1c>
 800aa48:	6a21      	ldr	r1, [r4, #32]
 800aa4a:	2301      	movs	r3, #1
 800aa4c:	4628      	mov	r0, r5
 800aa4e:	47b0      	blx	r6
 800aa50:	1c41      	adds	r1, r0, #1
 800aa52:	d1c7      	bne.n	800a9e4 <__sflush_r+0x34>
 800aa54:	682b      	ldr	r3, [r5, #0]
 800aa56:	2b00      	cmp	r3, #0
 800aa58:	d0c4      	beq.n	800a9e4 <__sflush_r+0x34>
 800aa5a:	2b1d      	cmp	r3, #29
 800aa5c:	d001      	beq.n	800aa62 <__sflush_r+0xb2>
 800aa5e:	2b16      	cmp	r3, #22
 800aa60:	d101      	bne.n	800aa66 <__sflush_r+0xb6>
 800aa62:	602f      	str	r7, [r5, #0]
 800aa64:	e7b1      	b.n	800a9ca <__sflush_r+0x1a>
 800aa66:	89a3      	ldrh	r3, [r4, #12]
 800aa68:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800aa6c:	81a3      	strh	r3, [r4, #12]
 800aa6e:	e7ad      	b.n	800a9cc <__sflush_r+0x1c>
 800aa70:	690f      	ldr	r7, [r1, #16]
 800aa72:	2f00      	cmp	r7, #0
 800aa74:	d0a9      	beq.n	800a9ca <__sflush_r+0x1a>
 800aa76:	0793      	lsls	r3, r2, #30
 800aa78:	680e      	ldr	r6, [r1, #0]
 800aa7a:	bf08      	it	eq
 800aa7c:	694b      	ldreq	r3, [r1, #20]
 800aa7e:	600f      	str	r7, [r1, #0]
 800aa80:	bf18      	it	ne
 800aa82:	2300      	movne	r3, #0
 800aa84:	eba6 0807 	sub.w	r8, r6, r7
 800aa88:	608b      	str	r3, [r1, #8]
 800aa8a:	f1b8 0f00 	cmp.w	r8, #0
 800aa8e:	dd9c      	ble.n	800a9ca <__sflush_r+0x1a>
 800aa90:	6a21      	ldr	r1, [r4, #32]
 800aa92:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800aa94:	4643      	mov	r3, r8
 800aa96:	463a      	mov	r2, r7
 800aa98:	4628      	mov	r0, r5
 800aa9a:	47b0      	blx	r6
 800aa9c:	2800      	cmp	r0, #0
 800aa9e:	dc06      	bgt.n	800aaae <__sflush_r+0xfe>
 800aaa0:	89a3      	ldrh	r3, [r4, #12]
 800aaa2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800aaa6:	81a3      	strh	r3, [r4, #12]
 800aaa8:	f04f 30ff 	mov.w	r0, #4294967295
 800aaac:	e78e      	b.n	800a9cc <__sflush_r+0x1c>
 800aaae:	4407      	add	r7, r0
 800aab0:	eba8 0800 	sub.w	r8, r8, r0
 800aab4:	e7e9      	b.n	800aa8a <__sflush_r+0xda>
 800aab6:	bf00      	nop
 800aab8:	20400001 	.word	0x20400001

0800aabc <_fflush_r>:
 800aabc:	b538      	push	{r3, r4, r5, lr}
 800aabe:	690b      	ldr	r3, [r1, #16]
 800aac0:	4605      	mov	r5, r0
 800aac2:	460c      	mov	r4, r1
 800aac4:	b913      	cbnz	r3, 800aacc <_fflush_r+0x10>
 800aac6:	2500      	movs	r5, #0
 800aac8:	4628      	mov	r0, r5
 800aaca:	bd38      	pop	{r3, r4, r5, pc}
 800aacc:	b118      	cbz	r0, 800aad6 <_fflush_r+0x1a>
 800aace:	6983      	ldr	r3, [r0, #24]
 800aad0:	b90b      	cbnz	r3, 800aad6 <_fflush_r+0x1a>
 800aad2:	f000 f887 	bl	800abe4 <__sinit>
 800aad6:	4b14      	ldr	r3, [pc, #80]	; (800ab28 <_fflush_r+0x6c>)
 800aad8:	429c      	cmp	r4, r3
 800aada:	d11b      	bne.n	800ab14 <_fflush_r+0x58>
 800aadc:	686c      	ldr	r4, [r5, #4]
 800aade:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800aae2:	2b00      	cmp	r3, #0
 800aae4:	d0ef      	beq.n	800aac6 <_fflush_r+0xa>
 800aae6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800aae8:	07d0      	lsls	r0, r2, #31
 800aaea:	d404      	bmi.n	800aaf6 <_fflush_r+0x3a>
 800aaec:	0599      	lsls	r1, r3, #22
 800aaee:	d402      	bmi.n	800aaf6 <_fflush_r+0x3a>
 800aaf0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800aaf2:	f000 f91a 	bl	800ad2a <__retarget_lock_acquire_recursive>
 800aaf6:	4628      	mov	r0, r5
 800aaf8:	4621      	mov	r1, r4
 800aafa:	f7ff ff59 	bl	800a9b0 <__sflush_r>
 800aafe:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ab00:	07da      	lsls	r2, r3, #31
 800ab02:	4605      	mov	r5, r0
 800ab04:	d4e0      	bmi.n	800aac8 <_fflush_r+0xc>
 800ab06:	89a3      	ldrh	r3, [r4, #12]
 800ab08:	059b      	lsls	r3, r3, #22
 800ab0a:	d4dd      	bmi.n	800aac8 <_fflush_r+0xc>
 800ab0c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ab0e:	f000 f90d 	bl	800ad2c <__retarget_lock_release_recursive>
 800ab12:	e7d9      	b.n	800aac8 <_fflush_r+0xc>
 800ab14:	4b05      	ldr	r3, [pc, #20]	; (800ab2c <_fflush_r+0x70>)
 800ab16:	429c      	cmp	r4, r3
 800ab18:	d101      	bne.n	800ab1e <_fflush_r+0x62>
 800ab1a:	68ac      	ldr	r4, [r5, #8]
 800ab1c:	e7df      	b.n	800aade <_fflush_r+0x22>
 800ab1e:	4b04      	ldr	r3, [pc, #16]	; (800ab30 <_fflush_r+0x74>)
 800ab20:	429c      	cmp	r4, r3
 800ab22:	bf08      	it	eq
 800ab24:	68ec      	ldreq	r4, [r5, #12]
 800ab26:	e7da      	b.n	800aade <_fflush_r+0x22>
 800ab28:	0800d228 	.word	0x0800d228
 800ab2c:	0800d248 	.word	0x0800d248
 800ab30:	0800d208 	.word	0x0800d208

0800ab34 <std>:
 800ab34:	2300      	movs	r3, #0
 800ab36:	b510      	push	{r4, lr}
 800ab38:	4604      	mov	r4, r0
 800ab3a:	e9c0 3300 	strd	r3, r3, [r0]
 800ab3e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ab42:	6083      	str	r3, [r0, #8]
 800ab44:	8181      	strh	r1, [r0, #12]
 800ab46:	6643      	str	r3, [r0, #100]	; 0x64
 800ab48:	81c2      	strh	r2, [r0, #14]
 800ab4a:	6183      	str	r3, [r0, #24]
 800ab4c:	4619      	mov	r1, r3
 800ab4e:	2208      	movs	r2, #8
 800ab50:	305c      	adds	r0, #92	; 0x5c
 800ab52:	f7fe f9fb 	bl	8008f4c <memset>
 800ab56:	4b05      	ldr	r3, [pc, #20]	; (800ab6c <std+0x38>)
 800ab58:	6263      	str	r3, [r4, #36]	; 0x24
 800ab5a:	4b05      	ldr	r3, [pc, #20]	; (800ab70 <std+0x3c>)
 800ab5c:	62a3      	str	r3, [r4, #40]	; 0x28
 800ab5e:	4b05      	ldr	r3, [pc, #20]	; (800ab74 <std+0x40>)
 800ab60:	62e3      	str	r3, [r4, #44]	; 0x2c
 800ab62:	4b05      	ldr	r3, [pc, #20]	; (800ab78 <std+0x44>)
 800ab64:	6224      	str	r4, [r4, #32]
 800ab66:	6323      	str	r3, [r4, #48]	; 0x30
 800ab68:	bd10      	pop	{r4, pc}
 800ab6a:	bf00      	nop
 800ab6c:	0800bc21 	.word	0x0800bc21
 800ab70:	0800bc43 	.word	0x0800bc43
 800ab74:	0800bc7b 	.word	0x0800bc7b
 800ab78:	0800bc9f 	.word	0x0800bc9f

0800ab7c <_cleanup_r>:
 800ab7c:	4901      	ldr	r1, [pc, #4]	; (800ab84 <_cleanup_r+0x8>)
 800ab7e:	f000 b8af 	b.w	800ace0 <_fwalk_reent>
 800ab82:	bf00      	nop
 800ab84:	0800aabd 	.word	0x0800aabd

0800ab88 <__sfmoreglue>:
 800ab88:	b570      	push	{r4, r5, r6, lr}
 800ab8a:	1e4a      	subs	r2, r1, #1
 800ab8c:	2568      	movs	r5, #104	; 0x68
 800ab8e:	4355      	muls	r5, r2
 800ab90:	460e      	mov	r6, r1
 800ab92:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800ab96:	f000 fd23 	bl	800b5e0 <_malloc_r>
 800ab9a:	4604      	mov	r4, r0
 800ab9c:	b140      	cbz	r0, 800abb0 <__sfmoreglue+0x28>
 800ab9e:	2100      	movs	r1, #0
 800aba0:	e9c0 1600 	strd	r1, r6, [r0]
 800aba4:	300c      	adds	r0, #12
 800aba6:	60a0      	str	r0, [r4, #8]
 800aba8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800abac:	f7fe f9ce 	bl	8008f4c <memset>
 800abb0:	4620      	mov	r0, r4
 800abb2:	bd70      	pop	{r4, r5, r6, pc}

0800abb4 <__sfp_lock_acquire>:
 800abb4:	4801      	ldr	r0, [pc, #4]	; (800abbc <__sfp_lock_acquire+0x8>)
 800abb6:	f000 b8b8 	b.w	800ad2a <__retarget_lock_acquire_recursive>
 800abba:	bf00      	nop
 800abbc:	20000950 	.word	0x20000950

0800abc0 <__sfp_lock_release>:
 800abc0:	4801      	ldr	r0, [pc, #4]	; (800abc8 <__sfp_lock_release+0x8>)
 800abc2:	f000 b8b3 	b.w	800ad2c <__retarget_lock_release_recursive>
 800abc6:	bf00      	nop
 800abc8:	20000950 	.word	0x20000950

0800abcc <__sinit_lock_acquire>:
 800abcc:	4801      	ldr	r0, [pc, #4]	; (800abd4 <__sinit_lock_acquire+0x8>)
 800abce:	f000 b8ac 	b.w	800ad2a <__retarget_lock_acquire_recursive>
 800abd2:	bf00      	nop
 800abd4:	2000094b 	.word	0x2000094b

0800abd8 <__sinit_lock_release>:
 800abd8:	4801      	ldr	r0, [pc, #4]	; (800abe0 <__sinit_lock_release+0x8>)
 800abda:	f000 b8a7 	b.w	800ad2c <__retarget_lock_release_recursive>
 800abde:	bf00      	nop
 800abe0:	2000094b 	.word	0x2000094b

0800abe4 <__sinit>:
 800abe4:	b510      	push	{r4, lr}
 800abe6:	4604      	mov	r4, r0
 800abe8:	f7ff fff0 	bl	800abcc <__sinit_lock_acquire>
 800abec:	69a3      	ldr	r3, [r4, #24]
 800abee:	b11b      	cbz	r3, 800abf8 <__sinit+0x14>
 800abf0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800abf4:	f7ff bff0 	b.w	800abd8 <__sinit_lock_release>
 800abf8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800abfc:	6523      	str	r3, [r4, #80]	; 0x50
 800abfe:	4b13      	ldr	r3, [pc, #76]	; (800ac4c <__sinit+0x68>)
 800ac00:	4a13      	ldr	r2, [pc, #76]	; (800ac50 <__sinit+0x6c>)
 800ac02:	681b      	ldr	r3, [r3, #0]
 800ac04:	62a2      	str	r2, [r4, #40]	; 0x28
 800ac06:	42a3      	cmp	r3, r4
 800ac08:	bf04      	itt	eq
 800ac0a:	2301      	moveq	r3, #1
 800ac0c:	61a3      	streq	r3, [r4, #24]
 800ac0e:	4620      	mov	r0, r4
 800ac10:	f000 f820 	bl	800ac54 <__sfp>
 800ac14:	6060      	str	r0, [r4, #4]
 800ac16:	4620      	mov	r0, r4
 800ac18:	f000 f81c 	bl	800ac54 <__sfp>
 800ac1c:	60a0      	str	r0, [r4, #8]
 800ac1e:	4620      	mov	r0, r4
 800ac20:	f000 f818 	bl	800ac54 <__sfp>
 800ac24:	2200      	movs	r2, #0
 800ac26:	60e0      	str	r0, [r4, #12]
 800ac28:	2104      	movs	r1, #4
 800ac2a:	6860      	ldr	r0, [r4, #4]
 800ac2c:	f7ff ff82 	bl	800ab34 <std>
 800ac30:	68a0      	ldr	r0, [r4, #8]
 800ac32:	2201      	movs	r2, #1
 800ac34:	2109      	movs	r1, #9
 800ac36:	f7ff ff7d 	bl	800ab34 <std>
 800ac3a:	68e0      	ldr	r0, [r4, #12]
 800ac3c:	2202      	movs	r2, #2
 800ac3e:	2112      	movs	r1, #18
 800ac40:	f7ff ff78 	bl	800ab34 <std>
 800ac44:	2301      	movs	r3, #1
 800ac46:	61a3      	str	r3, [r4, #24]
 800ac48:	e7d2      	b.n	800abf0 <__sinit+0xc>
 800ac4a:	bf00      	nop
 800ac4c:	0800d13c 	.word	0x0800d13c
 800ac50:	0800ab7d 	.word	0x0800ab7d

0800ac54 <__sfp>:
 800ac54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ac56:	4607      	mov	r7, r0
 800ac58:	f7ff ffac 	bl	800abb4 <__sfp_lock_acquire>
 800ac5c:	4b1e      	ldr	r3, [pc, #120]	; (800acd8 <__sfp+0x84>)
 800ac5e:	681e      	ldr	r6, [r3, #0]
 800ac60:	69b3      	ldr	r3, [r6, #24]
 800ac62:	b913      	cbnz	r3, 800ac6a <__sfp+0x16>
 800ac64:	4630      	mov	r0, r6
 800ac66:	f7ff ffbd 	bl	800abe4 <__sinit>
 800ac6a:	3648      	adds	r6, #72	; 0x48
 800ac6c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800ac70:	3b01      	subs	r3, #1
 800ac72:	d503      	bpl.n	800ac7c <__sfp+0x28>
 800ac74:	6833      	ldr	r3, [r6, #0]
 800ac76:	b30b      	cbz	r3, 800acbc <__sfp+0x68>
 800ac78:	6836      	ldr	r6, [r6, #0]
 800ac7a:	e7f7      	b.n	800ac6c <__sfp+0x18>
 800ac7c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800ac80:	b9d5      	cbnz	r5, 800acb8 <__sfp+0x64>
 800ac82:	4b16      	ldr	r3, [pc, #88]	; (800acdc <__sfp+0x88>)
 800ac84:	60e3      	str	r3, [r4, #12]
 800ac86:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800ac8a:	6665      	str	r5, [r4, #100]	; 0x64
 800ac8c:	f000 f84c 	bl	800ad28 <__retarget_lock_init_recursive>
 800ac90:	f7ff ff96 	bl	800abc0 <__sfp_lock_release>
 800ac94:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800ac98:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800ac9c:	6025      	str	r5, [r4, #0]
 800ac9e:	61a5      	str	r5, [r4, #24]
 800aca0:	2208      	movs	r2, #8
 800aca2:	4629      	mov	r1, r5
 800aca4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800aca8:	f7fe f950 	bl	8008f4c <memset>
 800acac:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800acb0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800acb4:	4620      	mov	r0, r4
 800acb6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800acb8:	3468      	adds	r4, #104	; 0x68
 800acba:	e7d9      	b.n	800ac70 <__sfp+0x1c>
 800acbc:	2104      	movs	r1, #4
 800acbe:	4638      	mov	r0, r7
 800acc0:	f7ff ff62 	bl	800ab88 <__sfmoreglue>
 800acc4:	4604      	mov	r4, r0
 800acc6:	6030      	str	r0, [r6, #0]
 800acc8:	2800      	cmp	r0, #0
 800acca:	d1d5      	bne.n	800ac78 <__sfp+0x24>
 800accc:	f7ff ff78 	bl	800abc0 <__sfp_lock_release>
 800acd0:	230c      	movs	r3, #12
 800acd2:	603b      	str	r3, [r7, #0]
 800acd4:	e7ee      	b.n	800acb4 <__sfp+0x60>
 800acd6:	bf00      	nop
 800acd8:	0800d13c 	.word	0x0800d13c
 800acdc:	ffff0001 	.word	0xffff0001

0800ace0 <_fwalk_reent>:
 800ace0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ace4:	4606      	mov	r6, r0
 800ace6:	4688      	mov	r8, r1
 800ace8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800acec:	2700      	movs	r7, #0
 800acee:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800acf2:	f1b9 0901 	subs.w	r9, r9, #1
 800acf6:	d505      	bpl.n	800ad04 <_fwalk_reent+0x24>
 800acf8:	6824      	ldr	r4, [r4, #0]
 800acfa:	2c00      	cmp	r4, #0
 800acfc:	d1f7      	bne.n	800acee <_fwalk_reent+0xe>
 800acfe:	4638      	mov	r0, r7
 800ad00:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ad04:	89ab      	ldrh	r3, [r5, #12]
 800ad06:	2b01      	cmp	r3, #1
 800ad08:	d907      	bls.n	800ad1a <_fwalk_reent+0x3a>
 800ad0a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ad0e:	3301      	adds	r3, #1
 800ad10:	d003      	beq.n	800ad1a <_fwalk_reent+0x3a>
 800ad12:	4629      	mov	r1, r5
 800ad14:	4630      	mov	r0, r6
 800ad16:	47c0      	blx	r8
 800ad18:	4307      	orrs	r7, r0
 800ad1a:	3568      	adds	r5, #104	; 0x68
 800ad1c:	e7e9      	b.n	800acf2 <_fwalk_reent+0x12>
	...

0800ad20 <_localeconv_r>:
 800ad20:	4800      	ldr	r0, [pc, #0]	; (800ad24 <_localeconv_r+0x4>)
 800ad22:	4770      	bx	lr
 800ad24:	20000178 	.word	0x20000178

0800ad28 <__retarget_lock_init_recursive>:
 800ad28:	4770      	bx	lr

0800ad2a <__retarget_lock_acquire_recursive>:
 800ad2a:	4770      	bx	lr

0800ad2c <__retarget_lock_release_recursive>:
 800ad2c:	4770      	bx	lr

0800ad2e <__swhatbuf_r>:
 800ad2e:	b570      	push	{r4, r5, r6, lr}
 800ad30:	460e      	mov	r6, r1
 800ad32:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ad36:	2900      	cmp	r1, #0
 800ad38:	b096      	sub	sp, #88	; 0x58
 800ad3a:	4614      	mov	r4, r2
 800ad3c:	461d      	mov	r5, r3
 800ad3e:	da07      	bge.n	800ad50 <__swhatbuf_r+0x22>
 800ad40:	2300      	movs	r3, #0
 800ad42:	602b      	str	r3, [r5, #0]
 800ad44:	89b3      	ldrh	r3, [r6, #12]
 800ad46:	061a      	lsls	r2, r3, #24
 800ad48:	d410      	bmi.n	800ad6c <__swhatbuf_r+0x3e>
 800ad4a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ad4e:	e00e      	b.n	800ad6e <__swhatbuf_r+0x40>
 800ad50:	466a      	mov	r2, sp
 800ad52:	f000 fffb 	bl	800bd4c <_fstat_r>
 800ad56:	2800      	cmp	r0, #0
 800ad58:	dbf2      	blt.n	800ad40 <__swhatbuf_r+0x12>
 800ad5a:	9a01      	ldr	r2, [sp, #4]
 800ad5c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800ad60:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800ad64:	425a      	negs	r2, r3
 800ad66:	415a      	adcs	r2, r3
 800ad68:	602a      	str	r2, [r5, #0]
 800ad6a:	e7ee      	b.n	800ad4a <__swhatbuf_r+0x1c>
 800ad6c:	2340      	movs	r3, #64	; 0x40
 800ad6e:	2000      	movs	r0, #0
 800ad70:	6023      	str	r3, [r4, #0]
 800ad72:	b016      	add	sp, #88	; 0x58
 800ad74:	bd70      	pop	{r4, r5, r6, pc}
	...

0800ad78 <__smakebuf_r>:
 800ad78:	898b      	ldrh	r3, [r1, #12]
 800ad7a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ad7c:	079d      	lsls	r5, r3, #30
 800ad7e:	4606      	mov	r6, r0
 800ad80:	460c      	mov	r4, r1
 800ad82:	d507      	bpl.n	800ad94 <__smakebuf_r+0x1c>
 800ad84:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800ad88:	6023      	str	r3, [r4, #0]
 800ad8a:	6123      	str	r3, [r4, #16]
 800ad8c:	2301      	movs	r3, #1
 800ad8e:	6163      	str	r3, [r4, #20]
 800ad90:	b002      	add	sp, #8
 800ad92:	bd70      	pop	{r4, r5, r6, pc}
 800ad94:	ab01      	add	r3, sp, #4
 800ad96:	466a      	mov	r2, sp
 800ad98:	f7ff ffc9 	bl	800ad2e <__swhatbuf_r>
 800ad9c:	9900      	ldr	r1, [sp, #0]
 800ad9e:	4605      	mov	r5, r0
 800ada0:	4630      	mov	r0, r6
 800ada2:	f000 fc1d 	bl	800b5e0 <_malloc_r>
 800ada6:	b948      	cbnz	r0, 800adbc <__smakebuf_r+0x44>
 800ada8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800adac:	059a      	lsls	r2, r3, #22
 800adae:	d4ef      	bmi.n	800ad90 <__smakebuf_r+0x18>
 800adb0:	f023 0303 	bic.w	r3, r3, #3
 800adb4:	f043 0302 	orr.w	r3, r3, #2
 800adb8:	81a3      	strh	r3, [r4, #12]
 800adba:	e7e3      	b.n	800ad84 <__smakebuf_r+0xc>
 800adbc:	4b0d      	ldr	r3, [pc, #52]	; (800adf4 <__smakebuf_r+0x7c>)
 800adbe:	62b3      	str	r3, [r6, #40]	; 0x28
 800adc0:	89a3      	ldrh	r3, [r4, #12]
 800adc2:	6020      	str	r0, [r4, #0]
 800adc4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800adc8:	81a3      	strh	r3, [r4, #12]
 800adca:	9b00      	ldr	r3, [sp, #0]
 800adcc:	6163      	str	r3, [r4, #20]
 800adce:	9b01      	ldr	r3, [sp, #4]
 800add0:	6120      	str	r0, [r4, #16]
 800add2:	b15b      	cbz	r3, 800adec <__smakebuf_r+0x74>
 800add4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800add8:	4630      	mov	r0, r6
 800adda:	f000 ffc9 	bl	800bd70 <_isatty_r>
 800adde:	b128      	cbz	r0, 800adec <__smakebuf_r+0x74>
 800ade0:	89a3      	ldrh	r3, [r4, #12]
 800ade2:	f023 0303 	bic.w	r3, r3, #3
 800ade6:	f043 0301 	orr.w	r3, r3, #1
 800adea:	81a3      	strh	r3, [r4, #12]
 800adec:	89a0      	ldrh	r0, [r4, #12]
 800adee:	4305      	orrs	r5, r0
 800adf0:	81a5      	strh	r5, [r4, #12]
 800adf2:	e7cd      	b.n	800ad90 <__smakebuf_r+0x18>
 800adf4:	0800ab7d 	.word	0x0800ab7d

0800adf8 <malloc>:
 800adf8:	4b02      	ldr	r3, [pc, #8]	; (800ae04 <malloc+0xc>)
 800adfa:	4601      	mov	r1, r0
 800adfc:	6818      	ldr	r0, [r3, #0]
 800adfe:	f000 bbef 	b.w	800b5e0 <_malloc_r>
 800ae02:	bf00      	nop
 800ae04:	20000024 	.word	0x20000024

0800ae08 <memcpy>:
 800ae08:	440a      	add	r2, r1
 800ae0a:	4291      	cmp	r1, r2
 800ae0c:	f100 33ff 	add.w	r3, r0, #4294967295
 800ae10:	d100      	bne.n	800ae14 <memcpy+0xc>
 800ae12:	4770      	bx	lr
 800ae14:	b510      	push	{r4, lr}
 800ae16:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ae1a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ae1e:	4291      	cmp	r1, r2
 800ae20:	d1f9      	bne.n	800ae16 <memcpy+0xe>
 800ae22:	bd10      	pop	{r4, pc}

0800ae24 <_Balloc>:
 800ae24:	b570      	push	{r4, r5, r6, lr}
 800ae26:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800ae28:	4604      	mov	r4, r0
 800ae2a:	460d      	mov	r5, r1
 800ae2c:	b976      	cbnz	r6, 800ae4c <_Balloc+0x28>
 800ae2e:	2010      	movs	r0, #16
 800ae30:	f7ff ffe2 	bl	800adf8 <malloc>
 800ae34:	4602      	mov	r2, r0
 800ae36:	6260      	str	r0, [r4, #36]	; 0x24
 800ae38:	b920      	cbnz	r0, 800ae44 <_Balloc+0x20>
 800ae3a:	4b18      	ldr	r3, [pc, #96]	; (800ae9c <_Balloc+0x78>)
 800ae3c:	4818      	ldr	r0, [pc, #96]	; (800aea0 <_Balloc+0x7c>)
 800ae3e:	2166      	movs	r1, #102	; 0x66
 800ae40:	f000 ff44 	bl	800bccc <__assert_func>
 800ae44:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ae48:	6006      	str	r6, [r0, #0]
 800ae4a:	60c6      	str	r6, [r0, #12]
 800ae4c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800ae4e:	68f3      	ldr	r3, [r6, #12]
 800ae50:	b183      	cbz	r3, 800ae74 <_Balloc+0x50>
 800ae52:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ae54:	68db      	ldr	r3, [r3, #12]
 800ae56:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800ae5a:	b9b8      	cbnz	r0, 800ae8c <_Balloc+0x68>
 800ae5c:	2101      	movs	r1, #1
 800ae5e:	fa01 f605 	lsl.w	r6, r1, r5
 800ae62:	1d72      	adds	r2, r6, #5
 800ae64:	0092      	lsls	r2, r2, #2
 800ae66:	4620      	mov	r0, r4
 800ae68:	f000 fb5a 	bl	800b520 <_calloc_r>
 800ae6c:	b160      	cbz	r0, 800ae88 <_Balloc+0x64>
 800ae6e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800ae72:	e00e      	b.n	800ae92 <_Balloc+0x6e>
 800ae74:	2221      	movs	r2, #33	; 0x21
 800ae76:	2104      	movs	r1, #4
 800ae78:	4620      	mov	r0, r4
 800ae7a:	f000 fb51 	bl	800b520 <_calloc_r>
 800ae7e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ae80:	60f0      	str	r0, [r6, #12]
 800ae82:	68db      	ldr	r3, [r3, #12]
 800ae84:	2b00      	cmp	r3, #0
 800ae86:	d1e4      	bne.n	800ae52 <_Balloc+0x2e>
 800ae88:	2000      	movs	r0, #0
 800ae8a:	bd70      	pop	{r4, r5, r6, pc}
 800ae8c:	6802      	ldr	r2, [r0, #0]
 800ae8e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800ae92:	2300      	movs	r3, #0
 800ae94:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800ae98:	e7f7      	b.n	800ae8a <_Balloc+0x66>
 800ae9a:	bf00      	nop
 800ae9c:	0800d181 	.word	0x0800d181
 800aea0:	0800d268 	.word	0x0800d268

0800aea4 <_Bfree>:
 800aea4:	b570      	push	{r4, r5, r6, lr}
 800aea6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800aea8:	4605      	mov	r5, r0
 800aeaa:	460c      	mov	r4, r1
 800aeac:	b976      	cbnz	r6, 800aecc <_Bfree+0x28>
 800aeae:	2010      	movs	r0, #16
 800aeb0:	f7ff ffa2 	bl	800adf8 <malloc>
 800aeb4:	4602      	mov	r2, r0
 800aeb6:	6268      	str	r0, [r5, #36]	; 0x24
 800aeb8:	b920      	cbnz	r0, 800aec4 <_Bfree+0x20>
 800aeba:	4b09      	ldr	r3, [pc, #36]	; (800aee0 <_Bfree+0x3c>)
 800aebc:	4809      	ldr	r0, [pc, #36]	; (800aee4 <_Bfree+0x40>)
 800aebe:	218a      	movs	r1, #138	; 0x8a
 800aec0:	f000 ff04 	bl	800bccc <__assert_func>
 800aec4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800aec8:	6006      	str	r6, [r0, #0]
 800aeca:	60c6      	str	r6, [r0, #12]
 800aecc:	b13c      	cbz	r4, 800aede <_Bfree+0x3a>
 800aece:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800aed0:	6862      	ldr	r2, [r4, #4]
 800aed2:	68db      	ldr	r3, [r3, #12]
 800aed4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800aed8:	6021      	str	r1, [r4, #0]
 800aeda:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800aede:	bd70      	pop	{r4, r5, r6, pc}
 800aee0:	0800d181 	.word	0x0800d181
 800aee4:	0800d268 	.word	0x0800d268

0800aee8 <__multadd>:
 800aee8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aeec:	690e      	ldr	r6, [r1, #16]
 800aeee:	4607      	mov	r7, r0
 800aef0:	4698      	mov	r8, r3
 800aef2:	460c      	mov	r4, r1
 800aef4:	f101 0014 	add.w	r0, r1, #20
 800aef8:	2300      	movs	r3, #0
 800aefa:	6805      	ldr	r5, [r0, #0]
 800aefc:	b2a9      	uxth	r1, r5
 800aefe:	fb02 8101 	mla	r1, r2, r1, r8
 800af02:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800af06:	0c2d      	lsrs	r5, r5, #16
 800af08:	fb02 c505 	mla	r5, r2, r5, ip
 800af0c:	b289      	uxth	r1, r1
 800af0e:	3301      	adds	r3, #1
 800af10:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800af14:	429e      	cmp	r6, r3
 800af16:	f840 1b04 	str.w	r1, [r0], #4
 800af1a:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800af1e:	dcec      	bgt.n	800aefa <__multadd+0x12>
 800af20:	f1b8 0f00 	cmp.w	r8, #0
 800af24:	d022      	beq.n	800af6c <__multadd+0x84>
 800af26:	68a3      	ldr	r3, [r4, #8]
 800af28:	42b3      	cmp	r3, r6
 800af2a:	dc19      	bgt.n	800af60 <__multadd+0x78>
 800af2c:	6861      	ldr	r1, [r4, #4]
 800af2e:	4638      	mov	r0, r7
 800af30:	3101      	adds	r1, #1
 800af32:	f7ff ff77 	bl	800ae24 <_Balloc>
 800af36:	4605      	mov	r5, r0
 800af38:	b928      	cbnz	r0, 800af46 <__multadd+0x5e>
 800af3a:	4602      	mov	r2, r0
 800af3c:	4b0d      	ldr	r3, [pc, #52]	; (800af74 <__multadd+0x8c>)
 800af3e:	480e      	ldr	r0, [pc, #56]	; (800af78 <__multadd+0x90>)
 800af40:	21b5      	movs	r1, #181	; 0xb5
 800af42:	f000 fec3 	bl	800bccc <__assert_func>
 800af46:	6922      	ldr	r2, [r4, #16]
 800af48:	3202      	adds	r2, #2
 800af4a:	f104 010c 	add.w	r1, r4, #12
 800af4e:	0092      	lsls	r2, r2, #2
 800af50:	300c      	adds	r0, #12
 800af52:	f7ff ff59 	bl	800ae08 <memcpy>
 800af56:	4621      	mov	r1, r4
 800af58:	4638      	mov	r0, r7
 800af5a:	f7ff ffa3 	bl	800aea4 <_Bfree>
 800af5e:	462c      	mov	r4, r5
 800af60:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800af64:	3601      	adds	r6, #1
 800af66:	f8c3 8014 	str.w	r8, [r3, #20]
 800af6a:	6126      	str	r6, [r4, #16]
 800af6c:	4620      	mov	r0, r4
 800af6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800af72:	bf00      	nop
 800af74:	0800d1f7 	.word	0x0800d1f7
 800af78:	0800d268 	.word	0x0800d268

0800af7c <__hi0bits>:
 800af7c:	0c03      	lsrs	r3, r0, #16
 800af7e:	041b      	lsls	r3, r3, #16
 800af80:	b9d3      	cbnz	r3, 800afb8 <__hi0bits+0x3c>
 800af82:	0400      	lsls	r0, r0, #16
 800af84:	2310      	movs	r3, #16
 800af86:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800af8a:	bf04      	itt	eq
 800af8c:	0200      	lsleq	r0, r0, #8
 800af8e:	3308      	addeq	r3, #8
 800af90:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800af94:	bf04      	itt	eq
 800af96:	0100      	lsleq	r0, r0, #4
 800af98:	3304      	addeq	r3, #4
 800af9a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800af9e:	bf04      	itt	eq
 800afa0:	0080      	lsleq	r0, r0, #2
 800afa2:	3302      	addeq	r3, #2
 800afa4:	2800      	cmp	r0, #0
 800afa6:	db05      	blt.n	800afb4 <__hi0bits+0x38>
 800afa8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800afac:	f103 0301 	add.w	r3, r3, #1
 800afb0:	bf08      	it	eq
 800afb2:	2320      	moveq	r3, #32
 800afb4:	4618      	mov	r0, r3
 800afb6:	4770      	bx	lr
 800afb8:	2300      	movs	r3, #0
 800afba:	e7e4      	b.n	800af86 <__hi0bits+0xa>

0800afbc <__lo0bits>:
 800afbc:	6803      	ldr	r3, [r0, #0]
 800afbe:	f013 0207 	ands.w	r2, r3, #7
 800afc2:	4601      	mov	r1, r0
 800afc4:	d00b      	beq.n	800afde <__lo0bits+0x22>
 800afc6:	07da      	lsls	r2, r3, #31
 800afc8:	d424      	bmi.n	800b014 <__lo0bits+0x58>
 800afca:	0798      	lsls	r0, r3, #30
 800afcc:	bf49      	itett	mi
 800afce:	085b      	lsrmi	r3, r3, #1
 800afd0:	089b      	lsrpl	r3, r3, #2
 800afd2:	2001      	movmi	r0, #1
 800afd4:	600b      	strmi	r3, [r1, #0]
 800afd6:	bf5c      	itt	pl
 800afd8:	600b      	strpl	r3, [r1, #0]
 800afda:	2002      	movpl	r0, #2
 800afdc:	4770      	bx	lr
 800afde:	b298      	uxth	r0, r3
 800afe0:	b9b0      	cbnz	r0, 800b010 <__lo0bits+0x54>
 800afe2:	0c1b      	lsrs	r3, r3, #16
 800afe4:	2010      	movs	r0, #16
 800afe6:	f013 0fff 	tst.w	r3, #255	; 0xff
 800afea:	bf04      	itt	eq
 800afec:	0a1b      	lsreq	r3, r3, #8
 800afee:	3008      	addeq	r0, #8
 800aff0:	071a      	lsls	r2, r3, #28
 800aff2:	bf04      	itt	eq
 800aff4:	091b      	lsreq	r3, r3, #4
 800aff6:	3004      	addeq	r0, #4
 800aff8:	079a      	lsls	r2, r3, #30
 800affa:	bf04      	itt	eq
 800affc:	089b      	lsreq	r3, r3, #2
 800affe:	3002      	addeq	r0, #2
 800b000:	07da      	lsls	r2, r3, #31
 800b002:	d403      	bmi.n	800b00c <__lo0bits+0x50>
 800b004:	085b      	lsrs	r3, r3, #1
 800b006:	f100 0001 	add.w	r0, r0, #1
 800b00a:	d005      	beq.n	800b018 <__lo0bits+0x5c>
 800b00c:	600b      	str	r3, [r1, #0]
 800b00e:	4770      	bx	lr
 800b010:	4610      	mov	r0, r2
 800b012:	e7e8      	b.n	800afe6 <__lo0bits+0x2a>
 800b014:	2000      	movs	r0, #0
 800b016:	4770      	bx	lr
 800b018:	2020      	movs	r0, #32
 800b01a:	4770      	bx	lr

0800b01c <__i2b>:
 800b01c:	b510      	push	{r4, lr}
 800b01e:	460c      	mov	r4, r1
 800b020:	2101      	movs	r1, #1
 800b022:	f7ff feff 	bl	800ae24 <_Balloc>
 800b026:	4602      	mov	r2, r0
 800b028:	b928      	cbnz	r0, 800b036 <__i2b+0x1a>
 800b02a:	4b05      	ldr	r3, [pc, #20]	; (800b040 <__i2b+0x24>)
 800b02c:	4805      	ldr	r0, [pc, #20]	; (800b044 <__i2b+0x28>)
 800b02e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800b032:	f000 fe4b 	bl	800bccc <__assert_func>
 800b036:	2301      	movs	r3, #1
 800b038:	6144      	str	r4, [r0, #20]
 800b03a:	6103      	str	r3, [r0, #16]
 800b03c:	bd10      	pop	{r4, pc}
 800b03e:	bf00      	nop
 800b040:	0800d1f7 	.word	0x0800d1f7
 800b044:	0800d268 	.word	0x0800d268

0800b048 <__multiply>:
 800b048:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b04c:	4614      	mov	r4, r2
 800b04e:	690a      	ldr	r2, [r1, #16]
 800b050:	6923      	ldr	r3, [r4, #16]
 800b052:	429a      	cmp	r2, r3
 800b054:	bfb8      	it	lt
 800b056:	460b      	movlt	r3, r1
 800b058:	460d      	mov	r5, r1
 800b05a:	bfbc      	itt	lt
 800b05c:	4625      	movlt	r5, r4
 800b05e:	461c      	movlt	r4, r3
 800b060:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800b064:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800b068:	68ab      	ldr	r3, [r5, #8]
 800b06a:	6869      	ldr	r1, [r5, #4]
 800b06c:	eb0a 0709 	add.w	r7, sl, r9
 800b070:	42bb      	cmp	r3, r7
 800b072:	b085      	sub	sp, #20
 800b074:	bfb8      	it	lt
 800b076:	3101      	addlt	r1, #1
 800b078:	f7ff fed4 	bl	800ae24 <_Balloc>
 800b07c:	b930      	cbnz	r0, 800b08c <__multiply+0x44>
 800b07e:	4602      	mov	r2, r0
 800b080:	4b42      	ldr	r3, [pc, #264]	; (800b18c <__multiply+0x144>)
 800b082:	4843      	ldr	r0, [pc, #268]	; (800b190 <__multiply+0x148>)
 800b084:	f240 115d 	movw	r1, #349	; 0x15d
 800b088:	f000 fe20 	bl	800bccc <__assert_func>
 800b08c:	f100 0614 	add.w	r6, r0, #20
 800b090:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800b094:	4633      	mov	r3, r6
 800b096:	2200      	movs	r2, #0
 800b098:	4543      	cmp	r3, r8
 800b09a:	d31e      	bcc.n	800b0da <__multiply+0x92>
 800b09c:	f105 0c14 	add.w	ip, r5, #20
 800b0a0:	f104 0314 	add.w	r3, r4, #20
 800b0a4:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800b0a8:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800b0ac:	9202      	str	r2, [sp, #8]
 800b0ae:	ebac 0205 	sub.w	r2, ip, r5
 800b0b2:	3a15      	subs	r2, #21
 800b0b4:	f022 0203 	bic.w	r2, r2, #3
 800b0b8:	3204      	adds	r2, #4
 800b0ba:	f105 0115 	add.w	r1, r5, #21
 800b0be:	458c      	cmp	ip, r1
 800b0c0:	bf38      	it	cc
 800b0c2:	2204      	movcc	r2, #4
 800b0c4:	9201      	str	r2, [sp, #4]
 800b0c6:	9a02      	ldr	r2, [sp, #8]
 800b0c8:	9303      	str	r3, [sp, #12]
 800b0ca:	429a      	cmp	r2, r3
 800b0cc:	d808      	bhi.n	800b0e0 <__multiply+0x98>
 800b0ce:	2f00      	cmp	r7, #0
 800b0d0:	dc55      	bgt.n	800b17e <__multiply+0x136>
 800b0d2:	6107      	str	r7, [r0, #16]
 800b0d4:	b005      	add	sp, #20
 800b0d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b0da:	f843 2b04 	str.w	r2, [r3], #4
 800b0de:	e7db      	b.n	800b098 <__multiply+0x50>
 800b0e0:	f8b3 a000 	ldrh.w	sl, [r3]
 800b0e4:	f1ba 0f00 	cmp.w	sl, #0
 800b0e8:	d020      	beq.n	800b12c <__multiply+0xe4>
 800b0ea:	f105 0e14 	add.w	lr, r5, #20
 800b0ee:	46b1      	mov	r9, r6
 800b0f0:	2200      	movs	r2, #0
 800b0f2:	f85e 4b04 	ldr.w	r4, [lr], #4
 800b0f6:	f8d9 b000 	ldr.w	fp, [r9]
 800b0fa:	b2a1      	uxth	r1, r4
 800b0fc:	fa1f fb8b 	uxth.w	fp, fp
 800b100:	fb0a b101 	mla	r1, sl, r1, fp
 800b104:	4411      	add	r1, r2
 800b106:	f8d9 2000 	ldr.w	r2, [r9]
 800b10a:	0c24      	lsrs	r4, r4, #16
 800b10c:	0c12      	lsrs	r2, r2, #16
 800b10e:	fb0a 2404 	mla	r4, sl, r4, r2
 800b112:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800b116:	b289      	uxth	r1, r1
 800b118:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800b11c:	45f4      	cmp	ip, lr
 800b11e:	f849 1b04 	str.w	r1, [r9], #4
 800b122:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800b126:	d8e4      	bhi.n	800b0f2 <__multiply+0xaa>
 800b128:	9901      	ldr	r1, [sp, #4]
 800b12a:	5072      	str	r2, [r6, r1]
 800b12c:	9a03      	ldr	r2, [sp, #12]
 800b12e:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800b132:	3304      	adds	r3, #4
 800b134:	f1b9 0f00 	cmp.w	r9, #0
 800b138:	d01f      	beq.n	800b17a <__multiply+0x132>
 800b13a:	6834      	ldr	r4, [r6, #0]
 800b13c:	f105 0114 	add.w	r1, r5, #20
 800b140:	46b6      	mov	lr, r6
 800b142:	f04f 0a00 	mov.w	sl, #0
 800b146:	880a      	ldrh	r2, [r1, #0]
 800b148:	f8be b002 	ldrh.w	fp, [lr, #2]
 800b14c:	fb09 b202 	mla	r2, r9, r2, fp
 800b150:	4492      	add	sl, r2
 800b152:	b2a4      	uxth	r4, r4
 800b154:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800b158:	f84e 4b04 	str.w	r4, [lr], #4
 800b15c:	f851 4b04 	ldr.w	r4, [r1], #4
 800b160:	f8be 2000 	ldrh.w	r2, [lr]
 800b164:	0c24      	lsrs	r4, r4, #16
 800b166:	fb09 2404 	mla	r4, r9, r4, r2
 800b16a:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800b16e:	458c      	cmp	ip, r1
 800b170:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800b174:	d8e7      	bhi.n	800b146 <__multiply+0xfe>
 800b176:	9a01      	ldr	r2, [sp, #4]
 800b178:	50b4      	str	r4, [r6, r2]
 800b17a:	3604      	adds	r6, #4
 800b17c:	e7a3      	b.n	800b0c6 <__multiply+0x7e>
 800b17e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800b182:	2b00      	cmp	r3, #0
 800b184:	d1a5      	bne.n	800b0d2 <__multiply+0x8a>
 800b186:	3f01      	subs	r7, #1
 800b188:	e7a1      	b.n	800b0ce <__multiply+0x86>
 800b18a:	bf00      	nop
 800b18c:	0800d1f7 	.word	0x0800d1f7
 800b190:	0800d268 	.word	0x0800d268

0800b194 <__pow5mult>:
 800b194:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b198:	4615      	mov	r5, r2
 800b19a:	f012 0203 	ands.w	r2, r2, #3
 800b19e:	4606      	mov	r6, r0
 800b1a0:	460f      	mov	r7, r1
 800b1a2:	d007      	beq.n	800b1b4 <__pow5mult+0x20>
 800b1a4:	4c25      	ldr	r4, [pc, #148]	; (800b23c <__pow5mult+0xa8>)
 800b1a6:	3a01      	subs	r2, #1
 800b1a8:	2300      	movs	r3, #0
 800b1aa:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b1ae:	f7ff fe9b 	bl	800aee8 <__multadd>
 800b1b2:	4607      	mov	r7, r0
 800b1b4:	10ad      	asrs	r5, r5, #2
 800b1b6:	d03d      	beq.n	800b234 <__pow5mult+0xa0>
 800b1b8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800b1ba:	b97c      	cbnz	r4, 800b1dc <__pow5mult+0x48>
 800b1bc:	2010      	movs	r0, #16
 800b1be:	f7ff fe1b 	bl	800adf8 <malloc>
 800b1c2:	4602      	mov	r2, r0
 800b1c4:	6270      	str	r0, [r6, #36]	; 0x24
 800b1c6:	b928      	cbnz	r0, 800b1d4 <__pow5mult+0x40>
 800b1c8:	4b1d      	ldr	r3, [pc, #116]	; (800b240 <__pow5mult+0xac>)
 800b1ca:	481e      	ldr	r0, [pc, #120]	; (800b244 <__pow5mult+0xb0>)
 800b1cc:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800b1d0:	f000 fd7c 	bl	800bccc <__assert_func>
 800b1d4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b1d8:	6004      	str	r4, [r0, #0]
 800b1da:	60c4      	str	r4, [r0, #12]
 800b1dc:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800b1e0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b1e4:	b94c      	cbnz	r4, 800b1fa <__pow5mult+0x66>
 800b1e6:	f240 2171 	movw	r1, #625	; 0x271
 800b1ea:	4630      	mov	r0, r6
 800b1ec:	f7ff ff16 	bl	800b01c <__i2b>
 800b1f0:	2300      	movs	r3, #0
 800b1f2:	f8c8 0008 	str.w	r0, [r8, #8]
 800b1f6:	4604      	mov	r4, r0
 800b1f8:	6003      	str	r3, [r0, #0]
 800b1fa:	f04f 0900 	mov.w	r9, #0
 800b1fe:	07eb      	lsls	r3, r5, #31
 800b200:	d50a      	bpl.n	800b218 <__pow5mult+0x84>
 800b202:	4639      	mov	r1, r7
 800b204:	4622      	mov	r2, r4
 800b206:	4630      	mov	r0, r6
 800b208:	f7ff ff1e 	bl	800b048 <__multiply>
 800b20c:	4639      	mov	r1, r7
 800b20e:	4680      	mov	r8, r0
 800b210:	4630      	mov	r0, r6
 800b212:	f7ff fe47 	bl	800aea4 <_Bfree>
 800b216:	4647      	mov	r7, r8
 800b218:	106d      	asrs	r5, r5, #1
 800b21a:	d00b      	beq.n	800b234 <__pow5mult+0xa0>
 800b21c:	6820      	ldr	r0, [r4, #0]
 800b21e:	b938      	cbnz	r0, 800b230 <__pow5mult+0x9c>
 800b220:	4622      	mov	r2, r4
 800b222:	4621      	mov	r1, r4
 800b224:	4630      	mov	r0, r6
 800b226:	f7ff ff0f 	bl	800b048 <__multiply>
 800b22a:	6020      	str	r0, [r4, #0]
 800b22c:	f8c0 9000 	str.w	r9, [r0]
 800b230:	4604      	mov	r4, r0
 800b232:	e7e4      	b.n	800b1fe <__pow5mult+0x6a>
 800b234:	4638      	mov	r0, r7
 800b236:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b23a:	bf00      	nop
 800b23c:	0800d3b8 	.word	0x0800d3b8
 800b240:	0800d181 	.word	0x0800d181
 800b244:	0800d268 	.word	0x0800d268

0800b248 <__lshift>:
 800b248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b24c:	460c      	mov	r4, r1
 800b24e:	6849      	ldr	r1, [r1, #4]
 800b250:	6923      	ldr	r3, [r4, #16]
 800b252:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b256:	68a3      	ldr	r3, [r4, #8]
 800b258:	4607      	mov	r7, r0
 800b25a:	4691      	mov	r9, r2
 800b25c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b260:	f108 0601 	add.w	r6, r8, #1
 800b264:	42b3      	cmp	r3, r6
 800b266:	db0b      	blt.n	800b280 <__lshift+0x38>
 800b268:	4638      	mov	r0, r7
 800b26a:	f7ff fddb 	bl	800ae24 <_Balloc>
 800b26e:	4605      	mov	r5, r0
 800b270:	b948      	cbnz	r0, 800b286 <__lshift+0x3e>
 800b272:	4602      	mov	r2, r0
 800b274:	4b28      	ldr	r3, [pc, #160]	; (800b318 <__lshift+0xd0>)
 800b276:	4829      	ldr	r0, [pc, #164]	; (800b31c <__lshift+0xd4>)
 800b278:	f240 11d9 	movw	r1, #473	; 0x1d9
 800b27c:	f000 fd26 	bl	800bccc <__assert_func>
 800b280:	3101      	adds	r1, #1
 800b282:	005b      	lsls	r3, r3, #1
 800b284:	e7ee      	b.n	800b264 <__lshift+0x1c>
 800b286:	2300      	movs	r3, #0
 800b288:	f100 0114 	add.w	r1, r0, #20
 800b28c:	f100 0210 	add.w	r2, r0, #16
 800b290:	4618      	mov	r0, r3
 800b292:	4553      	cmp	r3, sl
 800b294:	db33      	blt.n	800b2fe <__lshift+0xb6>
 800b296:	6920      	ldr	r0, [r4, #16]
 800b298:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b29c:	f104 0314 	add.w	r3, r4, #20
 800b2a0:	f019 091f 	ands.w	r9, r9, #31
 800b2a4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b2a8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800b2ac:	d02b      	beq.n	800b306 <__lshift+0xbe>
 800b2ae:	f1c9 0e20 	rsb	lr, r9, #32
 800b2b2:	468a      	mov	sl, r1
 800b2b4:	2200      	movs	r2, #0
 800b2b6:	6818      	ldr	r0, [r3, #0]
 800b2b8:	fa00 f009 	lsl.w	r0, r0, r9
 800b2bc:	4302      	orrs	r2, r0
 800b2be:	f84a 2b04 	str.w	r2, [sl], #4
 800b2c2:	f853 2b04 	ldr.w	r2, [r3], #4
 800b2c6:	459c      	cmp	ip, r3
 800b2c8:	fa22 f20e 	lsr.w	r2, r2, lr
 800b2cc:	d8f3      	bhi.n	800b2b6 <__lshift+0x6e>
 800b2ce:	ebac 0304 	sub.w	r3, ip, r4
 800b2d2:	3b15      	subs	r3, #21
 800b2d4:	f023 0303 	bic.w	r3, r3, #3
 800b2d8:	3304      	adds	r3, #4
 800b2da:	f104 0015 	add.w	r0, r4, #21
 800b2de:	4584      	cmp	ip, r0
 800b2e0:	bf38      	it	cc
 800b2e2:	2304      	movcc	r3, #4
 800b2e4:	50ca      	str	r2, [r1, r3]
 800b2e6:	b10a      	cbz	r2, 800b2ec <__lshift+0xa4>
 800b2e8:	f108 0602 	add.w	r6, r8, #2
 800b2ec:	3e01      	subs	r6, #1
 800b2ee:	4638      	mov	r0, r7
 800b2f0:	612e      	str	r6, [r5, #16]
 800b2f2:	4621      	mov	r1, r4
 800b2f4:	f7ff fdd6 	bl	800aea4 <_Bfree>
 800b2f8:	4628      	mov	r0, r5
 800b2fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b2fe:	f842 0f04 	str.w	r0, [r2, #4]!
 800b302:	3301      	adds	r3, #1
 800b304:	e7c5      	b.n	800b292 <__lshift+0x4a>
 800b306:	3904      	subs	r1, #4
 800b308:	f853 2b04 	ldr.w	r2, [r3], #4
 800b30c:	f841 2f04 	str.w	r2, [r1, #4]!
 800b310:	459c      	cmp	ip, r3
 800b312:	d8f9      	bhi.n	800b308 <__lshift+0xc0>
 800b314:	e7ea      	b.n	800b2ec <__lshift+0xa4>
 800b316:	bf00      	nop
 800b318:	0800d1f7 	.word	0x0800d1f7
 800b31c:	0800d268 	.word	0x0800d268

0800b320 <__mcmp>:
 800b320:	b530      	push	{r4, r5, lr}
 800b322:	6902      	ldr	r2, [r0, #16]
 800b324:	690c      	ldr	r4, [r1, #16]
 800b326:	1b12      	subs	r2, r2, r4
 800b328:	d10e      	bne.n	800b348 <__mcmp+0x28>
 800b32a:	f100 0314 	add.w	r3, r0, #20
 800b32e:	3114      	adds	r1, #20
 800b330:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800b334:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800b338:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800b33c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800b340:	42a5      	cmp	r5, r4
 800b342:	d003      	beq.n	800b34c <__mcmp+0x2c>
 800b344:	d305      	bcc.n	800b352 <__mcmp+0x32>
 800b346:	2201      	movs	r2, #1
 800b348:	4610      	mov	r0, r2
 800b34a:	bd30      	pop	{r4, r5, pc}
 800b34c:	4283      	cmp	r3, r0
 800b34e:	d3f3      	bcc.n	800b338 <__mcmp+0x18>
 800b350:	e7fa      	b.n	800b348 <__mcmp+0x28>
 800b352:	f04f 32ff 	mov.w	r2, #4294967295
 800b356:	e7f7      	b.n	800b348 <__mcmp+0x28>

0800b358 <__mdiff>:
 800b358:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b35c:	460c      	mov	r4, r1
 800b35e:	4606      	mov	r6, r0
 800b360:	4611      	mov	r1, r2
 800b362:	4620      	mov	r0, r4
 800b364:	4617      	mov	r7, r2
 800b366:	f7ff ffdb 	bl	800b320 <__mcmp>
 800b36a:	1e05      	subs	r5, r0, #0
 800b36c:	d110      	bne.n	800b390 <__mdiff+0x38>
 800b36e:	4629      	mov	r1, r5
 800b370:	4630      	mov	r0, r6
 800b372:	f7ff fd57 	bl	800ae24 <_Balloc>
 800b376:	b930      	cbnz	r0, 800b386 <__mdiff+0x2e>
 800b378:	4b39      	ldr	r3, [pc, #228]	; (800b460 <__mdiff+0x108>)
 800b37a:	4602      	mov	r2, r0
 800b37c:	f240 2132 	movw	r1, #562	; 0x232
 800b380:	4838      	ldr	r0, [pc, #224]	; (800b464 <__mdiff+0x10c>)
 800b382:	f000 fca3 	bl	800bccc <__assert_func>
 800b386:	2301      	movs	r3, #1
 800b388:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b38c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b390:	bfa4      	itt	ge
 800b392:	463b      	movge	r3, r7
 800b394:	4627      	movge	r7, r4
 800b396:	4630      	mov	r0, r6
 800b398:	6879      	ldr	r1, [r7, #4]
 800b39a:	bfa6      	itte	ge
 800b39c:	461c      	movge	r4, r3
 800b39e:	2500      	movge	r5, #0
 800b3a0:	2501      	movlt	r5, #1
 800b3a2:	f7ff fd3f 	bl	800ae24 <_Balloc>
 800b3a6:	b920      	cbnz	r0, 800b3b2 <__mdiff+0x5a>
 800b3a8:	4b2d      	ldr	r3, [pc, #180]	; (800b460 <__mdiff+0x108>)
 800b3aa:	4602      	mov	r2, r0
 800b3ac:	f44f 7110 	mov.w	r1, #576	; 0x240
 800b3b0:	e7e6      	b.n	800b380 <__mdiff+0x28>
 800b3b2:	693e      	ldr	r6, [r7, #16]
 800b3b4:	60c5      	str	r5, [r0, #12]
 800b3b6:	6925      	ldr	r5, [r4, #16]
 800b3b8:	f107 0114 	add.w	r1, r7, #20
 800b3bc:	f104 0914 	add.w	r9, r4, #20
 800b3c0:	f100 0e14 	add.w	lr, r0, #20
 800b3c4:	f107 0210 	add.w	r2, r7, #16
 800b3c8:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800b3cc:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800b3d0:	46f2      	mov	sl, lr
 800b3d2:	2700      	movs	r7, #0
 800b3d4:	f859 3b04 	ldr.w	r3, [r9], #4
 800b3d8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800b3dc:	fa1f f883 	uxth.w	r8, r3
 800b3e0:	fa17 f78b 	uxtah	r7, r7, fp
 800b3e4:	0c1b      	lsrs	r3, r3, #16
 800b3e6:	eba7 0808 	sub.w	r8, r7, r8
 800b3ea:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800b3ee:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800b3f2:	fa1f f888 	uxth.w	r8, r8
 800b3f6:	141f      	asrs	r7, r3, #16
 800b3f8:	454d      	cmp	r5, r9
 800b3fa:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800b3fe:	f84a 3b04 	str.w	r3, [sl], #4
 800b402:	d8e7      	bhi.n	800b3d4 <__mdiff+0x7c>
 800b404:	1b2b      	subs	r3, r5, r4
 800b406:	3b15      	subs	r3, #21
 800b408:	f023 0303 	bic.w	r3, r3, #3
 800b40c:	3304      	adds	r3, #4
 800b40e:	3415      	adds	r4, #21
 800b410:	42a5      	cmp	r5, r4
 800b412:	bf38      	it	cc
 800b414:	2304      	movcc	r3, #4
 800b416:	4419      	add	r1, r3
 800b418:	4473      	add	r3, lr
 800b41a:	469e      	mov	lr, r3
 800b41c:	460d      	mov	r5, r1
 800b41e:	4565      	cmp	r5, ip
 800b420:	d30e      	bcc.n	800b440 <__mdiff+0xe8>
 800b422:	f10c 0203 	add.w	r2, ip, #3
 800b426:	1a52      	subs	r2, r2, r1
 800b428:	f022 0203 	bic.w	r2, r2, #3
 800b42c:	3903      	subs	r1, #3
 800b42e:	458c      	cmp	ip, r1
 800b430:	bf38      	it	cc
 800b432:	2200      	movcc	r2, #0
 800b434:	441a      	add	r2, r3
 800b436:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800b43a:	b17b      	cbz	r3, 800b45c <__mdiff+0x104>
 800b43c:	6106      	str	r6, [r0, #16]
 800b43e:	e7a5      	b.n	800b38c <__mdiff+0x34>
 800b440:	f855 8b04 	ldr.w	r8, [r5], #4
 800b444:	fa17 f488 	uxtah	r4, r7, r8
 800b448:	1422      	asrs	r2, r4, #16
 800b44a:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800b44e:	b2a4      	uxth	r4, r4
 800b450:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800b454:	f84e 4b04 	str.w	r4, [lr], #4
 800b458:	1417      	asrs	r7, r2, #16
 800b45a:	e7e0      	b.n	800b41e <__mdiff+0xc6>
 800b45c:	3e01      	subs	r6, #1
 800b45e:	e7ea      	b.n	800b436 <__mdiff+0xde>
 800b460:	0800d1f7 	.word	0x0800d1f7
 800b464:	0800d268 	.word	0x0800d268

0800b468 <__d2b>:
 800b468:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b46c:	4689      	mov	r9, r1
 800b46e:	2101      	movs	r1, #1
 800b470:	ec57 6b10 	vmov	r6, r7, d0
 800b474:	4690      	mov	r8, r2
 800b476:	f7ff fcd5 	bl	800ae24 <_Balloc>
 800b47a:	4604      	mov	r4, r0
 800b47c:	b930      	cbnz	r0, 800b48c <__d2b+0x24>
 800b47e:	4602      	mov	r2, r0
 800b480:	4b25      	ldr	r3, [pc, #148]	; (800b518 <__d2b+0xb0>)
 800b482:	4826      	ldr	r0, [pc, #152]	; (800b51c <__d2b+0xb4>)
 800b484:	f240 310a 	movw	r1, #778	; 0x30a
 800b488:	f000 fc20 	bl	800bccc <__assert_func>
 800b48c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800b490:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800b494:	bb35      	cbnz	r5, 800b4e4 <__d2b+0x7c>
 800b496:	2e00      	cmp	r6, #0
 800b498:	9301      	str	r3, [sp, #4]
 800b49a:	d028      	beq.n	800b4ee <__d2b+0x86>
 800b49c:	4668      	mov	r0, sp
 800b49e:	9600      	str	r6, [sp, #0]
 800b4a0:	f7ff fd8c 	bl	800afbc <__lo0bits>
 800b4a4:	9900      	ldr	r1, [sp, #0]
 800b4a6:	b300      	cbz	r0, 800b4ea <__d2b+0x82>
 800b4a8:	9a01      	ldr	r2, [sp, #4]
 800b4aa:	f1c0 0320 	rsb	r3, r0, #32
 800b4ae:	fa02 f303 	lsl.w	r3, r2, r3
 800b4b2:	430b      	orrs	r3, r1
 800b4b4:	40c2      	lsrs	r2, r0
 800b4b6:	6163      	str	r3, [r4, #20]
 800b4b8:	9201      	str	r2, [sp, #4]
 800b4ba:	9b01      	ldr	r3, [sp, #4]
 800b4bc:	61a3      	str	r3, [r4, #24]
 800b4be:	2b00      	cmp	r3, #0
 800b4c0:	bf14      	ite	ne
 800b4c2:	2202      	movne	r2, #2
 800b4c4:	2201      	moveq	r2, #1
 800b4c6:	6122      	str	r2, [r4, #16]
 800b4c8:	b1d5      	cbz	r5, 800b500 <__d2b+0x98>
 800b4ca:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800b4ce:	4405      	add	r5, r0
 800b4d0:	f8c9 5000 	str.w	r5, [r9]
 800b4d4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800b4d8:	f8c8 0000 	str.w	r0, [r8]
 800b4dc:	4620      	mov	r0, r4
 800b4de:	b003      	add	sp, #12
 800b4e0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b4e4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b4e8:	e7d5      	b.n	800b496 <__d2b+0x2e>
 800b4ea:	6161      	str	r1, [r4, #20]
 800b4ec:	e7e5      	b.n	800b4ba <__d2b+0x52>
 800b4ee:	a801      	add	r0, sp, #4
 800b4f0:	f7ff fd64 	bl	800afbc <__lo0bits>
 800b4f4:	9b01      	ldr	r3, [sp, #4]
 800b4f6:	6163      	str	r3, [r4, #20]
 800b4f8:	2201      	movs	r2, #1
 800b4fa:	6122      	str	r2, [r4, #16]
 800b4fc:	3020      	adds	r0, #32
 800b4fe:	e7e3      	b.n	800b4c8 <__d2b+0x60>
 800b500:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b504:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800b508:	f8c9 0000 	str.w	r0, [r9]
 800b50c:	6918      	ldr	r0, [r3, #16]
 800b50e:	f7ff fd35 	bl	800af7c <__hi0bits>
 800b512:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b516:	e7df      	b.n	800b4d8 <__d2b+0x70>
 800b518:	0800d1f7 	.word	0x0800d1f7
 800b51c:	0800d268 	.word	0x0800d268

0800b520 <_calloc_r>:
 800b520:	b513      	push	{r0, r1, r4, lr}
 800b522:	434a      	muls	r2, r1
 800b524:	4611      	mov	r1, r2
 800b526:	9201      	str	r2, [sp, #4]
 800b528:	f000 f85a 	bl	800b5e0 <_malloc_r>
 800b52c:	4604      	mov	r4, r0
 800b52e:	b118      	cbz	r0, 800b538 <_calloc_r+0x18>
 800b530:	9a01      	ldr	r2, [sp, #4]
 800b532:	2100      	movs	r1, #0
 800b534:	f7fd fd0a 	bl	8008f4c <memset>
 800b538:	4620      	mov	r0, r4
 800b53a:	b002      	add	sp, #8
 800b53c:	bd10      	pop	{r4, pc}
	...

0800b540 <_free_r>:
 800b540:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b542:	2900      	cmp	r1, #0
 800b544:	d048      	beq.n	800b5d8 <_free_r+0x98>
 800b546:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b54a:	9001      	str	r0, [sp, #4]
 800b54c:	2b00      	cmp	r3, #0
 800b54e:	f1a1 0404 	sub.w	r4, r1, #4
 800b552:	bfb8      	it	lt
 800b554:	18e4      	addlt	r4, r4, r3
 800b556:	f000 fc59 	bl	800be0c <__malloc_lock>
 800b55a:	4a20      	ldr	r2, [pc, #128]	; (800b5dc <_free_r+0x9c>)
 800b55c:	9801      	ldr	r0, [sp, #4]
 800b55e:	6813      	ldr	r3, [r2, #0]
 800b560:	4615      	mov	r5, r2
 800b562:	b933      	cbnz	r3, 800b572 <_free_r+0x32>
 800b564:	6063      	str	r3, [r4, #4]
 800b566:	6014      	str	r4, [r2, #0]
 800b568:	b003      	add	sp, #12
 800b56a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b56e:	f000 bc53 	b.w	800be18 <__malloc_unlock>
 800b572:	42a3      	cmp	r3, r4
 800b574:	d90b      	bls.n	800b58e <_free_r+0x4e>
 800b576:	6821      	ldr	r1, [r4, #0]
 800b578:	1862      	adds	r2, r4, r1
 800b57a:	4293      	cmp	r3, r2
 800b57c:	bf04      	itt	eq
 800b57e:	681a      	ldreq	r2, [r3, #0]
 800b580:	685b      	ldreq	r3, [r3, #4]
 800b582:	6063      	str	r3, [r4, #4]
 800b584:	bf04      	itt	eq
 800b586:	1852      	addeq	r2, r2, r1
 800b588:	6022      	streq	r2, [r4, #0]
 800b58a:	602c      	str	r4, [r5, #0]
 800b58c:	e7ec      	b.n	800b568 <_free_r+0x28>
 800b58e:	461a      	mov	r2, r3
 800b590:	685b      	ldr	r3, [r3, #4]
 800b592:	b10b      	cbz	r3, 800b598 <_free_r+0x58>
 800b594:	42a3      	cmp	r3, r4
 800b596:	d9fa      	bls.n	800b58e <_free_r+0x4e>
 800b598:	6811      	ldr	r1, [r2, #0]
 800b59a:	1855      	adds	r5, r2, r1
 800b59c:	42a5      	cmp	r5, r4
 800b59e:	d10b      	bne.n	800b5b8 <_free_r+0x78>
 800b5a0:	6824      	ldr	r4, [r4, #0]
 800b5a2:	4421      	add	r1, r4
 800b5a4:	1854      	adds	r4, r2, r1
 800b5a6:	42a3      	cmp	r3, r4
 800b5a8:	6011      	str	r1, [r2, #0]
 800b5aa:	d1dd      	bne.n	800b568 <_free_r+0x28>
 800b5ac:	681c      	ldr	r4, [r3, #0]
 800b5ae:	685b      	ldr	r3, [r3, #4]
 800b5b0:	6053      	str	r3, [r2, #4]
 800b5b2:	4421      	add	r1, r4
 800b5b4:	6011      	str	r1, [r2, #0]
 800b5b6:	e7d7      	b.n	800b568 <_free_r+0x28>
 800b5b8:	d902      	bls.n	800b5c0 <_free_r+0x80>
 800b5ba:	230c      	movs	r3, #12
 800b5bc:	6003      	str	r3, [r0, #0]
 800b5be:	e7d3      	b.n	800b568 <_free_r+0x28>
 800b5c0:	6825      	ldr	r5, [r4, #0]
 800b5c2:	1961      	adds	r1, r4, r5
 800b5c4:	428b      	cmp	r3, r1
 800b5c6:	bf04      	itt	eq
 800b5c8:	6819      	ldreq	r1, [r3, #0]
 800b5ca:	685b      	ldreq	r3, [r3, #4]
 800b5cc:	6063      	str	r3, [r4, #4]
 800b5ce:	bf04      	itt	eq
 800b5d0:	1949      	addeq	r1, r1, r5
 800b5d2:	6021      	streq	r1, [r4, #0]
 800b5d4:	6054      	str	r4, [r2, #4]
 800b5d6:	e7c7      	b.n	800b568 <_free_r+0x28>
 800b5d8:	b003      	add	sp, #12
 800b5da:	bd30      	pop	{r4, r5, pc}
 800b5dc:	2000022c 	.word	0x2000022c

0800b5e0 <_malloc_r>:
 800b5e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b5e2:	1ccd      	adds	r5, r1, #3
 800b5e4:	f025 0503 	bic.w	r5, r5, #3
 800b5e8:	3508      	adds	r5, #8
 800b5ea:	2d0c      	cmp	r5, #12
 800b5ec:	bf38      	it	cc
 800b5ee:	250c      	movcc	r5, #12
 800b5f0:	2d00      	cmp	r5, #0
 800b5f2:	4606      	mov	r6, r0
 800b5f4:	db01      	blt.n	800b5fa <_malloc_r+0x1a>
 800b5f6:	42a9      	cmp	r1, r5
 800b5f8:	d903      	bls.n	800b602 <_malloc_r+0x22>
 800b5fa:	230c      	movs	r3, #12
 800b5fc:	6033      	str	r3, [r6, #0]
 800b5fe:	2000      	movs	r0, #0
 800b600:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b602:	f000 fc03 	bl	800be0c <__malloc_lock>
 800b606:	4921      	ldr	r1, [pc, #132]	; (800b68c <_malloc_r+0xac>)
 800b608:	680a      	ldr	r2, [r1, #0]
 800b60a:	4614      	mov	r4, r2
 800b60c:	b99c      	cbnz	r4, 800b636 <_malloc_r+0x56>
 800b60e:	4f20      	ldr	r7, [pc, #128]	; (800b690 <_malloc_r+0xb0>)
 800b610:	683b      	ldr	r3, [r7, #0]
 800b612:	b923      	cbnz	r3, 800b61e <_malloc_r+0x3e>
 800b614:	4621      	mov	r1, r4
 800b616:	4630      	mov	r0, r6
 800b618:	f000 faf2 	bl	800bc00 <_sbrk_r>
 800b61c:	6038      	str	r0, [r7, #0]
 800b61e:	4629      	mov	r1, r5
 800b620:	4630      	mov	r0, r6
 800b622:	f000 faed 	bl	800bc00 <_sbrk_r>
 800b626:	1c43      	adds	r3, r0, #1
 800b628:	d123      	bne.n	800b672 <_malloc_r+0x92>
 800b62a:	230c      	movs	r3, #12
 800b62c:	6033      	str	r3, [r6, #0]
 800b62e:	4630      	mov	r0, r6
 800b630:	f000 fbf2 	bl	800be18 <__malloc_unlock>
 800b634:	e7e3      	b.n	800b5fe <_malloc_r+0x1e>
 800b636:	6823      	ldr	r3, [r4, #0]
 800b638:	1b5b      	subs	r3, r3, r5
 800b63a:	d417      	bmi.n	800b66c <_malloc_r+0x8c>
 800b63c:	2b0b      	cmp	r3, #11
 800b63e:	d903      	bls.n	800b648 <_malloc_r+0x68>
 800b640:	6023      	str	r3, [r4, #0]
 800b642:	441c      	add	r4, r3
 800b644:	6025      	str	r5, [r4, #0]
 800b646:	e004      	b.n	800b652 <_malloc_r+0x72>
 800b648:	6863      	ldr	r3, [r4, #4]
 800b64a:	42a2      	cmp	r2, r4
 800b64c:	bf0c      	ite	eq
 800b64e:	600b      	streq	r3, [r1, #0]
 800b650:	6053      	strne	r3, [r2, #4]
 800b652:	4630      	mov	r0, r6
 800b654:	f000 fbe0 	bl	800be18 <__malloc_unlock>
 800b658:	f104 000b 	add.w	r0, r4, #11
 800b65c:	1d23      	adds	r3, r4, #4
 800b65e:	f020 0007 	bic.w	r0, r0, #7
 800b662:	1ac2      	subs	r2, r0, r3
 800b664:	d0cc      	beq.n	800b600 <_malloc_r+0x20>
 800b666:	1a1b      	subs	r3, r3, r0
 800b668:	50a3      	str	r3, [r4, r2]
 800b66a:	e7c9      	b.n	800b600 <_malloc_r+0x20>
 800b66c:	4622      	mov	r2, r4
 800b66e:	6864      	ldr	r4, [r4, #4]
 800b670:	e7cc      	b.n	800b60c <_malloc_r+0x2c>
 800b672:	1cc4      	adds	r4, r0, #3
 800b674:	f024 0403 	bic.w	r4, r4, #3
 800b678:	42a0      	cmp	r0, r4
 800b67a:	d0e3      	beq.n	800b644 <_malloc_r+0x64>
 800b67c:	1a21      	subs	r1, r4, r0
 800b67e:	4630      	mov	r0, r6
 800b680:	f000 fabe 	bl	800bc00 <_sbrk_r>
 800b684:	3001      	adds	r0, #1
 800b686:	d1dd      	bne.n	800b644 <_malloc_r+0x64>
 800b688:	e7cf      	b.n	800b62a <_malloc_r+0x4a>
 800b68a:	bf00      	nop
 800b68c:	2000022c 	.word	0x2000022c
 800b690:	20000230 	.word	0x20000230

0800b694 <__ssputs_r>:
 800b694:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b698:	688e      	ldr	r6, [r1, #8]
 800b69a:	429e      	cmp	r6, r3
 800b69c:	4682      	mov	sl, r0
 800b69e:	460c      	mov	r4, r1
 800b6a0:	4690      	mov	r8, r2
 800b6a2:	461f      	mov	r7, r3
 800b6a4:	d838      	bhi.n	800b718 <__ssputs_r+0x84>
 800b6a6:	898a      	ldrh	r2, [r1, #12]
 800b6a8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b6ac:	d032      	beq.n	800b714 <__ssputs_r+0x80>
 800b6ae:	6825      	ldr	r5, [r4, #0]
 800b6b0:	6909      	ldr	r1, [r1, #16]
 800b6b2:	eba5 0901 	sub.w	r9, r5, r1
 800b6b6:	6965      	ldr	r5, [r4, #20]
 800b6b8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b6bc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b6c0:	3301      	adds	r3, #1
 800b6c2:	444b      	add	r3, r9
 800b6c4:	106d      	asrs	r5, r5, #1
 800b6c6:	429d      	cmp	r5, r3
 800b6c8:	bf38      	it	cc
 800b6ca:	461d      	movcc	r5, r3
 800b6cc:	0553      	lsls	r3, r2, #21
 800b6ce:	d531      	bpl.n	800b734 <__ssputs_r+0xa0>
 800b6d0:	4629      	mov	r1, r5
 800b6d2:	f7ff ff85 	bl	800b5e0 <_malloc_r>
 800b6d6:	4606      	mov	r6, r0
 800b6d8:	b950      	cbnz	r0, 800b6f0 <__ssputs_r+0x5c>
 800b6da:	230c      	movs	r3, #12
 800b6dc:	f8ca 3000 	str.w	r3, [sl]
 800b6e0:	89a3      	ldrh	r3, [r4, #12]
 800b6e2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b6e6:	81a3      	strh	r3, [r4, #12]
 800b6e8:	f04f 30ff 	mov.w	r0, #4294967295
 800b6ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b6f0:	6921      	ldr	r1, [r4, #16]
 800b6f2:	464a      	mov	r2, r9
 800b6f4:	f7ff fb88 	bl	800ae08 <memcpy>
 800b6f8:	89a3      	ldrh	r3, [r4, #12]
 800b6fa:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b6fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b702:	81a3      	strh	r3, [r4, #12]
 800b704:	6126      	str	r6, [r4, #16]
 800b706:	6165      	str	r5, [r4, #20]
 800b708:	444e      	add	r6, r9
 800b70a:	eba5 0509 	sub.w	r5, r5, r9
 800b70e:	6026      	str	r6, [r4, #0]
 800b710:	60a5      	str	r5, [r4, #8]
 800b712:	463e      	mov	r6, r7
 800b714:	42be      	cmp	r6, r7
 800b716:	d900      	bls.n	800b71a <__ssputs_r+0x86>
 800b718:	463e      	mov	r6, r7
 800b71a:	4632      	mov	r2, r6
 800b71c:	6820      	ldr	r0, [r4, #0]
 800b71e:	4641      	mov	r1, r8
 800b720:	f000 fb5a 	bl	800bdd8 <memmove>
 800b724:	68a3      	ldr	r3, [r4, #8]
 800b726:	6822      	ldr	r2, [r4, #0]
 800b728:	1b9b      	subs	r3, r3, r6
 800b72a:	4432      	add	r2, r6
 800b72c:	60a3      	str	r3, [r4, #8]
 800b72e:	6022      	str	r2, [r4, #0]
 800b730:	2000      	movs	r0, #0
 800b732:	e7db      	b.n	800b6ec <__ssputs_r+0x58>
 800b734:	462a      	mov	r2, r5
 800b736:	f000 fb75 	bl	800be24 <_realloc_r>
 800b73a:	4606      	mov	r6, r0
 800b73c:	2800      	cmp	r0, #0
 800b73e:	d1e1      	bne.n	800b704 <__ssputs_r+0x70>
 800b740:	6921      	ldr	r1, [r4, #16]
 800b742:	4650      	mov	r0, sl
 800b744:	f7ff fefc 	bl	800b540 <_free_r>
 800b748:	e7c7      	b.n	800b6da <__ssputs_r+0x46>
	...

0800b74c <_svfiprintf_r>:
 800b74c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b750:	4698      	mov	r8, r3
 800b752:	898b      	ldrh	r3, [r1, #12]
 800b754:	061b      	lsls	r3, r3, #24
 800b756:	b09d      	sub	sp, #116	; 0x74
 800b758:	4607      	mov	r7, r0
 800b75a:	460d      	mov	r5, r1
 800b75c:	4614      	mov	r4, r2
 800b75e:	d50e      	bpl.n	800b77e <_svfiprintf_r+0x32>
 800b760:	690b      	ldr	r3, [r1, #16]
 800b762:	b963      	cbnz	r3, 800b77e <_svfiprintf_r+0x32>
 800b764:	2140      	movs	r1, #64	; 0x40
 800b766:	f7ff ff3b 	bl	800b5e0 <_malloc_r>
 800b76a:	6028      	str	r0, [r5, #0]
 800b76c:	6128      	str	r0, [r5, #16]
 800b76e:	b920      	cbnz	r0, 800b77a <_svfiprintf_r+0x2e>
 800b770:	230c      	movs	r3, #12
 800b772:	603b      	str	r3, [r7, #0]
 800b774:	f04f 30ff 	mov.w	r0, #4294967295
 800b778:	e0d1      	b.n	800b91e <_svfiprintf_r+0x1d2>
 800b77a:	2340      	movs	r3, #64	; 0x40
 800b77c:	616b      	str	r3, [r5, #20]
 800b77e:	2300      	movs	r3, #0
 800b780:	9309      	str	r3, [sp, #36]	; 0x24
 800b782:	2320      	movs	r3, #32
 800b784:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b788:	f8cd 800c 	str.w	r8, [sp, #12]
 800b78c:	2330      	movs	r3, #48	; 0x30
 800b78e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800b938 <_svfiprintf_r+0x1ec>
 800b792:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b796:	f04f 0901 	mov.w	r9, #1
 800b79a:	4623      	mov	r3, r4
 800b79c:	469a      	mov	sl, r3
 800b79e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b7a2:	b10a      	cbz	r2, 800b7a8 <_svfiprintf_r+0x5c>
 800b7a4:	2a25      	cmp	r2, #37	; 0x25
 800b7a6:	d1f9      	bne.n	800b79c <_svfiprintf_r+0x50>
 800b7a8:	ebba 0b04 	subs.w	fp, sl, r4
 800b7ac:	d00b      	beq.n	800b7c6 <_svfiprintf_r+0x7a>
 800b7ae:	465b      	mov	r3, fp
 800b7b0:	4622      	mov	r2, r4
 800b7b2:	4629      	mov	r1, r5
 800b7b4:	4638      	mov	r0, r7
 800b7b6:	f7ff ff6d 	bl	800b694 <__ssputs_r>
 800b7ba:	3001      	adds	r0, #1
 800b7bc:	f000 80aa 	beq.w	800b914 <_svfiprintf_r+0x1c8>
 800b7c0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b7c2:	445a      	add	r2, fp
 800b7c4:	9209      	str	r2, [sp, #36]	; 0x24
 800b7c6:	f89a 3000 	ldrb.w	r3, [sl]
 800b7ca:	2b00      	cmp	r3, #0
 800b7cc:	f000 80a2 	beq.w	800b914 <_svfiprintf_r+0x1c8>
 800b7d0:	2300      	movs	r3, #0
 800b7d2:	f04f 32ff 	mov.w	r2, #4294967295
 800b7d6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b7da:	f10a 0a01 	add.w	sl, sl, #1
 800b7de:	9304      	str	r3, [sp, #16]
 800b7e0:	9307      	str	r3, [sp, #28]
 800b7e2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b7e6:	931a      	str	r3, [sp, #104]	; 0x68
 800b7e8:	4654      	mov	r4, sl
 800b7ea:	2205      	movs	r2, #5
 800b7ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b7f0:	4851      	ldr	r0, [pc, #324]	; (800b938 <_svfiprintf_r+0x1ec>)
 800b7f2:	f7f4 fcf5 	bl	80001e0 <memchr>
 800b7f6:	9a04      	ldr	r2, [sp, #16]
 800b7f8:	b9d8      	cbnz	r0, 800b832 <_svfiprintf_r+0xe6>
 800b7fa:	06d0      	lsls	r0, r2, #27
 800b7fc:	bf44      	itt	mi
 800b7fe:	2320      	movmi	r3, #32
 800b800:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b804:	0711      	lsls	r1, r2, #28
 800b806:	bf44      	itt	mi
 800b808:	232b      	movmi	r3, #43	; 0x2b
 800b80a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b80e:	f89a 3000 	ldrb.w	r3, [sl]
 800b812:	2b2a      	cmp	r3, #42	; 0x2a
 800b814:	d015      	beq.n	800b842 <_svfiprintf_r+0xf6>
 800b816:	9a07      	ldr	r2, [sp, #28]
 800b818:	4654      	mov	r4, sl
 800b81a:	2000      	movs	r0, #0
 800b81c:	f04f 0c0a 	mov.w	ip, #10
 800b820:	4621      	mov	r1, r4
 800b822:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b826:	3b30      	subs	r3, #48	; 0x30
 800b828:	2b09      	cmp	r3, #9
 800b82a:	d94e      	bls.n	800b8ca <_svfiprintf_r+0x17e>
 800b82c:	b1b0      	cbz	r0, 800b85c <_svfiprintf_r+0x110>
 800b82e:	9207      	str	r2, [sp, #28]
 800b830:	e014      	b.n	800b85c <_svfiprintf_r+0x110>
 800b832:	eba0 0308 	sub.w	r3, r0, r8
 800b836:	fa09 f303 	lsl.w	r3, r9, r3
 800b83a:	4313      	orrs	r3, r2
 800b83c:	9304      	str	r3, [sp, #16]
 800b83e:	46a2      	mov	sl, r4
 800b840:	e7d2      	b.n	800b7e8 <_svfiprintf_r+0x9c>
 800b842:	9b03      	ldr	r3, [sp, #12]
 800b844:	1d19      	adds	r1, r3, #4
 800b846:	681b      	ldr	r3, [r3, #0]
 800b848:	9103      	str	r1, [sp, #12]
 800b84a:	2b00      	cmp	r3, #0
 800b84c:	bfbb      	ittet	lt
 800b84e:	425b      	neglt	r3, r3
 800b850:	f042 0202 	orrlt.w	r2, r2, #2
 800b854:	9307      	strge	r3, [sp, #28]
 800b856:	9307      	strlt	r3, [sp, #28]
 800b858:	bfb8      	it	lt
 800b85a:	9204      	strlt	r2, [sp, #16]
 800b85c:	7823      	ldrb	r3, [r4, #0]
 800b85e:	2b2e      	cmp	r3, #46	; 0x2e
 800b860:	d10c      	bne.n	800b87c <_svfiprintf_r+0x130>
 800b862:	7863      	ldrb	r3, [r4, #1]
 800b864:	2b2a      	cmp	r3, #42	; 0x2a
 800b866:	d135      	bne.n	800b8d4 <_svfiprintf_r+0x188>
 800b868:	9b03      	ldr	r3, [sp, #12]
 800b86a:	1d1a      	adds	r2, r3, #4
 800b86c:	681b      	ldr	r3, [r3, #0]
 800b86e:	9203      	str	r2, [sp, #12]
 800b870:	2b00      	cmp	r3, #0
 800b872:	bfb8      	it	lt
 800b874:	f04f 33ff 	movlt.w	r3, #4294967295
 800b878:	3402      	adds	r4, #2
 800b87a:	9305      	str	r3, [sp, #20]
 800b87c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800b948 <_svfiprintf_r+0x1fc>
 800b880:	7821      	ldrb	r1, [r4, #0]
 800b882:	2203      	movs	r2, #3
 800b884:	4650      	mov	r0, sl
 800b886:	f7f4 fcab 	bl	80001e0 <memchr>
 800b88a:	b140      	cbz	r0, 800b89e <_svfiprintf_r+0x152>
 800b88c:	2340      	movs	r3, #64	; 0x40
 800b88e:	eba0 000a 	sub.w	r0, r0, sl
 800b892:	fa03 f000 	lsl.w	r0, r3, r0
 800b896:	9b04      	ldr	r3, [sp, #16]
 800b898:	4303      	orrs	r3, r0
 800b89a:	3401      	adds	r4, #1
 800b89c:	9304      	str	r3, [sp, #16]
 800b89e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b8a2:	4826      	ldr	r0, [pc, #152]	; (800b93c <_svfiprintf_r+0x1f0>)
 800b8a4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b8a8:	2206      	movs	r2, #6
 800b8aa:	f7f4 fc99 	bl	80001e0 <memchr>
 800b8ae:	2800      	cmp	r0, #0
 800b8b0:	d038      	beq.n	800b924 <_svfiprintf_r+0x1d8>
 800b8b2:	4b23      	ldr	r3, [pc, #140]	; (800b940 <_svfiprintf_r+0x1f4>)
 800b8b4:	bb1b      	cbnz	r3, 800b8fe <_svfiprintf_r+0x1b2>
 800b8b6:	9b03      	ldr	r3, [sp, #12]
 800b8b8:	3307      	adds	r3, #7
 800b8ba:	f023 0307 	bic.w	r3, r3, #7
 800b8be:	3308      	adds	r3, #8
 800b8c0:	9303      	str	r3, [sp, #12]
 800b8c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b8c4:	4433      	add	r3, r6
 800b8c6:	9309      	str	r3, [sp, #36]	; 0x24
 800b8c8:	e767      	b.n	800b79a <_svfiprintf_r+0x4e>
 800b8ca:	fb0c 3202 	mla	r2, ip, r2, r3
 800b8ce:	460c      	mov	r4, r1
 800b8d0:	2001      	movs	r0, #1
 800b8d2:	e7a5      	b.n	800b820 <_svfiprintf_r+0xd4>
 800b8d4:	2300      	movs	r3, #0
 800b8d6:	3401      	adds	r4, #1
 800b8d8:	9305      	str	r3, [sp, #20]
 800b8da:	4619      	mov	r1, r3
 800b8dc:	f04f 0c0a 	mov.w	ip, #10
 800b8e0:	4620      	mov	r0, r4
 800b8e2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b8e6:	3a30      	subs	r2, #48	; 0x30
 800b8e8:	2a09      	cmp	r2, #9
 800b8ea:	d903      	bls.n	800b8f4 <_svfiprintf_r+0x1a8>
 800b8ec:	2b00      	cmp	r3, #0
 800b8ee:	d0c5      	beq.n	800b87c <_svfiprintf_r+0x130>
 800b8f0:	9105      	str	r1, [sp, #20]
 800b8f2:	e7c3      	b.n	800b87c <_svfiprintf_r+0x130>
 800b8f4:	fb0c 2101 	mla	r1, ip, r1, r2
 800b8f8:	4604      	mov	r4, r0
 800b8fa:	2301      	movs	r3, #1
 800b8fc:	e7f0      	b.n	800b8e0 <_svfiprintf_r+0x194>
 800b8fe:	ab03      	add	r3, sp, #12
 800b900:	9300      	str	r3, [sp, #0]
 800b902:	462a      	mov	r2, r5
 800b904:	4b0f      	ldr	r3, [pc, #60]	; (800b944 <_svfiprintf_r+0x1f8>)
 800b906:	a904      	add	r1, sp, #16
 800b908:	4638      	mov	r0, r7
 800b90a:	f7fd fbc7 	bl	800909c <_printf_float>
 800b90e:	1c42      	adds	r2, r0, #1
 800b910:	4606      	mov	r6, r0
 800b912:	d1d6      	bne.n	800b8c2 <_svfiprintf_r+0x176>
 800b914:	89ab      	ldrh	r3, [r5, #12]
 800b916:	065b      	lsls	r3, r3, #25
 800b918:	f53f af2c 	bmi.w	800b774 <_svfiprintf_r+0x28>
 800b91c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b91e:	b01d      	add	sp, #116	; 0x74
 800b920:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b924:	ab03      	add	r3, sp, #12
 800b926:	9300      	str	r3, [sp, #0]
 800b928:	462a      	mov	r2, r5
 800b92a:	4b06      	ldr	r3, [pc, #24]	; (800b944 <_svfiprintf_r+0x1f8>)
 800b92c:	a904      	add	r1, sp, #16
 800b92e:	4638      	mov	r0, r7
 800b930:	f7fd fe58 	bl	80095e4 <_printf_i>
 800b934:	e7eb      	b.n	800b90e <_svfiprintf_r+0x1c2>
 800b936:	bf00      	nop
 800b938:	0800d3c4 	.word	0x0800d3c4
 800b93c:	0800d3ce 	.word	0x0800d3ce
 800b940:	0800909d 	.word	0x0800909d
 800b944:	0800b695 	.word	0x0800b695
 800b948:	0800d3ca 	.word	0x0800d3ca

0800b94c <__sfputc_r>:
 800b94c:	6893      	ldr	r3, [r2, #8]
 800b94e:	3b01      	subs	r3, #1
 800b950:	2b00      	cmp	r3, #0
 800b952:	b410      	push	{r4}
 800b954:	6093      	str	r3, [r2, #8]
 800b956:	da08      	bge.n	800b96a <__sfputc_r+0x1e>
 800b958:	6994      	ldr	r4, [r2, #24]
 800b95a:	42a3      	cmp	r3, r4
 800b95c:	db01      	blt.n	800b962 <__sfputc_r+0x16>
 800b95e:	290a      	cmp	r1, #10
 800b960:	d103      	bne.n	800b96a <__sfputc_r+0x1e>
 800b962:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b966:	f7fe b8eb 	b.w	8009b40 <__swbuf_r>
 800b96a:	6813      	ldr	r3, [r2, #0]
 800b96c:	1c58      	adds	r0, r3, #1
 800b96e:	6010      	str	r0, [r2, #0]
 800b970:	7019      	strb	r1, [r3, #0]
 800b972:	4608      	mov	r0, r1
 800b974:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b978:	4770      	bx	lr

0800b97a <__sfputs_r>:
 800b97a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b97c:	4606      	mov	r6, r0
 800b97e:	460f      	mov	r7, r1
 800b980:	4614      	mov	r4, r2
 800b982:	18d5      	adds	r5, r2, r3
 800b984:	42ac      	cmp	r4, r5
 800b986:	d101      	bne.n	800b98c <__sfputs_r+0x12>
 800b988:	2000      	movs	r0, #0
 800b98a:	e007      	b.n	800b99c <__sfputs_r+0x22>
 800b98c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b990:	463a      	mov	r2, r7
 800b992:	4630      	mov	r0, r6
 800b994:	f7ff ffda 	bl	800b94c <__sfputc_r>
 800b998:	1c43      	adds	r3, r0, #1
 800b99a:	d1f3      	bne.n	800b984 <__sfputs_r+0xa>
 800b99c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b9a0 <_vfiprintf_r>:
 800b9a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b9a4:	460d      	mov	r5, r1
 800b9a6:	b09d      	sub	sp, #116	; 0x74
 800b9a8:	4614      	mov	r4, r2
 800b9aa:	4698      	mov	r8, r3
 800b9ac:	4606      	mov	r6, r0
 800b9ae:	b118      	cbz	r0, 800b9b8 <_vfiprintf_r+0x18>
 800b9b0:	6983      	ldr	r3, [r0, #24]
 800b9b2:	b90b      	cbnz	r3, 800b9b8 <_vfiprintf_r+0x18>
 800b9b4:	f7ff f916 	bl	800abe4 <__sinit>
 800b9b8:	4b89      	ldr	r3, [pc, #548]	; (800bbe0 <_vfiprintf_r+0x240>)
 800b9ba:	429d      	cmp	r5, r3
 800b9bc:	d11b      	bne.n	800b9f6 <_vfiprintf_r+0x56>
 800b9be:	6875      	ldr	r5, [r6, #4]
 800b9c0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b9c2:	07d9      	lsls	r1, r3, #31
 800b9c4:	d405      	bmi.n	800b9d2 <_vfiprintf_r+0x32>
 800b9c6:	89ab      	ldrh	r3, [r5, #12]
 800b9c8:	059a      	lsls	r2, r3, #22
 800b9ca:	d402      	bmi.n	800b9d2 <_vfiprintf_r+0x32>
 800b9cc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b9ce:	f7ff f9ac 	bl	800ad2a <__retarget_lock_acquire_recursive>
 800b9d2:	89ab      	ldrh	r3, [r5, #12]
 800b9d4:	071b      	lsls	r3, r3, #28
 800b9d6:	d501      	bpl.n	800b9dc <_vfiprintf_r+0x3c>
 800b9d8:	692b      	ldr	r3, [r5, #16]
 800b9da:	b9eb      	cbnz	r3, 800ba18 <_vfiprintf_r+0x78>
 800b9dc:	4629      	mov	r1, r5
 800b9de:	4630      	mov	r0, r6
 800b9e0:	f7fe f900 	bl	8009be4 <__swsetup_r>
 800b9e4:	b1c0      	cbz	r0, 800ba18 <_vfiprintf_r+0x78>
 800b9e6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b9e8:	07dc      	lsls	r4, r3, #31
 800b9ea:	d50e      	bpl.n	800ba0a <_vfiprintf_r+0x6a>
 800b9ec:	f04f 30ff 	mov.w	r0, #4294967295
 800b9f0:	b01d      	add	sp, #116	; 0x74
 800b9f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b9f6:	4b7b      	ldr	r3, [pc, #492]	; (800bbe4 <_vfiprintf_r+0x244>)
 800b9f8:	429d      	cmp	r5, r3
 800b9fa:	d101      	bne.n	800ba00 <_vfiprintf_r+0x60>
 800b9fc:	68b5      	ldr	r5, [r6, #8]
 800b9fe:	e7df      	b.n	800b9c0 <_vfiprintf_r+0x20>
 800ba00:	4b79      	ldr	r3, [pc, #484]	; (800bbe8 <_vfiprintf_r+0x248>)
 800ba02:	429d      	cmp	r5, r3
 800ba04:	bf08      	it	eq
 800ba06:	68f5      	ldreq	r5, [r6, #12]
 800ba08:	e7da      	b.n	800b9c0 <_vfiprintf_r+0x20>
 800ba0a:	89ab      	ldrh	r3, [r5, #12]
 800ba0c:	0598      	lsls	r0, r3, #22
 800ba0e:	d4ed      	bmi.n	800b9ec <_vfiprintf_r+0x4c>
 800ba10:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ba12:	f7ff f98b 	bl	800ad2c <__retarget_lock_release_recursive>
 800ba16:	e7e9      	b.n	800b9ec <_vfiprintf_r+0x4c>
 800ba18:	2300      	movs	r3, #0
 800ba1a:	9309      	str	r3, [sp, #36]	; 0x24
 800ba1c:	2320      	movs	r3, #32
 800ba1e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ba22:	f8cd 800c 	str.w	r8, [sp, #12]
 800ba26:	2330      	movs	r3, #48	; 0x30
 800ba28:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800bbec <_vfiprintf_r+0x24c>
 800ba2c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ba30:	f04f 0901 	mov.w	r9, #1
 800ba34:	4623      	mov	r3, r4
 800ba36:	469a      	mov	sl, r3
 800ba38:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ba3c:	b10a      	cbz	r2, 800ba42 <_vfiprintf_r+0xa2>
 800ba3e:	2a25      	cmp	r2, #37	; 0x25
 800ba40:	d1f9      	bne.n	800ba36 <_vfiprintf_r+0x96>
 800ba42:	ebba 0b04 	subs.w	fp, sl, r4
 800ba46:	d00b      	beq.n	800ba60 <_vfiprintf_r+0xc0>
 800ba48:	465b      	mov	r3, fp
 800ba4a:	4622      	mov	r2, r4
 800ba4c:	4629      	mov	r1, r5
 800ba4e:	4630      	mov	r0, r6
 800ba50:	f7ff ff93 	bl	800b97a <__sfputs_r>
 800ba54:	3001      	adds	r0, #1
 800ba56:	f000 80aa 	beq.w	800bbae <_vfiprintf_r+0x20e>
 800ba5a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ba5c:	445a      	add	r2, fp
 800ba5e:	9209      	str	r2, [sp, #36]	; 0x24
 800ba60:	f89a 3000 	ldrb.w	r3, [sl]
 800ba64:	2b00      	cmp	r3, #0
 800ba66:	f000 80a2 	beq.w	800bbae <_vfiprintf_r+0x20e>
 800ba6a:	2300      	movs	r3, #0
 800ba6c:	f04f 32ff 	mov.w	r2, #4294967295
 800ba70:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ba74:	f10a 0a01 	add.w	sl, sl, #1
 800ba78:	9304      	str	r3, [sp, #16]
 800ba7a:	9307      	str	r3, [sp, #28]
 800ba7c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ba80:	931a      	str	r3, [sp, #104]	; 0x68
 800ba82:	4654      	mov	r4, sl
 800ba84:	2205      	movs	r2, #5
 800ba86:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ba8a:	4858      	ldr	r0, [pc, #352]	; (800bbec <_vfiprintf_r+0x24c>)
 800ba8c:	f7f4 fba8 	bl	80001e0 <memchr>
 800ba90:	9a04      	ldr	r2, [sp, #16]
 800ba92:	b9d8      	cbnz	r0, 800bacc <_vfiprintf_r+0x12c>
 800ba94:	06d1      	lsls	r1, r2, #27
 800ba96:	bf44      	itt	mi
 800ba98:	2320      	movmi	r3, #32
 800ba9a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ba9e:	0713      	lsls	r3, r2, #28
 800baa0:	bf44      	itt	mi
 800baa2:	232b      	movmi	r3, #43	; 0x2b
 800baa4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800baa8:	f89a 3000 	ldrb.w	r3, [sl]
 800baac:	2b2a      	cmp	r3, #42	; 0x2a
 800baae:	d015      	beq.n	800badc <_vfiprintf_r+0x13c>
 800bab0:	9a07      	ldr	r2, [sp, #28]
 800bab2:	4654      	mov	r4, sl
 800bab4:	2000      	movs	r0, #0
 800bab6:	f04f 0c0a 	mov.w	ip, #10
 800baba:	4621      	mov	r1, r4
 800babc:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bac0:	3b30      	subs	r3, #48	; 0x30
 800bac2:	2b09      	cmp	r3, #9
 800bac4:	d94e      	bls.n	800bb64 <_vfiprintf_r+0x1c4>
 800bac6:	b1b0      	cbz	r0, 800baf6 <_vfiprintf_r+0x156>
 800bac8:	9207      	str	r2, [sp, #28]
 800baca:	e014      	b.n	800baf6 <_vfiprintf_r+0x156>
 800bacc:	eba0 0308 	sub.w	r3, r0, r8
 800bad0:	fa09 f303 	lsl.w	r3, r9, r3
 800bad4:	4313      	orrs	r3, r2
 800bad6:	9304      	str	r3, [sp, #16]
 800bad8:	46a2      	mov	sl, r4
 800bada:	e7d2      	b.n	800ba82 <_vfiprintf_r+0xe2>
 800badc:	9b03      	ldr	r3, [sp, #12]
 800bade:	1d19      	adds	r1, r3, #4
 800bae0:	681b      	ldr	r3, [r3, #0]
 800bae2:	9103      	str	r1, [sp, #12]
 800bae4:	2b00      	cmp	r3, #0
 800bae6:	bfbb      	ittet	lt
 800bae8:	425b      	neglt	r3, r3
 800baea:	f042 0202 	orrlt.w	r2, r2, #2
 800baee:	9307      	strge	r3, [sp, #28]
 800baf0:	9307      	strlt	r3, [sp, #28]
 800baf2:	bfb8      	it	lt
 800baf4:	9204      	strlt	r2, [sp, #16]
 800baf6:	7823      	ldrb	r3, [r4, #0]
 800baf8:	2b2e      	cmp	r3, #46	; 0x2e
 800bafa:	d10c      	bne.n	800bb16 <_vfiprintf_r+0x176>
 800bafc:	7863      	ldrb	r3, [r4, #1]
 800bafe:	2b2a      	cmp	r3, #42	; 0x2a
 800bb00:	d135      	bne.n	800bb6e <_vfiprintf_r+0x1ce>
 800bb02:	9b03      	ldr	r3, [sp, #12]
 800bb04:	1d1a      	adds	r2, r3, #4
 800bb06:	681b      	ldr	r3, [r3, #0]
 800bb08:	9203      	str	r2, [sp, #12]
 800bb0a:	2b00      	cmp	r3, #0
 800bb0c:	bfb8      	it	lt
 800bb0e:	f04f 33ff 	movlt.w	r3, #4294967295
 800bb12:	3402      	adds	r4, #2
 800bb14:	9305      	str	r3, [sp, #20]
 800bb16:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800bbfc <_vfiprintf_r+0x25c>
 800bb1a:	7821      	ldrb	r1, [r4, #0]
 800bb1c:	2203      	movs	r2, #3
 800bb1e:	4650      	mov	r0, sl
 800bb20:	f7f4 fb5e 	bl	80001e0 <memchr>
 800bb24:	b140      	cbz	r0, 800bb38 <_vfiprintf_r+0x198>
 800bb26:	2340      	movs	r3, #64	; 0x40
 800bb28:	eba0 000a 	sub.w	r0, r0, sl
 800bb2c:	fa03 f000 	lsl.w	r0, r3, r0
 800bb30:	9b04      	ldr	r3, [sp, #16]
 800bb32:	4303      	orrs	r3, r0
 800bb34:	3401      	adds	r4, #1
 800bb36:	9304      	str	r3, [sp, #16]
 800bb38:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bb3c:	482c      	ldr	r0, [pc, #176]	; (800bbf0 <_vfiprintf_r+0x250>)
 800bb3e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800bb42:	2206      	movs	r2, #6
 800bb44:	f7f4 fb4c 	bl	80001e0 <memchr>
 800bb48:	2800      	cmp	r0, #0
 800bb4a:	d03f      	beq.n	800bbcc <_vfiprintf_r+0x22c>
 800bb4c:	4b29      	ldr	r3, [pc, #164]	; (800bbf4 <_vfiprintf_r+0x254>)
 800bb4e:	bb1b      	cbnz	r3, 800bb98 <_vfiprintf_r+0x1f8>
 800bb50:	9b03      	ldr	r3, [sp, #12]
 800bb52:	3307      	adds	r3, #7
 800bb54:	f023 0307 	bic.w	r3, r3, #7
 800bb58:	3308      	adds	r3, #8
 800bb5a:	9303      	str	r3, [sp, #12]
 800bb5c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bb5e:	443b      	add	r3, r7
 800bb60:	9309      	str	r3, [sp, #36]	; 0x24
 800bb62:	e767      	b.n	800ba34 <_vfiprintf_r+0x94>
 800bb64:	fb0c 3202 	mla	r2, ip, r2, r3
 800bb68:	460c      	mov	r4, r1
 800bb6a:	2001      	movs	r0, #1
 800bb6c:	e7a5      	b.n	800baba <_vfiprintf_r+0x11a>
 800bb6e:	2300      	movs	r3, #0
 800bb70:	3401      	adds	r4, #1
 800bb72:	9305      	str	r3, [sp, #20]
 800bb74:	4619      	mov	r1, r3
 800bb76:	f04f 0c0a 	mov.w	ip, #10
 800bb7a:	4620      	mov	r0, r4
 800bb7c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bb80:	3a30      	subs	r2, #48	; 0x30
 800bb82:	2a09      	cmp	r2, #9
 800bb84:	d903      	bls.n	800bb8e <_vfiprintf_r+0x1ee>
 800bb86:	2b00      	cmp	r3, #0
 800bb88:	d0c5      	beq.n	800bb16 <_vfiprintf_r+0x176>
 800bb8a:	9105      	str	r1, [sp, #20]
 800bb8c:	e7c3      	b.n	800bb16 <_vfiprintf_r+0x176>
 800bb8e:	fb0c 2101 	mla	r1, ip, r1, r2
 800bb92:	4604      	mov	r4, r0
 800bb94:	2301      	movs	r3, #1
 800bb96:	e7f0      	b.n	800bb7a <_vfiprintf_r+0x1da>
 800bb98:	ab03      	add	r3, sp, #12
 800bb9a:	9300      	str	r3, [sp, #0]
 800bb9c:	462a      	mov	r2, r5
 800bb9e:	4b16      	ldr	r3, [pc, #88]	; (800bbf8 <_vfiprintf_r+0x258>)
 800bba0:	a904      	add	r1, sp, #16
 800bba2:	4630      	mov	r0, r6
 800bba4:	f7fd fa7a 	bl	800909c <_printf_float>
 800bba8:	4607      	mov	r7, r0
 800bbaa:	1c78      	adds	r0, r7, #1
 800bbac:	d1d6      	bne.n	800bb5c <_vfiprintf_r+0x1bc>
 800bbae:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bbb0:	07d9      	lsls	r1, r3, #31
 800bbb2:	d405      	bmi.n	800bbc0 <_vfiprintf_r+0x220>
 800bbb4:	89ab      	ldrh	r3, [r5, #12]
 800bbb6:	059a      	lsls	r2, r3, #22
 800bbb8:	d402      	bmi.n	800bbc0 <_vfiprintf_r+0x220>
 800bbba:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bbbc:	f7ff f8b6 	bl	800ad2c <__retarget_lock_release_recursive>
 800bbc0:	89ab      	ldrh	r3, [r5, #12]
 800bbc2:	065b      	lsls	r3, r3, #25
 800bbc4:	f53f af12 	bmi.w	800b9ec <_vfiprintf_r+0x4c>
 800bbc8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bbca:	e711      	b.n	800b9f0 <_vfiprintf_r+0x50>
 800bbcc:	ab03      	add	r3, sp, #12
 800bbce:	9300      	str	r3, [sp, #0]
 800bbd0:	462a      	mov	r2, r5
 800bbd2:	4b09      	ldr	r3, [pc, #36]	; (800bbf8 <_vfiprintf_r+0x258>)
 800bbd4:	a904      	add	r1, sp, #16
 800bbd6:	4630      	mov	r0, r6
 800bbd8:	f7fd fd04 	bl	80095e4 <_printf_i>
 800bbdc:	e7e4      	b.n	800bba8 <_vfiprintf_r+0x208>
 800bbde:	bf00      	nop
 800bbe0:	0800d228 	.word	0x0800d228
 800bbe4:	0800d248 	.word	0x0800d248
 800bbe8:	0800d208 	.word	0x0800d208
 800bbec:	0800d3c4 	.word	0x0800d3c4
 800bbf0:	0800d3ce 	.word	0x0800d3ce
 800bbf4:	0800909d 	.word	0x0800909d
 800bbf8:	0800b97b 	.word	0x0800b97b
 800bbfc:	0800d3ca 	.word	0x0800d3ca

0800bc00 <_sbrk_r>:
 800bc00:	b538      	push	{r3, r4, r5, lr}
 800bc02:	4d06      	ldr	r5, [pc, #24]	; (800bc1c <_sbrk_r+0x1c>)
 800bc04:	2300      	movs	r3, #0
 800bc06:	4604      	mov	r4, r0
 800bc08:	4608      	mov	r0, r1
 800bc0a:	602b      	str	r3, [r5, #0]
 800bc0c:	f7f6 ffce 	bl	8002bac <_sbrk>
 800bc10:	1c43      	adds	r3, r0, #1
 800bc12:	d102      	bne.n	800bc1a <_sbrk_r+0x1a>
 800bc14:	682b      	ldr	r3, [r5, #0]
 800bc16:	b103      	cbz	r3, 800bc1a <_sbrk_r+0x1a>
 800bc18:	6023      	str	r3, [r4, #0]
 800bc1a:	bd38      	pop	{r3, r4, r5, pc}
 800bc1c:	20000954 	.word	0x20000954

0800bc20 <__sread>:
 800bc20:	b510      	push	{r4, lr}
 800bc22:	460c      	mov	r4, r1
 800bc24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bc28:	f000 f922 	bl	800be70 <_read_r>
 800bc2c:	2800      	cmp	r0, #0
 800bc2e:	bfab      	itete	ge
 800bc30:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800bc32:	89a3      	ldrhlt	r3, [r4, #12]
 800bc34:	181b      	addge	r3, r3, r0
 800bc36:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800bc3a:	bfac      	ite	ge
 800bc3c:	6563      	strge	r3, [r4, #84]	; 0x54
 800bc3e:	81a3      	strhlt	r3, [r4, #12]
 800bc40:	bd10      	pop	{r4, pc}

0800bc42 <__swrite>:
 800bc42:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bc46:	461f      	mov	r7, r3
 800bc48:	898b      	ldrh	r3, [r1, #12]
 800bc4a:	05db      	lsls	r3, r3, #23
 800bc4c:	4605      	mov	r5, r0
 800bc4e:	460c      	mov	r4, r1
 800bc50:	4616      	mov	r6, r2
 800bc52:	d505      	bpl.n	800bc60 <__swrite+0x1e>
 800bc54:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bc58:	2302      	movs	r3, #2
 800bc5a:	2200      	movs	r2, #0
 800bc5c:	f000 f898 	bl	800bd90 <_lseek_r>
 800bc60:	89a3      	ldrh	r3, [r4, #12]
 800bc62:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bc66:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800bc6a:	81a3      	strh	r3, [r4, #12]
 800bc6c:	4632      	mov	r2, r6
 800bc6e:	463b      	mov	r3, r7
 800bc70:	4628      	mov	r0, r5
 800bc72:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bc76:	f000 b817 	b.w	800bca8 <_write_r>

0800bc7a <__sseek>:
 800bc7a:	b510      	push	{r4, lr}
 800bc7c:	460c      	mov	r4, r1
 800bc7e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bc82:	f000 f885 	bl	800bd90 <_lseek_r>
 800bc86:	1c43      	adds	r3, r0, #1
 800bc88:	89a3      	ldrh	r3, [r4, #12]
 800bc8a:	bf15      	itete	ne
 800bc8c:	6560      	strne	r0, [r4, #84]	; 0x54
 800bc8e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800bc92:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800bc96:	81a3      	strheq	r3, [r4, #12]
 800bc98:	bf18      	it	ne
 800bc9a:	81a3      	strhne	r3, [r4, #12]
 800bc9c:	bd10      	pop	{r4, pc}

0800bc9e <__sclose>:
 800bc9e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bca2:	f000 b831 	b.w	800bd08 <_close_r>
	...

0800bca8 <_write_r>:
 800bca8:	b538      	push	{r3, r4, r5, lr}
 800bcaa:	4d07      	ldr	r5, [pc, #28]	; (800bcc8 <_write_r+0x20>)
 800bcac:	4604      	mov	r4, r0
 800bcae:	4608      	mov	r0, r1
 800bcb0:	4611      	mov	r1, r2
 800bcb2:	2200      	movs	r2, #0
 800bcb4:	602a      	str	r2, [r5, #0]
 800bcb6:	461a      	mov	r2, r3
 800bcb8:	f7f6 ff18 	bl	8002aec <_write>
 800bcbc:	1c43      	adds	r3, r0, #1
 800bcbe:	d102      	bne.n	800bcc6 <_write_r+0x1e>
 800bcc0:	682b      	ldr	r3, [r5, #0]
 800bcc2:	b103      	cbz	r3, 800bcc6 <_write_r+0x1e>
 800bcc4:	6023      	str	r3, [r4, #0]
 800bcc6:	bd38      	pop	{r3, r4, r5, pc}
 800bcc8:	20000954 	.word	0x20000954

0800bccc <__assert_func>:
 800bccc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800bcce:	4614      	mov	r4, r2
 800bcd0:	461a      	mov	r2, r3
 800bcd2:	4b09      	ldr	r3, [pc, #36]	; (800bcf8 <__assert_func+0x2c>)
 800bcd4:	681b      	ldr	r3, [r3, #0]
 800bcd6:	4605      	mov	r5, r0
 800bcd8:	68d8      	ldr	r0, [r3, #12]
 800bcda:	b14c      	cbz	r4, 800bcf0 <__assert_func+0x24>
 800bcdc:	4b07      	ldr	r3, [pc, #28]	; (800bcfc <__assert_func+0x30>)
 800bcde:	9100      	str	r1, [sp, #0]
 800bce0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800bce4:	4906      	ldr	r1, [pc, #24]	; (800bd00 <__assert_func+0x34>)
 800bce6:	462b      	mov	r3, r5
 800bce8:	f000 f81e 	bl	800bd28 <fiprintf>
 800bcec:	f000 f8df 	bl	800beae <abort>
 800bcf0:	4b04      	ldr	r3, [pc, #16]	; (800bd04 <__assert_func+0x38>)
 800bcf2:	461c      	mov	r4, r3
 800bcf4:	e7f3      	b.n	800bcde <__assert_func+0x12>
 800bcf6:	bf00      	nop
 800bcf8:	20000024 	.word	0x20000024
 800bcfc:	0800d3d5 	.word	0x0800d3d5
 800bd00:	0800d3e2 	.word	0x0800d3e2
 800bd04:	0800d410 	.word	0x0800d410

0800bd08 <_close_r>:
 800bd08:	b538      	push	{r3, r4, r5, lr}
 800bd0a:	4d06      	ldr	r5, [pc, #24]	; (800bd24 <_close_r+0x1c>)
 800bd0c:	2300      	movs	r3, #0
 800bd0e:	4604      	mov	r4, r0
 800bd10:	4608      	mov	r0, r1
 800bd12:	602b      	str	r3, [r5, #0]
 800bd14:	f7f6 ff16 	bl	8002b44 <_close>
 800bd18:	1c43      	adds	r3, r0, #1
 800bd1a:	d102      	bne.n	800bd22 <_close_r+0x1a>
 800bd1c:	682b      	ldr	r3, [r5, #0]
 800bd1e:	b103      	cbz	r3, 800bd22 <_close_r+0x1a>
 800bd20:	6023      	str	r3, [r4, #0]
 800bd22:	bd38      	pop	{r3, r4, r5, pc}
 800bd24:	20000954 	.word	0x20000954

0800bd28 <fiprintf>:
 800bd28:	b40e      	push	{r1, r2, r3}
 800bd2a:	b503      	push	{r0, r1, lr}
 800bd2c:	4601      	mov	r1, r0
 800bd2e:	ab03      	add	r3, sp, #12
 800bd30:	4805      	ldr	r0, [pc, #20]	; (800bd48 <fiprintf+0x20>)
 800bd32:	f853 2b04 	ldr.w	r2, [r3], #4
 800bd36:	6800      	ldr	r0, [r0, #0]
 800bd38:	9301      	str	r3, [sp, #4]
 800bd3a:	f7ff fe31 	bl	800b9a0 <_vfiprintf_r>
 800bd3e:	b002      	add	sp, #8
 800bd40:	f85d eb04 	ldr.w	lr, [sp], #4
 800bd44:	b003      	add	sp, #12
 800bd46:	4770      	bx	lr
 800bd48:	20000024 	.word	0x20000024

0800bd4c <_fstat_r>:
 800bd4c:	b538      	push	{r3, r4, r5, lr}
 800bd4e:	4d07      	ldr	r5, [pc, #28]	; (800bd6c <_fstat_r+0x20>)
 800bd50:	2300      	movs	r3, #0
 800bd52:	4604      	mov	r4, r0
 800bd54:	4608      	mov	r0, r1
 800bd56:	4611      	mov	r1, r2
 800bd58:	602b      	str	r3, [r5, #0]
 800bd5a:	f7f6 feff 	bl	8002b5c <_fstat>
 800bd5e:	1c43      	adds	r3, r0, #1
 800bd60:	d102      	bne.n	800bd68 <_fstat_r+0x1c>
 800bd62:	682b      	ldr	r3, [r5, #0]
 800bd64:	b103      	cbz	r3, 800bd68 <_fstat_r+0x1c>
 800bd66:	6023      	str	r3, [r4, #0]
 800bd68:	bd38      	pop	{r3, r4, r5, pc}
 800bd6a:	bf00      	nop
 800bd6c:	20000954 	.word	0x20000954

0800bd70 <_isatty_r>:
 800bd70:	b538      	push	{r3, r4, r5, lr}
 800bd72:	4d06      	ldr	r5, [pc, #24]	; (800bd8c <_isatty_r+0x1c>)
 800bd74:	2300      	movs	r3, #0
 800bd76:	4604      	mov	r4, r0
 800bd78:	4608      	mov	r0, r1
 800bd7a:	602b      	str	r3, [r5, #0]
 800bd7c:	f7f6 fefe 	bl	8002b7c <_isatty>
 800bd80:	1c43      	adds	r3, r0, #1
 800bd82:	d102      	bne.n	800bd8a <_isatty_r+0x1a>
 800bd84:	682b      	ldr	r3, [r5, #0]
 800bd86:	b103      	cbz	r3, 800bd8a <_isatty_r+0x1a>
 800bd88:	6023      	str	r3, [r4, #0]
 800bd8a:	bd38      	pop	{r3, r4, r5, pc}
 800bd8c:	20000954 	.word	0x20000954

0800bd90 <_lseek_r>:
 800bd90:	b538      	push	{r3, r4, r5, lr}
 800bd92:	4d07      	ldr	r5, [pc, #28]	; (800bdb0 <_lseek_r+0x20>)
 800bd94:	4604      	mov	r4, r0
 800bd96:	4608      	mov	r0, r1
 800bd98:	4611      	mov	r1, r2
 800bd9a:	2200      	movs	r2, #0
 800bd9c:	602a      	str	r2, [r5, #0]
 800bd9e:	461a      	mov	r2, r3
 800bda0:	f7f6 fef7 	bl	8002b92 <_lseek>
 800bda4:	1c43      	adds	r3, r0, #1
 800bda6:	d102      	bne.n	800bdae <_lseek_r+0x1e>
 800bda8:	682b      	ldr	r3, [r5, #0]
 800bdaa:	b103      	cbz	r3, 800bdae <_lseek_r+0x1e>
 800bdac:	6023      	str	r3, [r4, #0]
 800bdae:	bd38      	pop	{r3, r4, r5, pc}
 800bdb0:	20000954 	.word	0x20000954

0800bdb4 <__ascii_mbtowc>:
 800bdb4:	b082      	sub	sp, #8
 800bdb6:	b901      	cbnz	r1, 800bdba <__ascii_mbtowc+0x6>
 800bdb8:	a901      	add	r1, sp, #4
 800bdba:	b142      	cbz	r2, 800bdce <__ascii_mbtowc+0x1a>
 800bdbc:	b14b      	cbz	r3, 800bdd2 <__ascii_mbtowc+0x1e>
 800bdbe:	7813      	ldrb	r3, [r2, #0]
 800bdc0:	600b      	str	r3, [r1, #0]
 800bdc2:	7812      	ldrb	r2, [r2, #0]
 800bdc4:	1e10      	subs	r0, r2, #0
 800bdc6:	bf18      	it	ne
 800bdc8:	2001      	movne	r0, #1
 800bdca:	b002      	add	sp, #8
 800bdcc:	4770      	bx	lr
 800bdce:	4610      	mov	r0, r2
 800bdd0:	e7fb      	b.n	800bdca <__ascii_mbtowc+0x16>
 800bdd2:	f06f 0001 	mvn.w	r0, #1
 800bdd6:	e7f8      	b.n	800bdca <__ascii_mbtowc+0x16>

0800bdd8 <memmove>:
 800bdd8:	4288      	cmp	r0, r1
 800bdda:	b510      	push	{r4, lr}
 800bddc:	eb01 0402 	add.w	r4, r1, r2
 800bde0:	d902      	bls.n	800bde8 <memmove+0x10>
 800bde2:	4284      	cmp	r4, r0
 800bde4:	4623      	mov	r3, r4
 800bde6:	d807      	bhi.n	800bdf8 <memmove+0x20>
 800bde8:	1e43      	subs	r3, r0, #1
 800bdea:	42a1      	cmp	r1, r4
 800bdec:	d008      	beq.n	800be00 <memmove+0x28>
 800bdee:	f811 2b01 	ldrb.w	r2, [r1], #1
 800bdf2:	f803 2f01 	strb.w	r2, [r3, #1]!
 800bdf6:	e7f8      	b.n	800bdea <memmove+0x12>
 800bdf8:	4402      	add	r2, r0
 800bdfa:	4601      	mov	r1, r0
 800bdfc:	428a      	cmp	r2, r1
 800bdfe:	d100      	bne.n	800be02 <memmove+0x2a>
 800be00:	bd10      	pop	{r4, pc}
 800be02:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800be06:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800be0a:	e7f7      	b.n	800bdfc <memmove+0x24>

0800be0c <__malloc_lock>:
 800be0c:	4801      	ldr	r0, [pc, #4]	; (800be14 <__malloc_lock+0x8>)
 800be0e:	f7fe bf8c 	b.w	800ad2a <__retarget_lock_acquire_recursive>
 800be12:	bf00      	nop
 800be14:	2000094c 	.word	0x2000094c

0800be18 <__malloc_unlock>:
 800be18:	4801      	ldr	r0, [pc, #4]	; (800be20 <__malloc_unlock+0x8>)
 800be1a:	f7fe bf87 	b.w	800ad2c <__retarget_lock_release_recursive>
 800be1e:	bf00      	nop
 800be20:	2000094c 	.word	0x2000094c

0800be24 <_realloc_r>:
 800be24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800be26:	4607      	mov	r7, r0
 800be28:	4614      	mov	r4, r2
 800be2a:	460e      	mov	r6, r1
 800be2c:	b921      	cbnz	r1, 800be38 <_realloc_r+0x14>
 800be2e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800be32:	4611      	mov	r1, r2
 800be34:	f7ff bbd4 	b.w	800b5e0 <_malloc_r>
 800be38:	b922      	cbnz	r2, 800be44 <_realloc_r+0x20>
 800be3a:	f7ff fb81 	bl	800b540 <_free_r>
 800be3e:	4625      	mov	r5, r4
 800be40:	4628      	mov	r0, r5
 800be42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800be44:	f000 f83a 	bl	800bebc <_malloc_usable_size_r>
 800be48:	42a0      	cmp	r0, r4
 800be4a:	d20f      	bcs.n	800be6c <_realloc_r+0x48>
 800be4c:	4621      	mov	r1, r4
 800be4e:	4638      	mov	r0, r7
 800be50:	f7ff fbc6 	bl	800b5e0 <_malloc_r>
 800be54:	4605      	mov	r5, r0
 800be56:	2800      	cmp	r0, #0
 800be58:	d0f2      	beq.n	800be40 <_realloc_r+0x1c>
 800be5a:	4631      	mov	r1, r6
 800be5c:	4622      	mov	r2, r4
 800be5e:	f7fe ffd3 	bl	800ae08 <memcpy>
 800be62:	4631      	mov	r1, r6
 800be64:	4638      	mov	r0, r7
 800be66:	f7ff fb6b 	bl	800b540 <_free_r>
 800be6a:	e7e9      	b.n	800be40 <_realloc_r+0x1c>
 800be6c:	4635      	mov	r5, r6
 800be6e:	e7e7      	b.n	800be40 <_realloc_r+0x1c>

0800be70 <_read_r>:
 800be70:	b538      	push	{r3, r4, r5, lr}
 800be72:	4d07      	ldr	r5, [pc, #28]	; (800be90 <_read_r+0x20>)
 800be74:	4604      	mov	r4, r0
 800be76:	4608      	mov	r0, r1
 800be78:	4611      	mov	r1, r2
 800be7a:	2200      	movs	r2, #0
 800be7c:	602a      	str	r2, [r5, #0]
 800be7e:	461a      	mov	r2, r3
 800be80:	f7f6 fe16 	bl	8002ab0 <_read>
 800be84:	1c43      	adds	r3, r0, #1
 800be86:	d102      	bne.n	800be8e <_read_r+0x1e>
 800be88:	682b      	ldr	r3, [r5, #0]
 800be8a:	b103      	cbz	r3, 800be8e <_read_r+0x1e>
 800be8c:	6023      	str	r3, [r4, #0]
 800be8e:	bd38      	pop	{r3, r4, r5, pc}
 800be90:	20000954 	.word	0x20000954

0800be94 <__ascii_wctomb>:
 800be94:	b149      	cbz	r1, 800beaa <__ascii_wctomb+0x16>
 800be96:	2aff      	cmp	r2, #255	; 0xff
 800be98:	bf85      	ittet	hi
 800be9a:	238a      	movhi	r3, #138	; 0x8a
 800be9c:	6003      	strhi	r3, [r0, #0]
 800be9e:	700a      	strbls	r2, [r1, #0]
 800bea0:	f04f 30ff 	movhi.w	r0, #4294967295
 800bea4:	bf98      	it	ls
 800bea6:	2001      	movls	r0, #1
 800bea8:	4770      	bx	lr
 800beaa:	4608      	mov	r0, r1
 800beac:	4770      	bx	lr

0800beae <abort>:
 800beae:	b508      	push	{r3, lr}
 800beb0:	2006      	movs	r0, #6
 800beb2:	f000 f833 	bl	800bf1c <raise>
 800beb6:	2001      	movs	r0, #1
 800beb8:	f7f6 fdf0 	bl	8002a9c <_exit>

0800bebc <_malloc_usable_size_r>:
 800bebc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bec0:	1f18      	subs	r0, r3, #4
 800bec2:	2b00      	cmp	r3, #0
 800bec4:	bfbc      	itt	lt
 800bec6:	580b      	ldrlt	r3, [r1, r0]
 800bec8:	18c0      	addlt	r0, r0, r3
 800beca:	4770      	bx	lr

0800becc <_raise_r>:
 800becc:	291f      	cmp	r1, #31
 800bece:	b538      	push	{r3, r4, r5, lr}
 800bed0:	4604      	mov	r4, r0
 800bed2:	460d      	mov	r5, r1
 800bed4:	d904      	bls.n	800bee0 <_raise_r+0x14>
 800bed6:	2316      	movs	r3, #22
 800bed8:	6003      	str	r3, [r0, #0]
 800beda:	f04f 30ff 	mov.w	r0, #4294967295
 800bede:	bd38      	pop	{r3, r4, r5, pc}
 800bee0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800bee2:	b112      	cbz	r2, 800beea <_raise_r+0x1e>
 800bee4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800bee8:	b94b      	cbnz	r3, 800befe <_raise_r+0x32>
 800beea:	4620      	mov	r0, r4
 800beec:	f000 f830 	bl	800bf50 <_getpid_r>
 800bef0:	462a      	mov	r2, r5
 800bef2:	4601      	mov	r1, r0
 800bef4:	4620      	mov	r0, r4
 800bef6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800befa:	f000 b817 	b.w	800bf2c <_kill_r>
 800befe:	2b01      	cmp	r3, #1
 800bf00:	d00a      	beq.n	800bf18 <_raise_r+0x4c>
 800bf02:	1c59      	adds	r1, r3, #1
 800bf04:	d103      	bne.n	800bf0e <_raise_r+0x42>
 800bf06:	2316      	movs	r3, #22
 800bf08:	6003      	str	r3, [r0, #0]
 800bf0a:	2001      	movs	r0, #1
 800bf0c:	e7e7      	b.n	800bede <_raise_r+0x12>
 800bf0e:	2400      	movs	r4, #0
 800bf10:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800bf14:	4628      	mov	r0, r5
 800bf16:	4798      	blx	r3
 800bf18:	2000      	movs	r0, #0
 800bf1a:	e7e0      	b.n	800bede <_raise_r+0x12>

0800bf1c <raise>:
 800bf1c:	4b02      	ldr	r3, [pc, #8]	; (800bf28 <raise+0xc>)
 800bf1e:	4601      	mov	r1, r0
 800bf20:	6818      	ldr	r0, [r3, #0]
 800bf22:	f7ff bfd3 	b.w	800becc <_raise_r>
 800bf26:	bf00      	nop
 800bf28:	20000024 	.word	0x20000024

0800bf2c <_kill_r>:
 800bf2c:	b538      	push	{r3, r4, r5, lr}
 800bf2e:	4d07      	ldr	r5, [pc, #28]	; (800bf4c <_kill_r+0x20>)
 800bf30:	2300      	movs	r3, #0
 800bf32:	4604      	mov	r4, r0
 800bf34:	4608      	mov	r0, r1
 800bf36:	4611      	mov	r1, r2
 800bf38:	602b      	str	r3, [r5, #0]
 800bf3a:	f7f6 fd9f 	bl	8002a7c <_kill>
 800bf3e:	1c43      	adds	r3, r0, #1
 800bf40:	d102      	bne.n	800bf48 <_kill_r+0x1c>
 800bf42:	682b      	ldr	r3, [r5, #0]
 800bf44:	b103      	cbz	r3, 800bf48 <_kill_r+0x1c>
 800bf46:	6023      	str	r3, [r4, #0]
 800bf48:	bd38      	pop	{r3, r4, r5, pc}
 800bf4a:	bf00      	nop
 800bf4c:	20000954 	.word	0x20000954

0800bf50 <_getpid_r>:
 800bf50:	f7f6 bd8c 	b.w	8002a6c <_getpid>

0800bf54 <pow>:
 800bf54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bf58:	ec59 8b10 	vmov	r8, r9, d0
 800bf5c:	ec57 6b11 	vmov	r6, r7, d1
 800bf60:	f000 f8da 	bl	800c118 <__ieee754_pow>
 800bf64:	4b4e      	ldr	r3, [pc, #312]	; (800c0a0 <pow+0x14c>)
 800bf66:	f993 3000 	ldrsb.w	r3, [r3]
 800bf6a:	3301      	adds	r3, #1
 800bf6c:	ec55 4b10 	vmov	r4, r5, d0
 800bf70:	d015      	beq.n	800bf9e <pow+0x4a>
 800bf72:	4632      	mov	r2, r6
 800bf74:	463b      	mov	r3, r7
 800bf76:	4630      	mov	r0, r6
 800bf78:	4639      	mov	r1, r7
 800bf7a:	f7f4 fdd7 	bl	8000b2c <__aeabi_dcmpun>
 800bf7e:	b970      	cbnz	r0, 800bf9e <pow+0x4a>
 800bf80:	4642      	mov	r2, r8
 800bf82:	464b      	mov	r3, r9
 800bf84:	4640      	mov	r0, r8
 800bf86:	4649      	mov	r1, r9
 800bf88:	f7f4 fdd0 	bl	8000b2c <__aeabi_dcmpun>
 800bf8c:	2200      	movs	r2, #0
 800bf8e:	2300      	movs	r3, #0
 800bf90:	b148      	cbz	r0, 800bfa6 <pow+0x52>
 800bf92:	4630      	mov	r0, r6
 800bf94:	4639      	mov	r1, r7
 800bf96:	f7f4 fd97 	bl	8000ac8 <__aeabi_dcmpeq>
 800bf9a:	2800      	cmp	r0, #0
 800bf9c:	d17d      	bne.n	800c09a <pow+0x146>
 800bf9e:	ec45 4b10 	vmov	d0, r4, r5
 800bfa2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bfa6:	4640      	mov	r0, r8
 800bfa8:	4649      	mov	r1, r9
 800bfaa:	f7f4 fd8d 	bl	8000ac8 <__aeabi_dcmpeq>
 800bfae:	b1e0      	cbz	r0, 800bfea <pow+0x96>
 800bfb0:	2200      	movs	r2, #0
 800bfb2:	2300      	movs	r3, #0
 800bfb4:	4630      	mov	r0, r6
 800bfb6:	4639      	mov	r1, r7
 800bfb8:	f7f4 fd86 	bl	8000ac8 <__aeabi_dcmpeq>
 800bfbc:	2800      	cmp	r0, #0
 800bfbe:	d16c      	bne.n	800c09a <pow+0x146>
 800bfc0:	ec47 6b10 	vmov	d0, r6, r7
 800bfc4:	f000 fe87 	bl	800ccd6 <finite>
 800bfc8:	2800      	cmp	r0, #0
 800bfca:	d0e8      	beq.n	800bf9e <pow+0x4a>
 800bfcc:	2200      	movs	r2, #0
 800bfce:	2300      	movs	r3, #0
 800bfd0:	4630      	mov	r0, r6
 800bfd2:	4639      	mov	r1, r7
 800bfd4:	f7f4 fd82 	bl	8000adc <__aeabi_dcmplt>
 800bfd8:	2800      	cmp	r0, #0
 800bfda:	d0e0      	beq.n	800bf9e <pow+0x4a>
 800bfdc:	f7fc ff8c 	bl	8008ef8 <__errno>
 800bfe0:	2321      	movs	r3, #33	; 0x21
 800bfe2:	6003      	str	r3, [r0, #0]
 800bfe4:	2400      	movs	r4, #0
 800bfe6:	4d2f      	ldr	r5, [pc, #188]	; (800c0a4 <pow+0x150>)
 800bfe8:	e7d9      	b.n	800bf9e <pow+0x4a>
 800bfea:	ec45 4b10 	vmov	d0, r4, r5
 800bfee:	f000 fe72 	bl	800ccd6 <finite>
 800bff2:	bbb8      	cbnz	r0, 800c064 <pow+0x110>
 800bff4:	ec49 8b10 	vmov	d0, r8, r9
 800bff8:	f000 fe6d 	bl	800ccd6 <finite>
 800bffc:	b390      	cbz	r0, 800c064 <pow+0x110>
 800bffe:	ec47 6b10 	vmov	d0, r6, r7
 800c002:	f000 fe68 	bl	800ccd6 <finite>
 800c006:	b368      	cbz	r0, 800c064 <pow+0x110>
 800c008:	4622      	mov	r2, r4
 800c00a:	462b      	mov	r3, r5
 800c00c:	4620      	mov	r0, r4
 800c00e:	4629      	mov	r1, r5
 800c010:	f7f4 fd8c 	bl	8000b2c <__aeabi_dcmpun>
 800c014:	b160      	cbz	r0, 800c030 <pow+0xdc>
 800c016:	f7fc ff6f 	bl	8008ef8 <__errno>
 800c01a:	2321      	movs	r3, #33	; 0x21
 800c01c:	6003      	str	r3, [r0, #0]
 800c01e:	2200      	movs	r2, #0
 800c020:	2300      	movs	r3, #0
 800c022:	4610      	mov	r0, r2
 800c024:	4619      	mov	r1, r3
 800c026:	f7f4 fc11 	bl	800084c <__aeabi_ddiv>
 800c02a:	4604      	mov	r4, r0
 800c02c:	460d      	mov	r5, r1
 800c02e:	e7b6      	b.n	800bf9e <pow+0x4a>
 800c030:	f7fc ff62 	bl	8008ef8 <__errno>
 800c034:	2322      	movs	r3, #34	; 0x22
 800c036:	6003      	str	r3, [r0, #0]
 800c038:	2200      	movs	r2, #0
 800c03a:	2300      	movs	r3, #0
 800c03c:	4640      	mov	r0, r8
 800c03e:	4649      	mov	r1, r9
 800c040:	f7f4 fd4c 	bl	8000adc <__aeabi_dcmplt>
 800c044:	2400      	movs	r4, #0
 800c046:	b158      	cbz	r0, 800c060 <pow+0x10c>
 800c048:	ec47 6b10 	vmov	d0, r6, r7
 800c04c:	f000 fe58 	bl	800cd00 <rint>
 800c050:	4632      	mov	r2, r6
 800c052:	ec51 0b10 	vmov	r0, r1, d0
 800c056:	463b      	mov	r3, r7
 800c058:	f7f4 fd36 	bl	8000ac8 <__aeabi_dcmpeq>
 800c05c:	2800      	cmp	r0, #0
 800c05e:	d0c2      	beq.n	800bfe6 <pow+0x92>
 800c060:	4d11      	ldr	r5, [pc, #68]	; (800c0a8 <pow+0x154>)
 800c062:	e79c      	b.n	800bf9e <pow+0x4a>
 800c064:	2200      	movs	r2, #0
 800c066:	2300      	movs	r3, #0
 800c068:	4620      	mov	r0, r4
 800c06a:	4629      	mov	r1, r5
 800c06c:	f7f4 fd2c 	bl	8000ac8 <__aeabi_dcmpeq>
 800c070:	2800      	cmp	r0, #0
 800c072:	d094      	beq.n	800bf9e <pow+0x4a>
 800c074:	ec49 8b10 	vmov	d0, r8, r9
 800c078:	f000 fe2d 	bl	800ccd6 <finite>
 800c07c:	2800      	cmp	r0, #0
 800c07e:	d08e      	beq.n	800bf9e <pow+0x4a>
 800c080:	ec47 6b10 	vmov	d0, r6, r7
 800c084:	f000 fe27 	bl	800ccd6 <finite>
 800c088:	2800      	cmp	r0, #0
 800c08a:	d088      	beq.n	800bf9e <pow+0x4a>
 800c08c:	f7fc ff34 	bl	8008ef8 <__errno>
 800c090:	2322      	movs	r3, #34	; 0x22
 800c092:	6003      	str	r3, [r0, #0]
 800c094:	2400      	movs	r4, #0
 800c096:	2500      	movs	r5, #0
 800c098:	e781      	b.n	800bf9e <pow+0x4a>
 800c09a:	4d04      	ldr	r5, [pc, #16]	; (800c0ac <pow+0x158>)
 800c09c:	2400      	movs	r4, #0
 800c09e:	e77e      	b.n	800bf9e <pow+0x4a>
 800c0a0:	200001f4 	.word	0x200001f4
 800c0a4:	fff00000 	.word	0xfff00000
 800c0a8:	7ff00000 	.word	0x7ff00000
 800c0ac:	3ff00000 	.word	0x3ff00000

0800c0b0 <sqrt>:
 800c0b0:	b538      	push	{r3, r4, r5, lr}
 800c0b2:	ed2d 8b02 	vpush	{d8}
 800c0b6:	ec55 4b10 	vmov	r4, r5, d0
 800c0ba:	f000 fd4f 	bl	800cb5c <__ieee754_sqrt>
 800c0be:	4b15      	ldr	r3, [pc, #84]	; (800c114 <sqrt+0x64>)
 800c0c0:	eeb0 8a40 	vmov.f32	s16, s0
 800c0c4:	eef0 8a60 	vmov.f32	s17, s1
 800c0c8:	f993 3000 	ldrsb.w	r3, [r3]
 800c0cc:	3301      	adds	r3, #1
 800c0ce:	d019      	beq.n	800c104 <sqrt+0x54>
 800c0d0:	4622      	mov	r2, r4
 800c0d2:	462b      	mov	r3, r5
 800c0d4:	4620      	mov	r0, r4
 800c0d6:	4629      	mov	r1, r5
 800c0d8:	f7f4 fd28 	bl	8000b2c <__aeabi_dcmpun>
 800c0dc:	b990      	cbnz	r0, 800c104 <sqrt+0x54>
 800c0de:	2200      	movs	r2, #0
 800c0e0:	2300      	movs	r3, #0
 800c0e2:	4620      	mov	r0, r4
 800c0e4:	4629      	mov	r1, r5
 800c0e6:	f7f4 fcf9 	bl	8000adc <__aeabi_dcmplt>
 800c0ea:	b158      	cbz	r0, 800c104 <sqrt+0x54>
 800c0ec:	f7fc ff04 	bl	8008ef8 <__errno>
 800c0f0:	2321      	movs	r3, #33	; 0x21
 800c0f2:	6003      	str	r3, [r0, #0]
 800c0f4:	2200      	movs	r2, #0
 800c0f6:	2300      	movs	r3, #0
 800c0f8:	4610      	mov	r0, r2
 800c0fa:	4619      	mov	r1, r3
 800c0fc:	f7f4 fba6 	bl	800084c <__aeabi_ddiv>
 800c100:	ec41 0b18 	vmov	d8, r0, r1
 800c104:	eeb0 0a48 	vmov.f32	s0, s16
 800c108:	eef0 0a68 	vmov.f32	s1, s17
 800c10c:	ecbd 8b02 	vpop	{d8}
 800c110:	bd38      	pop	{r3, r4, r5, pc}
 800c112:	bf00      	nop
 800c114:	200001f4 	.word	0x200001f4

0800c118 <__ieee754_pow>:
 800c118:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c11c:	ed2d 8b06 	vpush	{d8-d10}
 800c120:	b08d      	sub	sp, #52	; 0x34
 800c122:	ed8d 1b02 	vstr	d1, [sp, #8]
 800c126:	e9dd 0702 	ldrd	r0, r7, [sp, #8]
 800c12a:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 800c12e:	ea56 0100 	orrs.w	r1, r6, r0
 800c132:	ec53 2b10 	vmov	r2, r3, d0
 800c136:	f000 84d1 	beq.w	800cadc <__ieee754_pow+0x9c4>
 800c13a:	497f      	ldr	r1, [pc, #508]	; (800c338 <__ieee754_pow+0x220>)
 800c13c:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 800c140:	428c      	cmp	r4, r1
 800c142:	ee10 8a10 	vmov	r8, s0
 800c146:	4699      	mov	r9, r3
 800c148:	dc09      	bgt.n	800c15e <__ieee754_pow+0x46>
 800c14a:	d103      	bne.n	800c154 <__ieee754_pow+0x3c>
 800c14c:	b97a      	cbnz	r2, 800c16e <__ieee754_pow+0x56>
 800c14e:	42a6      	cmp	r6, r4
 800c150:	dd02      	ble.n	800c158 <__ieee754_pow+0x40>
 800c152:	e00c      	b.n	800c16e <__ieee754_pow+0x56>
 800c154:	428e      	cmp	r6, r1
 800c156:	dc02      	bgt.n	800c15e <__ieee754_pow+0x46>
 800c158:	428e      	cmp	r6, r1
 800c15a:	d110      	bne.n	800c17e <__ieee754_pow+0x66>
 800c15c:	b178      	cbz	r0, 800c17e <__ieee754_pow+0x66>
 800c15e:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800c162:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800c166:	ea54 0308 	orrs.w	r3, r4, r8
 800c16a:	f000 84b7 	beq.w	800cadc <__ieee754_pow+0x9c4>
 800c16e:	4873      	ldr	r0, [pc, #460]	; (800c33c <__ieee754_pow+0x224>)
 800c170:	b00d      	add	sp, #52	; 0x34
 800c172:	ecbd 8b06 	vpop	{d8-d10}
 800c176:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c17a:	f000 bdb9 	b.w	800ccf0 <nan>
 800c17e:	f1b9 0f00 	cmp.w	r9, #0
 800c182:	da36      	bge.n	800c1f2 <__ieee754_pow+0xda>
 800c184:	496e      	ldr	r1, [pc, #440]	; (800c340 <__ieee754_pow+0x228>)
 800c186:	428e      	cmp	r6, r1
 800c188:	dc51      	bgt.n	800c22e <__ieee754_pow+0x116>
 800c18a:	f1a1 7154 	sub.w	r1, r1, #55574528	; 0x3500000
 800c18e:	428e      	cmp	r6, r1
 800c190:	f340 84af 	ble.w	800caf2 <__ieee754_pow+0x9da>
 800c194:	1531      	asrs	r1, r6, #20
 800c196:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800c19a:	2914      	cmp	r1, #20
 800c19c:	dd0f      	ble.n	800c1be <__ieee754_pow+0xa6>
 800c19e:	f1c1 0134 	rsb	r1, r1, #52	; 0x34
 800c1a2:	fa20 fc01 	lsr.w	ip, r0, r1
 800c1a6:	fa0c f101 	lsl.w	r1, ip, r1
 800c1aa:	4281      	cmp	r1, r0
 800c1ac:	f040 84a1 	bne.w	800caf2 <__ieee754_pow+0x9da>
 800c1b0:	f00c 0c01 	and.w	ip, ip, #1
 800c1b4:	f1cc 0102 	rsb	r1, ip, #2
 800c1b8:	9100      	str	r1, [sp, #0]
 800c1ba:	b180      	cbz	r0, 800c1de <__ieee754_pow+0xc6>
 800c1bc:	e059      	b.n	800c272 <__ieee754_pow+0x15a>
 800c1be:	2800      	cmp	r0, #0
 800c1c0:	d155      	bne.n	800c26e <__ieee754_pow+0x156>
 800c1c2:	f1c1 0114 	rsb	r1, r1, #20
 800c1c6:	fa46 fc01 	asr.w	ip, r6, r1
 800c1ca:	fa0c f101 	lsl.w	r1, ip, r1
 800c1ce:	42b1      	cmp	r1, r6
 800c1d0:	f040 848c 	bne.w	800caec <__ieee754_pow+0x9d4>
 800c1d4:	f00c 0c01 	and.w	ip, ip, #1
 800c1d8:	f1cc 0102 	rsb	r1, ip, #2
 800c1dc:	9100      	str	r1, [sp, #0]
 800c1de:	4959      	ldr	r1, [pc, #356]	; (800c344 <__ieee754_pow+0x22c>)
 800c1e0:	428e      	cmp	r6, r1
 800c1e2:	d12d      	bne.n	800c240 <__ieee754_pow+0x128>
 800c1e4:	2f00      	cmp	r7, #0
 800c1e6:	da79      	bge.n	800c2dc <__ieee754_pow+0x1c4>
 800c1e8:	4956      	ldr	r1, [pc, #344]	; (800c344 <__ieee754_pow+0x22c>)
 800c1ea:	2000      	movs	r0, #0
 800c1ec:	f7f4 fb2e 	bl	800084c <__aeabi_ddiv>
 800c1f0:	e016      	b.n	800c220 <__ieee754_pow+0x108>
 800c1f2:	2100      	movs	r1, #0
 800c1f4:	9100      	str	r1, [sp, #0]
 800c1f6:	2800      	cmp	r0, #0
 800c1f8:	d13b      	bne.n	800c272 <__ieee754_pow+0x15a>
 800c1fa:	494f      	ldr	r1, [pc, #316]	; (800c338 <__ieee754_pow+0x220>)
 800c1fc:	428e      	cmp	r6, r1
 800c1fe:	d1ee      	bne.n	800c1de <__ieee754_pow+0xc6>
 800c200:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800c204:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800c208:	ea53 0308 	orrs.w	r3, r3, r8
 800c20c:	f000 8466 	beq.w	800cadc <__ieee754_pow+0x9c4>
 800c210:	4b4d      	ldr	r3, [pc, #308]	; (800c348 <__ieee754_pow+0x230>)
 800c212:	429c      	cmp	r4, r3
 800c214:	dd0d      	ble.n	800c232 <__ieee754_pow+0x11a>
 800c216:	2f00      	cmp	r7, #0
 800c218:	f280 8464 	bge.w	800cae4 <__ieee754_pow+0x9cc>
 800c21c:	2000      	movs	r0, #0
 800c21e:	2100      	movs	r1, #0
 800c220:	ec41 0b10 	vmov	d0, r0, r1
 800c224:	b00d      	add	sp, #52	; 0x34
 800c226:	ecbd 8b06 	vpop	{d8-d10}
 800c22a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c22e:	2102      	movs	r1, #2
 800c230:	e7e0      	b.n	800c1f4 <__ieee754_pow+0xdc>
 800c232:	2f00      	cmp	r7, #0
 800c234:	daf2      	bge.n	800c21c <__ieee754_pow+0x104>
 800c236:	e9dd 0302 	ldrd	r0, r3, [sp, #8]
 800c23a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800c23e:	e7ef      	b.n	800c220 <__ieee754_pow+0x108>
 800c240:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 800c244:	d104      	bne.n	800c250 <__ieee754_pow+0x138>
 800c246:	4610      	mov	r0, r2
 800c248:	4619      	mov	r1, r3
 800c24a:	f7f4 f9d5 	bl	80005f8 <__aeabi_dmul>
 800c24e:	e7e7      	b.n	800c220 <__ieee754_pow+0x108>
 800c250:	493e      	ldr	r1, [pc, #248]	; (800c34c <__ieee754_pow+0x234>)
 800c252:	428f      	cmp	r7, r1
 800c254:	d10d      	bne.n	800c272 <__ieee754_pow+0x15a>
 800c256:	f1b9 0f00 	cmp.w	r9, #0
 800c25a:	db0a      	blt.n	800c272 <__ieee754_pow+0x15a>
 800c25c:	ec43 2b10 	vmov	d0, r2, r3
 800c260:	b00d      	add	sp, #52	; 0x34
 800c262:	ecbd 8b06 	vpop	{d8-d10}
 800c266:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c26a:	f000 bc77 	b.w	800cb5c <__ieee754_sqrt>
 800c26e:	2100      	movs	r1, #0
 800c270:	9100      	str	r1, [sp, #0]
 800c272:	ec43 2b10 	vmov	d0, r2, r3
 800c276:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800c27a:	f000 fd23 	bl	800ccc4 <fabs>
 800c27e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c282:	ec51 0b10 	vmov	r0, r1, d0
 800c286:	f1b8 0f00 	cmp.w	r8, #0
 800c28a:	d12a      	bne.n	800c2e2 <__ieee754_pow+0x1ca>
 800c28c:	b12c      	cbz	r4, 800c29a <__ieee754_pow+0x182>
 800c28e:	f8df c0b4 	ldr.w	ip, [pc, #180]	; 800c344 <__ieee754_pow+0x22c>
 800c292:	f029 4e40 	bic.w	lr, r9, #3221225472	; 0xc0000000
 800c296:	45e6      	cmp	lr, ip
 800c298:	d123      	bne.n	800c2e2 <__ieee754_pow+0x1ca>
 800c29a:	2f00      	cmp	r7, #0
 800c29c:	da05      	bge.n	800c2aa <__ieee754_pow+0x192>
 800c29e:	4602      	mov	r2, r0
 800c2a0:	460b      	mov	r3, r1
 800c2a2:	2000      	movs	r0, #0
 800c2a4:	4927      	ldr	r1, [pc, #156]	; (800c344 <__ieee754_pow+0x22c>)
 800c2a6:	f7f4 fad1 	bl	800084c <__aeabi_ddiv>
 800c2aa:	f1b9 0f00 	cmp.w	r9, #0
 800c2ae:	dab7      	bge.n	800c220 <__ieee754_pow+0x108>
 800c2b0:	9b00      	ldr	r3, [sp, #0]
 800c2b2:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800c2b6:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800c2ba:	4323      	orrs	r3, r4
 800c2bc:	d108      	bne.n	800c2d0 <__ieee754_pow+0x1b8>
 800c2be:	4602      	mov	r2, r0
 800c2c0:	460b      	mov	r3, r1
 800c2c2:	4610      	mov	r0, r2
 800c2c4:	4619      	mov	r1, r3
 800c2c6:	f7f3 ffdf 	bl	8000288 <__aeabi_dsub>
 800c2ca:	4602      	mov	r2, r0
 800c2cc:	460b      	mov	r3, r1
 800c2ce:	e78d      	b.n	800c1ec <__ieee754_pow+0xd4>
 800c2d0:	9b00      	ldr	r3, [sp, #0]
 800c2d2:	2b01      	cmp	r3, #1
 800c2d4:	d1a4      	bne.n	800c220 <__ieee754_pow+0x108>
 800c2d6:	4602      	mov	r2, r0
 800c2d8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c2dc:	4610      	mov	r0, r2
 800c2de:	4619      	mov	r1, r3
 800c2e0:	e79e      	b.n	800c220 <__ieee754_pow+0x108>
 800c2e2:	ea4f 7cd9 	mov.w	ip, r9, lsr #31
 800c2e6:	f10c 35ff 	add.w	r5, ip, #4294967295
 800c2ea:	950a      	str	r5, [sp, #40]	; 0x28
 800c2ec:	9d00      	ldr	r5, [sp, #0]
 800c2ee:	46ac      	mov	ip, r5
 800c2f0:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800c2f2:	ea5c 0505 	orrs.w	r5, ip, r5
 800c2f6:	d0e4      	beq.n	800c2c2 <__ieee754_pow+0x1aa>
 800c2f8:	4b15      	ldr	r3, [pc, #84]	; (800c350 <__ieee754_pow+0x238>)
 800c2fa:	429e      	cmp	r6, r3
 800c2fc:	f340 80fc 	ble.w	800c4f8 <__ieee754_pow+0x3e0>
 800c300:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800c304:	429e      	cmp	r6, r3
 800c306:	4b10      	ldr	r3, [pc, #64]	; (800c348 <__ieee754_pow+0x230>)
 800c308:	dd07      	ble.n	800c31a <__ieee754_pow+0x202>
 800c30a:	429c      	cmp	r4, r3
 800c30c:	dc0a      	bgt.n	800c324 <__ieee754_pow+0x20c>
 800c30e:	2f00      	cmp	r7, #0
 800c310:	da84      	bge.n	800c21c <__ieee754_pow+0x104>
 800c312:	a307      	add	r3, pc, #28	; (adr r3, 800c330 <__ieee754_pow+0x218>)
 800c314:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c318:	e795      	b.n	800c246 <__ieee754_pow+0x12e>
 800c31a:	429c      	cmp	r4, r3
 800c31c:	dbf7      	blt.n	800c30e <__ieee754_pow+0x1f6>
 800c31e:	4b09      	ldr	r3, [pc, #36]	; (800c344 <__ieee754_pow+0x22c>)
 800c320:	429c      	cmp	r4, r3
 800c322:	dd17      	ble.n	800c354 <__ieee754_pow+0x23c>
 800c324:	2f00      	cmp	r7, #0
 800c326:	dcf4      	bgt.n	800c312 <__ieee754_pow+0x1fa>
 800c328:	e778      	b.n	800c21c <__ieee754_pow+0x104>
 800c32a:	bf00      	nop
 800c32c:	f3af 8000 	nop.w
 800c330:	8800759c 	.word	0x8800759c
 800c334:	7e37e43c 	.word	0x7e37e43c
 800c338:	7ff00000 	.word	0x7ff00000
 800c33c:	0800d410 	.word	0x0800d410
 800c340:	433fffff 	.word	0x433fffff
 800c344:	3ff00000 	.word	0x3ff00000
 800c348:	3fefffff 	.word	0x3fefffff
 800c34c:	3fe00000 	.word	0x3fe00000
 800c350:	41e00000 	.word	0x41e00000
 800c354:	4b64      	ldr	r3, [pc, #400]	; (800c4e8 <__ieee754_pow+0x3d0>)
 800c356:	2200      	movs	r2, #0
 800c358:	f7f3 ff96 	bl	8000288 <__aeabi_dsub>
 800c35c:	a356      	add	r3, pc, #344	; (adr r3, 800c4b8 <__ieee754_pow+0x3a0>)
 800c35e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c362:	4604      	mov	r4, r0
 800c364:	460d      	mov	r5, r1
 800c366:	f7f4 f947 	bl	80005f8 <__aeabi_dmul>
 800c36a:	a355      	add	r3, pc, #340	; (adr r3, 800c4c0 <__ieee754_pow+0x3a8>)
 800c36c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c370:	4606      	mov	r6, r0
 800c372:	460f      	mov	r7, r1
 800c374:	4620      	mov	r0, r4
 800c376:	4629      	mov	r1, r5
 800c378:	f7f4 f93e 	bl	80005f8 <__aeabi_dmul>
 800c37c:	4b5b      	ldr	r3, [pc, #364]	; (800c4ec <__ieee754_pow+0x3d4>)
 800c37e:	4682      	mov	sl, r0
 800c380:	468b      	mov	fp, r1
 800c382:	2200      	movs	r2, #0
 800c384:	4620      	mov	r0, r4
 800c386:	4629      	mov	r1, r5
 800c388:	f7f4 f936 	bl	80005f8 <__aeabi_dmul>
 800c38c:	4602      	mov	r2, r0
 800c38e:	460b      	mov	r3, r1
 800c390:	a14d      	add	r1, pc, #308	; (adr r1, 800c4c8 <__ieee754_pow+0x3b0>)
 800c392:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c396:	f7f3 ff77 	bl	8000288 <__aeabi_dsub>
 800c39a:	4622      	mov	r2, r4
 800c39c:	462b      	mov	r3, r5
 800c39e:	f7f4 f92b 	bl	80005f8 <__aeabi_dmul>
 800c3a2:	4602      	mov	r2, r0
 800c3a4:	460b      	mov	r3, r1
 800c3a6:	2000      	movs	r0, #0
 800c3a8:	4951      	ldr	r1, [pc, #324]	; (800c4f0 <__ieee754_pow+0x3d8>)
 800c3aa:	f7f3 ff6d 	bl	8000288 <__aeabi_dsub>
 800c3ae:	4622      	mov	r2, r4
 800c3b0:	4680      	mov	r8, r0
 800c3b2:	4689      	mov	r9, r1
 800c3b4:	462b      	mov	r3, r5
 800c3b6:	4620      	mov	r0, r4
 800c3b8:	4629      	mov	r1, r5
 800c3ba:	f7f4 f91d 	bl	80005f8 <__aeabi_dmul>
 800c3be:	4602      	mov	r2, r0
 800c3c0:	460b      	mov	r3, r1
 800c3c2:	4640      	mov	r0, r8
 800c3c4:	4649      	mov	r1, r9
 800c3c6:	f7f4 f917 	bl	80005f8 <__aeabi_dmul>
 800c3ca:	a341      	add	r3, pc, #260	; (adr r3, 800c4d0 <__ieee754_pow+0x3b8>)
 800c3cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3d0:	f7f4 f912 	bl	80005f8 <__aeabi_dmul>
 800c3d4:	4602      	mov	r2, r0
 800c3d6:	460b      	mov	r3, r1
 800c3d8:	4650      	mov	r0, sl
 800c3da:	4659      	mov	r1, fp
 800c3dc:	f7f3 ff54 	bl	8000288 <__aeabi_dsub>
 800c3e0:	4602      	mov	r2, r0
 800c3e2:	460b      	mov	r3, r1
 800c3e4:	4680      	mov	r8, r0
 800c3e6:	4689      	mov	r9, r1
 800c3e8:	4630      	mov	r0, r6
 800c3ea:	4639      	mov	r1, r7
 800c3ec:	f7f3 ff4e 	bl	800028c <__adddf3>
 800c3f0:	2400      	movs	r4, #0
 800c3f2:	4632      	mov	r2, r6
 800c3f4:	463b      	mov	r3, r7
 800c3f6:	4620      	mov	r0, r4
 800c3f8:	460d      	mov	r5, r1
 800c3fa:	f7f3 ff45 	bl	8000288 <__aeabi_dsub>
 800c3fe:	4602      	mov	r2, r0
 800c400:	460b      	mov	r3, r1
 800c402:	4640      	mov	r0, r8
 800c404:	4649      	mov	r1, r9
 800c406:	f7f3 ff3f 	bl	8000288 <__aeabi_dsub>
 800c40a:	9b00      	ldr	r3, [sp, #0]
 800c40c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c40e:	3b01      	subs	r3, #1
 800c410:	4313      	orrs	r3, r2
 800c412:	4682      	mov	sl, r0
 800c414:	468b      	mov	fp, r1
 800c416:	f040 81f1 	bne.w	800c7fc <__ieee754_pow+0x6e4>
 800c41a:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 800c4d8 <__ieee754_pow+0x3c0>
 800c41e:	eeb0 8a47 	vmov.f32	s16, s14
 800c422:	eef0 8a67 	vmov.f32	s17, s15
 800c426:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800c42a:	2600      	movs	r6, #0
 800c42c:	4632      	mov	r2, r6
 800c42e:	463b      	mov	r3, r7
 800c430:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c434:	f7f3 ff28 	bl	8000288 <__aeabi_dsub>
 800c438:	4622      	mov	r2, r4
 800c43a:	462b      	mov	r3, r5
 800c43c:	f7f4 f8dc 	bl	80005f8 <__aeabi_dmul>
 800c440:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c444:	4680      	mov	r8, r0
 800c446:	4689      	mov	r9, r1
 800c448:	4650      	mov	r0, sl
 800c44a:	4659      	mov	r1, fp
 800c44c:	f7f4 f8d4 	bl	80005f8 <__aeabi_dmul>
 800c450:	4602      	mov	r2, r0
 800c452:	460b      	mov	r3, r1
 800c454:	4640      	mov	r0, r8
 800c456:	4649      	mov	r1, r9
 800c458:	f7f3 ff18 	bl	800028c <__adddf3>
 800c45c:	4632      	mov	r2, r6
 800c45e:	463b      	mov	r3, r7
 800c460:	4680      	mov	r8, r0
 800c462:	4689      	mov	r9, r1
 800c464:	4620      	mov	r0, r4
 800c466:	4629      	mov	r1, r5
 800c468:	f7f4 f8c6 	bl	80005f8 <__aeabi_dmul>
 800c46c:	460b      	mov	r3, r1
 800c46e:	4604      	mov	r4, r0
 800c470:	460d      	mov	r5, r1
 800c472:	4602      	mov	r2, r0
 800c474:	4649      	mov	r1, r9
 800c476:	4640      	mov	r0, r8
 800c478:	f7f3 ff08 	bl	800028c <__adddf3>
 800c47c:	4b1d      	ldr	r3, [pc, #116]	; (800c4f4 <__ieee754_pow+0x3dc>)
 800c47e:	4299      	cmp	r1, r3
 800c480:	ec45 4b19 	vmov	d9, r4, r5
 800c484:	4606      	mov	r6, r0
 800c486:	460f      	mov	r7, r1
 800c488:	468b      	mov	fp, r1
 800c48a:	f340 82fe 	ble.w	800ca8a <__ieee754_pow+0x972>
 800c48e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800c492:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800c496:	4303      	orrs	r3, r0
 800c498:	f000 81f0 	beq.w	800c87c <__ieee754_pow+0x764>
 800c49c:	a310      	add	r3, pc, #64	; (adr r3, 800c4e0 <__ieee754_pow+0x3c8>)
 800c49e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4a2:	ec51 0b18 	vmov	r0, r1, d8
 800c4a6:	f7f4 f8a7 	bl	80005f8 <__aeabi_dmul>
 800c4aa:	a30d      	add	r3, pc, #52	; (adr r3, 800c4e0 <__ieee754_pow+0x3c8>)
 800c4ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4b0:	e6cb      	b.n	800c24a <__ieee754_pow+0x132>
 800c4b2:	bf00      	nop
 800c4b4:	f3af 8000 	nop.w
 800c4b8:	60000000 	.word	0x60000000
 800c4bc:	3ff71547 	.word	0x3ff71547
 800c4c0:	f85ddf44 	.word	0xf85ddf44
 800c4c4:	3e54ae0b 	.word	0x3e54ae0b
 800c4c8:	55555555 	.word	0x55555555
 800c4cc:	3fd55555 	.word	0x3fd55555
 800c4d0:	652b82fe 	.word	0x652b82fe
 800c4d4:	3ff71547 	.word	0x3ff71547
 800c4d8:	00000000 	.word	0x00000000
 800c4dc:	bff00000 	.word	0xbff00000
 800c4e0:	8800759c 	.word	0x8800759c
 800c4e4:	7e37e43c 	.word	0x7e37e43c
 800c4e8:	3ff00000 	.word	0x3ff00000
 800c4ec:	3fd00000 	.word	0x3fd00000
 800c4f0:	3fe00000 	.word	0x3fe00000
 800c4f4:	408fffff 	.word	0x408fffff
 800c4f8:	4bd7      	ldr	r3, [pc, #860]	; (800c858 <__ieee754_pow+0x740>)
 800c4fa:	ea03 0309 	and.w	r3, r3, r9
 800c4fe:	2200      	movs	r2, #0
 800c500:	b92b      	cbnz	r3, 800c50e <__ieee754_pow+0x3f6>
 800c502:	4bd6      	ldr	r3, [pc, #856]	; (800c85c <__ieee754_pow+0x744>)
 800c504:	f7f4 f878 	bl	80005f8 <__aeabi_dmul>
 800c508:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800c50c:	460c      	mov	r4, r1
 800c50e:	1523      	asrs	r3, r4, #20
 800c510:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800c514:	4413      	add	r3, r2
 800c516:	9309      	str	r3, [sp, #36]	; 0x24
 800c518:	4bd1      	ldr	r3, [pc, #836]	; (800c860 <__ieee754_pow+0x748>)
 800c51a:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800c51e:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800c522:	429c      	cmp	r4, r3
 800c524:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800c528:	dd08      	ble.n	800c53c <__ieee754_pow+0x424>
 800c52a:	4bce      	ldr	r3, [pc, #824]	; (800c864 <__ieee754_pow+0x74c>)
 800c52c:	429c      	cmp	r4, r3
 800c52e:	f340 8163 	ble.w	800c7f8 <__ieee754_pow+0x6e0>
 800c532:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c534:	3301      	adds	r3, #1
 800c536:	9309      	str	r3, [sp, #36]	; 0x24
 800c538:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800c53c:	2400      	movs	r4, #0
 800c53e:	00e3      	lsls	r3, r4, #3
 800c540:	930b      	str	r3, [sp, #44]	; 0x2c
 800c542:	4bc9      	ldr	r3, [pc, #804]	; (800c868 <__ieee754_pow+0x750>)
 800c544:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800c548:	ed93 7b00 	vldr	d7, [r3]
 800c54c:	4629      	mov	r1, r5
 800c54e:	ec53 2b17 	vmov	r2, r3, d7
 800c552:	eeb0 8a47 	vmov.f32	s16, s14
 800c556:	eef0 8a67 	vmov.f32	s17, s15
 800c55a:	4682      	mov	sl, r0
 800c55c:	f7f3 fe94 	bl	8000288 <__aeabi_dsub>
 800c560:	4652      	mov	r2, sl
 800c562:	4606      	mov	r6, r0
 800c564:	460f      	mov	r7, r1
 800c566:	462b      	mov	r3, r5
 800c568:	ec51 0b18 	vmov	r0, r1, d8
 800c56c:	f7f3 fe8e 	bl	800028c <__adddf3>
 800c570:	4602      	mov	r2, r0
 800c572:	460b      	mov	r3, r1
 800c574:	2000      	movs	r0, #0
 800c576:	49bd      	ldr	r1, [pc, #756]	; (800c86c <__ieee754_pow+0x754>)
 800c578:	f7f4 f968 	bl	800084c <__aeabi_ddiv>
 800c57c:	ec41 0b19 	vmov	d9, r0, r1
 800c580:	4602      	mov	r2, r0
 800c582:	460b      	mov	r3, r1
 800c584:	4630      	mov	r0, r6
 800c586:	4639      	mov	r1, r7
 800c588:	f7f4 f836 	bl	80005f8 <__aeabi_dmul>
 800c58c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800c590:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c594:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800c598:	2300      	movs	r3, #0
 800c59a:	9304      	str	r3, [sp, #16]
 800c59c:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800c5a0:	46ab      	mov	fp, r5
 800c5a2:	106d      	asrs	r5, r5, #1
 800c5a4:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800c5a8:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800c5ac:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 800c5b0:	2200      	movs	r2, #0
 800c5b2:	4640      	mov	r0, r8
 800c5b4:	4649      	mov	r1, r9
 800c5b6:	4614      	mov	r4, r2
 800c5b8:	461d      	mov	r5, r3
 800c5ba:	f7f4 f81d 	bl	80005f8 <__aeabi_dmul>
 800c5be:	4602      	mov	r2, r0
 800c5c0:	460b      	mov	r3, r1
 800c5c2:	4630      	mov	r0, r6
 800c5c4:	4639      	mov	r1, r7
 800c5c6:	f7f3 fe5f 	bl	8000288 <__aeabi_dsub>
 800c5ca:	ec53 2b18 	vmov	r2, r3, d8
 800c5ce:	4606      	mov	r6, r0
 800c5d0:	460f      	mov	r7, r1
 800c5d2:	4620      	mov	r0, r4
 800c5d4:	4629      	mov	r1, r5
 800c5d6:	f7f3 fe57 	bl	8000288 <__aeabi_dsub>
 800c5da:	4602      	mov	r2, r0
 800c5dc:	460b      	mov	r3, r1
 800c5de:	4650      	mov	r0, sl
 800c5e0:	4659      	mov	r1, fp
 800c5e2:	f7f3 fe51 	bl	8000288 <__aeabi_dsub>
 800c5e6:	4642      	mov	r2, r8
 800c5e8:	464b      	mov	r3, r9
 800c5ea:	f7f4 f805 	bl	80005f8 <__aeabi_dmul>
 800c5ee:	4602      	mov	r2, r0
 800c5f0:	460b      	mov	r3, r1
 800c5f2:	4630      	mov	r0, r6
 800c5f4:	4639      	mov	r1, r7
 800c5f6:	f7f3 fe47 	bl	8000288 <__aeabi_dsub>
 800c5fa:	ec53 2b19 	vmov	r2, r3, d9
 800c5fe:	f7f3 fffb 	bl	80005f8 <__aeabi_dmul>
 800c602:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c606:	ec41 0b18 	vmov	d8, r0, r1
 800c60a:	4610      	mov	r0, r2
 800c60c:	4619      	mov	r1, r3
 800c60e:	f7f3 fff3 	bl	80005f8 <__aeabi_dmul>
 800c612:	a37d      	add	r3, pc, #500	; (adr r3, 800c808 <__ieee754_pow+0x6f0>)
 800c614:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c618:	4604      	mov	r4, r0
 800c61a:	460d      	mov	r5, r1
 800c61c:	f7f3 ffec 	bl	80005f8 <__aeabi_dmul>
 800c620:	a37b      	add	r3, pc, #492	; (adr r3, 800c810 <__ieee754_pow+0x6f8>)
 800c622:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c626:	f7f3 fe31 	bl	800028c <__adddf3>
 800c62a:	4622      	mov	r2, r4
 800c62c:	462b      	mov	r3, r5
 800c62e:	f7f3 ffe3 	bl	80005f8 <__aeabi_dmul>
 800c632:	a379      	add	r3, pc, #484	; (adr r3, 800c818 <__ieee754_pow+0x700>)
 800c634:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c638:	f7f3 fe28 	bl	800028c <__adddf3>
 800c63c:	4622      	mov	r2, r4
 800c63e:	462b      	mov	r3, r5
 800c640:	f7f3 ffda 	bl	80005f8 <__aeabi_dmul>
 800c644:	a376      	add	r3, pc, #472	; (adr r3, 800c820 <__ieee754_pow+0x708>)
 800c646:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c64a:	f7f3 fe1f 	bl	800028c <__adddf3>
 800c64e:	4622      	mov	r2, r4
 800c650:	462b      	mov	r3, r5
 800c652:	f7f3 ffd1 	bl	80005f8 <__aeabi_dmul>
 800c656:	a374      	add	r3, pc, #464	; (adr r3, 800c828 <__ieee754_pow+0x710>)
 800c658:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c65c:	f7f3 fe16 	bl	800028c <__adddf3>
 800c660:	4622      	mov	r2, r4
 800c662:	462b      	mov	r3, r5
 800c664:	f7f3 ffc8 	bl	80005f8 <__aeabi_dmul>
 800c668:	a371      	add	r3, pc, #452	; (adr r3, 800c830 <__ieee754_pow+0x718>)
 800c66a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c66e:	f7f3 fe0d 	bl	800028c <__adddf3>
 800c672:	4622      	mov	r2, r4
 800c674:	4606      	mov	r6, r0
 800c676:	460f      	mov	r7, r1
 800c678:	462b      	mov	r3, r5
 800c67a:	4620      	mov	r0, r4
 800c67c:	4629      	mov	r1, r5
 800c67e:	f7f3 ffbb 	bl	80005f8 <__aeabi_dmul>
 800c682:	4602      	mov	r2, r0
 800c684:	460b      	mov	r3, r1
 800c686:	4630      	mov	r0, r6
 800c688:	4639      	mov	r1, r7
 800c68a:	f7f3 ffb5 	bl	80005f8 <__aeabi_dmul>
 800c68e:	4642      	mov	r2, r8
 800c690:	4604      	mov	r4, r0
 800c692:	460d      	mov	r5, r1
 800c694:	464b      	mov	r3, r9
 800c696:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c69a:	f7f3 fdf7 	bl	800028c <__adddf3>
 800c69e:	ec53 2b18 	vmov	r2, r3, d8
 800c6a2:	f7f3 ffa9 	bl	80005f8 <__aeabi_dmul>
 800c6a6:	4622      	mov	r2, r4
 800c6a8:	462b      	mov	r3, r5
 800c6aa:	f7f3 fdef 	bl	800028c <__adddf3>
 800c6ae:	4642      	mov	r2, r8
 800c6b0:	4682      	mov	sl, r0
 800c6b2:	468b      	mov	fp, r1
 800c6b4:	464b      	mov	r3, r9
 800c6b6:	4640      	mov	r0, r8
 800c6b8:	4649      	mov	r1, r9
 800c6ba:	f7f3 ff9d 	bl	80005f8 <__aeabi_dmul>
 800c6be:	4b6c      	ldr	r3, [pc, #432]	; (800c870 <__ieee754_pow+0x758>)
 800c6c0:	2200      	movs	r2, #0
 800c6c2:	4606      	mov	r6, r0
 800c6c4:	460f      	mov	r7, r1
 800c6c6:	f7f3 fde1 	bl	800028c <__adddf3>
 800c6ca:	4652      	mov	r2, sl
 800c6cc:	465b      	mov	r3, fp
 800c6ce:	f7f3 fddd 	bl	800028c <__adddf3>
 800c6d2:	9c04      	ldr	r4, [sp, #16]
 800c6d4:	460d      	mov	r5, r1
 800c6d6:	4622      	mov	r2, r4
 800c6d8:	460b      	mov	r3, r1
 800c6da:	4640      	mov	r0, r8
 800c6dc:	4649      	mov	r1, r9
 800c6de:	f7f3 ff8b 	bl	80005f8 <__aeabi_dmul>
 800c6e2:	4b63      	ldr	r3, [pc, #396]	; (800c870 <__ieee754_pow+0x758>)
 800c6e4:	4680      	mov	r8, r0
 800c6e6:	4689      	mov	r9, r1
 800c6e8:	2200      	movs	r2, #0
 800c6ea:	4620      	mov	r0, r4
 800c6ec:	4629      	mov	r1, r5
 800c6ee:	f7f3 fdcb 	bl	8000288 <__aeabi_dsub>
 800c6f2:	4632      	mov	r2, r6
 800c6f4:	463b      	mov	r3, r7
 800c6f6:	f7f3 fdc7 	bl	8000288 <__aeabi_dsub>
 800c6fa:	4602      	mov	r2, r0
 800c6fc:	460b      	mov	r3, r1
 800c6fe:	4650      	mov	r0, sl
 800c700:	4659      	mov	r1, fp
 800c702:	f7f3 fdc1 	bl	8000288 <__aeabi_dsub>
 800c706:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c70a:	f7f3 ff75 	bl	80005f8 <__aeabi_dmul>
 800c70e:	4622      	mov	r2, r4
 800c710:	4606      	mov	r6, r0
 800c712:	460f      	mov	r7, r1
 800c714:	462b      	mov	r3, r5
 800c716:	ec51 0b18 	vmov	r0, r1, d8
 800c71a:	f7f3 ff6d 	bl	80005f8 <__aeabi_dmul>
 800c71e:	4602      	mov	r2, r0
 800c720:	460b      	mov	r3, r1
 800c722:	4630      	mov	r0, r6
 800c724:	4639      	mov	r1, r7
 800c726:	f7f3 fdb1 	bl	800028c <__adddf3>
 800c72a:	4606      	mov	r6, r0
 800c72c:	460f      	mov	r7, r1
 800c72e:	4602      	mov	r2, r0
 800c730:	460b      	mov	r3, r1
 800c732:	4640      	mov	r0, r8
 800c734:	4649      	mov	r1, r9
 800c736:	f7f3 fda9 	bl	800028c <__adddf3>
 800c73a:	9c04      	ldr	r4, [sp, #16]
 800c73c:	a33e      	add	r3, pc, #248	; (adr r3, 800c838 <__ieee754_pow+0x720>)
 800c73e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c742:	4620      	mov	r0, r4
 800c744:	460d      	mov	r5, r1
 800c746:	f7f3 ff57 	bl	80005f8 <__aeabi_dmul>
 800c74a:	4642      	mov	r2, r8
 800c74c:	ec41 0b18 	vmov	d8, r0, r1
 800c750:	464b      	mov	r3, r9
 800c752:	4620      	mov	r0, r4
 800c754:	4629      	mov	r1, r5
 800c756:	f7f3 fd97 	bl	8000288 <__aeabi_dsub>
 800c75a:	4602      	mov	r2, r0
 800c75c:	460b      	mov	r3, r1
 800c75e:	4630      	mov	r0, r6
 800c760:	4639      	mov	r1, r7
 800c762:	f7f3 fd91 	bl	8000288 <__aeabi_dsub>
 800c766:	a336      	add	r3, pc, #216	; (adr r3, 800c840 <__ieee754_pow+0x728>)
 800c768:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c76c:	f7f3 ff44 	bl	80005f8 <__aeabi_dmul>
 800c770:	a335      	add	r3, pc, #212	; (adr r3, 800c848 <__ieee754_pow+0x730>)
 800c772:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c776:	4606      	mov	r6, r0
 800c778:	460f      	mov	r7, r1
 800c77a:	4620      	mov	r0, r4
 800c77c:	4629      	mov	r1, r5
 800c77e:	f7f3 ff3b 	bl	80005f8 <__aeabi_dmul>
 800c782:	4602      	mov	r2, r0
 800c784:	460b      	mov	r3, r1
 800c786:	4630      	mov	r0, r6
 800c788:	4639      	mov	r1, r7
 800c78a:	f7f3 fd7f 	bl	800028c <__adddf3>
 800c78e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800c790:	4b38      	ldr	r3, [pc, #224]	; (800c874 <__ieee754_pow+0x75c>)
 800c792:	4413      	add	r3, r2
 800c794:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c798:	f7f3 fd78 	bl	800028c <__adddf3>
 800c79c:	4682      	mov	sl, r0
 800c79e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c7a0:	468b      	mov	fp, r1
 800c7a2:	f7f3 febf 	bl	8000524 <__aeabi_i2d>
 800c7a6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800c7a8:	4b33      	ldr	r3, [pc, #204]	; (800c878 <__ieee754_pow+0x760>)
 800c7aa:	4413      	add	r3, r2
 800c7ac:	e9d3 8900 	ldrd	r8, r9, [r3]
 800c7b0:	4606      	mov	r6, r0
 800c7b2:	460f      	mov	r7, r1
 800c7b4:	4652      	mov	r2, sl
 800c7b6:	465b      	mov	r3, fp
 800c7b8:	ec51 0b18 	vmov	r0, r1, d8
 800c7bc:	f7f3 fd66 	bl	800028c <__adddf3>
 800c7c0:	4642      	mov	r2, r8
 800c7c2:	464b      	mov	r3, r9
 800c7c4:	f7f3 fd62 	bl	800028c <__adddf3>
 800c7c8:	4632      	mov	r2, r6
 800c7ca:	463b      	mov	r3, r7
 800c7cc:	f7f3 fd5e 	bl	800028c <__adddf3>
 800c7d0:	9c04      	ldr	r4, [sp, #16]
 800c7d2:	4632      	mov	r2, r6
 800c7d4:	463b      	mov	r3, r7
 800c7d6:	4620      	mov	r0, r4
 800c7d8:	460d      	mov	r5, r1
 800c7da:	f7f3 fd55 	bl	8000288 <__aeabi_dsub>
 800c7de:	4642      	mov	r2, r8
 800c7e0:	464b      	mov	r3, r9
 800c7e2:	f7f3 fd51 	bl	8000288 <__aeabi_dsub>
 800c7e6:	ec53 2b18 	vmov	r2, r3, d8
 800c7ea:	f7f3 fd4d 	bl	8000288 <__aeabi_dsub>
 800c7ee:	4602      	mov	r2, r0
 800c7f0:	460b      	mov	r3, r1
 800c7f2:	4650      	mov	r0, sl
 800c7f4:	4659      	mov	r1, fp
 800c7f6:	e606      	b.n	800c406 <__ieee754_pow+0x2ee>
 800c7f8:	2401      	movs	r4, #1
 800c7fa:	e6a0      	b.n	800c53e <__ieee754_pow+0x426>
 800c7fc:	ed9f 7b14 	vldr	d7, [pc, #80]	; 800c850 <__ieee754_pow+0x738>
 800c800:	e60d      	b.n	800c41e <__ieee754_pow+0x306>
 800c802:	bf00      	nop
 800c804:	f3af 8000 	nop.w
 800c808:	4a454eef 	.word	0x4a454eef
 800c80c:	3fca7e28 	.word	0x3fca7e28
 800c810:	93c9db65 	.word	0x93c9db65
 800c814:	3fcd864a 	.word	0x3fcd864a
 800c818:	a91d4101 	.word	0xa91d4101
 800c81c:	3fd17460 	.word	0x3fd17460
 800c820:	518f264d 	.word	0x518f264d
 800c824:	3fd55555 	.word	0x3fd55555
 800c828:	db6fabff 	.word	0xdb6fabff
 800c82c:	3fdb6db6 	.word	0x3fdb6db6
 800c830:	33333303 	.word	0x33333303
 800c834:	3fe33333 	.word	0x3fe33333
 800c838:	e0000000 	.word	0xe0000000
 800c83c:	3feec709 	.word	0x3feec709
 800c840:	dc3a03fd 	.word	0xdc3a03fd
 800c844:	3feec709 	.word	0x3feec709
 800c848:	145b01f5 	.word	0x145b01f5
 800c84c:	be3e2fe0 	.word	0xbe3e2fe0
 800c850:	00000000 	.word	0x00000000
 800c854:	3ff00000 	.word	0x3ff00000
 800c858:	7ff00000 	.word	0x7ff00000
 800c85c:	43400000 	.word	0x43400000
 800c860:	0003988e 	.word	0x0003988e
 800c864:	000bb679 	.word	0x000bb679
 800c868:	0800d520 	.word	0x0800d520
 800c86c:	3ff00000 	.word	0x3ff00000
 800c870:	40080000 	.word	0x40080000
 800c874:	0800d540 	.word	0x0800d540
 800c878:	0800d530 	.word	0x0800d530
 800c87c:	a3b5      	add	r3, pc, #724	; (adr r3, 800cb54 <__ieee754_pow+0xa3c>)
 800c87e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c882:	4640      	mov	r0, r8
 800c884:	4649      	mov	r1, r9
 800c886:	f7f3 fd01 	bl	800028c <__adddf3>
 800c88a:	4622      	mov	r2, r4
 800c88c:	ec41 0b1a 	vmov	d10, r0, r1
 800c890:	462b      	mov	r3, r5
 800c892:	4630      	mov	r0, r6
 800c894:	4639      	mov	r1, r7
 800c896:	f7f3 fcf7 	bl	8000288 <__aeabi_dsub>
 800c89a:	4602      	mov	r2, r0
 800c89c:	460b      	mov	r3, r1
 800c89e:	ec51 0b1a 	vmov	r0, r1, d10
 800c8a2:	f7f4 f939 	bl	8000b18 <__aeabi_dcmpgt>
 800c8a6:	2800      	cmp	r0, #0
 800c8a8:	f47f adf8 	bne.w	800c49c <__ieee754_pow+0x384>
 800c8ac:	4aa4      	ldr	r2, [pc, #656]	; (800cb40 <__ieee754_pow+0xa28>)
 800c8ae:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800c8b2:	4293      	cmp	r3, r2
 800c8b4:	f340 810b 	ble.w	800cace <__ieee754_pow+0x9b6>
 800c8b8:	151b      	asrs	r3, r3, #20
 800c8ba:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800c8be:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800c8c2:	fa4a f303 	asr.w	r3, sl, r3
 800c8c6:	445b      	add	r3, fp
 800c8c8:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800c8cc:	4e9d      	ldr	r6, [pc, #628]	; (800cb44 <__ieee754_pow+0xa2c>)
 800c8ce:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800c8d2:	4116      	asrs	r6, r2
 800c8d4:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800c8d8:	2000      	movs	r0, #0
 800c8da:	ea23 0106 	bic.w	r1, r3, r6
 800c8de:	f1c2 0214 	rsb	r2, r2, #20
 800c8e2:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800c8e6:	fa4a fa02 	asr.w	sl, sl, r2
 800c8ea:	f1bb 0f00 	cmp.w	fp, #0
 800c8ee:	4602      	mov	r2, r0
 800c8f0:	460b      	mov	r3, r1
 800c8f2:	4620      	mov	r0, r4
 800c8f4:	4629      	mov	r1, r5
 800c8f6:	bfb8      	it	lt
 800c8f8:	f1ca 0a00 	rsblt	sl, sl, #0
 800c8fc:	f7f3 fcc4 	bl	8000288 <__aeabi_dsub>
 800c900:	ec41 0b19 	vmov	d9, r0, r1
 800c904:	4642      	mov	r2, r8
 800c906:	464b      	mov	r3, r9
 800c908:	ec51 0b19 	vmov	r0, r1, d9
 800c90c:	f7f3 fcbe 	bl	800028c <__adddf3>
 800c910:	2400      	movs	r4, #0
 800c912:	a379      	add	r3, pc, #484	; (adr r3, 800caf8 <__ieee754_pow+0x9e0>)
 800c914:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c918:	4620      	mov	r0, r4
 800c91a:	460d      	mov	r5, r1
 800c91c:	f7f3 fe6c 	bl	80005f8 <__aeabi_dmul>
 800c920:	ec53 2b19 	vmov	r2, r3, d9
 800c924:	4606      	mov	r6, r0
 800c926:	460f      	mov	r7, r1
 800c928:	4620      	mov	r0, r4
 800c92a:	4629      	mov	r1, r5
 800c92c:	f7f3 fcac 	bl	8000288 <__aeabi_dsub>
 800c930:	4602      	mov	r2, r0
 800c932:	460b      	mov	r3, r1
 800c934:	4640      	mov	r0, r8
 800c936:	4649      	mov	r1, r9
 800c938:	f7f3 fca6 	bl	8000288 <__aeabi_dsub>
 800c93c:	a370      	add	r3, pc, #448	; (adr r3, 800cb00 <__ieee754_pow+0x9e8>)
 800c93e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c942:	f7f3 fe59 	bl	80005f8 <__aeabi_dmul>
 800c946:	a370      	add	r3, pc, #448	; (adr r3, 800cb08 <__ieee754_pow+0x9f0>)
 800c948:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c94c:	4680      	mov	r8, r0
 800c94e:	4689      	mov	r9, r1
 800c950:	4620      	mov	r0, r4
 800c952:	4629      	mov	r1, r5
 800c954:	f7f3 fe50 	bl	80005f8 <__aeabi_dmul>
 800c958:	4602      	mov	r2, r0
 800c95a:	460b      	mov	r3, r1
 800c95c:	4640      	mov	r0, r8
 800c95e:	4649      	mov	r1, r9
 800c960:	f7f3 fc94 	bl	800028c <__adddf3>
 800c964:	4604      	mov	r4, r0
 800c966:	460d      	mov	r5, r1
 800c968:	4602      	mov	r2, r0
 800c96a:	460b      	mov	r3, r1
 800c96c:	4630      	mov	r0, r6
 800c96e:	4639      	mov	r1, r7
 800c970:	f7f3 fc8c 	bl	800028c <__adddf3>
 800c974:	4632      	mov	r2, r6
 800c976:	463b      	mov	r3, r7
 800c978:	4680      	mov	r8, r0
 800c97a:	4689      	mov	r9, r1
 800c97c:	f7f3 fc84 	bl	8000288 <__aeabi_dsub>
 800c980:	4602      	mov	r2, r0
 800c982:	460b      	mov	r3, r1
 800c984:	4620      	mov	r0, r4
 800c986:	4629      	mov	r1, r5
 800c988:	f7f3 fc7e 	bl	8000288 <__aeabi_dsub>
 800c98c:	4642      	mov	r2, r8
 800c98e:	4606      	mov	r6, r0
 800c990:	460f      	mov	r7, r1
 800c992:	464b      	mov	r3, r9
 800c994:	4640      	mov	r0, r8
 800c996:	4649      	mov	r1, r9
 800c998:	f7f3 fe2e 	bl	80005f8 <__aeabi_dmul>
 800c99c:	a35c      	add	r3, pc, #368	; (adr r3, 800cb10 <__ieee754_pow+0x9f8>)
 800c99e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9a2:	4604      	mov	r4, r0
 800c9a4:	460d      	mov	r5, r1
 800c9a6:	f7f3 fe27 	bl	80005f8 <__aeabi_dmul>
 800c9aa:	a35b      	add	r3, pc, #364	; (adr r3, 800cb18 <__ieee754_pow+0xa00>)
 800c9ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9b0:	f7f3 fc6a 	bl	8000288 <__aeabi_dsub>
 800c9b4:	4622      	mov	r2, r4
 800c9b6:	462b      	mov	r3, r5
 800c9b8:	f7f3 fe1e 	bl	80005f8 <__aeabi_dmul>
 800c9bc:	a358      	add	r3, pc, #352	; (adr r3, 800cb20 <__ieee754_pow+0xa08>)
 800c9be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9c2:	f7f3 fc63 	bl	800028c <__adddf3>
 800c9c6:	4622      	mov	r2, r4
 800c9c8:	462b      	mov	r3, r5
 800c9ca:	f7f3 fe15 	bl	80005f8 <__aeabi_dmul>
 800c9ce:	a356      	add	r3, pc, #344	; (adr r3, 800cb28 <__ieee754_pow+0xa10>)
 800c9d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9d4:	f7f3 fc58 	bl	8000288 <__aeabi_dsub>
 800c9d8:	4622      	mov	r2, r4
 800c9da:	462b      	mov	r3, r5
 800c9dc:	f7f3 fe0c 	bl	80005f8 <__aeabi_dmul>
 800c9e0:	a353      	add	r3, pc, #332	; (adr r3, 800cb30 <__ieee754_pow+0xa18>)
 800c9e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9e6:	f7f3 fc51 	bl	800028c <__adddf3>
 800c9ea:	4622      	mov	r2, r4
 800c9ec:	462b      	mov	r3, r5
 800c9ee:	f7f3 fe03 	bl	80005f8 <__aeabi_dmul>
 800c9f2:	4602      	mov	r2, r0
 800c9f4:	460b      	mov	r3, r1
 800c9f6:	4640      	mov	r0, r8
 800c9f8:	4649      	mov	r1, r9
 800c9fa:	f7f3 fc45 	bl	8000288 <__aeabi_dsub>
 800c9fe:	4604      	mov	r4, r0
 800ca00:	460d      	mov	r5, r1
 800ca02:	4602      	mov	r2, r0
 800ca04:	460b      	mov	r3, r1
 800ca06:	4640      	mov	r0, r8
 800ca08:	4649      	mov	r1, r9
 800ca0a:	f7f3 fdf5 	bl	80005f8 <__aeabi_dmul>
 800ca0e:	2200      	movs	r2, #0
 800ca10:	ec41 0b19 	vmov	d9, r0, r1
 800ca14:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800ca18:	4620      	mov	r0, r4
 800ca1a:	4629      	mov	r1, r5
 800ca1c:	f7f3 fc34 	bl	8000288 <__aeabi_dsub>
 800ca20:	4602      	mov	r2, r0
 800ca22:	460b      	mov	r3, r1
 800ca24:	ec51 0b19 	vmov	r0, r1, d9
 800ca28:	f7f3 ff10 	bl	800084c <__aeabi_ddiv>
 800ca2c:	4632      	mov	r2, r6
 800ca2e:	4604      	mov	r4, r0
 800ca30:	460d      	mov	r5, r1
 800ca32:	463b      	mov	r3, r7
 800ca34:	4640      	mov	r0, r8
 800ca36:	4649      	mov	r1, r9
 800ca38:	f7f3 fdde 	bl	80005f8 <__aeabi_dmul>
 800ca3c:	4632      	mov	r2, r6
 800ca3e:	463b      	mov	r3, r7
 800ca40:	f7f3 fc24 	bl	800028c <__adddf3>
 800ca44:	4602      	mov	r2, r0
 800ca46:	460b      	mov	r3, r1
 800ca48:	4620      	mov	r0, r4
 800ca4a:	4629      	mov	r1, r5
 800ca4c:	f7f3 fc1c 	bl	8000288 <__aeabi_dsub>
 800ca50:	4642      	mov	r2, r8
 800ca52:	464b      	mov	r3, r9
 800ca54:	f7f3 fc18 	bl	8000288 <__aeabi_dsub>
 800ca58:	460b      	mov	r3, r1
 800ca5a:	4602      	mov	r2, r0
 800ca5c:	493a      	ldr	r1, [pc, #232]	; (800cb48 <__ieee754_pow+0xa30>)
 800ca5e:	2000      	movs	r0, #0
 800ca60:	f7f3 fc12 	bl	8000288 <__aeabi_dsub>
 800ca64:	e9cd 0100 	strd	r0, r1, [sp]
 800ca68:	9b01      	ldr	r3, [sp, #4]
 800ca6a:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800ca6e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ca72:	da2f      	bge.n	800cad4 <__ieee754_pow+0x9bc>
 800ca74:	4650      	mov	r0, sl
 800ca76:	ed9d 0b00 	vldr	d0, [sp]
 800ca7a:	f000 f9cd 	bl	800ce18 <scalbn>
 800ca7e:	ec51 0b10 	vmov	r0, r1, d0
 800ca82:	ec53 2b18 	vmov	r2, r3, d8
 800ca86:	f7ff bbe0 	b.w	800c24a <__ieee754_pow+0x132>
 800ca8a:	4b30      	ldr	r3, [pc, #192]	; (800cb4c <__ieee754_pow+0xa34>)
 800ca8c:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800ca90:	429e      	cmp	r6, r3
 800ca92:	f77f af0b 	ble.w	800c8ac <__ieee754_pow+0x794>
 800ca96:	4b2e      	ldr	r3, [pc, #184]	; (800cb50 <__ieee754_pow+0xa38>)
 800ca98:	440b      	add	r3, r1
 800ca9a:	4303      	orrs	r3, r0
 800ca9c:	d00b      	beq.n	800cab6 <__ieee754_pow+0x99e>
 800ca9e:	a326      	add	r3, pc, #152	; (adr r3, 800cb38 <__ieee754_pow+0xa20>)
 800caa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800caa4:	ec51 0b18 	vmov	r0, r1, d8
 800caa8:	f7f3 fda6 	bl	80005f8 <__aeabi_dmul>
 800caac:	a322      	add	r3, pc, #136	; (adr r3, 800cb38 <__ieee754_pow+0xa20>)
 800caae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cab2:	f7ff bbca 	b.w	800c24a <__ieee754_pow+0x132>
 800cab6:	4622      	mov	r2, r4
 800cab8:	462b      	mov	r3, r5
 800caba:	f7f3 fbe5 	bl	8000288 <__aeabi_dsub>
 800cabe:	4642      	mov	r2, r8
 800cac0:	464b      	mov	r3, r9
 800cac2:	f7f4 f81f 	bl	8000b04 <__aeabi_dcmpge>
 800cac6:	2800      	cmp	r0, #0
 800cac8:	f43f aef0 	beq.w	800c8ac <__ieee754_pow+0x794>
 800cacc:	e7e7      	b.n	800ca9e <__ieee754_pow+0x986>
 800cace:	f04f 0a00 	mov.w	sl, #0
 800cad2:	e717      	b.n	800c904 <__ieee754_pow+0x7ec>
 800cad4:	e9dd 0100 	ldrd	r0, r1, [sp]
 800cad8:	4619      	mov	r1, r3
 800cada:	e7d2      	b.n	800ca82 <__ieee754_pow+0x96a>
 800cadc:	491a      	ldr	r1, [pc, #104]	; (800cb48 <__ieee754_pow+0xa30>)
 800cade:	2000      	movs	r0, #0
 800cae0:	f7ff bb9e 	b.w	800c220 <__ieee754_pow+0x108>
 800cae4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cae8:	f7ff bb9a 	b.w	800c220 <__ieee754_pow+0x108>
 800caec:	9000      	str	r0, [sp, #0]
 800caee:	f7ff bb76 	b.w	800c1de <__ieee754_pow+0xc6>
 800caf2:	2100      	movs	r1, #0
 800caf4:	f7ff bb60 	b.w	800c1b8 <__ieee754_pow+0xa0>
 800caf8:	00000000 	.word	0x00000000
 800cafc:	3fe62e43 	.word	0x3fe62e43
 800cb00:	fefa39ef 	.word	0xfefa39ef
 800cb04:	3fe62e42 	.word	0x3fe62e42
 800cb08:	0ca86c39 	.word	0x0ca86c39
 800cb0c:	be205c61 	.word	0xbe205c61
 800cb10:	72bea4d0 	.word	0x72bea4d0
 800cb14:	3e663769 	.word	0x3e663769
 800cb18:	c5d26bf1 	.word	0xc5d26bf1
 800cb1c:	3ebbbd41 	.word	0x3ebbbd41
 800cb20:	af25de2c 	.word	0xaf25de2c
 800cb24:	3f11566a 	.word	0x3f11566a
 800cb28:	16bebd93 	.word	0x16bebd93
 800cb2c:	3f66c16c 	.word	0x3f66c16c
 800cb30:	5555553e 	.word	0x5555553e
 800cb34:	3fc55555 	.word	0x3fc55555
 800cb38:	c2f8f359 	.word	0xc2f8f359
 800cb3c:	01a56e1f 	.word	0x01a56e1f
 800cb40:	3fe00000 	.word	0x3fe00000
 800cb44:	000fffff 	.word	0x000fffff
 800cb48:	3ff00000 	.word	0x3ff00000
 800cb4c:	4090cbff 	.word	0x4090cbff
 800cb50:	3f6f3400 	.word	0x3f6f3400
 800cb54:	652b82fe 	.word	0x652b82fe
 800cb58:	3c971547 	.word	0x3c971547

0800cb5c <__ieee754_sqrt>:
 800cb5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cb60:	ec55 4b10 	vmov	r4, r5, d0
 800cb64:	4e56      	ldr	r6, [pc, #344]	; (800ccc0 <__ieee754_sqrt+0x164>)
 800cb66:	43ae      	bics	r6, r5
 800cb68:	ee10 0a10 	vmov	r0, s0
 800cb6c:	ee10 3a10 	vmov	r3, s0
 800cb70:	4629      	mov	r1, r5
 800cb72:	462a      	mov	r2, r5
 800cb74:	d110      	bne.n	800cb98 <__ieee754_sqrt+0x3c>
 800cb76:	ee10 2a10 	vmov	r2, s0
 800cb7a:	462b      	mov	r3, r5
 800cb7c:	f7f3 fd3c 	bl	80005f8 <__aeabi_dmul>
 800cb80:	4602      	mov	r2, r0
 800cb82:	460b      	mov	r3, r1
 800cb84:	4620      	mov	r0, r4
 800cb86:	4629      	mov	r1, r5
 800cb88:	f7f3 fb80 	bl	800028c <__adddf3>
 800cb8c:	4604      	mov	r4, r0
 800cb8e:	460d      	mov	r5, r1
 800cb90:	ec45 4b10 	vmov	d0, r4, r5
 800cb94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cb98:	2d00      	cmp	r5, #0
 800cb9a:	dc10      	bgt.n	800cbbe <__ieee754_sqrt+0x62>
 800cb9c:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800cba0:	4330      	orrs	r0, r6
 800cba2:	d0f5      	beq.n	800cb90 <__ieee754_sqrt+0x34>
 800cba4:	b15d      	cbz	r5, 800cbbe <__ieee754_sqrt+0x62>
 800cba6:	ee10 2a10 	vmov	r2, s0
 800cbaa:	462b      	mov	r3, r5
 800cbac:	ee10 0a10 	vmov	r0, s0
 800cbb0:	f7f3 fb6a 	bl	8000288 <__aeabi_dsub>
 800cbb4:	4602      	mov	r2, r0
 800cbb6:	460b      	mov	r3, r1
 800cbb8:	f7f3 fe48 	bl	800084c <__aeabi_ddiv>
 800cbbc:	e7e6      	b.n	800cb8c <__ieee754_sqrt+0x30>
 800cbbe:	1509      	asrs	r1, r1, #20
 800cbc0:	d076      	beq.n	800ccb0 <__ieee754_sqrt+0x154>
 800cbc2:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800cbc6:	07ce      	lsls	r6, r1, #31
 800cbc8:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 800cbcc:	bf5e      	ittt	pl
 800cbce:	0fda      	lsrpl	r2, r3, #31
 800cbd0:	005b      	lslpl	r3, r3, #1
 800cbd2:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 800cbd6:	0fda      	lsrs	r2, r3, #31
 800cbd8:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 800cbdc:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 800cbe0:	2000      	movs	r0, #0
 800cbe2:	106d      	asrs	r5, r5, #1
 800cbe4:	005b      	lsls	r3, r3, #1
 800cbe6:	f04f 0e16 	mov.w	lr, #22
 800cbea:	4684      	mov	ip, r0
 800cbec:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800cbf0:	eb0c 0401 	add.w	r4, ip, r1
 800cbf4:	4294      	cmp	r4, r2
 800cbf6:	bfde      	ittt	le
 800cbf8:	1b12      	suble	r2, r2, r4
 800cbfa:	eb04 0c01 	addle.w	ip, r4, r1
 800cbfe:	1840      	addle	r0, r0, r1
 800cc00:	0052      	lsls	r2, r2, #1
 800cc02:	f1be 0e01 	subs.w	lr, lr, #1
 800cc06:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800cc0a:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800cc0e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800cc12:	d1ed      	bne.n	800cbf0 <__ieee754_sqrt+0x94>
 800cc14:	4671      	mov	r1, lr
 800cc16:	2720      	movs	r7, #32
 800cc18:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800cc1c:	4562      	cmp	r2, ip
 800cc1e:	eb04 060e 	add.w	r6, r4, lr
 800cc22:	dc02      	bgt.n	800cc2a <__ieee754_sqrt+0xce>
 800cc24:	d113      	bne.n	800cc4e <__ieee754_sqrt+0xf2>
 800cc26:	429e      	cmp	r6, r3
 800cc28:	d811      	bhi.n	800cc4e <__ieee754_sqrt+0xf2>
 800cc2a:	2e00      	cmp	r6, #0
 800cc2c:	eb06 0e04 	add.w	lr, r6, r4
 800cc30:	da43      	bge.n	800ccba <__ieee754_sqrt+0x15e>
 800cc32:	f1be 0f00 	cmp.w	lr, #0
 800cc36:	db40      	blt.n	800ccba <__ieee754_sqrt+0x15e>
 800cc38:	f10c 0801 	add.w	r8, ip, #1
 800cc3c:	eba2 020c 	sub.w	r2, r2, ip
 800cc40:	429e      	cmp	r6, r3
 800cc42:	bf88      	it	hi
 800cc44:	f102 32ff 	addhi.w	r2, r2, #4294967295
 800cc48:	1b9b      	subs	r3, r3, r6
 800cc4a:	4421      	add	r1, r4
 800cc4c:	46c4      	mov	ip, r8
 800cc4e:	0052      	lsls	r2, r2, #1
 800cc50:	3f01      	subs	r7, #1
 800cc52:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800cc56:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800cc5a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800cc5e:	d1dd      	bne.n	800cc1c <__ieee754_sqrt+0xc0>
 800cc60:	4313      	orrs	r3, r2
 800cc62:	d006      	beq.n	800cc72 <__ieee754_sqrt+0x116>
 800cc64:	1c4c      	adds	r4, r1, #1
 800cc66:	bf13      	iteet	ne
 800cc68:	3101      	addne	r1, #1
 800cc6a:	3001      	addeq	r0, #1
 800cc6c:	4639      	moveq	r1, r7
 800cc6e:	f021 0101 	bicne.w	r1, r1, #1
 800cc72:	1043      	asrs	r3, r0, #1
 800cc74:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800cc78:	0849      	lsrs	r1, r1, #1
 800cc7a:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800cc7e:	07c2      	lsls	r2, r0, #31
 800cc80:	bf48      	it	mi
 800cc82:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 800cc86:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 800cc8a:	460c      	mov	r4, r1
 800cc8c:	463d      	mov	r5, r7
 800cc8e:	e77f      	b.n	800cb90 <__ieee754_sqrt+0x34>
 800cc90:	0ada      	lsrs	r2, r3, #11
 800cc92:	3815      	subs	r0, #21
 800cc94:	055b      	lsls	r3, r3, #21
 800cc96:	2a00      	cmp	r2, #0
 800cc98:	d0fa      	beq.n	800cc90 <__ieee754_sqrt+0x134>
 800cc9a:	02d7      	lsls	r7, r2, #11
 800cc9c:	d50a      	bpl.n	800ccb4 <__ieee754_sqrt+0x158>
 800cc9e:	f1c1 0420 	rsb	r4, r1, #32
 800cca2:	fa23 f404 	lsr.w	r4, r3, r4
 800cca6:	1e4d      	subs	r5, r1, #1
 800cca8:	408b      	lsls	r3, r1
 800ccaa:	4322      	orrs	r2, r4
 800ccac:	1b41      	subs	r1, r0, r5
 800ccae:	e788      	b.n	800cbc2 <__ieee754_sqrt+0x66>
 800ccb0:	4608      	mov	r0, r1
 800ccb2:	e7f0      	b.n	800cc96 <__ieee754_sqrt+0x13a>
 800ccb4:	0052      	lsls	r2, r2, #1
 800ccb6:	3101      	adds	r1, #1
 800ccb8:	e7ef      	b.n	800cc9a <__ieee754_sqrt+0x13e>
 800ccba:	46e0      	mov	r8, ip
 800ccbc:	e7be      	b.n	800cc3c <__ieee754_sqrt+0xe0>
 800ccbe:	bf00      	nop
 800ccc0:	7ff00000 	.word	0x7ff00000

0800ccc4 <fabs>:
 800ccc4:	ec51 0b10 	vmov	r0, r1, d0
 800ccc8:	ee10 2a10 	vmov	r2, s0
 800cccc:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800ccd0:	ec43 2b10 	vmov	d0, r2, r3
 800ccd4:	4770      	bx	lr

0800ccd6 <finite>:
 800ccd6:	b082      	sub	sp, #8
 800ccd8:	ed8d 0b00 	vstr	d0, [sp]
 800ccdc:	9801      	ldr	r0, [sp, #4]
 800ccde:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800cce2:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800cce6:	0fc0      	lsrs	r0, r0, #31
 800cce8:	b002      	add	sp, #8
 800ccea:	4770      	bx	lr
 800ccec:	0000      	movs	r0, r0
	...

0800ccf0 <nan>:
 800ccf0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800ccf8 <nan+0x8>
 800ccf4:	4770      	bx	lr
 800ccf6:	bf00      	nop
 800ccf8:	00000000 	.word	0x00000000
 800ccfc:	7ff80000 	.word	0x7ff80000

0800cd00 <rint>:
 800cd00:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800cd02:	ec51 0b10 	vmov	r0, r1, d0
 800cd06:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800cd0a:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 800cd0e:	2e13      	cmp	r6, #19
 800cd10:	ee10 4a10 	vmov	r4, s0
 800cd14:	460b      	mov	r3, r1
 800cd16:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 800cd1a:	dc58      	bgt.n	800cdce <rint+0xce>
 800cd1c:	2e00      	cmp	r6, #0
 800cd1e:	da2b      	bge.n	800cd78 <rint+0x78>
 800cd20:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 800cd24:	4302      	orrs	r2, r0
 800cd26:	d023      	beq.n	800cd70 <rint+0x70>
 800cd28:	f3c1 0213 	ubfx	r2, r1, #0, #20
 800cd2c:	4302      	orrs	r2, r0
 800cd2e:	4254      	negs	r4, r2
 800cd30:	4314      	orrs	r4, r2
 800cd32:	0c4b      	lsrs	r3, r1, #17
 800cd34:	0b24      	lsrs	r4, r4, #12
 800cd36:	045b      	lsls	r3, r3, #17
 800cd38:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 800cd3c:	ea44 0103 	orr.w	r1, r4, r3
 800cd40:	4b32      	ldr	r3, [pc, #200]	; (800ce0c <rint+0x10c>)
 800cd42:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800cd46:	e9d3 6700 	ldrd	r6, r7, [r3]
 800cd4a:	4602      	mov	r2, r0
 800cd4c:	460b      	mov	r3, r1
 800cd4e:	4630      	mov	r0, r6
 800cd50:	4639      	mov	r1, r7
 800cd52:	f7f3 fa9b 	bl	800028c <__adddf3>
 800cd56:	e9cd 0100 	strd	r0, r1, [sp]
 800cd5a:	463b      	mov	r3, r7
 800cd5c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800cd60:	4632      	mov	r2, r6
 800cd62:	f7f3 fa91 	bl	8000288 <__aeabi_dsub>
 800cd66:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800cd6a:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 800cd6e:	4639      	mov	r1, r7
 800cd70:	ec41 0b10 	vmov	d0, r0, r1
 800cd74:	b003      	add	sp, #12
 800cd76:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cd78:	4a25      	ldr	r2, [pc, #148]	; (800ce10 <rint+0x110>)
 800cd7a:	4132      	asrs	r2, r6
 800cd7c:	ea01 0702 	and.w	r7, r1, r2
 800cd80:	4307      	orrs	r7, r0
 800cd82:	d0f5      	beq.n	800cd70 <rint+0x70>
 800cd84:	0851      	lsrs	r1, r2, #1
 800cd86:	ea03 0252 	and.w	r2, r3, r2, lsr #1
 800cd8a:	4314      	orrs	r4, r2
 800cd8c:	d00c      	beq.n	800cda8 <rint+0xa8>
 800cd8e:	ea23 0201 	bic.w	r2, r3, r1
 800cd92:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800cd96:	2e13      	cmp	r6, #19
 800cd98:	fa43 f606 	asr.w	r6, r3, r6
 800cd9c:	bf0c      	ite	eq
 800cd9e:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 800cda2:	2400      	movne	r4, #0
 800cda4:	ea42 0306 	orr.w	r3, r2, r6
 800cda8:	4918      	ldr	r1, [pc, #96]	; (800ce0c <rint+0x10c>)
 800cdaa:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 800cdae:	4622      	mov	r2, r4
 800cdb0:	e9d5 4500 	ldrd	r4, r5, [r5]
 800cdb4:	4620      	mov	r0, r4
 800cdb6:	4629      	mov	r1, r5
 800cdb8:	f7f3 fa68 	bl	800028c <__adddf3>
 800cdbc:	e9cd 0100 	strd	r0, r1, [sp]
 800cdc0:	e9dd 0100 	ldrd	r0, r1, [sp]
 800cdc4:	4622      	mov	r2, r4
 800cdc6:	462b      	mov	r3, r5
 800cdc8:	f7f3 fa5e 	bl	8000288 <__aeabi_dsub>
 800cdcc:	e7d0      	b.n	800cd70 <rint+0x70>
 800cdce:	2e33      	cmp	r6, #51	; 0x33
 800cdd0:	dd07      	ble.n	800cde2 <rint+0xe2>
 800cdd2:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800cdd6:	d1cb      	bne.n	800cd70 <rint+0x70>
 800cdd8:	ee10 2a10 	vmov	r2, s0
 800cddc:	f7f3 fa56 	bl	800028c <__adddf3>
 800cde0:	e7c6      	b.n	800cd70 <rint+0x70>
 800cde2:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 800cde6:	f04f 36ff 	mov.w	r6, #4294967295
 800cdea:	40d6      	lsrs	r6, r2
 800cdec:	4230      	tst	r0, r6
 800cdee:	d0bf      	beq.n	800cd70 <rint+0x70>
 800cdf0:	ea14 0056 	ands.w	r0, r4, r6, lsr #1
 800cdf4:	ea4f 0156 	mov.w	r1, r6, lsr #1
 800cdf8:	bf1f      	itttt	ne
 800cdfa:	ea24 0101 	bicne.w	r1, r4, r1
 800cdfe:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 800ce02:	fa44 f202 	asrne.w	r2, r4, r2
 800ce06:	ea41 0402 	orrne.w	r4, r1, r2
 800ce0a:	e7cd      	b.n	800cda8 <rint+0xa8>
 800ce0c:	0800d550 	.word	0x0800d550
 800ce10:	000fffff 	.word	0x000fffff
 800ce14:	00000000 	.word	0x00000000

0800ce18 <scalbn>:
 800ce18:	b570      	push	{r4, r5, r6, lr}
 800ce1a:	ec55 4b10 	vmov	r4, r5, d0
 800ce1e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800ce22:	4606      	mov	r6, r0
 800ce24:	462b      	mov	r3, r5
 800ce26:	b99a      	cbnz	r2, 800ce50 <scalbn+0x38>
 800ce28:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800ce2c:	4323      	orrs	r3, r4
 800ce2e:	d036      	beq.n	800ce9e <scalbn+0x86>
 800ce30:	4b39      	ldr	r3, [pc, #228]	; (800cf18 <scalbn+0x100>)
 800ce32:	4629      	mov	r1, r5
 800ce34:	ee10 0a10 	vmov	r0, s0
 800ce38:	2200      	movs	r2, #0
 800ce3a:	f7f3 fbdd 	bl	80005f8 <__aeabi_dmul>
 800ce3e:	4b37      	ldr	r3, [pc, #220]	; (800cf1c <scalbn+0x104>)
 800ce40:	429e      	cmp	r6, r3
 800ce42:	4604      	mov	r4, r0
 800ce44:	460d      	mov	r5, r1
 800ce46:	da10      	bge.n	800ce6a <scalbn+0x52>
 800ce48:	a32b      	add	r3, pc, #172	; (adr r3, 800cef8 <scalbn+0xe0>)
 800ce4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce4e:	e03a      	b.n	800cec6 <scalbn+0xae>
 800ce50:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800ce54:	428a      	cmp	r2, r1
 800ce56:	d10c      	bne.n	800ce72 <scalbn+0x5a>
 800ce58:	ee10 2a10 	vmov	r2, s0
 800ce5c:	4620      	mov	r0, r4
 800ce5e:	4629      	mov	r1, r5
 800ce60:	f7f3 fa14 	bl	800028c <__adddf3>
 800ce64:	4604      	mov	r4, r0
 800ce66:	460d      	mov	r5, r1
 800ce68:	e019      	b.n	800ce9e <scalbn+0x86>
 800ce6a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800ce6e:	460b      	mov	r3, r1
 800ce70:	3a36      	subs	r2, #54	; 0x36
 800ce72:	4432      	add	r2, r6
 800ce74:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800ce78:	428a      	cmp	r2, r1
 800ce7a:	dd08      	ble.n	800ce8e <scalbn+0x76>
 800ce7c:	2d00      	cmp	r5, #0
 800ce7e:	a120      	add	r1, pc, #128	; (adr r1, 800cf00 <scalbn+0xe8>)
 800ce80:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ce84:	da1c      	bge.n	800cec0 <scalbn+0xa8>
 800ce86:	a120      	add	r1, pc, #128	; (adr r1, 800cf08 <scalbn+0xf0>)
 800ce88:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ce8c:	e018      	b.n	800cec0 <scalbn+0xa8>
 800ce8e:	2a00      	cmp	r2, #0
 800ce90:	dd08      	ble.n	800cea4 <scalbn+0x8c>
 800ce92:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800ce96:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800ce9a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800ce9e:	ec45 4b10 	vmov	d0, r4, r5
 800cea2:	bd70      	pop	{r4, r5, r6, pc}
 800cea4:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800cea8:	da19      	bge.n	800cede <scalbn+0xc6>
 800ceaa:	f24c 3350 	movw	r3, #50000	; 0xc350
 800ceae:	429e      	cmp	r6, r3
 800ceb0:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800ceb4:	dd0a      	ble.n	800cecc <scalbn+0xb4>
 800ceb6:	a112      	add	r1, pc, #72	; (adr r1, 800cf00 <scalbn+0xe8>)
 800ceb8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cebc:	2b00      	cmp	r3, #0
 800cebe:	d1e2      	bne.n	800ce86 <scalbn+0x6e>
 800cec0:	a30f      	add	r3, pc, #60	; (adr r3, 800cf00 <scalbn+0xe8>)
 800cec2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cec6:	f7f3 fb97 	bl	80005f8 <__aeabi_dmul>
 800ceca:	e7cb      	b.n	800ce64 <scalbn+0x4c>
 800cecc:	a10a      	add	r1, pc, #40	; (adr r1, 800cef8 <scalbn+0xe0>)
 800cece:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ced2:	2b00      	cmp	r3, #0
 800ced4:	d0b8      	beq.n	800ce48 <scalbn+0x30>
 800ced6:	a10e      	add	r1, pc, #56	; (adr r1, 800cf10 <scalbn+0xf8>)
 800ced8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cedc:	e7b4      	b.n	800ce48 <scalbn+0x30>
 800cede:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800cee2:	3236      	adds	r2, #54	; 0x36
 800cee4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800cee8:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800ceec:	4620      	mov	r0, r4
 800ceee:	4b0c      	ldr	r3, [pc, #48]	; (800cf20 <scalbn+0x108>)
 800cef0:	2200      	movs	r2, #0
 800cef2:	e7e8      	b.n	800cec6 <scalbn+0xae>
 800cef4:	f3af 8000 	nop.w
 800cef8:	c2f8f359 	.word	0xc2f8f359
 800cefc:	01a56e1f 	.word	0x01a56e1f
 800cf00:	8800759c 	.word	0x8800759c
 800cf04:	7e37e43c 	.word	0x7e37e43c
 800cf08:	8800759c 	.word	0x8800759c
 800cf0c:	fe37e43c 	.word	0xfe37e43c
 800cf10:	c2f8f359 	.word	0xc2f8f359
 800cf14:	81a56e1f 	.word	0x81a56e1f
 800cf18:	43500000 	.word	0x43500000
 800cf1c:	ffff3cb0 	.word	0xffff3cb0
 800cf20:	3c900000 	.word	0x3c900000

0800cf24 <_init>:
 800cf24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cf26:	bf00      	nop
 800cf28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cf2a:	bc08      	pop	{r3}
 800cf2c:	469e      	mov	lr, r3
 800cf2e:	4770      	bx	lr

0800cf30 <_fini>:
 800cf30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cf32:	bf00      	nop
 800cf34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cf36:	bc08      	pop	{r3}
 800cf38:	469e      	mov	lr, r3
 800cf3a:	4770      	bx	lr
