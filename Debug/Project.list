
Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004248  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000010c  080043d8  080043d8  000143d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080044e4  080044e4  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  080044e4  080044e4  000144e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080044ec  080044ec  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080044ec  080044ec  000144ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080044f0  080044f0  000144f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  080044f4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020074  2**0
                  CONTENTS
 10 .bss          0000015c  20000074  20000074  00020074  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200001d0  200001d0  00020074  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000f2bf  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001ca9  00000000  00000000  0002f363  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000c10  00000000  00000000  00031010  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000b68  00000000  00000000  00031c20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002158f  00000000  00000000  00032788  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000d83d  00000000  00000000  00053d17  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cb88b  00000000  00000000  00061554  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0012cddf  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003c4c  00000000  00000000  0012ce34  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080043c0 	.word	0x080043c0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	080043c0 	.word	0x080043c0

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96e 	b.w	8000574 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468c      	mov	ip, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	f040 8083 	bne.w	80003c6 <__udivmoddi4+0x116>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d947      	bls.n	8000356 <__udivmoddi4+0xa6>
 80002c6:	fab2 f282 	clz	r2, r2
 80002ca:	b142      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002cc:	f1c2 0020 	rsb	r0, r2, #32
 80002d0:	fa24 f000 	lsr.w	r0, r4, r0
 80002d4:	4091      	lsls	r1, r2
 80002d6:	4097      	lsls	r7, r2
 80002d8:	ea40 0c01 	orr.w	ip, r0, r1
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbbc f6f8 	udiv	r6, ip, r8
 80002e8:	fa1f fe87 	uxth.w	lr, r7
 80002ec:	fb08 c116 	mls	r1, r8, r6, ip
 80002f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f4:	fb06 f10e 	mul.w	r1, r6, lr
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18fb      	adds	r3, r7, r3
 80002fe:	f106 30ff 	add.w	r0, r6, #4294967295
 8000302:	f080 8119 	bcs.w	8000538 <__udivmoddi4+0x288>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8116 	bls.w	8000538 <__udivmoddi4+0x288>
 800030c:	3e02      	subs	r6, #2
 800030e:	443b      	add	r3, r7
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0f8 	udiv	r0, r3, r8
 8000318:	fb08 3310 	mls	r3, r8, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fe0e 	mul.w	lr, r0, lr
 8000324:	45a6      	cmp	lr, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	193c      	adds	r4, r7, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	f080 8105 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000332:	45a6      	cmp	lr, r4
 8000334:	f240 8102 	bls.w	800053c <__udivmoddi4+0x28c>
 8000338:	3802      	subs	r0, #2
 800033a:	443c      	add	r4, r7
 800033c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000340:	eba4 040e 	sub.w	r4, r4, lr
 8000344:	2600      	movs	r6, #0
 8000346:	b11d      	cbz	r5, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c5 4300 	strd	r4, r3, [r5]
 8000350:	4631      	mov	r1, r6
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	b902      	cbnz	r2, 800035a <__udivmoddi4+0xaa>
 8000358:	deff      	udf	#255	; 0xff
 800035a:	fab2 f282 	clz	r2, r2
 800035e:	2a00      	cmp	r2, #0
 8000360:	d150      	bne.n	8000404 <__udivmoddi4+0x154>
 8000362:	1bcb      	subs	r3, r1, r7
 8000364:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	2601      	movs	r6, #1
 800036e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000372:	0c21      	lsrs	r1, r4, #16
 8000374:	fb0e 331c 	mls	r3, lr, ip, r3
 8000378:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800037c:	fb08 f30c 	mul.w	r3, r8, ip
 8000380:	428b      	cmp	r3, r1
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0xe4>
 8000384:	1879      	adds	r1, r7, r1
 8000386:	f10c 30ff 	add.w	r0, ip, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0xe2>
 800038c:	428b      	cmp	r3, r1
 800038e:	f200 80e9 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 8000392:	4684      	mov	ip, r0
 8000394:	1ac9      	subs	r1, r1, r3
 8000396:	b2a3      	uxth	r3, r4
 8000398:	fbb1 f0fe 	udiv	r0, r1, lr
 800039c:	fb0e 1110 	mls	r1, lr, r0, r1
 80003a0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003a4:	fb08 f800 	mul.w	r8, r8, r0
 80003a8:	45a0      	cmp	r8, r4
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x10c>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x10a>
 80003b4:	45a0      	cmp	r8, r4
 80003b6:	f200 80d9 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003ba:	4618      	mov	r0, r3
 80003bc:	eba4 0408 	sub.w	r4, r4, r8
 80003c0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003c4:	e7bf      	b.n	8000346 <__udivmoddi4+0x96>
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0x12e>
 80003ca:	2d00      	cmp	r5, #0
 80003cc:	f000 80b1 	beq.w	8000532 <__udivmoddi4+0x282>
 80003d0:	2600      	movs	r6, #0
 80003d2:	e9c5 0100 	strd	r0, r1, [r5]
 80003d6:	4630      	mov	r0, r6
 80003d8:	4631      	mov	r1, r6
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f683 	clz	r6, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d14a      	bne.n	800047c <__udivmoddi4+0x1cc>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0x140>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80b8 	bhi.w	8000560 <__udivmoddi4+0x2b0>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0103 	sbc.w	r1, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	468c      	mov	ip, r1
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	d0a8      	beq.n	8000350 <__udivmoddi4+0xa0>
 80003fe:	e9c5 4c00 	strd	r4, ip, [r5]
 8000402:	e7a5      	b.n	8000350 <__udivmoddi4+0xa0>
 8000404:	f1c2 0320 	rsb	r3, r2, #32
 8000408:	fa20 f603 	lsr.w	r6, r0, r3
 800040c:	4097      	lsls	r7, r2
 800040e:	fa01 f002 	lsl.w	r0, r1, r2
 8000412:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000416:	40d9      	lsrs	r1, r3
 8000418:	4330      	orrs	r0, r6
 800041a:	0c03      	lsrs	r3, r0, #16
 800041c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000420:	fa1f f887 	uxth.w	r8, r7
 8000424:	fb0e 1116 	mls	r1, lr, r6, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb06 f108 	mul.w	r1, r6, r8
 8000430:	4299      	cmp	r1, r3
 8000432:	fa04 f402 	lsl.w	r4, r4, r2
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x19c>
 8000438:	18fb      	adds	r3, r7, r3
 800043a:	f106 3cff 	add.w	ip, r6, #4294967295
 800043e:	f080 808d 	bcs.w	800055c <__udivmoddi4+0x2ac>
 8000442:	4299      	cmp	r1, r3
 8000444:	f240 808a 	bls.w	800055c <__udivmoddi4+0x2ac>
 8000448:	3e02      	subs	r6, #2
 800044a:	443b      	add	r3, r7
 800044c:	1a5b      	subs	r3, r3, r1
 800044e:	b281      	uxth	r1, r0
 8000450:	fbb3 f0fe 	udiv	r0, r3, lr
 8000454:	fb0e 3310 	mls	r3, lr, r0, r3
 8000458:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045c:	fb00 f308 	mul.w	r3, r0, r8
 8000460:	428b      	cmp	r3, r1
 8000462:	d907      	bls.n	8000474 <__udivmoddi4+0x1c4>
 8000464:	1879      	adds	r1, r7, r1
 8000466:	f100 3cff 	add.w	ip, r0, #4294967295
 800046a:	d273      	bcs.n	8000554 <__udivmoddi4+0x2a4>
 800046c:	428b      	cmp	r3, r1
 800046e:	d971      	bls.n	8000554 <__udivmoddi4+0x2a4>
 8000470:	3802      	subs	r0, #2
 8000472:	4439      	add	r1, r7
 8000474:	1acb      	subs	r3, r1, r3
 8000476:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800047a:	e778      	b.n	800036e <__udivmoddi4+0xbe>
 800047c:	f1c6 0c20 	rsb	ip, r6, #32
 8000480:	fa03 f406 	lsl.w	r4, r3, r6
 8000484:	fa22 f30c 	lsr.w	r3, r2, ip
 8000488:	431c      	orrs	r4, r3
 800048a:	fa20 f70c 	lsr.w	r7, r0, ip
 800048e:	fa01 f306 	lsl.w	r3, r1, r6
 8000492:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000496:	fa21 f10c 	lsr.w	r1, r1, ip
 800049a:	431f      	orrs	r7, r3
 800049c:	0c3b      	lsrs	r3, r7, #16
 800049e:	fbb1 f9fe 	udiv	r9, r1, lr
 80004a2:	fa1f f884 	uxth.w	r8, r4
 80004a6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004aa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ae:	fb09 fa08 	mul.w	sl, r9, r8
 80004b2:	458a      	cmp	sl, r1
 80004b4:	fa02 f206 	lsl.w	r2, r2, r6
 80004b8:	fa00 f306 	lsl.w	r3, r0, r6
 80004bc:	d908      	bls.n	80004d0 <__udivmoddi4+0x220>
 80004be:	1861      	adds	r1, r4, r1
 80004c0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004c4:	d248      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 80004c6:	458a      	cmp	sl, r1
 80004c8:	d946      	bls.n	8000558 <__udivmoddi4+0x2a8>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4421      	add	r1, r4
 80004d0:	eba1 010a 	sub.w	r1, r1, sl
 80004d4:	b2bf      	uxth	r7, r7
 80004d6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004da:	fb0e 1110 	mls	r1, lr, r0, r1
 80004de:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004e2:	fb00 f808 	mul.w	r8, r0, r8
 80004e6:	45b8      	cmp	r8, r7
 80004e8:	d907      	bls.n	80004fa <__udivmoddi4+0x24a>
 80004ea:	19e7      	adds	r7, r4, r7
 80004ec:	f100 31ff 	add.w	r1, r0, #4294967295
 80004f0:	d22e      	bcs.n	8000550 <__udivmoddi4+0x2a0>
 80004f2:	45b8      	cmp	r8, r7
 80004f4:	d92c      	bls.n	8000550 <__udivmoddi4+0x2a0>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4427      	add	r7, r4
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	eba7 0708 	sub.w	r7, r7, r8
 8000502:	fba0 8902 	umull	r8, r9, r0, r2
 8000506:	454f      	cmp	r7, r9
 8000508:	46c6      	mov	lr, r8
 800050a:	4649      	mov	r1, r9
 800050c:	d31a      	bcc.n	8000544 <__udivmoddi4+0x294>
 800050e:	d017      	beq.n	8000540 <__udivmoddi4+0x290>
 8000510:	b15d      	cbz	r5, 800052a <__udivmoddi4+0x27a>
 8000512:	ebb3 020e 	subs.w	r2, r3, lr
 8000516:	eb67 0701 	sbc.w	r7, r7, r1
 800051a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800051e:	40f2      	lsrs	r2, r6
 8000520:	ea4c 0202 	orr.w	r2, ip, r2
 8000524:	40f7      	lsrs	r7, r6
 8000526:	e9c5 2700 	strd	r2, r7, [r5]
 800052a:	2600      	movs	r6, #0
 800052c:	4631      	mov	r1, r6
 800052e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e70b      	b.n	8000350 <__udivmoddi4+0xa0>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e9      	b.n	8000310 <__udivmoddi4+0x60>
 800053c:	4618      	mov	r0, r3
 800053e:	e6fd      	b.n	800033c <__udivmoddi4+0x8c>
 8000540:	4543      	cmp	r3, r8
 8000542:	d2e5      	bcs.n	8000510 <__udivmoddi4+0x260>
 8000544:	ebb8 0e02 	subs.w	lr, r8, r2
 8000548:	eb69 0104 	sbc.w	r1, r9, r4
 800054c:	3801      	subs	r0, #1
 800054e:	e7df      	b.n	8000510 <__udivmoddi4+0x260>
 8000550:	4608      	mov	r0, r1
 8000552:	e7d2      	b.n	80004fa <__udivmoddi4+0x24a>
 8000554:	4660      	mov	r0, ip
 8000556:	e78d      	b.n	8000474 <__udivmoddi4+0x1c4>
 8000558:	4681      	mov	r9, r0
 800055a:	e7b9      	b.n	80004d0 <__udivmoddi4+0x220>
 800055c:	4666      	mov	r6, ip
 800055e:	e775      	b.n	800044c <__udivmoddi4+0x19c>
 8000560:	4630      	mov	r0, r6
 8000562:	e74a      	b.n	80003fa <__udivmoddi4+0x14a>
 8000564:	f1ac 0c02 	sub.w	ip, ip, #2
 8000568:	4439      	add	r1, r7
 800056a:	e713      	b.n	8000394 <__udivmoddi4+0xe4>
 800056c:	3802      	subs	r0, #2
 800056e:	443c      	add	r4, r7
 8000570:	e724      	b.n	80003bc <__udivmoddi4+0x10c>
 8000572:	bf00      	nop

08000574 <__aeabi_idiv0>:
 8000574:	4770      	bx	lr
 8000576:	bf00      	nop

08000578 <RetargetInit>:
#define STDOUT_FILENO 1
#define STDERR_FILENO 2

UART_HandleTypeDef* gHuart;

void  RetargetInit(UART_HandleTypeDef *huart){
 8000578:	b580      	push	{r7, lr}
 800057a:	b082      	sub	sp, #8
 800057c:	af00      	add	r7, sp, #0
 800057e:	6078      	str	r0, [r7, #4]
	gHuart=huart;
 8000580:	4a07      	ldr	r2, [pc, #28]	; (80005a0 <RetargetInit+0x28>)
 8000582:	687b      	ldr	r3, [r7, #4]
 8000584:	6013      	str	r3, [r2, #0]

	setvbuf(stdout, NULL, _IONBF, 0);
 8000586:	4b07      	ldr	r3, [pc, #28]	; (80005a4 <RetargetInit+0x2c>)
 8000588:	681b      	ldr	r3, [r3, #0]
 800058a:	6898      	ldr	r0, [r3, #8]
 800058c:	2300      	movs	r3, #0
 800058e:	2202      	movs	r2, #2
 8000590:	2100      	movs	r1, #0
 8000592:	f002 fd23 	bl	8002fdc <setvbuf>
}
 8000596:	bf00      	nop
 8000598:	3708      	adds	r7, #8
 800059a:	46bd      	mov	sp, r7
 800059c:	bd80      	pop	{r7, pc}
 800059e:	bf00      	nop
 80005a0:	200000a0 	.word	0x200000a0
 80005a4:	20000010 	.word	0x20000010

080005a8 <_isatty>:

int _isatty(int fd){
 80005a8:	b580      	push	{r7, lr}
 80005aa:	b082      	sub	sp, #8
 80005ac:	af00      	add	r7, sp, #0
 80005ae:	6078      	str	r0, [r7, #4]
	if(fd>=STDIN_FILENO && fd<=STDERR_FILENO){
 80005b0:	687b      	ldr	r3, [r7, #4]
 80005b2:	2b00      	cmp	r3, #0
 80005b4:	db04      	blt.n	80005c0 <_isatty+0x18>
 80005b6:	687b      	ldr	r3, [r7, #4]
 80005b8:	2b02      	cmp	r3, #2
 80005ba:	dc01      	bgt.n	80005c0 <_isatty+0x18>
		return 1;
 80005bc:	2301      	movs	r3, #1
 80005be:	e005      	b.n	80005cc <_isatty+0x24>
	}

	errno = EBADF;
 80005c0:	f002 fcc2 	bl	8002f48 <__errno>
 80005c4:	4603      	mov	r3, r0
 80005c6:	2209      	movs	r2, #9
 80005c8:	601a      	str	r2, [r3, #0]
	return 0;
 80005ca:	2300      	movs	r3, #0
}
 80005cc:	4618      	mov	r0, r3
 80005ce:	3708      	adds	r7, #8
 80005d0:	46bd      	mov	sp, r7
 80005d2:	bd80      	pop	{r7, pc}

080005d4 <_write>:

int _write(int fd, char* ptr, int len) {
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b086      	sub	sp, #24
 80005d8:	af00      	add	r7, sp, #0
 80005da:	60f8      	str	r0, [r7, #12]
 80005dc:	60b9      	str	r1, [r7, #8]
 80005de:	607a      	str	r2, [r7, #4]
	HAL_StatusTypeDef hstatus;

	if (fd == STDOUT_FILENO || fd == STDERR_FILENO) {
 80005e0:	68fb      	ldr	r3, [r7, #12]
 80005e2:	2b01      	cmp	r3, #1
 80005e4:	d002      	beq.n	80005ec <_write+0x18>
 80005e6:	68fb      	ldr	r3, [r7, #12]
 80005e8:	2b02      	cmp	r3, #2
 80005ea:	d111      	bne.n	8000610 <_write+0x3c>
		hstatus = HAL_UART_Transmit(gHuart, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 80005ec:	4b0e      	ldr	r3, [pc, #56]	; (8000628 <_write+0x54>)
 80005ee:	6818      	ldr	r0, [r3, #0]
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	b29a      	uxth	r2, r3
 80005f4:	f04f 33ff 	mov.w	r3, #4294967295
 80005f8:	68b9      	ldr	r1, [r7, #8]
 80005fa:	f002 f93a 	bl	8002872 <HAL_UART_Transmit>
 80005fe:	4603      	mov	r3, r0
 8000600:	75fb      	strb	r3, [r7, #23]
		if (hstatus == HAL_OK)
 8000602:	7dfb      	ldrb	r3, [r7, #23]
 8000604:	2b00      	cmp	r3, #0
 8000606:	d101      	bne.n	800060c <_write+0x38>
			return len;
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	e008      	b.n	800061e <_write+0x4a>
		else
			return EIO;
 800060c:	2305      	movs	r3, #5
 800060e:	e006      	b.n	800061e <_write+0x4a>
	}
	errno = EBADF;
 8000610:	f002 fc9a 	bl	8002f48 <__errno>
 8000614:	4603      	mov	r3, r0
 8000616:	2209      	movs	r2, #9
 8000618:	601a      	str	r2, [r3, #0]
	return -1;
 800061a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800061e:	4618      	mov	r0, r3
 8000620:	3718      	adds	r7, #24
 8000622:	46bd      	mov	sp, r7
 8000624:	bd80      	pop	{r7, pc}
 8000626:	bf00      	nop
 8000628:	200000a0 	.word	0x200000a0

0800062c <_close>:

int _close(int fd) {
 800062c:	b580      	push	{r7, lr}
 800062e:	b082      	sub	sp, #8
 8000630:	af00      	add	r7, sp, #0
 8000632:	6078      	str	r0, [r7, #4]
	if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	2b00      	cmp	r3, #0
 8000638:	db04      	blt.n	8000644 <_close+0x18>
 800063a:	687b      	ldr	r3, [r7, #4]
 800063c:	2b02      	cmp	r3, #2
 800063e:	dc01      	bgt.n	8000644 <_close+0x18>
		return 0;
 8000640:	2300      	movs	r3, #0
 8000642:	e006      	b.n	8000652 <_close+0x26>

	errno = EBADF;
 8000644:	f002 fc80 	bl	8002f48 <__errno>
 8000648:	4603      	mov	r3, r0
 800064a:	2209      	movs	r2, #9
 800064c:	601a      	str	r2, [r3, #0]
	return -1;
 800064e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000652:	4618      	mov	r0, r3
 8000654:	3708      	adds	r7, #8
 8000656:	46bd      	mov	sp, r7
 8000658:	bd80      	pop	{r7, pc}

0800065a <_lseek>:

int _lseek(int fd, int ptr, int dir) {
 800065a:	b580      	push	{r7, lr}
 800065c:	b084      	sub	sp, #16
 800065e:	af00      	add	r7, sp, #0
 8000660:	60f8      	str	r0, [r7, #12]
 8000662:	60b9      	str	r1, [r7, #8]
 8000664:	607a      	str	r2, [r7, #4]
	(void) fd;
	(void) ptr;
	(void) dir;

	errno = EBADF;
 8000666:	f002 fc6f 	bl	8002f48 <__errno>
 800066a:	4603      	mov	r3, r0
 800066c:	2209      	movs	r2, #9
 800066e:	601a      	str	r2, [r3, #0]
	return -1;
 8000670:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000674:	4618      	mov	r0, r3
 8000676:	3710      	adds	r7, #16
 8000678:	46bd      	mov	sp, r7
 800067a:	bd80      	pop	{r7, pc}

0800067c <_read>:

int _read(int fd, char* ptr, int len) {
 800067c:	b580      	push	{r7, lr}
 800067e:	b086      	sub	sp, #24
 8000680:	af00      	add	r7, sp, #0
 8000682:	60f8      	str	r0, [r7, #12]
 8000684:	60b9      	str	r1, [r7, #8]
 8000686:	607a      	str	r2, [r7, #4]
	HAL_StatusTypeDef hstatus;

	if (fd == STDIN_FILENO) {
 8000688:	68fb      	ldr	r3, [r7, #12]
 800068a:	2b00      	cmp	r3, #0
 800068c:	d110      	bne.n	80006b0 <_read+0x34>
		hstatus = HAL_UART_Receive(gHuart, (uint8_t *) ptr, 1, HAL_MAX_DELAY);
 800068e:	4b0e      	ldr	r3, [pc, #56]	; (80006c8 <_read+0x4c>)
 8000690:	6818      	ldr	r0, [r3, #0]
 8000692:	f04f 33ff 	mov.w	r3, #4294967295
 8000696:	2201      	movs	r2, #1
 8000698:	68b9      	ldr	r1, [r7, #8]
 800069a:	f002 f97c 	bl	8002996 <HAL_UART_Receive>
 800069e:	4603      	mov	r3, r0
 80006a0:	75fb      	strb	r3, [r7, #23]
		if (hstatus == HAL_OK)
 80006a2:	7dfb      	ldrb	r3, [r7, #23]
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d101      	bne.n	80006ac <_read+0x30>
			return 1;
 80006a8:	2301      	movs	r3, #1
 80006aa:	e008      	b.n	80006be <_read+0x42>
		else
			return EIO;
 80006ac:	2305      	movs	r3, #5
 80006ae:	e006      	b.n	80006be <_read+0x42>
	}

	errno = EBADF;
 80006b0:	f002 fc4a 	bl	8002f48 <__errno>
 80006b4:	4603      	mov	r3, r0
 80006b6:	2209      	movs	r2, #9
 80006b8:	601a      	str	r2, [r3, #0]
	return -1;
 80006ba:	f04f 33ff 	mov.w	r3, #4294967295
}
 80006be:	4618      	mov	r0, r3
 80006c0:	3718      	adds	r7, #24
 80006c2:	46bd      	mov	sp, r7
 80006c4:	bd80      	pop	{r7, pc}
 80006c6:	bf00      	nop
 80006c8:	200000a0 	.word	0x200000a0

080006cc <_fstat>:

int _fstat(int fd, struct stat* st) {
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b082      	sub	sp, #8
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	6078      	str	r0, [r7, #4]
 80006d4:	6039      	str	r1, [r7, #0]
	if (fd >= STDIN_FILENO && fd <= STDERR_FILENO) {
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	2b00      	cmp	r3, #0
 80006da:	db08      	blt.n	80006ee <_fstat+0x22>
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	2b02      	cmp	r3, #2
 80006e0:	dc05      	bgt.n	80006ee <_fstat+0x22>
		st->st_mode = S_IFCHR;
 80006e2:	683b      	ldr	r3, [r7, #0]
 80006e4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80006e8:	605a      	str	r2, [r3, #4]
		return 0;
 80006ea:	2300      	movs	r3, #0
 80006ec:	e005      	b.n	80006fa <_fstat+0x2e>
	}

	errno = EBADF;
 80006ee:	f002 fc2b 	bl	8002f48 <__errno>
 80006f2:	4603      	mov	r3, r0
 80006f4:	2209      	movs	r2, #9
 80006f6:	601a      	str	r2, [r3, #0]
	return 0;
 80006f8:	2300      	movs	r3, #0

}
 80006fa:	4618      	mov	r0, r3
 80006fc:	3708      	adds	r7, #8
 80006fe:	46bd      	mov	sp, r7
 8000700:	bd80      	pop	{r7, pc}
	...

08000704 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000708:	f000 fc28 	bl	8000f5c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800070c:	f000 f80e 	bl	800072c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000710:	f000 f918 	bl	8000944 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000714:	f000 f8c2 	bl	800089c <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8000718:	f000 f872 	bl	8000800 <MX_TIM2_Init>
  MX_USART3_UART_Init();
 800071c:	f000 f8e8 	bl	80008f0 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  RetargetInit(&huart3);
 8000720:	4801      	ldr	r0, [pc, #4]	; (8000728 <main+0x24>)
 8000722:	f7ff ff29 	bl	8000578 <RetargetInit>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  //HAL_NVIC_EnableIRQ(EXTI1_IRQn);
  while (1){
 8000726:	e7fe      	b.n	8000726 <main+0x22>
 8000728:	200000a4 	.word	0x200000a4

0800072c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	b094      	sub	sp, #80	; 0x50
 8000730:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000732:	f107 0320 	add.w	r3, r7, #32
 8000736:	2230      	movs	r2, #48	; 0x30
 8000738:	2100      	movs	r1, #0
 800073a:	4618      	mov	r0, r3
 800073c:	f002 fc2e 	bl	8002f9c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000740:	f107 030c 	add.w	r3, r7, #12
 8000744:	2200      	movs	r2, #0
 8000746:	601a      	str	r2, [r3, #0]
 8000748:	605a      	str	r2, [r3, #4]
 800074a:	609a      	str	r2, [r3, #8]
 800074c:	60da      	str	r2, [r3, #12]
 800074e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000750:	2300      	movs	r3, #0
 8000752:	60bb      	str	r3, [r7, #8]
 8000754:	4b28      	ldr	r3, [pc, #160]	; (80007f8 <SystemClock_Config+0xcc>)
 8000756:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000758:	4a27      	ldr	r2, [pc, #156]	; (80007f8 <SystemClock_Config+0xcc>)
 800075a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800075e:	6413      	str	r3, [r2, #64]	; 0x40
 8000760:	4b25      	ldr	r3, [pc, #148]	; (80007f8 <SystemClock_Config+0xcc>)
 8000762:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000764:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000768:	60bb      	str	r3, [r7, #8]
 800076a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800076c:	2300      	movs	r3, #0
 800076e:	607b      	str	r3, [r7, #4]
 8000770:	4b22      	ldr	r3, [pc, #136]	; (80007fc <SystemClock_Config+0xd0>)
 8000772:	681b      	ldr	r3, [r3, #0]
 8000774:	4a21      	ldr	r2, [pc, #132]	; (80007fc <SystemClock_Config+0xd0>)
 8000776:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800077a:	6013      	str	r3, [r2, #0]
 800077c:	4b1f      	ldr	r3, [pc, #124]	; (80007fc <SystemClock_Config+0xd0>)
 800077e:	681b      	ldr	r3, [r3, #0]
 8000780:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000784:	607b      	str	r3, [r7, #4]
 8000786:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000788:	2302      	movs	r3, #2
 800078a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800078c:	2301      	movs	r3, #1
 800078e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000790:	2310      	movs	r3, #16
 8000792:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000794:	2302      	movs	r3, #2
 8000796:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000798:	2300      	movs	r3, #0
 800079a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800079c:	2308      	movs	r3, #8
 800079e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 80007a0:	2332      	movs	r3, #50	; 0x32
 80007a2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80007a4:	2302      	movs	r3, #2
 80007a6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80007a8:	2307      	movs	r3, #7
 80007aa:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007ac:	f107 0320 	add.w	r3, r7, #32
 80007b0:	4618      	mov	r0, r3
 80007b2:	f000 fee9 	bl	8001588 <HAL_RCC_OscConfig>
 80007b6:	4603      	mov	r3, r0
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	d001      	beq.n	80007c0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80007bc:	f000 f9ea 	bl	8000b94 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007c0:	230f      	movs	r3, #15
 80007c2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007c4:	2302      	movs	r3, #2
 80007c6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007c8:	2300      	movs	r3, #0
 80007ca:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80007cc:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80007d0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80007d2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007d6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80007d8:	f107 030c 	add.w	r3, r7, #12
 80007dc:	2101      	movs	r1, #1
 80007de:	4618      	mov	r0, r3
 80007e0:	f001 f94a 	bl	8001a78 <HAL_RCC_ClockConfig>
 80007e4:	4603      	mov	r3, r0
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d001      	beq.n	80007ee <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80007ea:	f000 f9d3 	bl	8000b94 <Error_Handler>
  }
}
 80007ee:	bf00      	nop
 80007f0:	3750      	adds	r7, #80	; 0x50
 80007f2:	46bd      	mov	sp, r7
 80007f4:	bd80      	pop	{r7, pc}
 80007f6:	bf00      	nop
 80007f8:	40023800 	.word	0x40023800
 80007fc:	40007000 	.word	0x40007000

08000800 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	b086      	sub	sp, #24
 8000804:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000806:	f107 0308 	add.w	r3, r7, #8
 800080a:	2200      	movs	r2, #0
 800080c:	601a      	str	r2, [r3, #0]
 800080e:	605a      	str	r2, [r3, #4]
 8000810:	609a      	str	r2, [r3, #8]
 8000812:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000814:	463b      	mov	r3, r7
 8000816:	2200      	movs	r2, #0
 8000818:	601a      	str	r2, [r3, #0]
 800081a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800081c:	4b1e      	ldr	r3, [pc, #120]	; (8000898 <MX_TIM2_Init+0x98>)
 800081e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000822:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 49999;
 8000824:	4b1c      	ldr	r3, [pc, #112]	; (8000898 <MX_TIM2_Init+0x98>)
 8000826:	f24c 324f 	movw	r2, #49999	; 0xc34f
 800082a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800082c:	4b1a      	ldr	r3, [pc, #104]	; (8000898 <MX_TIM2_Init+0x98>)
 800082e:	2200      	movs	r2, #0
 8000830:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 14999;
 8000832:	4b19      	ldr	r3, [pc, #100]	; (8000898 <MX_TIM2_Init+0x98>)
 8000834:	f643 2297 	movw	r2, #14999	; 0x3a97
 8000838:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800083a:	4b17      	ldr	r3, [pc, #92]	; (8000898 <MX_TIM2_Init+0x98>)
 800083c:	2200      	movs	r2, #0
 800083e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000840:	4b15      	ldr	r3, [pc, #84]	; (8000898 <MX_TIM2_Init+0x98>)
 8000842:	2200      	movs	r2, #0
 8000844:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000846:	4814      	ldr	r0, [pc, #80]	; (8000898 <MX_TIM2_Init+0x98>)
 8000848:	f001 fb44 	bl	8001ed4 <HAL_TIM_Base_Init>
 800084c:	4603      	mov	r3, r0
 800084e:	2b00      	cmp	r3, #0
 8000850:	d001      	beq.n	8000856 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000852:	f000 f99f 	bl	8000b94 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000856:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800085a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800085c:	f107 0308 	add.w	r3, r7, #8
 8000860:	4619      	mov	r1, r3
 8000862:	480d      	ldr	r0, [pc, #52]	; (8000898 <MX_TIM2_Init+0x98>)
 8000864:	f001 fcfe 	bl	8002264 <HAL_TIM_ConfigClockSource>
 8000868:	4603      	mov	r3, r0
 800086a:	2b00      	cmp	r3, #0
 800086c:	d001      	beq.n	8000872 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800086e:	f000 f991 	bl	8000b94 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000872:	2300      	movs	r3, #0
 8000874:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000876:	2300      	movs	r3, #0
 8000878:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800087a:	463b      	mov	r3, r7
 800087c:	4619      	mov	r1, r3
 800087e:	4806      	ldr	r0, [pc, #24]	; (8000898 <MX_TIM2_Init+0x98>)
 8000880:	f001 ff1a 	bl	80026b8 <HAL_TIMEx_MasterConfigSynchronization>
 8000884:	4603      	mov	r3, r0
 8000886:	2b00      	cmp	r3, #0
 8000888:	d001      	beq.n	800088e <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800088a:	f000 f983 	bl	8000b94 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800088e:	bf00      	nop
 8000890:	3718      	adds	r7, #24
 8000892:	46bd      	mov	sp, r7
 8000894:	bd80      	pop	{r7, pc}
 8000896:	bf00      	nop
 8000898:	200000e8 	.word	0x200000e8

0800089c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80008a0:	4b11      	ldr	r3, [pc, #68]	; (80008e8 <MX_USART2_UART_Init+0x4c>)
 80008a2:	4a12      	ldr	r2, [pc, #72]	; (80008ec <MX_USART2_UART_Init+0x50>)
 80008a4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80008a6:	4b10      	ldr	r3, [pc, #64]	; (80008e8 <MX_USART2_UART_Init+0x4c>)
 80008a8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80008ac:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80008ae:	4b0e      	ldr	r3, [pc, #56]	; (80008e8 <MX_USART2_UART_Init+0x4c>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80008b4:	4b0c      	ldr	r3, [pc, #48]	; (80008e8 <MX_USART2_UART_Init+0x4c>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80008ba:	4b0b      	ldr	r3, [pc, #44]	; (80008e8 <MX_USART2_UART_Init+0x4c>)
 80008bc:	2200      	movs	r2, #0
 80008be:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80008c0:	4b09      	ldr	r3, [pc, #36]	; (80008e8 <MX_USART2_UART_Init+0x4c>)
 80008c2:	220c      	movs	r2, #12
 80008c4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008c6:	4b08      	ldr	r3, [pc, #32]	; (80008e8 <MX_USART2_UART_Init+0x4c>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80008cc:	4b06      	ldr	r3, [pc, #24]	; (80008e8 <MX_USART2_UART_Init+0x4c>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80008d2:	4805      	ldr	r0, [pc, #20]	; (80008e8 <MX_USART2_UART_Init+0x4c>)
 80008d4:	f001 ff80 	bl	80027d8 <HAL_UART_Init>
 80008d8:	4603      	mov	r3, r0
 80008da:	2b00      	cmp	r3, #0
 80008dc:	d001      	beq.n	80008e2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80008de:	f000 f959 	bl	8000b94 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80008e2:	bf00      	nop
 80008e4:	bd80      	pop	{r7, pc}
 80008e6:	bf00      	nop
 80008e8:	20000130 	.word	0x20000130
 80008ec:	40004400 	.word	0x40004400

080008f0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80008f4:	4b11      	ldr	r3, [pc, #68]	; (800093c <MX_USART3_UART_Init+0x4c>)
 80008f6:	4a12      	ldr	r2, [pc, #72]	; (8000940 <MX_USART3_UART_Init+0x50>)
 80008f8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80008fa:	4b10      	ldr	r3, [pc, #64]	; (800093c <MX_USART3_UART_Init+0x4c>)
 80008fc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000900:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000902:	4b0e      	ldr	r3, [pc, #56]	; (800093c <MX_USART3_UART_Init+0x4c>)
 8000904:	2200      	movs	r2, #0
 8000906:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000908:	4b0c      	ldr	r3, [pc, #48]	; (800093c <MX_USART3_UART_Init+0x4c>)
 800090a:	2200      	movs	r2, #0
 800090c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800090e:	4b0b      	ldr	r3, [pc, #44]	; (800093c <MX_USART3_UART_Init+0x4c>)
 8000910:	2200      	movs	r2, #0
 8000912:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000914:	4b09      	ldr	r3, [pc, #36]	; (800093c <MX_USART3_UART_Init+0x4c>)
 8000916:	220c      	movs	r2, #12
 8000918:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800091a:	4b08      	ldr	r3, [pc, #32]	; (800093c <MX_USART3_UART_Init+0x4c>)
 800091c:	2200      	movs	r2, #0
 800091e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000920:	4b06      	ldr	r3, [pc, #24]	; (800093c <MX_USART3_UART_Init+0x4c>)
 8000922:	2200      	movs	r2, #0
 8000924:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000926:	4805      	ldr	r0, [pc, #20]	; (800093c <MX_USART3_UART_Init+0x4c>)
 8000928:	f001 ff56 	bl	80027d8 <HAL_UART_Init>
 800092c:	4603      	mov	r3, r0
 800092e:	2b00      	cmp	r3, #0
 8000930:	d001      	beq.n	8000936 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000932:	f000 f92f 	bl	8000b94 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000936:	bf00      	nop
 8000938:	bd80      	pop	{r7, pc}
 800093a:	bf00      	nop
 800093c:	200000a4 	.word	0x200000a4
 8000940:	40004800 	.word	0x40004800

08000944 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	b08a      	sub	sp, #40	; 0x28
 8000948:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800094a:	f107 0314 	add.w	r3, r7, #20
 800094e:	2200      	movs	r2, #0
 8000950:	601a      	str	r2, [r3, #0]
 8000952:	605a      	str	r2, [r3, #4]
 8000954:	609a      	str	r2, [r3, #8]
 8000956:	60da      	str	r2, [r3, #12]
 8000958:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800095a:	2300      	movs	r3, #0
 800095c:	613b      	str	r3, [r7, #16]
 800095e:	4b43      	ldr	r3, [pc, #268]	; (8000a6c <MX_GPIO_Init+0x128>)
 8000960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000962:	4a42      	ldr	r2, [pc, #264]	; (8000a6c <MX_GPIO_Init+0x128>)
 8000964:	f043 0304 	orr.w	r3, r3, #4
 8000968:	6313      	str	r3, [r2, #48]	; 0x30
 800096a:	4b40      	ldr	r3, [pc, #256]	; (8000a6c <MX_GPIO_Init+0x128>)
 800096c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800096e:	f003 0304 	and.w	r3, r3, #4
 8000972:	613b      	str	r3, [r7, #16]
 8000974:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000976:	2300      	movs	r3, #0
 8000978:	60fb      	str	r3, [r7, #12]
 800097a:	4b3c      	ldr	r3, [pc, #240]	; (8000a6c <MX_GPIO_Init+0x128>)
 800097c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800097e:	4a3b      	ldr	r2, [pc, #236]	; (8000a6c <MX_GPIO_Init+0x128>)
 8000980:	f043 0301 	orr.w	r3, r3, #1
 8000984:	6313      	str	r3, [r2, #48]	; 0x30
 8000986:	4b39      	ldr	r3, [pc, #228]	; (8000a6c <MX_GPIO_Init+0x128>)
 8000988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800098a:	f003 0301 	and.w	r3, r3, #1
 800098e:	60fb      	str	r3, [r7, #12]
 8000990:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000992:	2300      	movs	r3, #0
 8000994:	60bb      	str	r3, [r7, #8]
 8000996:	4b35      	ldr	r3, [pc, #212]	; (8000a6c <MX_GPIO_Init+0x128>)
 8000998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800099a:	4a34      	ldr	r2, [pc, #208]	; (8000a6c <MX_GPIO_Init+0x128>)
 800099c:	f043 0310 	orr.w	r3, r3, #16
 80009a0:	6313      	str	r3, [r2, #48]	; 0x30
 80009a2:	4b32      	ldr	r3, [pc, #200]	; (8000a6c <MX_GPIO_Init+0x128>)
 80009a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009a6:	f003 0310 	and.w	r3, r3, #16
 80009aa:	60bb      	str	r3, [r7, #8]
 80009ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009ae:	2300      	movs	r3, #0
 80009b0:	607b      	str	r3, [r7, #4]
 80009b2:	4b2e      	ldr	r3, [pc, #184]	; (8000a6c <MX_GPIO_Init+0x128>)
 80009b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009b6:	4a2d      	ldr	r2, [pc, #180]	; (8000a6c <MX_GPIO_Init+0x128>)
 80009b8:	f043 0302 	orr.w	r3, r3, #2
 80009bc:	6313      	str	r3, [r2, #48]	; 0x30
 80009be:	4b2b      	ldr	r3, [pc, #172]	; (8000a6c <MX_GPIO_Init+0x128>)
 80009c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009c2:	f003 0302 	and.w	r3, r3, #2
 80009c6:	607b      	str	r3, [r7, #4]
 80009c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80009ca:	2300      	movs	r3, #0
 80009cc:	603b      	str	r3, [r7, #0]
 80009ce:	4b27      	ldr	r3, [pc, #156]	; (8000a6c <MX_GPIO_Init+0x128>)
 80009d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009d2:	4a26      	ldr	r2, [pc, #152]	; (8000a6c <MX_GPIO_Init+0x128>)
 80009d4:	f043 0308 	orr.w	r3, r3, #8
 80009d8:	6313      	str	r3, [r2, #48]	; 0x30
 80009da:	4b24      	ldr	r3, [pc, #144]	; (8000a6c <MX_GPIO_Init+0x128>)
 80009dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009de:	f003 0308 	and.w	r3, r3, #8
 80009e2:	603b      	str	r3, [r7, #0]
 80009e4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ESP_Reset_2_GPIO_Port, ESP_Reset_2_Pin, GPIO_PIN_SET);
 80009e6:	2201      	movs	r2, #1
 80009e8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80009ec:	4820      	ldr	r0, [pc, #128]	; (8000a70 <MX_GPIO_Init+0x12c>)
 80009ee:	f000 fd99 	bl	8001524 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13|GPIO_PIN_14, GPIO_PIN_RESET);
 80009f2:	2200      	movs	r2, #0
 80009f4:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 80009f8:	481e      	ldr	r0, [pc, #120]	; (8000a74 <MX_GPIO_Init+0x130>)
 80009fa:	f000 fd93 	bl	8001524 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : ESP_Signal_Pin */
  GPIO_InitStruct.Pin = ESP_Signal_Pin;
 80009fe:	2302      	movs	r3, #2
 8000a00:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000a02:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000a06:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a08:	2300      	movs	r3, #0
 8000a0a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ESP_Signal_GPIO_Port, &GPIO_InitStruct);
 8000a0c:	f107 0314 	add.w	r3, r7, #20
 8000a10:	4619      	mov	r1, r3
 8000a12:	4819      	ldr	r0, [pc, #100]	; (8000a78 <MX_GPIO_Init+0x134>)
 8000a14:	f000 fbea 	bl	80011ec <HAL_GPIO_Init>

  /*Configure GPIO pin : ESP_Reset_2_Pin */
  GPIO_InitStruct.Pin = ESP_Reset_2_Pin;
 8000a18:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000a1c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a1e:	2301      	movs	r3, #1
 8000a20:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a22:	2300      	movs	r3, #0
 8000a24:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a26:	2300      	movs	r3, #0
 8000a28:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(ESP_Reset_2_GPIO_Port, &GPIO_InitStruct);
 8000a2a:	f107 0314 	add.w	r3, r7, #20
 8000a2e:	4619      	mov	r1, r3
 8000a30:	480f      	ldr	r0, [pc, #60]	; (8000a70 <MX_GPIO_Init+0x12c>)
 8000a32:	f000 fbdb 	bl	80011ec <HAL_GPIO_Init>

  /*Configure GPIO pins : PD13 PD14 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 8000a36:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8000a3a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a3c:	2301      	movs	r3, #1
 8000a3e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a40:	2300      	movs	r3, #0
 8000a42:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a44:	2300      	movs	r3, #0
 8000a46:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a48:	f107 0314 	add.w	r3, r7, #20
 8000a4c:	4619      	mov	r1, r3
 8000a4e:	4809      	ldr	r0, [pc, #36]	; (8000a74 <MX_GPIO_Init+0x130>)
 8000a50:	f000 fbcc 	bl	80011ec <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 1, 0);
 8000a54:	2200      	movs	r2, #0
 8000a56:	2101      	movs	r1, #1
 8000a58:	2007      	movs	r0, #7
 8000a5a:	f000 fb9d 	bl	8001198 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8000a5e:	2007      	movs	r0, #7
 8000a60:	f000 fbb6 	bl	80011d0 <HAL_NVIC_EnableIRQ>

}
 8000a64:	bf00      	nop
 8000a66:	3728      	adds	r7, #40	; 0x28
 8000a68:	46bd      	mov	sp, r7
 8000a6a:	bd80      	pop	{r7, pc}
 8000a6c:	40023800 	.word	0x40023800
 8000a70:	40021000 	.word	0x40021000
 8000a74:	40020c00 	.word	0x40020c00
 8000a78:	40020800 	.word	0x40020800

08000a7c <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
// Callback interrupt ESP8266
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b088      	sub	sp, #32
 8000a80:	af02      	add	r7, sp, #8
 8000a82:	4603      	mov	r3, r0
 8000a84:	80fb      	strh	r3, [r7, #6]
	//if (real_int){
		__HAL_TIM_CLEAR_FLAG(&htim2, TIM_SR_UIF);
 8000a86:	4b21      	ldr	r3, [pc, #132]	; (8000b0c <HAL_GPIO_EXTI_Callback+0x90>)
 8000a88:	681b      	ldr	r3, [r3, #0]
 8000a8a:	f06f 0201 	mvn.w	r2, #1
 8000a8e:	611a      	str	r2, [r3, #16]
		if(GPIO_Pin == ESP_Signal_Pin){
 8000a90:	88fb      	ldrh	r3, [r7, #6]
 8000a92:	2b02      	cmp	r3, #2
 8000a94:	d135      	bne.n	8000b02 <HAL_GPIO_EXTI_Callback+0x86>
			printf("REAL_ESP_SIGNAL! i=%d, j=%d\r\n", i, j);
 8000a96:	4b1e      	ldr	r3, [pc, #120]	; (8000b10 <HAL_GPIO_EXTI_Callback+0x94>)
 8000a98:	781b      	ldrb	r3, [r3, #0]
 8000a9a:	4619      	mov	r1, r3
 8000a9c:	4b1d      	ldr	r3, [pc, #116]	; (8000b14 <HAL_GPIO_EXTI_Callback+0x98>)
 8000a9e:	781b      	ldrb	r3, [r3, #0]
 8000aa0:	461a      	mov	r2, r3
 8000aa2:	481d      	ldr	r0, [pc, #116]	; (8000b18 <HAL_GPIO_EXTI_Callback+0x9c>)
 8000aa4:	f002 fa82 	bl	8002fac <iprintf>

			real_int = 0;
 8000aa8:	4b1c      	ldr	r3, [pc, #112]	; (8000b1c <HAL_GPIO_EXTI_Callback+0xa0>)
 8000aaa:	2200      	movs	r2, #0
 8000aac:	701a      	strb	r2, [r3, #0]

			char line[10];
			snprintf(line, sizeof(line), "%d,%d\n", i, j);
 8000aae:	4b18      	ldr	r3, [pc, #96]	; (8000b10 <HAL_GPIO_EXTI_Callback+0x94>)
 8000ab0:	781b      	ldrb	r3, [r3, #0]
 8000ab2:	461a      	mov	r2, r3
 8000ab4:	4b17      	ldr	r3, [pc, #92]	; (8000b14 <HAL_GPIO_EXTI_Callback+0x98>)
 8000ab6:	781b      	ldrb	r3, [r3, #0]
 8000ab8:	f107 000c 	add.w	r0, r7, #12
 8000abc:	9300      	str	r3, [sp, #0]
 8000abe:	4613      	mov	r3, r2
 8000ac0:	4a17      	ldr	r2, [pc, #92]	; (8000b20 <HAL_GPIO_EXTI_Callback+0xa4>)
 8000ac2:	210a      	movs	r1, #10
 8000ac4:	f002 fb50 	bl	8003168 <sniprintf>
			i++;
 8000ac8:	4b11      	ldr	r3, [pc, #68]	; (8000b10 <HAL_GPIO_EXTI_Callback+0x94>)
 8000aca:	781b      	ldrb	r3, [r3, #0]
 8000acc:	3301      	adds	r3, #1
 8000ace:	b2da      	uxtb	r2, r3
 8000ad0:	4b0f      	ldr	r3, [pc, #60]	; (8000b10 <HAL_GPIO_EXTI_Callback+0x94>)
 8000ad2:	701a      	strb	r2, [r3, #0]
			j++;
 8000ad4:	4b0f      	ldr	r3, [pc, #60]	; (8000b14 <HAL_GPIO_EXTI_Callback+0x98>)
 8000ad6:	781b      	ldrb	r3, [r3, #0]
 8000ad8:	3301      	adds	r3, #1
 8000ada:	b2da      	uxtb	r2, r3
 8000adc:	4b0d      	ldr	r3, [pc, #52]	; (8000b14 <HAL_GPIO_EXTI_Callback+0x98>)
 8000ade:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit(&huart2, (uint8_t*) (line), strlen(line), 1000);
 8000ae0:	f107 030c 	add.w	r3, r7, #12
 8000ae4:	4618      	mov	r0, r3
 8000ae6:	f7ff fb73 	bl	80001d0 <strlen>
 8000aea:	4603      	mov	r3, r0
 8000aec:	b29a      	uxth	r2, r3
 8000aee:	f107 010c 	add.w	r1, r7, #12
 8000af2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000af6:	480b      	ldr	r0, [pc, #44]	; (8000b24 <HAL_GPIO_EXTI_Callback+0xa8>)
 8000af8:	f001 febb 	bl	8002872 <HAL_UART_Transmit>

			HAL_TIM_Base_Start_IT(&htim2); //Timer 30 sec
 8000afc:	4803      	ldr	r0, [pc, #12]	; (8000b0c <HAL_GPIO_EXTI_Callback+0x90>)
 8000afe:	f001 fa39 	bl	8001f74 <HAL_TIM_Base_Start_IT>
		}
	/*}else{
		printf("FAKE_ESP_SIGNAL!\r\n");
		real_int=1;
	}*/
}
 8000b02:	bf00      	nop
 8000b04:	3718      	adds	r7, #24
 8000b06:	46bd      	mov	sp, r7
 8000b08:	bd80      	pop	{r7, pc}
 8000b0a:	bf00      	nop
 8000b0c:	200000e8 	.word	0x200000e8
 8000b10:	20000090 	.word	0x20000090
 8000b14:	20000091 	.word	0x20000091
 8000b18:	080043d8 	.word	0x080043d8
 8000b1c:	20000000 	.word	0x20000000
 8000b20:	080043f8 	.word	0x080043f8
 8000b24:	20000130 	.word	0x20000130

08000b28 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b082      	sub	sp, #8
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */
	if (htim->Instance == TIM2) {
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000b38:	d117      	bne.n	8000b6a <HAL_TIM_PeriodElapsedCallback+0x42>
		printf("TIMER SCADUTO! INVIO IL RESET ALL'ESP, i=%d, j=%d\r\n", i, j);
 8000b3a:	4b11      	ldr	r3, [pc, #68]	; (8000b80 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8000b3c:	781b      	ldrb	r3, [r3, #0]
 8000b3e:	4619      	mov	r1, r3
 8000b40:	4b10      	ldr	r3, [pc, #64]	; (8000b84 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8000b42:	781b      	ldrb	r3, [r3, #0]
 8000b44:	461a      	mov	r2, r3
 8000b46:	4810      	ldr	r0, [pc, #64]	; (8000b88 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8000b48:	f002 fa30 	bl	8002fac <iprintf>
		//HAL_NVIC_EnableIRQ(EXTI1_IRQn);

		//Reset
		HAL_GPIO_WritePin(ESP_Reset_2_GPIO_Port, ESP_Reset_2_Pin, GPIO_PIN_RESET);
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b52:	480e      	ldr	r0, [pc, #56]	; (8000b8c <HAL_TIM_PeriodElapsedCallback+0x64>)
 8000b54:	f000 fce6 	bl	8001524 <HAL_GPIO_WritePin>
		HAL_Delay(20);
 8000b58:	2014      	movs	r0, #20
 8000b5a:	f000 fa41 	bl	8000fe0 <HAL_Delay>
		HAL_GPIO_WritePin(ESP_Reset_2_GPIO_Port, ESP_Reset_2_Pin, GPIO_PIN_SET);
 8000b5e:	2201      	movs	r2, #1
 8000b60:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b64:	4809      	ldr	r0, [pc, #36]	; (8000b8c <HAL_TIM_PeriodElapsedCallback+0x64>)
 8000b66:	f000 fcdd 	bl	8001524 <HAL_GPIO_WritePin>

	  }

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	681b      	ldr	r3, [r3, #0]
 8000b6e:	4a08      	ldr	r2, [pc, #32]	; (8000b90 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8000b70:	4293      	cmp	r3, r2
 8000b72:	d101      	bne.n	8000b78 <HAL_TIM_PeriodElapsedCallback+0x50>
    HAL_IncTick();
 8000b74:	f000 fa14 	bl	8000fa0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000b78:	bf00      	nop
 8000b7a:	3708      	adds	r7, #8
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	bd80      	pop	{r7, pc}
 8000b80:	20000090 	.word	0x20000090
 8000b84:	20000091 	.word	0x20000091
 8000b88:	08004400 	.word	0x08004400
 8000b8c:	40021000 	.word	0x40021000
 8000b90:	40010000 	.word	0x40010000

08000b94 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b94:	b480      	push	{r7}
 8000b96:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b98:	b672      	cpsid	i
}
 8000b9a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b9c:	e7fe      	b.n	8000b9c <Error_Handler+0x8>
	...

08000ba0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b082      	sub	sp, #8
 8000ba4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	607b      	str	r3, [r7, #4]
 8000baa:	4b10      	ldr	r3, [pc, #64]	; (8000bec <HAL_MspInit+0x4c>)
 8000bac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bae:	4a0f      	ldr	r2, [pc, #60]	; (8000bec <HAL_MspInit+0x4c>)
 8000bb0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000bb4:	6453      	str	r3, [r2, #68]	; 0x44
 8000bb6:	4b0d      	ldr	r3, [pc, #52]	; (8000bec <HAL_MspInit+0x4c>)
 8000bb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000bbe:	607b      	str	r3, [r7, #4]
 8000bc0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	603b      	str	r3, [r7, #0]
 8000bc6:	4b09      	ldr	r3, [pc, #36]	; (8000bec <HAL_MspInit+0x4c>)
 8000bc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bca:	4a08      	ldr	r2, [pc, #32]	; (8000bec <HAL_MspInit+0x4c>)
 8000bcc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bd0:	6413      	str	r3, [r2, #64]	; 0x40
 8000bd2:	4b06      	ldr	r3, [pc, #24]	; (8000bec <HAL_MspInit+0x4c>)
 8000bd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bd6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bda:	603b      	str	r3, [r7, #0]
 8000bdc:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_1);
 8000bde:	2006      	movs	r0, #6
 8000be0:	f000 facf 	bl	8001182 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000be4:	bf00      	nop
 8000be6:	3708      	adds	r7, #8
 8000be8:	46bd      	mov	sp, r7
 8000bea:	bd80      	pop	{r7, pc}
 8000bec:	40023800 	.word	0x40023800

08000bf0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b084      	sub	sp, #16
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000c00:	d115      	bne.n	8000c2e <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000c02:	2300      	movs	r3, #0
 8000c04:	60fb      	str	r3, [r7, #12]
 8000c06:	4b0c      	ldr	r3, [pc, #48]	; (8000c38 <HAL_TIM_Base_MspInit+0x48>)
 8000c08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c0a:	4a0b      	ldr	r2, [pc, #44]	; (8000c38 <HAL_TIM_Base_MspInit+0x48>)
 8000c0c:	f043 0301 	orr.w	r3, r3, #1
 8000c10:	6413      	str	r3, [r2, #64]	; 0x40
 8000c12:	4b09      	ldr	r3, [pc, #36]	; (8000c38 <HAL_TIM_Base_MspInit+0x48>)
 8000c14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c16:	f003 0301 	and.w	r3, r3, #1
 8000c1a:	60fb      	str	r3, [r7, #12]
 8000c1c:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
 8000c1e:	2200      	movs	r2, #0
 8000c20:	2101      	movs	r1, #1
 8000c22:	201c      	movs	r0, #28
 8000c24:	f000 fab8 	bl	8001198 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000c28:	201c      	movs	r0, #28
 8000c2a:	f000 fad1 	bl	80011d0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000c2e:	bf00      	nop
 8000c30:	3710      	adds	r7, #16
 8000c32:	46bd      	mov	sp, r7
 8000c34:	bd80      	pop	{r7, pc}
 8000c36:	bf00      	nop
 8000c38:	40023800 	.word	0x40023800

08000c3c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b08c      	sub	sp, #48	; 0x30
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c44:	f107 031c 	add.w	r3, r7, #28
 8000c48:	2200      	movs	r2, #0
 8000c4a:	601a      	str	r2, [r3, #0]
 8000c4c:	605a      	str	r2, [r3, #4]
 8000c4e:	609a      	str	r2, [r3, #8]
 8000c50:	60da      	str	r2, [r3, #12]
 8000c52:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	4a32      	ldr	r2, [pc, #200]	; (8000d24 <HAL_UART_MspInit+0xe8>)
 8000c5a:	4293      	cmp	r3, r2
 8000c5c:	d12c      	bne.n	8000cb8 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000c5e:	2300      	movs	r3, #0
 8000c60:	61bb      	str	r3, [r7, #24]
 8000c62:	4b31      	ldr	r3, [pc, #196]	; (8000d28 <HAL_UART_MspInit+0xec>)
 8000c64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c66:	4a30      	ldr	r2, [pc, #192]	; (8000d28 <HAL_UART_MspInit+0xec>)
 8000c68:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c6c:	6413      	str	r3, [r2, #64]	; 0x40
 8000c6e:	4b2e      	ldr	r3, [pc, #184]	; (8000d28 <HAL_UART_MspInit+0xec>)
 8000c70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c76:	61bb      	str	r3, [r7, #24]
 8000c78:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	617b      	str	r3, [r7, #20]
 8000c7e:	4b2a      	ldr	r3, [pc, #168]	; (8000d28 <HAL_UART_MspInit+0xec>)
 8000c80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c82:	4a29      	ldr	r2, [pc, #164]	; (8000d28 <HAL_UART_MspInit+0xec>)
 8000c84:	f043 0301 	orr.w	r3, r3, #1
 8000c88:	6313      	str	r3, [r2, #48]	; 0x30
 8000c8a:	4b27      	ldr	r3, [pc, #156]	; (8000d28 <HAL_UART_MspInit+0xec>)
 8000c8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c8e:	f003 0301 	and.w	r3, r3, #1
 8000c92:	617b      	str	r3, [r7, #20]
 8000c94:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000c96:	230c      	movs	r3, #12
 8000c98:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c9a:	2302      	movs	r3, #2
 8000c9c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ca2:	2303      	movs	r3, #3
 8000ca4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000ca6:	2307      	movs	r3, #7
 8000ca8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000caa:	f107 031c 	add.w	r3, r7, #28
 8000cae:	4619      	mov	r1, r3
 8000cb0:	481e      	ldr	r0, [pc, #120]	; (8000d2c <HAL_UART_MspInit+0xf0>)
 8000cb2:	f000 fa9b 	bl	80011ec <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000cb6:	e031      	b.n	8000d1c <HAL_UART_MspInit+0xe0>
  else if(huart->Instance==USART3)
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	4a1c      	ldr	r2, [pc, #112]	; (8000d30 <HAL_UART_MspInit+0xf4>)
 8000cbe:	4293      	cmp	r3, r2
 8000cc0:	d12c      	bne.n	8000d1c <HAL_UART_MspInit+0xe0>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	613b      	str	r3, [r7, #16]
 8000cc6:	4b18      	ldr	r3, [pc, #96]	; (8000d28 <HAL_UART_MspInit+0xec>)
 8000cc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cca:	4a17      	ldr	r2, [pc, #92]	; (8000d28 <HAL_UART_MspInit+0xec>)
 8000ccc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000cd0:	6413      	str	r3, [r2, #64]	; 0x40
 8000cd2:	4b15      	ldr	r3, [pc, #84]	; (8000d28 <HAL_UART_MspInit+0xec>)
 8000cd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cd6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000cda:	613b      	str	r3, [r7, #16]
 8000cdc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cde:	2300      	movs	r3, #0
 8000ce0:	60fb      	str	r3, [r7, #12]
 8000ce2:	4b11      	ldr	r3, [pc, #68]	; (8000d28 <HAL_UART_MspInit+0xec>)
 8000ce4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ce6:	4a10      	ldr	r2, [pc, #64]	; (8000d28 <HAL_UART_MspInit+0xec>)
 8000ce8:	f043 0302 	orr.w	r3, r3, #2
 8000cec:	6313      	str	r3, [r2, #48]	; 0x30
 8000cee:	4b0e      	ldr	r3, [pc, #56]	; (8000d28 <HAL_UART_MspInit+0xec>)
 8000cf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cf2:	f003 0302 	and.w	r3, r3, #2
 8000cf6:	60fb      	str	r3, [r7, #12]
 8000cf8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000cfa:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000cfe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d00:	2302      	movs	r3, #2
 8000d02:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d04:	2300      	movs	r3, #0
 8000d06:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d08:	2303      	movs	r3, #3
 8000d0a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000d0c:	2307      	movs	r3, #7
 8000d0e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d10:	f107 031c 	add.w	r3, r7, #28
 8000d14:	4619      	mov	r1, r3
 8000d16:	4807      	ldr	r0, [pc, #28]	; (8000d34 <HAL_UART_MspInit+0xf8>)
 8000d18:	f000 fa68 	bl	80011ec <HAL_GPIO_Init>
}
 8000d1c:	bf00      	nop
 8000d1e:	3730      	adds	r7, #48	; 0x30
 8000d20:	46bd      	mov	sp, r7
 8000d22:	bd80      	pop	{r7, pc}
 8000d24:	40004400 	.word	0x40004400
 8000d28:	40023800 	.word	0x40023800
 8000d2c:	40020000 	.word	0x40020000
 8000d30:	40004800 	.word	0x40004800
 8000d34:	40020400 	.word	0x40020400

08000d38 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b08c      	sub	sp, #48	; 0x30
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000d40:	2300      	movs	r3, #0
 8000d42:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000d44:	2300      	movs	r3, #0
 8000d46:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 8000d48:	2200      	movs	r2, #0
 8000d4a:	6879      	ldr	r1, [r7, #4]
 8000d4c:	2019      	movs	r0, #25
 8000d4e:	f000 fa23 	bl	8001198 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000d52:	2019      	movs	r0, #25
 8000d54:	f000 fa3c 	bl	80011d0 <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000d58:	2300      	movs	r3, #0
 8000d5a:	60fb      	str	r3, [r7, #12]
 8000d5c:	4b1f      	ldr	r3, [pc, #124]	; (8000ddc <HAL_InitTick+0xa4>)
 8000d5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d60:	4a1e      	ldr	r2, [pc, #120]	; (8000ddc <HAL_InitTick+0xa4>)
 8000d62:	f043 0301 	orr.w	r3, r3, #1
 8000d66:	6453      	str	r3, [r2, #68]	; 0x44
 8000d68:	4b1c      	ldr	r3, [pc, #112]	; (8000ddc <HAL_InitTick+0xa4>)
 8000d6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d6c:	f003 0301 	and.w	r3, r3, #1
 8000d70:	60fb      	str	r3, [r7, #12]
 8000d72:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000d74:	f107 0210 	add.w	r2, r7, #16
 8000d78:	f107 0314 	add.w	r3, r7, #20
 8000d7c:	4611      	mov	r1, r2
 8000d7e:	4618      	mov	r0, r3
 8000d80:	f001 f876 	bl	8001e70 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8000d84:	f001 f860 	bl	8001e48 <HAL_RCC_GetPCLK2Freq>
 8000d88:	4603      	mov	r3, r0
 8000d8a:	005b      	lsls	r3, r3, #1
 8000d8c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000d8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d90:	4a13      	ldr	r2, [pc, #76]	; (8000de0 <HAL_InitTick+0xa8>)
 8000d92:	fba2 2303 	umull	r2, r3, r2, r3
 8000d96:	0c9b      	lsrs	r3, r3, #18
 8000d98:	3b01      	subs	r3, #1
 8000d9a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000d9c:	4b11      	ldr	r3, [pc, #68]	; (8000de4 <HAL_InitTick+0xac>)
 8000d9e:	4a12      	ldr	r2, [pc, #72]	; (8000de8 <HAL_InitTick+0xb0>)
 8000da0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000da2:	4b10      	ldr	r3, [pc, #64]	; (8000de4 <HAL_InitTick+0xac>)
 8000da4:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000da8:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000daa:	4a0e      	ldr	r2, [pc, #56]	; (8000de4 <HAL_InitTick+0xac>)
 8000dac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000dae:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000db0:	4b0c      	ldr	r3, [pc, #48]	; (8000de4 <HAL_InitTick+0xac>)
 8000db2:	2200      	movs	r2, #0
 8000db4:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000db6:	4b0b      	ldr	r3, [pc, #44]	; (8000de4 <HAL_InitTick+0xac>)
 8000db8:	2200      	movs	r2, #0
 8000dba:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8000dbc:	4809      	ldr	r0, [pc, #36]	; (8000de4 <HAL_InitTick+0xac>)
 8000dbe:	f001 f889 	bl	8001ed4 <HAL_TIM_Base_Init>
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d104      	bne.n	8000dd2 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8000dc8:	4806      	ldr	r0, [pc, #24]	; (8000de4 <HAL_InitTick+0xac>)
 8000dca:	f001 f8d3 	bl	8001f74 <HAL_TIM_Base_Start_IT>
 8000dce:	4603      	mov	r3, r0
 8000dd0:	e000      	b.n	8000dd4 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8000dd2:	2301      	movs	r3, #1
}
 8000dd4:	4618      	mov	r0, r3
 8000dd6:	3730      	adds	r7, #48	; 0x30
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	bd80      	pop	{r7, pc}
 8000ddc:	40023800 	.word	0x40023800
 8000de0:	431bde83 	.word	0x431bde83
 8000de4:	20000174 	.word	0x20000174
 8000de8:	40010000 	.word	0x40010000

08000dec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000dec:	b480      	push	{r7}
 8000dee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000df0:	e7fe      	b.n	8000df0 <NMI_Handler+0x4>

08000df2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000df2:	b480      	push	{r7}
 8000df4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000df6:	e7fe      	b.n	8000df6 <HardFault_Handler+0x4>

08000df8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000dfc:	e7fe      	b.n	8000dfc <MemManage_Handler+0x4>

08000dfe <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000dfe:	b480      	push	{r7}
 8000e00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e02:	e7fe      	b.n	8000e02 <BusFault_Handler+0x4>

08000e04 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e04:	b480      	push	{r7}
 8000e06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e08:	e7fe      	b.n	8000e08 <UsageFault_Handler+0x4>

08000e0a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e0a:	b480      	push	{r7}
 8000e0c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e0e:	bf00      	nop
 8000e10:	46bd      	mov	sp, r7
 8000e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e16:	4770      	bx	lr

08000e18 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e18:	b480      	push	{r7}
 8000e1a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e1c:	bf00      	nop
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e24:	4770      	bx	lr

08000e26 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e26:	b480      	push	{r7}
 8000e28:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e2a:	bf00      	nop
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e32:	4770      	bx	lr

08000e34 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e34:	b480      	push	{r7}
 8000e36:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e38:	bf00      	nop
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e40:	4770      	bx	lr

08000e42 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8000e42:	b580      	push	{r7, lr}
 8000e44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8000e46:	2002      	movs	r0, #2
 8000e48:	f000 fb86 	bl	8001558 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8000e4c:	bf00      	nop
 8000e4e:	bd80      	pop	{r7, pc}

08000e50 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000e54:	4802      	ldr	r0, [pc, #8]	; (8000e60 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000e56:	f001 f8fd 	bl	8002054 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000e5a:	bf00      	nop
 8000e5c:	bd80      	pop	{r7, pc}
 8000e5e:	bf00      	nop
 8000e60:	20000174 	.word	0x20000174

08000e64 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000e68:	4802      	ldr	r0, [pc, #8]	; (8000e74 <TIM2_IRQHandler+0x10>)
 8000e6a:	f001 f8f3 	bl	8002054 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000e6e:	bf00      	nop
 8000e70:	bd80      	pop	{r7, pc}
 8000e72:	bf00      	nop
 8000e74:	200000e8 	.word	0x200000e8

08000e78 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b086      	sub	sp, #24
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e80:	4a14      	ldr	r2, [pc, #80]	; (8000ed4 <_sbrk+0x5c>)
 8000e82:	4b15      	ldr	r3, [pc, #84]	; (8000ed8 <_sbrk+0x60>)
 8000e84:	1ad3      	subs	r3, r2, r3
 8000e86:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e88:	697b      	ldr	r3, [r7, #20]
 8000e8a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e8c:	4b13      	ldr	r3, [pc, #76]	; (8000edc <_sbrk+0x64>)
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d102      	bne.n	8000e9a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e94:	4b11      	ldr	r3, [pc, #68]	; (8000edc <_sbrk+0x64>)
 8000e96:	4a12      	ldr	r2, [pc, #72]	; (8000ee0 <_sbrk+0x68>)
 8000e98:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e9a:	4b10      	ldr	r3, [pc, #64]	; (8000edc <_sbrk+0x64>)
 8000e9c:	681a      	ldr	r2, [r3, #0]
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	4413      	add	r3, r2
 8000ea2:	693a      	ldr	r2, [r7, #16]
 8000ea4:	429a      	cmp	r2, r3
 8000ea6:	d207      	bcs.n	8000eb8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ea8:	f002 f84e 	bl	8002f48 <__errno>
 8000eac:	4603      	mov	r3, r0
 8000eae:	220c      	movs	r2, #12
 8000eb0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000eb2:	f04f 33ff 	mov.w	r3, #4294967295
 8000eb6:	e009      	b.n	8000ecc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000eb8:	4b08      	ldr	r3, [pc, #32]	; (8000edc <_sbrk+0x64>)
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ebe:	4b07      	ldr	r3, [pc, #28]	; (8000edc <_sbrk+0x64>)
 8000ec0:	681a      	ldr	r2, [r3, #0]
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	4413      	add	r3, r2
 8000ec6:	4a05      	ldr	r2, [pc, #20]	; (8000edc <_sbrk+0x64>)
 8000ec8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000eca:	68fb      	ldr	r3, [r7, #12]
}
 8000ecc:	4618      	mov	r0, r3
 8000ece:	3718      	adds	r7, #24
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	bd80      	pop	{r7, pc}
 8000ed4:	20020000 	.word	0x20020000
 8000ed8:	00000400 	.word	0x00000400
 8000edc:	20000094 	.word	0x20000094
 8000ee0:	200001d0 	.word	0x200001d0

08000ee4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ee8:	4b06      	ldr	r3, [pc, #24]	; (8000f04 <SystemInit+0x20>)
 8000eea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000eee:	4a05      	ldr	r2, [pc, #20]	; (8000f04 <SystemInit+0x20>)
 8000ef0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ef4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ef8:	bf00      	nop
 8000efa:	46bd      	mov	sp, r7
 8000efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f00:	4770      	bx	lr
 8000f02:	bf00      	nop
 8000f04:	e000ed00 	.word	0xe000ed00

08000f08 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000f08:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f40 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000f0c:	480d      	ldr	r0, [pc, #52]	; (8000f44 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000f0e:	490e      	ldr	r1, [pc, #56]	; (8000f48 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000f10:	4a0e      	ldr	r2, [pc, #56]	; (8000f4c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000f12:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f14:	e002      	b.n	8000f1c <LoopCopyDataInit>

08000f16 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f16:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f18:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f1a:	3304      	adds	r3, #4

08000f1c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f1c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f1e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f20:	d3f9      	bcc.n	8000f16 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f22:	4a0b      	ldr	r2, [pc, #44]	; (8000f50 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000f24:	4c0b      	ldr	r4, [pc, #44]	; (8000f54 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000f26:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f28:	e001      	b.n	8000f2e <LoopFillZerobss>

08000f2a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f2a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f2c:	3204      	adds	r2, #4

08000f2e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f2e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f30:	d3fb      	bcc.n	8000f2a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000f32:	f7ff ffd7 	bl	8000ee4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f36:	f002 f80d 	bl	8002f54 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f3a:	f7ff fbe3 	bl	8000704 <main>
  bx  lr    
 8000f3e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000f40:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000f44:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f48:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000f4c:	080044f4 	.word	0x080044f4
  ldr r2, =_sbss
 8000f50:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000f54:	200001d0 	.word	0x200001d0

08000f58 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f58:	e7fe      	b.n	8000f58 <ADC_IRQHandler>
	...

08000f5c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f60:	4b0e      	ldr	r3, [pc, #56]	; (8000f9c <HAL_Init+0x40>)
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	4a0d      	ldr	r2, [pc, #52]	; (8000f9c <HAL_Init+0x40>)
 8000f66:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f6a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f6c:	4b0b      	ldr	r3, [pc, #44]	; (8000f9c <HAL_Init+0x40>)
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	4a0a      	ldr	r2, [pc, #40]	; (8000f9c <HAL_Init+0x40>)
 8000f72:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000f76:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f78:	4b08      	ldr	r3, [pc, #32]	; (8000f9c <HAL_Init+0x40>)
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	4a07      	ldr	r2, [pc, #28]	; (8000f9c <HAL_Init+0x40>)
 8000f7e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f82:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f84:	2003      	movs	r0, #3
 8000f86:	f000 f8fc 	bl	8001182 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f8a:	2000      	movs	r0, #0
 8000f8c:	f7ff fed4 	bl	8000d38 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f90:	f7ff fe06 	bl	8000ba0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f94:	2300      	movs	r3, #0
}
 8000f96:	4618      	mov	r0, r3
 8000f98:	bd80      	pop	{r7, pc}
 8000f9a:	bf00      	nop
 8000f9c:	40023c00 	.word	0x40023c00

08000fa0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000fa4:	4b06      	ldr	r3, [pc, #24]	; (8000fc0 <HAL_IncTick+0x20>)
 8000fa6:	781b      	ldrb	r3, [r3, #0]
 8000fa8:	461a      	mov	r2, r3
 8000faa:	4b06      	ldr	r3, [pc, #24]	; (8000fc4 <HAL_IncTick+0x24>)
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	4413      	add	r3, r2
 8000fb0:	4a04      	ldr	r2, [pc, #16]	; (8000fc4 <HAL_IncTick+0x24>)
 8000fb2:	6013      	str	r3, [r2, #0]
}
 8000fb4:	bf00      	nop
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbc:	4770      	bx	lr
 8000fbe:	bf00      	nop
 8000fc0:	2000000c 	.word	0x2000000c
 8000fc4:	200001bc 	.word	0x200001bc

08000fc8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fc8:	b480      	push	{r7}
 8000fca:	af00      	add	r7, sp, #0
  return uwTick;
 8000fcc:	4b03      	ldr	r3, [pc, #12]	; (8000fdc <HAL_GetTick+0x14>)
 8000fce:	681b      	ldr	r3, [r3, #0]
}
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd8:	4770      	bx	lr
 8000fda:	bf00      	nop
 8000fdc:	200001bc 	.word	0x200001bc

08000fe0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b084      	sub	sp, #16
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000fe8:	f7ff ffee 	bl	8000fc8 <HAL_GetTick>
 8000fec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ff2:	68fb      	ldr	r3, [r7, #12]
 8000ff4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ff8:	d005      	beq.n	8001006 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000ffa:	4b0a      	ldr	r3, [pc, #40]	; (8001024 <HAL_Delay+0x44>)
 8000ffc:	781b      	ldrb	r3, [r3, #0]
 8000ffe:	461a      	mov	r2, r3
 8001000:	68fb      	ldr	r3, [r7, #12]
 8001002:	4413      	add	r3, r2
 8001004:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001006:	bf00      	nop
 8001008:	f7ff ffde 	bl	8000fc8 <HAL_GetTick>
 800100c:	4602      	mov	r2, r0
 800100e:	68bb      	ldr	r3, [r7, #8]
 8001010:	1ad3      	subs	r3, r2, r3
 8001012:	68fa      	ldr	r2, [r7, #12]
 8001014:	429a      	cmp	r2, r3
 8001016:	d8f7      	bhi.n	8001008 <HAL_Delay+0x28>
  {
  }
}
 8001018:	bf00      	nop
 800101a:	bf00      	nop
 800101c:	3710      	adds	r7, #16
 800101e:	46bd      	mov	sp, r7
 8001020:	bd80      	pop	{r7, pc}
 8001022:	bf00      	nop
 8001024:	2000000c 	.word	0x2000000c

08001028 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001028:	b480      	push	{r7}
 800102a:	b085      	sub	sp, #20
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	f003 0307 	and.w	r3, r3, #7
 8001036:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001038:	4b0c      	ldr	r3, [pc, #48]	; (800106c <__NVIC_SetPriorityGrouping+0x44>)
 800103a:	68db      	ldr	r3, [r3, #12]
 800103c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800103e:	68ba      	ldr	r2, [r7, #8]
 8001040:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001044:	4013      	ands	r3, r2
 8001046:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001048:	68fb      	ldr	r3, [r7, #12]
 800104a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800104c:	68bb      	ldr	r3, [r7, #8]
 800104e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001050:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001054:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001058:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800105a:	4a04      	ldr	r2, [pc, #16]	; (800106c <__NVIC_SetPriorityGrouping+0x44>)
 800105c:	68bb      	ldr	r3, [r7, #8]
 800105e:	60d3      	str	r3, [r2, #12]
}
 8001060:	bf00      	nop
 8001062:	3714      	adds	r7, #20
 8001064:	46bd      	mov	sp, r7
 8001066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106a:	4770      	bx	lr
 800106c:	e000ed00 	.word	0xe000ed00

08001070 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001070:	b480      	push	{r7}
 8001072:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001074:	4b04      	ldr	r3, [pc, #16]	; (8001088 <__NVIC_GetPriorityGrouping+0x18>)
 8001076:	68db      	ldr	r3, [r3, #12]
 8001078:	0a1b      	lsrs	r3, r3, #8
 800107a:	f003 0307 	and.w	r3, r3, #7
}
 800107e:	4618      	mov	r0, r3
 8001080:	46bd      	mov	sp, r7
 8001082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001086:	4770      	bx	lr
 8001088:	e000ed00 	.word	0xe000ed00

0800108c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800108c:	b480      	push	{r7}
 800108e:	b083      	sub	sp, #12
 8001090:	af00      	add	r7, sp, #0
 8001092:	4603      	mov	r3, r0
 8001094:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001096:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800109a:	2b00      	cmp	r3, #0
 800109c:	db0b      	blt.n	80010b6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800109e:	79fb      	ldrb	r3, [r7, #7]
 80010a0:	f003 021f 	and.w	r2, r3, #31
 80010a4:	4907      	ldr	r1, [pc, #28]	; (80010c4 <__NVIC_EnableIRQ+0x38>)
 80010a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010aa:	095b      	lsrs	r3, r3, #5
 80010ac:	2001      	movs	r0, #1
 80010ae:	fa00 f202 	lsl.w	r2, r0, r2
 80010b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80010b6:	bf00      	nop
 80010b8:	370c      	adds	r7, #12
 80010ba:	46bd      	mov	sp, r7
 80010bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c0:	4770      	bx	lr
 80010c2:	bf00      	nop
 80010c4:	e000e100 	.word	0xe000e100

080010c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010c8:	b480      	push	{r7}
 80010ca:	b083      	sub	sp, #12
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	4603      	mov	r3, r0
 80010d0:	6039      	str	r1, [r7, #0]
 80010d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010d8:	2b00      	cmp	r3, #0
 80010da:	db0a      	blt.n	80010f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010dc:	683b      	ldr	r3, [r7, #0]
 80010de:	b2da      	uxtb	r2, r3
 80010e0:	490c      	ldr	r1, [pc, #48]	; (8001114 <__NVIC_SetPriority+0x4c>)
 80010e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010e6:	0112      	lsls	r2, r2, #4
 80010e8:	b2d2      	uxtb	r2, r2
 80010ea:	440b      	add	r3, r1
 80010ec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80010f0:	e00a      	b.n	8001108 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010f2:	683b      	ldr	r3, [r7, #0]
 80010f4:	b2da      	uxtb	r2, r3
 80010f6:	4908      	ldr	r1, [pc, #32]	; (8001118 <__NVIC_SetPriority+0x50>)
 80010f8:	79fb      	ldrb	r3, [r7, #7]
 80010fa:	f003 030f 	and.w	r3, r3, #15
 80010fe:	3b04      	subs	r3, #4
 8001100:	0112      	lsls	r2, r2, #4
 8001102:	b2d2      	uxtb	r2, r2
 8001104:	440b      	add	r3, r1
 8001106:	761a      	strb	r2, [r3, #24]
}
 8001108:	bf00      	nop
 800110a:	370c      	adds	r7, #12
 800110c:	46bd      	mov	sp, r7
 800110e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001112:	4770      	bx	lr
 8001114:	e000e100 	.word	0xe000e100
 8001118:	e000ed00 	.word	0xe000ed00

0800111c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800111c:	b480      	push	{r7}
 800111e:	b089      	sub	sp, #36	; 0x24
 8001120:	af00      	add	r7, sp, #0
 8001122:	60f8      	str	r0, [r7, #12]
 8001124:	60b9      	str	r1, [r7, #8]
 8001126:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001128:	68fb      	ldr	r3, [r7, #12]
 800112a:	f003 0307 	and.w	r3, r3, #7
 800112e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001130:	69fb      	ldr	r3, [r7, #28]
 8001132:	f1c3 0307 	rsb	r3, r3, #7
 8001136:	2b04      	cmp	r3, #4
 8001138:	bf28      	it	cs
 800113a:	2304      	movcs	r3, #4
 800113c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800113e:	69fb      	ldr	r3, [r7, #28]
 8001140:	3304      	adds	r3, #4
 8001142:	2b06      	cmp	r3, #6
 8001144:	d902      	bls.n	800114c <NVIC_EncodePriority+0x30>
 8001146:	69fb      	ldr	r3, [r7, #28]
 8001148:	3b03      	subs	r3, #3
 800114a:	e000      	b.n	800114e <NVIC_EncodePriority+0x32>
 800114c:	2300      	movs	r3, #0
 800114e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001150:	f04f 32ff 	mov.w	r2, #4294967295
 8001154:	69bb      	ldr	r3, [r7, #24]
 8001156:	fa02 f303 	lsl.w	r3, r2, r3
 800115a:	43da      	mvns	r2, r3
 800115c:	68bb      	ldr	r3, [r7, #8]
 800115e:	401a      	ands	r2, r3
 8001160:	697b      	ldr	r3, [r7, #20]
 8001162:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001164:	f04f 31ff 	mov.w	r1, #4294967295
 8001168:	697b      	ldr	r3, [r7, #20]
 800116a:	fa01 f303 	lsl.w	r3, r1, r3
 800116e:	43d9      	mvns	r1, r3
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001174:	4313      	orrs	r3, r2
         );
}
 8001176:	4618      	mov	r0, r3
 8001178:	3724      	adds	r7, #36	; 0x24
 800117a:	46bd      	mov	sp, r7
 800117c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001180:	4770      	bx	lr

08001182 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001182:	b580      	push	{r7, lr}
 8001184:	b082      	sub	sp, #8
 8001186:	af00      	add	r7, sp, #0
 8001188:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800118a:	6878      	ldr	r0, [r7, #4]
 800118c:	f7ff ff4c 	bl	8001028 <__NVIC_SetPriorityGrouping>
}
 8001190:	bf00      	nop
 8001192:	3708      	adds	r7, #8
 8001194:	46bd      	mov	sp, r7
 8001196:	bd80      	pop	{r7, pc}

08001198 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001198:	b580      	push	{r7, lr}
 800119a:	b086      	sub	sp, #24
 800119c:	af00      	add	r7, sp, #0
 800119e:	4603      	mov	r3, r0
 80011a0:	60b9      	str	r1, [r7, #8]
 80011a2:	607a      	str	r2, [r7, #4]
 80011a4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80011a6:	2300      	movs	r3, #0
 80011a8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80011aa:	f7ff ff61 	bl	8001070 <__NVIC_GetPriorityGrouping>
 80011ae:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80011b0:	687a      	ldr	r2, [r7, #4]
 80011b2:	68b9      	ldr	r1, [r7, #8]
 80011b4:	6978      	ldr	r0, [r7, #20]
 80011b6:	f7ff ffb1 	bl	800111c <NVIC_EncodePriority>
 80011ba:	4602      	mov	r2, r0
 80011bc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011c0:	4611      	mov	r1, r2
 80011c2:	4618      	mov	r0, r3
 80011c4:	f7ff ff80 	bl	80010c8 <__NVIC_SetPriority>
}
 80011c8:	bf00      	nop
 80011ca:	3718      	adds	r7, #24
 80011cc:	46bd      	mov	sp, r7
 80011ce:	bd80      	pop	{r7, pc}

080011d0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b082      	sub	sp, #8
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	4603      	mov	r3, r0
 80011d8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80011da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011de:	4618      	mov	r0, r3
 80011e0:	f7ff ff54 	bl	800108c <__NVIC_EnableIRQ>
}
 80011e4:	bf00      	nop
 80011e6:	3708      	adds	r7, #8
 80011e8:	46bd      	mov	sp, r7
 80011ea:	bd80      	pop	{r7, pc}

080011ec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80011ec:	b480      	push	{r7}
 80011ee:	b089      	sub	sp, #36	; 0x24
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
 80011f4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80011f6:	2300      	movs	r3, #0
 80011f8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80011fa:	2300      	movs	r3, #0
 80011fc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80011fe:	2300      	movs	r3, #0
 8001200:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001202:	2300      	movs	r3, #0
 8001204:	61fb      	str	r3, [r7, #28]
 8001206:	e16b      	b.n	80014e0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001208:	2201      	movs	r2, #1
 800120a:	69fb      	ldr	r3, [r7, #28]
 800120c:	fa02 f303 	lsl.w	r3, r2, r3
 8001210:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001212:	683b      	ldr	r3, [r7, #0]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	697a      	ldr	r2, [r7, #20]
 8001218:	4013      	ands	r3, r2
 800121a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800121c:	693a      	ldr	r2, [r7, #16]
 800121e:	697b      	ldr	r3, [r7, #20]
 8001220:	429a      	cmp	r2, r3
 8001222:	f040 815a 	bne.w	80014da <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001226:	683b      	ldr	r3, [r7, #0]
 8001228:	685b      	ldr	r3, [r3, #4]
 800122a:	f003 0303 	and.w	r3, r3, #3
 800122e:	2b01      	cmp	r3, #1
 8001230:	d005      	beq.n	800123e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001232:	683b      	ldr	r3, [r7, #0]
 8001234:	685b      	ldr	r3, [r3, #4]
 8001236:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800123a:	2b02      	cmp	r3, #2
 800123c:	d130      	bne.n	80012a0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	689b      	ldr	r3, [r3, #8]
 8001242:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001244:	69fb      	ldr	r3, [r7, #28]
 8001246:	005b      	lsls	r3, r3, #1
 8001248:	2203      	movs	r2, #3
 800124a:	fa02 f303 	lsl.w	r3, r2, r3
 800124e:	43db      	mvns	r3, r3
 8001250:	69ba      	ldr	r2, [r7, #24]
 8001252:	4013      	ands	r3, r2
 8001254:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001256:	683b      	ldr	r3, [r7, #0]
 8001258:	68da      	ldr	r2, [r3, #12]
 800125a:	69fb      	ldr	r3, [r7, #28]
 800125c:	005b      	lsls	r3, r3, #1
 800125e:	fa02 f303 	lsl.w	r3, r2, r3
 8001262:	69ba      	ldr	r2, [r7, #24]
 8001264:	4313      	orrs	r3, r2
 8001266:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	69ba      	ldr	r2, [r7, #24]
 800126c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	685b      	ldr	r3, [r3, #4]
 8001272:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001274:	2201      	movs	r2, #1
 8001276:	69fb      	ldr	r3, [r7, #28]
 8001278:	fa02 f303 	lsl.w	r3, r2, r3
 800127c:	43db      	mvns	r3, r3
 800127e:	69ba      	ldr	r2, [r7, #24]
 8001280:	4013      	ands	r3, r2
 8001282:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001284:	683b      	ldr	r3, [r7, #0]
 8001286:	685b      	ldr	r3, [r3, #4]
 8001288:	091b      	lsrs	r3, r3, #4
 800128a:	f003 0201 	and.w	r2, r3, #1
 800128e:	69fb      	ldr	r3, [r7, #28]
 8001290:	fa02 f303 	lsl.w	r3, r2, r3
 8001294:	69ba      	ldr	r2, [r7, #24]
 8001296:	4313      	orrs	r3, r2
 8001298:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	69ba      	ldr	r2, [r7, #24]
 800129e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80012a0:	683b      	ldr	r3, [r7, #0]
 80012a2:	685b      	ldr	r3, [r3, #4]
 80012a4:	f003 0303 	and.w	r3, r3, #3
 80012a8:	2b03      	cmp	r3, #3
 80012aa:	d017      	beq.n	80012dc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	68db      	ldr	r3, [r3, #12]
 80012b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80012b2:	69fb      	ldr	r3, [r7, #28]
 80012b4:	005b      	lsls	r3, r3, #1
 80012b6:	2203      	movs	r2, #3
 80012b8:	fa02 f303 	lsl.w	r3, r2, r3
 80012bc:	43db      	mvns	r3, r3
 80012be:	69ba      	ldr	r2, [r7, #24]
 80012c0:	4013      	ands	r3, r2
 80012c2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80012c4:	683b      	ldr	r3, [r7, #0]
 80012c6:	689a      	ldr	r2, [r3, #8]
 80012c8:	69fb      	ldr	r3, [r7, #28]
 80012ca:	005b      	lsls	r3, r3, #1
 80012cc:	fa02 f303 	lsl.w	r3, r2, r3
 80012d0:	69ba      	ldr	r2, [r7, #24]
 80012d2:	4313      	orrs	r3, r2
 80012d4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	69ba      	ldr	r2, [r7, #24]
 80012da:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80012dc:	683b      	ldr	r3, [r7, #0]
 80012de:	685b      	ldr	r3, [r3, #4]
 80012e0:	f003 0303 	and.w	r3, r3, #3
 80012e4:	2b02      	cmp	r3, #2
 80012e6:	d123      	bne.n	8001330 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80012e8:	69fb      	ldr	r3, [r7, #28]
 80012ea:	08da      	lsrs	r2, r3, #3
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	3208      	adds	r2, #8
 80012f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80012f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80012f6:	69fb      	ldr	r3, [r7, #28]
 80012f8:	f003 0307 	and.w	r3, r3, #7
 80012fc:	009b      	lsls	r3, r3, #2
 80012fe:	220f      	movs	r2, #15
 8001300:	fa02 f303 	lsl.w	r3, r2, r3
 8001304:	43db      	mvns	r3, r3
 8001306:	69ba      	ldr	r2, [r7, #24]
 8001308:	4013      	ands	r3, r2
 800130a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800130c:	683b      	ldr	r3, [r7, #0]
 800130e:	691a      	ldr	r2, [r3, #16]
 8001310:	69fb      	ldr	r3, [r7, #28]
 8001312:	f003 0307 	and.w	r3, r3, #7
 8001316:	009b      	lsls	r3, r3, #2
 8001318:	fa02 f303 	lsl.w	r3, r2, r3
 800131c:	69ba      	ldr	r2, [r7, #24]
 800131e:	4313      	orrs	r3, r2
 8001320:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001322:	69fb      	ldr	r3, [r7, #28]
 8001324:	08da      	lsrs	r2, r3, #3
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	3208      	adds	r2, #8
 800132a:	69b9      	ldr	r1, [r7, #24]
 800132c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001336:	69fb      	ldr	r3, [r7, #28]
 8001338:	005b      	lsls	r3, r3, #1
 800133a:	2203      	movs	r2, #3
 800133c:	fa02 f303 	lsl.w	r3, r2, r3
 8001340:	43db      	mvns	r3, r3
 8001342:	69ba      	ldr	r2, [r7, #24]
 8001344:	4013      	ands	r3, r2
 8001346:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001348:	683b      	ldr	r3, [r7, #0]
 800134a:	685b      	ldr	r3, [r3, #4]
 800134c:	f003 0203 	and.w	r2, r3, #3
 8001350:	69fb      	ldr	r3, [r7, #28]
 8001352:	005b      	lsls	r3, r3, #1
 8001354:	fa02 f303 	lsl.w	r3, r2, r3
 8001358:	69ba      	ldr	r2, [r7, #24]
 800135a:	4313      	orrs	r3, r2
 800135c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	69ba      	ldr	r2, [r7, #24]
 8001362:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001364:	683b      	ldr	r3, [r7, #0]
 8001366:	685b      	ldr	r3, [r3, #4]
 8001368:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800136c:	2b00      	cmp	r3, #0
 800136e:	f000 80b4 	beq.w	80014da <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001372:	2300      	movs	r3, #0
 8001374:	60fb      	str	r3, [r7, #12]
 8001376:	4b60      	ldr	r3, [pc, #384]	; (80014f8 <HAL_GPIO_Init+0x30c>)
 8001378:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800137a:	4a5f      	ldr	r2, [pc, #380]	; (80014f8 <HAL_GPIO_Init+0x30c>)
 800137c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001380:	6453      	str	r3, [r2, #68]	; 0x44
 8001382:	4b5d      	ldr	r3, [pc, #372]	; (80014f8 <HAL_GPIO_Init+0x30c>)
 8001384:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001386:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800138a:	60fb      	str	r3, [r7, #12]
 800138c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800138e:	4a5b      	ldr	r2, [pc, #364]	; (80014fc <HAL_GPIO_Init+0x310>)
 8001390:	69fb      	ldr	r3, [r7, #28]
 8001392:	089b      	lsrs	r3, r3, #2
 8001394:	3302      	adds	r3, #2
 8001396:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800139a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800139c:	69fb      	ldr	r3, [r7, #28]
 800139e:	f003 0303 	and.w	r3, r3, #3
 80013a2:	009b      	lsls	r3, r3, #2
 80013a4:	220f      	movs	r2, #15
 80013a6:	fa02 f303 	lsl.w	r3, r2, r3
 80013aa:	43db      	mvns	r3, r3
 80013ac:	69ba      	ldr	r2, [r7, #24]
 80013ae:	4013      	ands	r3, r2
 80013b0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	4a52      	ldr	r2, [pc, #328]	; (8001500 <HAL_GPIO_Init+0x314>)
 80013b6:	4293      	cmp	r3, r2
 80013b8:	d02b      	beq.n	8001412 <HAL_GPIO_Init+0x226>
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	4a51      	ldr	r2, [pc, #324]	; (8001504 <HAL_GPIO_Init+0x318>)
 80013be:	4293      	cmp	r3, r2
 80013c0:	d025      	beq.n	800140e <HAL_GPIO_Init+0x222>
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	4a50      	ldr	r2, [pc, #320]	; (8001508 <HAL_GPIO_Init+0x31c>)
 80013c6:	4293      	cmp	r3, r2
 80013c8:	d01f      	beq.n	800140a <HAL_GPIO_Init+0x21e>
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	4a4f      	ldr	r2, [pc, #316]	; (800150c <HAL_GPIO_Init+0x320>)
 80013ce:	4293      	cmp	r3, r2
 80013d0:	d019      	beq.n	8001406 <HAL_GPIO_Init+0x21a>
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	4a4e      	ldr	r2, [pc, #312]	; (8001510 <HAL_GPIO_Init+0x324>)
 80013d6:	4293      	cmp	r3, r2
 80013d8:	d013      	beq.n	8001402 <HAL_GPIO_Init+0x216>
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	4a4d      	ldr	r2, [pc, #308]	; (8001514 <HAL_GPIO_Init+0x328>)
 80013de:	4293      	cmp	r3, r2
 80013e0:	d00d      	beq.n	80013fe <HAL_GPIO_Init+0x212>
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	4a4c      	ldr	r2, [pc, #304]	; (8001518 <HAL_GPIO_Init+0x32c>)
 80013e6:	4293      	cmp	r3, r2
 80013e8:	d007      	beq.n	80013fa <HAL_GPIO_Init+0x20e>
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	4a4b      	ldr	r2, [pc, #300]	; (800151c <HAL_GPIO_Init+0x330>)
 80013ee:	4293      	cmp	r3, r2
 80013f0:	d101      	bne.n	80013f6 <HAL_GPIO_Init+0x20a>
 80013f2:	2307      	movs	r3, #7
 80013f4:	e00e      	b.n	8001414 <HAL_GPIO_Init+0x228>
 80013f6:	2308      	movs	r3, #8
 80013f8:	e00c      	b.n	8001414 <HAL_GPIO_Init+0x228>
 80013fa:	2306      	movs	r3, #6
 80013fc:	e00a      	b.n	8001414 <HAL_GPIO_Init+0x228>
 80013fe:	2305      	movs	r3, #5
 8001400:	e008      	b.n	8001414 <HAL_GPIO_Init+0x228>
 8001402:	2304      	movs	r3, #4
 8001404:	e006      	b.n	8001414 <HAL_GPIO_Init+0x228>
 8001406:	2303      	movs	r3, #3
 8001408:	e004      	b.n	8001414 <HAL_GPIO_Init+0x228>
 800140a:	2302      	movs	r3, #2
 800140c:	e002      	b.n	8001414 <HAL_GPIO_Init+0x228>
 800140e:	2301      	movs	r3, #1
 8001410:	e000      	b.n	8001414 <HAL_GPIO_Init+0x228>
 8001412:	2300      	movs	r3, #0
 8001414:	69fa      	ldr	r2, [r7, #28]
 8001416:	f002 0203 	and.w	r2, r2, #3
 800141a:	0092      	lsls	r2, r2, #2
 800141c:	4093      	lsls	r3, r2
 800141e:	69ba      	ldr	r2, [r7, #24]
 8001420:	4313      	orrs	r3, r2
 8001422:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001424:	4935      	ldr	r1, [pc, #212]	; (80014fc <HAL_GPIO_Init+0x310>)
 8001426:	69fb      	ldr	r3, [r7, #28]
 8001428:	089b      	lsrs	r3, r3, #2
 800142a:	3302      	adds	r3, #2
 800142c:	69ba      	ldr	r2, [r7, #24]
 800142e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001432:	4b3b      	ldr	r3, [pc, #236]	; (8001520 <HAL_GPIO_Init+0x334>)
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001438:	693b      	ldr	r3, [r7, #16]
 800143a:	43db      	mvns	r3, r3
 800143c:	69ba      	ldr	r2, [r7, #24]
 800143e:	4013      	ands	r3, r2
 8001440:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001442:	683b      	ldr	r3, [r7, #0]
 8001444:	685b      	ldr	r3, [r3, #4]
 8001446:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800144a:	2b00      	cmp	r3, #0
 800144c:	d003      	beq.n	8001456 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800144e:	69ba      	ldr	r2, [r7, #24]
 8001450:	693b      	ldr	r3, [r7, #16]
 8001452:	4313      	orrs	r3, r2
 8001454:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001456:	4a32      	ldr	r2, [pc, #200]	; (8001520 <HAL_GPIO_Init+0x334>)
 8001458:	69bb      	ldr	r3, [r7, #24]
 800145a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800145c:	4b30      	ldr	r3, [pc, #192]	; (8001520 <HAL_GPIO_Init+0x334>)
 800145e:	685b      	ldr	r3, [r3, #4]
 8001460:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001462:	693b      	ldr	r3, [r7, #16]
 8001464:	43db      	mvns	r3, r3
 8001466:	69ba      	ldr	r2, [r7, #24]
 8001468:	4013      	ands	r3, r2
 800146a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800146c:	683b      	ldr	r3, [r7, #0]
 800146e:	685b      	ldr	r3, [r3, #4]
 8001470:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001474:	2b00      	cmp	r3, #0
 8001476:	d003      	beq.n	8001480 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001478:	69ba      	ldr	r2, [r7, #24]
 800147a:	693b      	ldr	r3, [r7, #16]
 800147c:	4313      	orrs	r3, r2
 800147e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001480:	4a27      	ldr	r2, [pc, #156]	; (8001520 <HAL_GPIO_Init+0x334>)
 8001482:	69bb      	ldr	r3, [r7, #24]
 8001484:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001486:	4b26      	ldr	r3, [pc, #152]	; (8001520 <HAL_GPIO_Init+0x334>)
 8001488:	689b      	ldr	r3, [r3, #8]
 800148a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800148c:	693b      	ldr	r3, [r7, #16]
 800148e:	43db      	mvns	r3, r3
 8001490:	69ba      	ldr	r2, [r7, #24]
 8001492:	4013      	ands	r3, r2
 8001494:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001496:	683b      	ldr	r3, [r7, #0]
 8001498:	685b      	ldr	r3, [r3, #4]
 800149a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d003      	beq.n	80014aa <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80014a2:	69ba      	ldr	r2, [r7, #24]
 80014a4:	693b      	ldr	r3, [r7, #16]
 80014a6:	4313      	orrs	r3, r2
 80014a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80014aa:	4a1d      	ldr	r2, [pc, #116]	; (8001520 <HAL_GPIO_Init+0x334>)
 80014ac:	69bb      	ldr	r3, [r7, #24]
 80014ae:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80014b0:	4b1b      	ldr	r3, [pc, #108]	; (8001520 <HAL_GPIO_Init+0x334>)
 80014b2:	68db      	ldr	r3, [r3, #12]
 80014b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014b6:	693b      	ldr	r3, [r7, #16]
 80014b8:	43db      	mvns	r3, r3
 80014ba:	69ba      	ldr	r2, [r7, #24]
 80014bc:	4013      	ands	r3, r2
 80014be:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80014c0:	683b      	ldr	r3, [r7, #0]
 80014c2:	685b      	ldr	r3, [r3, #4]
 80014c4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d003      	beq.n	80014d4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80014cc:	69ba      	ldr	r2, [r7, #24]
 80014ce:	693b      	ldr	r3, [r7, #16]
 80014d0:	4313      	orrs	r3, r2
 80014d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80014d4:	4a12      	ldr	r2, [pc, #72]	; (8001520 <HAL_GPIO_Init+0x334>)
 80014d6:	69bb      	ldr	r3, [r7, #24]
 80014d8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80014da:	69fb      	ldr	r3, [r7, #28]
 80014dc:	3301      	adds	r3, #1
 80014de:	61fb      	str	r3, [r7, #28]
 80014e0:	69fb      	ldr	r3, [r7, #28]
 80014e2:	2b0f      	cmp	r3, #15
 80014e4:	f67f ae90 	bls.w	8001208 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80014e8:	bf00      	nop
 80014ea:	bf00      	nop
 80014ec:	3724      	adds	r7, #36	; 0x24
 80014ee:	46bd      	mov	sp, r7
 80014f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f4:	4770      	bx	lr
 80014f6:	bf00      	nop
 80014f8:	40023800 	.word	0x40023800
 80014fc:	40013800 	.word	0x40013800
 8001500:	40020000 	.word	0x40020000
 8001504:	40020400 	.word	0x40020400
 8001508:	40020800 	.word	0x40020800
 800150c:	40020c00 	.word	0x40020c00
 8001510:	40021000 	.word	0x40021000
 8001514:	40021400 	.word	0x40021400
 8001518:	40021800 	.word	0x40021800
 800151c:	40021c00 	.word	0x40021c00
 8001520:	40013c00 	.word	0x40013c00

08001524 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001524:	b480      	push	{r7}
 8001526:	b083      	sub	sp, #12
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]
 800152c:	460b      	mov	r3, r1
 800152e:	807b      	strh	r3, [r7, #2]
 8001530:	4613      	mov	r3, r2
 8001532:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001534:	787b      	ldrb	r3, [r7, #1]
 8001536:	2b00      	cmp	r3, #0
 8001538:	d003      	beq.n	8001542 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800153a:	887a      	ldrh	r2, [r7, #2]
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001540:	e003      	b.n	800154a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001542:	887b      	ldrh	r3, [r7, #2]
 8001544:	041a      	lsls	r2, r3, #16
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	619a      	str	r2, [r3, #24]
}
 800154a:	bf00      	nop
 800154c:	370c      	adds	r7, #12
 800154e:	46bd      	mov	sp, r7
 8001550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001554:	4770      	bx	lr
	...

08001558 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	b082      	sub	sp, #8
 800155c:	af00      	add	r7, sp, #0
 800155e:	4603      	mov	r3, r0
 8001560:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001562:	4b08      	ldr	r3, [pc, #32]	; (8001584 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001564:	695a      	ldr	r2, [r3, #20]
 8001566:	88fb      	ldrh	r3, [r7, #6]
 8001568:	4013      	ands	r3, r2
 800156a:	2b00      	cmp	r3, #0
 800156c:	d006      	beq.n	800157c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800156e:	4a05      	ldr	r2, [pc, #20]	; (8001584 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001570:	88fb      	ldrh	r3, [r7, #6]
 8001572:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001574:	88fb      	ldrh	r3, [r7, #6]
 8001576:	4618      	mov	r0, r3
 8001578:	f7ff fa80 	bl	8000a7c <HAL_GPIO_EXTI_Callback>
  }
}
 800157c:	bf00      	nop
 800157e:	3708      	adds	r7, #8
 8001580:	46bd      	mov	sp, r7
 8001582:	bd80      	pop	{r7, pc}
 8001584:	40013c00 	.word	0x40013c00

08001588 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	b086      	sub	sp, #24
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	2b00      	cmp	r3, #0
 8001594:	d101      	bne.n	800159a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001596:	2301      	movs	r3, #1
 8001598:	e264      	b.n	8001a64 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	f003 0301 	and.w	r3, r3, #1
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d075      	beq.n	8001692 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80015a6:	4ba3      	ldr	r3, [pc, #652]	; (8001834 <HAL_RCC_OscConfig+0x2ac>)
 80015a8:	689b      	ldr	r3, [r3, #8]
 80015aa:	f003 030c 	and.w	r3, r3, #12
 80015ae:	2b04      	cmp	r3, #4
 80015b0:	d00c      	beq.n	80015cc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80015b2:	4ba0      	ldr	r3, [pc, #640]	; (8001834 <HAL_RCC_OscConfig+0x2ac>)
 80015b4:	689b      	ldr	r3, [r3, #8]
 80015b6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80015ba:	2b08      	cmp	r3, #8
 80015bc:	d112      	bne.n	80015e4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80015be:	4b9d      	ldr	r3, [pc, #628]	; (8001834 <HAL_RCC_OscConfig+0x2ac>)
 80015c0:	685b      	ldr	r3, [r3, #4]
 80015c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80015c6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80015ca:	d10b      	bne.n	80015e4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015cc:	4b99      	ldr	r3, [pc, #612]	; (8001834 <HAL_RCC_OscConfig+0x2ac>)
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d05b      	beq.n	8001690 <HAL_RCC_OscConfig+0x108>
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	685b      	ldr	r3, [r3, #4]
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d157      	bne.n	8001690 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80015e0:	2301      	movs	r3, #1
 80015e2:	e23f      	b.n	8001a64 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	685b      	ldr	r3, [r3, #4]
 80015e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80015ec:	d106      	bne.n	80015fc <HAL_RCC_OscConfig+0x74>
 80015ee:	4b91      	ldr	r3, [pc, #580]	; (8001834 <HAL_RCC_OscConfig+0x2ac>)
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	4a90      	ldr	r2, [pc, #576]	; (8001834 <HAL_RCC_OscConfig+0x2ac>)
 80015f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015f8:	6013      	str	r3, [r2, #0]
 80015fa:	e01d      	b.n	8001638 <HAL_RCC_OscConfig+0xb0>
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	685b      	ldr	r3, [r3, #4]
 8001600:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001604:	d10c      	bne.n	8001620 <HAL_RCC_OscConfig+0x98>
 8001606:	4b8b      	ldr	r3, [pc, #556]	; (8001834 <HAL_RCC_OscConfig+0x2ac>)
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	4a8a      	ldr	r2, [pc, #552]	; (8001834 <HAL_RCC_OscConfig+0x2ac>)
 800160c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001610:	6013      	str	r3, [r2, #0]
 8001612:	4b88      	ldr	r3, [pc, #544]	; (8001834 <HAL_RCC_OscConfig+0x2ac>)
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	4a87      	ldr	r2, [pc, #540]	; (8001834 <HAL_RCC_OscConfig+0x2ac>)
 8001618:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800161c:	6013      	str	r3, [r2, #0]
 800161e:	e00b      	b.n	8001638 <HAL_RCC_OscConfig+0xb0>
 8001620:	4b84      	ldr	r3, [pc, #528]	; (8001834 <HAL_RCC_OscConfig+0x2ac>)
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	4a83      	ldr	r2, [pc, #524]	; (8001834 <HAL_RCC_OscConfig+0x2ac>)
 8001626:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800162a:	6013      	str	r3, [r2, #0]
 800162c:	4b81      	ldr	r3, [pc, #516]	; (8001834 <HAL_RCC_OscConfig+0x2ac>)
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	4a80      	ldr	r2, [pc, #512]	; (8001834 <HAL_RCC_OscConfig+0x2ac>)
 8001632:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001636:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	685b      	ldr	r3, [r3, #4]
 800163c:	2b00      	cmp	r3, #0
 800163e:	d013      	beq.n	8001668 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001640:	f7ff fcc2 	bl	8000fc8 <HAL_GetTick>
 8001644:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001646:	e008      	b.n	800165a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001648:	f7ff fcbe 	bl	8000fc8 <HAL_GetTick>
 800164c:	4602      	mov	r2, r0
 800164e:	693b      	ldr	r3, [r7, #16]
 8001650:	1ad3      	subs	r3, r2, r3
 8001652:	2b64      	cmp	r3, #100	; 0x64
 8001654:	d901      	bls.n	800165a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001656:	2303      	movs	r3, #3
 8001658:	e204      	b.n	8001a64 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800165a:	4b76      	ldr	r3, [pc, #472]	; (8001834 <HAL_RCC_OscConfig+0x2ac>)
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001662:	2b00      	cmp	r3, #0
 8001664:	d0f0      	beq.n	8001648 <HAL_RCC_OscConfig+0xc0>
 8001666:	e014      	b.n	8001692 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001668:	f7ff fcae 	bl	8000fc8 <HAL_GetTick>
 800166c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800166e:	e008      	b.n	8001682 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001670:	f7ff fcaa 	bl	8000fc8 <HAL_GetTick>
 8001674:	4602      	mov	r2, r0
 8001676:	693b      	ldr	r3, [r7, #16]
 8001678:	1ad3      	subs	r3, r2, r3
 800167a:	2b64      	cmp	r3, #100	; 0x64
 800167c:	d901      	bls.n	8001682 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800167e:	2303      	movs	r3, #3
 8001680:	e1f0      	b.n	8001a64 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001682:	4b6c      	ldr	r3, [pc, #432]	; (8001834 <HAL_RCC_OscConfig+0x2ac>)
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800168a:	2b00      	cmp	r3, #0
 800168c:	d1f0      	bne.n	8001670 <HAL_RCC_OscConfig+0xe8>
 800168e:	e000      	b.n	8001692 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001690:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	f003 0302 	and.w	r3, r3, #2
 800169a:	2b00      	cmp	r3, #0
 800169c:	d063      	beq.n	8001766 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800169e:	4b65      	ldr	r3, [pc, #404]	; (8001834 <HAL_RCC_OscConfig+0x2ac>)
 80016a0:	689b      	ldr	r3, [r3, #8]
 80016a2:	f003 030c 	and.w	r3, r3, #12
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d00b      	beq.n	80016c2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80016aa:	4b62      	ldr	r3, [pc, #392]	; (8001834 <HAL_RCC_OscConfig+0x2ac>)
 80016ac:	689b      	ldr	r3, [r3, #8]
 80016ae:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80016b2:	2b08      	cmp	r3, #8
 80016b4:	d11c      	bne.n	80016f0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80016b6:	4b5f      	ldr	r3, [pc, #380]	; (8001834 <HAL_RCC_OscConfig+0x2ac>)
 80016b8:	685b      	ldr	r3, [r3, #4]
 80016ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d116      	bne.n	80016f0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80016c2:	4b5c      	ldr	r3, [pc, #368]	; (8001834 <HAL_RCC_OscConfig+0x2ac>)
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	f003 0302 	and.w	r3, r3, #2
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d005      	beq.n	80016da <HAL_RCC_OscConfig+0x152>
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	68db      	ldr	r3, [r3, #12]
 80016d2:	2b01      	cmp	r3, #1
 80016d4:	d001      	beq.n	80016da <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80016d6:	2301      	movs	r3, #1
 80016d8:	e1c4      	b.n	8001a64 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016da:	4b56      	ldr	r3, [pc, #344]	; (8001834 <HAL_RCC_OscConfig+0x2ac>)
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	691b      	ldr	r3, [r3, #16]
 80016e6:	00db      	lsls	r3, r3, #3
 80016e8:	4952      	ldr	r1, [pc, #328]	; (8001834 <HAL_RCC_OscConfig+0x2ac>)
 80016ea:	4313      	orrs	r3, r2
 80016ec:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80016ee:	e03a      	b.n	8001766 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	68db      	ldr	r3, [r3, #12]
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d020      	beq.n	800173a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80016f8:	4b4f      	ldr	r3, [pc, #316]	; (8001838 <HAL_RCC_OscConfig+0x2b0>)
 80016fa:	2201      	movs	r2, #1
 80016fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016fe:	f7ff fc63 	bl	8000fc8 <HAL_GetTick>
 8001702:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001704:	e008      	b.n	8001718 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001706:	f7ff fc5f 	bl	8000fc8 <HAL_GetTick>
 800170a:	4602      	mov	r2, r0
 800170c:	693b      	ldr	r3, [r7, #16]
 800170e:	1ad3      	subs	r3, r2, r3
 8001710:	2b02      	cmp	r3, #2
 8001712:	d901      	bls.n	8001718 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001714:	2303      	movs	r3, #3
 8001716:	e1a5      	b.n	8001a64 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001718:	4b46      	ldr	r3, [pc, #280]	; (8001834 <HAL_RCC_OscConfig+0x2ac>)
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	f003 0302 	and.w	r3, r3, #2
 8001720:	2b00      	cmp	r3, #0
 8001722:	d0f0      	beq.n	8001706 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001724:	4b43      	ldr	r3, [pc, #268]	; (8001834 <HAL_RCC_OscConfig+0x2ac>)
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	691b      	ldr	r3, [r3, #16]
 8001730:	00db      	lsls	r3, r3, #3
 8001732:	4940      	ldr	r1, [pc, #256]	; (8001834 <HAL_RCC_OscConfig+0x2ac>)
 8001734:	4313      	orrs	r3, r2
 8001736:	600b      	str	r3, [r1, #0]
 8001738:	e015      	b.n	8001766 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800173a:	4b3f      	ldr	r3, [pc, #252]	; (8001838 <HAL_RCC_OscConfig+0x2b0>)
 800173c:	2200      	movs	r2, #0
 800173e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001740:	f7ff fc42 	bl	8000fc8 <HAL_GetTick>
 8001744:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001746:	e008      	b.n	800175a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001748:	f7ff fc3e 	bl	8000fc8 <HAL_GetTick>
 800174c:	4602      	mov	r2, r0
 800174e:	693b      	ldr	r3, [r7, #16]
 8001750:	1ad3      	subs	r3, r2, r3
 8001752:	2b02      	cmp	r3, #2
 8001754:	d901      	bls.n	800175a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001756:	2303      	movs	r3, #3
 8001758:	e184      	b.n	8001a64 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800175a:	4b36      	ldr	r3, [pc, #216]	; (8001834 <HAL_RCC_OscConfig+0x2ac>)
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	f003 0302 	and.w	r3, r3, #2
 8001762:	2b00      	cmp	r3, #0
 8001764:	d1f0      	bne.n	8001748 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	f003 0308 	and.w	r3, r3, #8
 800176e:	2b00      	cmp	r3, #0
 8001770:	d030      	beq.n	80017d4 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	695b      	ldr	r3, [r3, #20]
 8001776:	2b00      	cmp	r3, #0
 8001778:	d016      	beq.n	80017a8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800177a:	4b30      	ldr	r3, [pc, #192]	; (800183c <HAL_RCC_OscConfig+0x2b4>)
 800177c:	2201      	movs	r2, #1
 800177e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001780:	f7ff fc22 	bl	8000fc8 <HAL_GetTick>
 8001784:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001786:	e008      	b.n	800179a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001788:	f7ff fc1e 	bl	8000fc8 <HAL_GetTick>
 800178c:	4602      	mov	r2, r0
 800178e:	693b      	ldr	r3, [r7, #16]
 8001790:	1ad3      	subs	r3, r2, r3
 8001792:	2b02      	cmp	r3, #2
 8001794:	d901      	bls.n	800179a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001796:	2303      	movs	r3, #3
 8001798:	e164      	b.n	8001a64 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800179a:	4b26      	ldr	r3, [pc, #152]	; (8001834 <HAL_RCC_OscConfig+0x2ac>)
 800179c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800179e:	f003 0302 	and.w	r3, r3, #2
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d0f0      	beq.n	8001788 <HAL_RCC_OscConfig+0x200>
 80017a6:	e015      	b.n	80017d4 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80017a8:	4b24      	ldr	r3, [pc, #144]	; (800183c <HAL_RCC_OscConfig+0x2b4>)
 80017aa:	2200      	movs	r2, #0
 80017ac:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017ae:	f7ff fc0b 	bl	8000fc8 <HAL_GetTick>
 80017b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80017b4:	e008      	b.n	80017c8 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80017b6:	f7ff fc07 	bl	8000fc8 <HAL_GetTick>
 80017ba:	4602      	mov	r2, r0
 80017bc:	693b      	ldr	r3, [r7, #16]
 80017be:	1ad3      	subs	r3, r2, r3
 80017c0:	2b02      	cmp	r3, #2
 80017c2:	d901      	bls.n	80017c8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80017c4:	2303      	movs	r3, #3
 80017c6:	e14d      	b.n	8001a64 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80017c8:	4b1a      	ldr	r3, [pc, #104]	; (8001834 <HAL_RCC_OscConfig+0x2ac>)
 80017ca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80017cc:	f003 0302 	and.w	r3, r3, #2
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d1f0      	bne.n	80017b6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	f003 0304 	and.w	r3, r3, #4
 80017dc:	2b00      	cmp	r3, #0
 80017de:	f000 80a0 	beq.w	8001922 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80017e2:	2300      	movs	r3, #0
 80017e4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80017e6:	4b13      	ldr	r3, [pc, #76]	; (8001834 <HAL_RCC_OscConfig+0x2ac>)
 80017e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d10f      	bne.n	8001812 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80017f2:	2300      	movs	r3, #0
 80017f4:	60bb      	str	r3, [r7, #8]
 80017f6:	4b0f      	ldr	r3, [pc, #60]	; (8001834 <HAL_RCC_OscConfig+0x2ac>)
 80017f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017fa:	4a0e      	ldr	r2, [pc, #56]	; (8001834 <HAL_RCC_OscConfig+0x2ac>)
 80017fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001800:	6413      	str	r3, [r2, #64]	; 0x40
 8001802:	4b0c      	ldr	r3, [pc, #48]	; (8001834 <HAL_RCC_OscConfig+0x2ac>)
 8001804:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001806:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800180a:	60bb      	str	r3, [r7, #8]
 800180c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800180e:	2301      	movs	r3, #1
 8001810:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001812:	4b0b      	ldr	r3, [pc, #44]	; (8001840 <HAL_RCC_OscConfig+0x2b8>)
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800181a:	2b00      	cmp	r3, #0
 800181c:	d121      	bne.n	8001862 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800181e:	4b08      	ldr	r3, [pc, #32]	; (8001840 <HAL_RCC_OscConfig+0x2b8>)
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	4a07      	ldr	r2, [pc, #28]	; (8001840 <HAL_RCC_OscConfig+0x2b8>)
 8001824:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001828:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800182a:	f7ff fbcd 	bl	8000fc8 <HAL_GetTick>
 800182e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001830:	e011      	b.n	8001856 <HAL_RCC_OscConfig+0x2ce>
 8001832:	bf00      	nop
 8001834:	40023800 	.word	0x40023800
 8001838:	42470000 	.word	0x42470000
 800183c:	42470e80 	.word	0x42470e80
 8001840:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001844:	f7ff fbc0 	bl	8000fc8 <HAL_GetTick>
 8001848:	4602      	mov	r2, r0
 800184a:	693b      	ldr	r3, [r7, #16]
 800184c:	1ad3      	subs	r3, r2, r3
 800184e:	2b02      	cmp	r3, #2
 8001850:	d901      	bls.n	8001856 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8001852:	2303      	movs	r3, #3
 8001854:	e106      	b.n	8001a64 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001856:	4b85      	ldr	r3, [pc, #532]	; (8001a6c <HAL_RCC_OscConfig+0x4e4>)
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800185e:	2b00      	cmp	r3, #0
 8001860:	d0f0      	beq.n	8001844 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	689b      	ldr	r3, [r3, #8]
 8001866:	2b01      	cmp	r3, #1
 8001868:	d106      	bne.n	8001878 <HAL_RCC_OscConfig+0x2f0>
 800186a:	4b81      	ldr	r3, [pc, #516]	; (8001a70 <HAL_RCC_OscConfig+0x4e8>)
 800186c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800186e:	4a80      	ldr	r2, [pc, #512]	; (8001a70 <HAL_RCC_OscConfig+0x4e8>)
 8001870:	f043 0301 	orr.w	r3, r3, #1
 8001874:	6713      	str	r3, [r2, #112]	; 0x70
 8001876:	e01c      	b.n	80018b2 <HAL_RCC_OscConfig+0x32a>
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	689b      	ldr	r3, [r3, #8]
 800187c:	2b05      	cmp	r3, #5
 800187e:	d10c      	bne.n	800189a <HAL_RCC_OscConfig+0x312>
 8001880:	4b7b      	ldr	r3, [pc, #492]	; (8001a70 <HAL_RCC_OscConfig+0x4e8>)
 8001882:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001884:	4a7a      	ldr	r2, [pc, #488]	; (8001a70 <HAL_RCC_OscConfig+0x4e8>)
 8001886:	f043 0304 	orr.w	r3, r3, #4
 800188a:	6713      	str	r3, [r2, #112]	; 0x70
 800188c:	4b78      	ldr	r3, [pc, #480]	; (8001a70 <HAL_RCC_OscConfig+0x4e8>)
 800188e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001890:	4a77      	ldr	r2, [pc, #476]	; (8001a70 <HAL_RCC_OscConfig+0x4e8>)
 8001892:	f043 0301 	orr.w	r3, r3, #1
 8001896:	6713      	str	r3, [r2, #112]	; 0x70
 8001898:	e00b      	b.n	80018b2 <HAL_RCC_OscConfig+0x32a>
 800189a:	4b75      	ldr	r3, [pc, #468]	; (8001a70 <HAL_RCC_OscConfig+0x4e8>)
 800189c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800189e:	4a74      	ldr	r2, [pc, #464]	; (8001a70 <HAL_RCC_OscConfig+0x4e8>)
 80018a0:	f023 0301 	bic.w	r3, r3, #1
 80018a4:	6713      	str	r3, [r2, #112]	; 0x70
 80018a6:	4b72      	ldr	r3, [pc, #456]	; (8001a70 <HAL_RCC_OscConfig+0x4e8>)
 80018a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018aa:	4a71      	ldr	r2, [pc, #452]	; (8001a70 <HAL_RCC_OscConfig+0x4e8>)
 80018ac:	f023 0304 	bic.w	r3, r3, #4
 80018b0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	689b      	ldr	r3, [r3, #8]
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d015      	beq.n	80018e6 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018ba:	f7ff fb85 	bl	8000fc8 <HAL_GetTick>
 80018be:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80018c0:	e00a      	b.n	80018d8 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80018c2:	f7ff fb81 	bl	8000fc8 <HAL_GetTick>
 80018c6:	4602      	mov	r2, r0
 80018c8:	693b      	ldr	r3, [r7, #16]
 80018ca:	1ad3      	subs	r3, r2, r3
 80018cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80018d0:	4293      	cmp	r3, r2
 80018d2:	d901      	bls.n	80018d8 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80018d4:	2303      	movs	r3, #3
 80018d6:	e0c5      	b.n	8001a64 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80018d8:	4b65      	ldr	r3, [pc, #404]	; (8001a70 <HAL_RCC_OscConfig+0x4e8>)
 80018da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018dc:	f003 0302 	and.w	r3, r3, #2
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d0ee      	beq.n	80018c2 <HAL_RCC_OscConfig+0x33a>
 80018e4:	e014      	b.n	8001910 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018e6:	f7ff fb6f 	bl	8000fc8 <HAL_GetTick>
 80018ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80018ec:	e00a      	b.n	8001904 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80018ee:	f7ff fb6b 	bl	8000fc8 <HAL_GetTick>
 80018f2:	4602      	mov	r2, r0
 80018f4:	693b      	ldr	r3, [r7, #16]
 80018f6:	1ad3      	subs	r3, r2, r3
 80018f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80018fc:	4293      	cmp	r3, r2
 80018fe:	d901      	bls.n	8001904 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001900:	2303      	movs	r3, #3
 8001902:	e0af      	b.n	8001a64 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001904:	4b5a      	ldr	r3, [pc, #360]	; (8001a70 <HAL_RCC_OscConfig+0x4e8>)
 8001906:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001908:	f003 0302 	and.w	r3, r3, #2
 800190c:	2b00      	cmp	r3, #0
 800190e:	d1ee      	bne.n	80018ee <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001910:	7dfb      	ldrb	r3, [r7, #23]
 8001912:	2b01      	cmp	r3, #1
 8001914:	d105      	bne.n	8001922 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001916:	4b56      	ldr	r3, [pc, #344]	; (8001a70 <HAL_RCC_OscConfig+0x4e8>)
 8001918:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800191a:	4a55      	ldr	r2, [pc, #340]	; (8001a70 <HAL_RCC_OscConfig+0x4e8>)
 800191c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001920:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	699b      	ldr	r3, [r3, #24]
 8001926:	2b00      	cmp	r3, #0
 8001928:	f000 809b 	beq.w	8001a62 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800192c:	4b50      	ldr	r3, [pc, #320]	; (8001a70 <HAL_RCC_OscConfig+0x4e8>)
 800192e:	689b      	ldr	r3, [r3, #8]
 8001930:	f003 030c 	and.w	r3, r3, #12
 8001934:	2b08      	cmp	r3, #8
 8001936:	d05c      	beq.n	80019f2 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	699b      	ldr	r3, [r3, #24]
 800193c:	2b02      	cmp	r3, #2
 800193e:	d141      	bne.n	80019c4 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001940:	4b4c      	ldr	r3, [pc, #304]	; (8001a74 <HAL_RCC_OscConfig+0x4ec>)
 8001942:	2200      	movs	r2, #0
 8001944:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001946:	f7ff fb3f 	bl	8000fc8 <HAL_GetTick>
 800194a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800194c:	e008      	b.n	8001960 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800194e:	f7ff fb3b 	bl	8000fc8 <HAL_GetTick>
 8001952:	4602      	mov	r2, r0
 8001954:	693b      	ldr	r3, [r7, #16]
 8001956:	1ad3      	subs	r3, r2, r3
 8001958:	2b02      	cmp	r3, #2
 800195a:	d901      	bls.n	8001960 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800195c:	2303      	movs	r3, #3
 800195e:	e081      	b.n	8001a64 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001960:	4b43      	ldr	r3, [pc, #268]	; (8001a70 <HAL_RCC_OscConfig+0x4e8>)
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001968:	2b00      	cmp	r3, #0
 800196a:	d1f0      	bne.n	800194e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	69da      	ldr	r2, [r3, #28]
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	6a1b      	ldr	r3, [r3, #32]
 8001974:	431a      	orrs	r2, r3
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800197a:	019b      	lsls	r3, r3, #6
 800197c:	431a      	orrs	r2, r3
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001982:	085b      	lsrs	r3, r3, #1
 8001984:	3b01      	subs	r3, #1
 8001986:	041b      	lsls	r3, r3, #16
 8001988:	431a      	orrs	r2, r3
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800198e:	061b      	lsls	r3, r3, #24
 8001990:	4937      	ldr	r1, [pc, #220]	; (8001a70 <HAL_RCC_OscConfig+0x4e8>)
 8001992:	4313      	orrs	r3, r2
 8001994:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001996:	4b37      	ldr	r3, [pc, #220]	; (8001a74 <HAL_RCC_OscConfig+0x4ec>)
 8001998:	2201      	movs	r2, #1
 800199a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800199c:	f7ff fb14 	bl	8000fc8 <HAL_GetTick>
 80019a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80019a2:	e008      	b.n	80019b6 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80019a4:	f7ff fb10 	bl	8000fc8 <HAL_GetTick>
 80019a8:	4602      	mov	r2, r0
 80019aa:	693b      	ldr	r3, [r7, #16]
 80019ac:	1ad3      	subs	r3, r2, r3
 80019ae:	2b02      	cmp	r3, #2
 80019b0:	d901      	bls.n	80019b6 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80019b2:	2303      	movs	r3, #3
 80019b4:	e056      	b.n	8001a64 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80019b6:	4b2e      	ldr	r3, [pc, #184]	; (8001a70 <HAL_RCC_OscConfig+0x4e8>)
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d0f0      	beq.n	80019a4 <HAL_RCC_OscConfig+0x41c>
 80019c2:	e04e      	b.n	8001a62 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019c4:	4b2b      	ldr	r3, [pc, #172]	; (8001a74 <HAL_RCC_OscConfig+0x4ec>)
 80019c6:	2200      	movs	r2, #0
 80019c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019ca:	f7ff fafd 	bl	8000fc8 <HAL_GetTick>
 80019ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80019d0:	e008      	b.n	80019e4 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80019d2:	f7ff faf9 	bl	8000fc8 <HAL_GetTick>
 80019d6:	4602      	mov	r2, r0
 80019d8:	693b      	ldr	r3, [r7, #16]
 80019da:	1ad3      	subs	r3, r2, r3
 80019dc:	2b02      	cmp	r3, #2
 80019de:	d901      	bls.n	80019e4 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80019e0:	2303      	movs	r3, #3
 80019e2:	e03f      	b.n	8001a64 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80019e4:	4b22      	ldr	r3, [pc, #136]	; (8001a70 <HAL_RCC_OscConfig+0x4e8>)
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d1f0      	bne.n	80019d2 <HAL_RCC_OscConfig+0x44a>
 80019f0:	e037      	b.n	8001a62 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	699b      	ldr	r3, [r3, #24]
 80019f6:	2b01      	cmp	r3, #1
 80019f8:	d101      	bne.n	80019fe <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80019fa:	2301      	movs	r3, #1
 80019fc:	e032      	b.n	8001a64 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80019fe:	4b1c      	ldr	r3, [pc, #112]	; (8001a70 <HAL_RCC_OscConfig+0x4e8>)
 8001a00:	685b      	ldr	r3, [r3, #4]
 8001a02:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	699b      	ldr	r3, [r3, #24]
 8001a08:	2b01      	cmp	r3, #1
 8001a0a:	d028      	beq.n	8001a5e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001a16:	429a      	cmp	r2, r3
 8001a18:	d121      	bne.n	8001a5e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a24:	429a      	cmp	r2, r3
 8001a26:	d11a      	bne.n	8001a5e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001a28:	68fa      	ldr	r2, [r7, #12]
 8001a2a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001a2e:	4013      	ands	r3, r2
 8001a30:	687a      	ldr	r2, [r7, #4]
 8001a32:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001a34:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001a36:	4293      	cmp	r3, r2
 8001a38:	d111      	bne.n	8001a5e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a44:	085b      	lsrs	r3, r3, #1
 8001a46:	3b01      	subs	r3, #1
 8001a48:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001a4a:	429a      	cmp	r2, r3
 8001a4c:	d107      	bne.n	8001a5e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a58:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001a5a:	429a      	cmp	r2, r3
 8001a5c:	d001      	beq.n	8001a62 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8001a5e:	2301      	movs	r3, #1
 8001a60:	e000      	b.n	8001a64 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8001a62:	2300      	movs	r3, #0
}
 8001a64:	4618      	mov	r0, r3
 8001a66:	3718      	adds	r7, #24
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	bd80      	pop	{r7, pc}
 8001a6c:	40007000 	.word	0x40007000
 8001a70:	40023800 	.word	0x40023800
 8001a74:	42470060 	.word	0x42470060

08001a78 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b084      	sub	sp, #16
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
 8001a80:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d101      	bne.n	8001a8c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001a88:	2301      	movs	r3, #1
 8001a8a:	e0cc      	b.n	8001c26 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001a8c:	4b68      	ldr	r3, [pc, #416]	; (8001c30 <HAL_RCC_ClockConfig+0x1b8>)
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	f003 0307 	and.w	r3, r3, #7
 8001a94:	683a      	ldr	r2, [r7, #0]
 8001a96:	429a      	cmp	r2, r3
 8001a98:	d90c      	bls.n	8001ab4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a9a:	4b65      	ldr	r3, [pc, #404]	; (8001c30 <HAL_RCC_ClockConfig+0x1b8>)
 8001a9c:	683a      	ldr	r2, [r7, #0]
 8001a9e:	b2d2      	uxtb	r2, r2
 8001aa0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001aa2:	4b63      	ldr	r3, [pc, #396]	; (8001c30 <HAL_RCC_ClockConfig+0x1b8>)
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	f003 0307 	and.w	r3, r3, #7
 8001aaa:	683a      	ldr	r2, [r7, #0]
 8001aac:	429a      	cmp	r2, r3
 8001aae:	d001      	beq.n	8001ab4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001ab0:	2301      	movs	r3, #1
 8001ab2:	e0b8      	b.n	8001c26 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	f003 0302 	and.w	r3, r3, #2
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d020      	beq.n	8001b02 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	f003 0304 	and.w	r3, r3, #4
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d005      	beq.n	8001ad8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001acc:	4b59      	ldr	r3, [pc, #356]	; (8001c34 <HAL_RCC_ClockConfig+0x1bc>)
 8001ace:	689b      	ldr	r3, [r3, #8]
 8001ad0:	4a58      	ldr	r2, [pc, #352]	; (8001c34 <HAL_RCC_ClockConfig+0x1bc>)
 8001ad2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001ad6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	f003 0308 	and.w	r3, r3, #8
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d005      	beq.n	8001af0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001ae4:	4b53      	ldr	r3, [pc, #332]	; (8001c34 <HAL_RCC_ClockConfig+0x1bc>)
 8001ae6:	689b      	ldr	r3, [r3, #8]
 8001ae8:	4a52      	ldr	r2, [pc, #328]	; (8001c34 <HAL_RCC_ClockConfig+0x1bc>)
 8001aea:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001aee:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001af0:	4b50      	ldr	r3, [pc, #320]	; (8001c34 <HAL_RCC_ClockConfig+0x1bc>)
 8001af2:	689b      	ldr	r3, [r3, #8]
 8001af4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	689b      	ldr	r3, [r3, #8]
 8001afc:	494d      	ldr	r1, [pc, #308]	; (8001c34 <HAL_RCC_ClockConfig+0x1bc>)
 8001afe:	4313      	orrs	r3, r2
 8001b00:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f003 0301 	and.w	r3, r3, #1
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d044      	beq.n	8001b98 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	685b      	ldr	r3, [r3, #4]
 8001b12:	2b01      	cmp	r3, #1
 8001b14:	d107      	bne.n	8001b26 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b16:	4b47      	ldr	r3, [pc, #284]	; (8001c34 <HAL_RCC_ClockConfig+0x1bc>)
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d119      	bne.n	8001b56 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b22:	2301      	movs	r3, #1
 8001b24:	e07f      	b.n	8001c26 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	685b      	ldr	r3, [r3, #4]
 8001b2a:	2b02      	cmp	r3, #2
 8001b2c:	d003      	beq.n	8001b36 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001b32:	2b03      	cmp	r3, #3
 8001b34:	d107      	bne.n	8001b46 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b36:	4b3f      	ldr	r3, [pc, #252]	; (8001c34 <HAL_RCC_ClockConfig+0x1bc>)
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d109      	bne.n	8001b56 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b42:	2301      	movs	r3, #1
 8001b44:	e06f      	b.n	8001c26 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b46:	4b3b      	ldr	r3, [pc, #236]	; (8001c34 <HAL_RCC_ClockConfig+0x1bc>)
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f003 0302 	and.w	r3, r3, #2
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d101      	bne.n	8001b56 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b52:	2301      	movs	r3, #1
 8001b54:	e067      	b.n	8001c26 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001b56:	4b37      	ldr	r3, [pc, #220]	; (8001c34 <HAL_RCC_ClockConfig+0x1bc>)
 8001b58:	689b      	ldr	r3, [r3, #8]
 8001b5a:	f023 0203 	bic.w	r2, r3, #3
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	685b      	ldr	r3, [r3, #4]
 8001b62:	4934      	ldr	r1, [pc, #208]	; (8001c34 <HAL_RCC_ClockConfig+0x1bc>)
 8001b64:	4313      	orrs	r3, r2
 8001b66:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001b68:	f7ff fa2e 	bl	8000fc8 <HAL_GetTick>
 8001b6c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b6e:	e00a      	b.n	8001b86 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b70:	f7ff fa2a 	bl	8000fc8 <HAL_GetTick>
 8001b74:	4602      	mov	r2, r0
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	1ad3      	subs	r3, r2, r3
 8001b7a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b7e:	4293      	cmp	r3, r2
 8001b80:	d901      	bls.n	8001b86 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001b82:	2303      	movs	r3, #3
 8001b84:	e04f      	b.n	8001c26 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b86:	4b2b      	ldr	r3, [pc, #172]	; (8001c34 <HAL_RCC_ClockConfig+0x1bc>)
 8001b88:	689b      	ldr	r3, [r3, #8]
 8001b8a:	f003 020c 	and.w	r2, r3, #12
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	685b      	ldr	r3, [r3, #4]
 8001b92:	009b      	lsls	r3, r3, #2
 8001b94:	429a      	cmp	r2, r3
 8001b96:	d1eb      	bne.n	8001b70 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001b98:	4b25      	ldr	r3, [pc, #148]	; (8001c30 <HAL_RCC_ClockConfig+0x1b8>)
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	f003 0307 	and.w	r3, r3, #7
 8001ba0:	683a      	ldr	r2, [r7, #0]
 8001ba2:	429a      	cmp	r2, r3
 8001ba4:	d20c      	bcs.n	8001bc0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ba6:	4b22      	ldr	r3, [pc, #136]	; (8001c30 <HAL_RCC_ClockConfig+0x1b8>)
 8001ba8:	683a      	ldr	r2, [r7, #0]
 8001baa:	b2d2      	uxtb	r2, r2
 8001bac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bae:	4b20      	ldr	r3, [pc, #128]	; (8001c30 <HAL_RCC_ClockConfig+0x1b8>)
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	f003 0307 	and.w	r3, r3, #7
 8001bb6:	683a      	ldr	r2, [r7, #0]
 8001bb8:	429a      	cmp	r2, r3
 8001bba:	d001      	beq.n	8001bc0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001bbc:	2301      	movs	r3, #1
 8001bbe:	e032      	b.n	8001c26 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	f003 0304 	and.w	r3, r3, #4
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d008      	beq.n	8001bde <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001bcc:	4b19      	ldr	r3, [pc, #100]	; (8001c34 <HAL_RCC_ClockConfig+0x1bc>)
 8001bce:	689b      	ldr	r3, [r3, #8]
 8001bd0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	68db      	ldr	r3, [r3, #12]
 8001bd8:	4916      	ldr	r1, [pc, #88]	; (8001c34 <HAL_RCC_ClockConfig+0x1bc>)
 8001bda:	4313      	orrs	r3, r2
 8001bdc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f003 0308 	and.w	r3, r3, #8
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d009      	beq.n	8001bfe <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001bea:	4b12      	ldr	r3, [pc, #72]	; (8001c34 <HAL_RCC_ClockConfig+0x1bc>)
 8001bec:	689b      	ldr	r3, [r3, #8]
 8001bee:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	691b      	ldr	r3, [r3, #16]
 8001bf6:	00db      	lsls	r3, r3, #3
 8001bf8:	490e      	ldr	r1, [pc, #56]	; (8001c34 <HAL_RCC_ClockConfig+0x1bc>)
 8001bfa:	4313      	orrs	r3, r2
 8001bfc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001bfe:	f000 f821 	bl	8001c44 <HAL_RCC_GetSysClockFreq>
 8001c02:	4602      	mov	r2, r0
 8001c04:	4b0b      	ldr	r3, [pc, #44]	; (8001c34 <HAL_RCC_ClockConfig+0x1bc>)
 8001c06:	689b      	ldr	r3, [r3, #8]
 8001c08:	091b      	lsrs	r3, r3, #4
 8001c0a:	f003 030f 	and.w	r3, r3, #15
 8001c0e:	490a      	ldr	r1, [pc, #40]	; (8001c38 <HAL_RCC_ClockConfig+0x1c0>)
 8001c10:	5ccb      	ldrb	r3, [r1, r3]
 8001c12:	fa22 f303 	lsr.w	r3, r2, r3
 8001c16:	4a09      	ldr	r2, [pc, #36]	; (8001c3c <HAL_RCC_ClockConfig+0x1c4>)
 8001c18:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001c1a:	4b09      	ldr	r3, [pc, #36]	; (8001c40 <HAL_RCC_ClockConfig+0x1c8>)
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	4618      	mov	r0, r3
 8001c20:	f7ff f88a 	bl	8000d38 <HAL_InitTick>

  return HAL_OK;
 8001c24:	2300      	movs	r3, #0
}
 8001c26:	4618      	mov	r0, r3
 8001c28:	3710      	adds	r7, #16
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	bd80      	pop	{r7, pc}
 8001c2e:	bf00      	nop
 8001c30:	40023c00 	.word	0x40023c00
 8001c34:	40023800 	.word	0x40023800
 8001c38:	08004434 	.word	0x08004434
 8001c3c:	20000004 	.word	0x20000004
 8001c40:	20000008 	.word	0x20000008

08001c44 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c44:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001c48:	b084      	sub	sp, #16
 8001c4a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	607b      	str	r3, [r7, #4]
 8001c50:	2300      	movs	r3, #0
 8001c52:	60fb      	str	r3, [r7, #12]
 8001c54:	2300      	movs	r3, #0
 8001c56:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8001c58:	2300      	movs	r3, #0
 8001c5a:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001c5c:	4b67      	ldr	r3, [pc, #412]	; (8001dfc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001c5e:	689b      	ldr	r3, [r3, #8]
 8001c60:	f003 030c 	and.w	r3, r3, #12
 8001c64:	2b08      	cmp	r3, #8
 8001c66:	d00d      	beq.n	8001c84 <HAL_RCC_GetSysClockFreq+0x40>
 8001c68:	2b08      	cmp	r3, #8
 8001c6a:	f200 80bd 	bhi.w	8001de8 <HAL_RCC_GetSysClockFreq+0x1a4>
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d002      	beq.n	8001c78 <HAL_RCC_GetSysClockFreq+0x34>
 8001c72:	2b04      	cmp	r3, #4
 8001c74:	d003      	beq.n	8001c7e <HAL_RCC_GetSysClockFreq+0x3a>
 8001c76:	e0b7      	b.n	8001de8 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001c78:	4b61      	ldr	r3, [pc, #388]	; (8001e00 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8001c7a:	60bb      	str	r3, [r7, #8]
       break;
 8001c7c:	e0b7      	b.n	8001dee <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001c7e:	4b61      	ldr	r3, [pc, #388]	; (8001e04 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8001c80:	60bb      	str	r3, [r7, #8]
      break;
 8001c82:	e0b4      	b.n	8001dee <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001c84:	4b5d      	ldr	r3, [pc, #372]	; (8001dfc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001c86:	685b      	ldr	r3, [r3, #4]
 8001c88:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001c8c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001c8e:	4b5b      	ldr	r3, [pc, #364]	; (8001dfc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001c90:	685b      	ldr	r3, [r3, #4]
 8001c92:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d04d      	beq.n	8001d36 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c9a:	4b58      	ldr	r3, [pc, #352]	; (8001dfc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001c9c:	685b      	ldr	r3, [r3, #4]
 8001c9e:	099b      	lsrs	r3, r3, #6
 8001ca0:	461a      	mov	r2, r3
 8001ca2:	f04f 0300 	mov.w	r3, #0
 8001ca6:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001caa:	f04f 0100 	mov.w	r1, #0
 8001cae:	ea02 0800 	and.w	r8, r2, r0
 8001cb2:	ea03 0901 	and.w	r9, r3, r1
 8001cb6:	4640      	mov	r0, r8
 8001cb8:	4649      	mov	r1, r9
 8001cba:	f04f 0200 	mov.w	r2, #0
 8001cbe:	f04f 0300 	mov.w	r3, #0
 8001cc2:	014b      	lsls	r3, r1, #5
 8001cc4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001cc8:	0142      	lsls	r2, r0, #5
 8001cca:	4610      	mov	r0, r2
 8001ccc:	4619      	mov	r1, r3
 8001cce:	ebb0 0008 	subs.w	r0, r0, r8
 8001cd2:	eb61 0109 	sbc.w	r1, r1, r9
 8001cd6:	f04f 0200 	mov.w	r2, #0
 8001cda:	f04f 0300 	mov.w	r3, #0
 8001cde:	018b      	lsls	r3, r1, #6
 8001ce0:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001ce4:	0182      	lsls	r2, r0, #6
 8001ce6:	1a12      	subs	r2, r2, r0
 8001ce8:	eb63 0301 	sbc.w	r3, r3, r1
 8001cec:	f04f 0000 	mov.w	r0, #0
 8001cf0:	f04f 0100 	mov.w	r1, #0
 8001cf4:	00d9      	lsls	r1, r3, #3
 8001cf6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001cfa:	00d0      	lsls	r0, r2, #3
 8001cfc:	4602      	mov	r2, r0
 8001cfe:	460b      	mov	r3, r1
 8001d00:	eb12 0208 	adds.w	r2, r2, r8
 8001d04:	eb43 0309 	adc.w	r3, r3, r9
 8001d08:	f04f 0000 	mov.w	r0, #0
 8001d0c:	f04f 0100 	mov.w	r1, #0
 8001d10:	0259      	lsls	r1, r3, #9
 8001d12:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8001d16:	0250      	lsls	r0, r2, #9
 8001d18:	4602      	mov	r2, r0
 8001d1a:	460b      	mov	r3, r1
 8001d1c:	4610      	mov	r0, r2
 8001d1e:	4619      	mov	r1, r3
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	461a      	mov	r2, r3
 8001d24:	f04f 0300 	mov.w	r3, #0
 8001d28:	f7fe faaa 	bl	8000280 <__aeabi_uldivmod>
 8001d2c:	4602      	mov	r2, r0
 8001d2e:	460b      	mov	r3, r1
 8001d30:	4613      	mov	r3, r2
 8001d32:	60fb      	str	r3, [r7, #12]
 8001d34:	e04a      	b.n	8001dcc <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001d36:	4b31      	ldr	r3, [pc, #196]	; (8001dfc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001d38:	685b      	ldr	r3, [r3, #4]
 8001d3a:	099b      	lsrs	r3, r3, #6
 8001d3c:	461a      	mov	r2, r3
 8001d3e:	f04f 0300 	mov.w	r3, #0
 8001d42:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001d46:	f04f 0100 	mov.w	r1, #0
 8001d4a:	ea02 0400 	and.w	r4, r2, r0
 8001d4e:	ea03 0501 	and.w	r5, r3, r1
 8001d52:	4620      	mov	r0, r4
 8001d54:	4629      	mov	r1, r5
 8001d56:	f04f 0200 	mov.w	r2, #0
 8001d5a:	f04f 0300 	mov.w	r3, #0
 8001d5e:	014b      	lsls	r3, r1, #5
 8001d60:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001d64:	0142      	lsls	r2, r0, #5
 8001d66:	4610      	mov	r0, r2
 8001d68:	4619      	mov	r1, r3
 8001d6a:	1b00      	subs	r0, r0, r4
 8001d6c:	eb61 0105 	sbc.w	r1, r1, r5
 8001d70:	f04f 0200 	mov.w	r2, #0
 8001d74:	f04f 0300 	mov.w	r3, #0
 8001d78:	018b      	lsls	r3, r1, #6
 8001d7a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001d7e:	0182      	lsls	r2, r0, #6
 8001d80:	1a12      	subs	r2, r2, r0
 8001d82:	eb63 0301 	sbc.w	r3, r3, r1
 8001d86:	f04f 0000 	mov.w	r0, #0
 8001d8a:	f04f 0100 	mov.w	r1, #0
 8001d8e:	00d9      	lsls	r1, r3, #3
 8001d90:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001d94:	00d0      	lsls	r0, r2, #3
 8001d96:	4602      	mov	r2, r0
 8001d98:	460b      	mov	r3, r1
 8001d9a:	1912      	adds	r2, r2, r4
 8001d9c:	eb45 0303 	adc.w	r3, r5, r3
 8001da0:	f04f 0000 	mov.w	r0, #0
 8001da4:	f04f 0100 	mov.w	r1, #0
 8001da8:	0299      	lsls	r1, r3, #10
 8001daa:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8001dae:	0290      	lsls	r0, r2, #10
 8001db0:	4602      	mov	r2, r0
 8001db2:	460b      	mov	r3, r1
 8001db4:	4610      	mov	r0, r2
 8001db6:	4619      	mov	r1, r3
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	461a      	mov	r2, r3
 8001dbc:	f04f 0300 	mov.w	r3, #0
 8001dc0:	f7fe fa5e 	bl	8000280 <__aeabi_uldivmod>
 8001dc4:	4602      	mov	r2, r0
 8001dc6:	460b      	mov	r3, r1
 8001dc8:	4613      	mov	r3, r2
 8001dca:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001dcc:	4b0b      	ldr	r3, [pc, #44]	; (8001dfc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001dce:	685b      	ldr	r3, [r3, #4]
 8001dd0:	0c1b      	lsrs	r3, r3, #16
 8001dd2:	f003 0303 	and.w	r3, r3, #3
 8001dd6:	3301      	adds	r3, #1
 8001dd8:	005b      	lsls	r3, r3, #1
 8001dda:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001ddc:	68fa      	ldr	r2, [r7, #12]
 8001dde:	683b      	ldr	r3, [r7, #0]
 8001de0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001de4:	60bb      	str	r3, [r7, #8]
      break;
 8001de6:	e002      	b.n	8001dee <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001de8:	4b05      	ldr	r3, [pc, #20]	; (8001e00 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8001dea:	60bb      	str	r3, [r7, #8]
      break;
 8001dec:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001dee:	68bb      	ldr	r3, [r7, #8]
}
 8001df0:	4618      	mov	r0, r3
 8001df2:	3710      	adds	r7, #16
 8001df4:	46bd      	mov	sp, r7
 8001df6:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001dfa:	bf00      	nop
 8001dfc:	40023800 	.word	0x40023800
 8001e00:	00f42400 	.word	0x00f42400
 8001e04:	007a1200 	.word	0x007a1200

08001e08 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001e08:	b480      	push	{r7}
 8001e0a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001e0c:	4b03      	ldr	r3, [pc, #12]	; (8001e1c <HAL_RCC_GetHCLKFreq+0x14>)
 8001e0e:	681b      	ldr	r3, [r3, #0]
}
 8001e10:	4618      	mov	r0, r3
 8001e12:	46bd      	mov	sp, r7
 8001e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e18:	4770      	bx	lr
 8001e1a:	bf00      	nop
 8001e1c:	20000004 	.word	0x20000004

08001e20 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001e24:	f7ff fff0 	bl	8001e08 <HAL_RCC_GetHCLKFreq>
 8001e28:	4602      	mov	r2, r0
 8001e2a:	4b05      	ldr	r3, [pc, #20]	; (8001e40 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001e2c:	689b      	ldr	r3, [r3, #8]
 8001e2e:	0a9b      	lsrs	r3, r3, #10
 8001e30:	f003 0307 	and.w	r3, r3, #7
 8001e34:	4903      	ldr	r1, [pc, #12]	; (8001e44 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001e36:	5ccb      	ldrb	r3, [r1, r3]
 8001e38:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	bd80      	pop	{r7, pc}
 8001e40:	40023800 	.word	0x40023800
 8001e44:	08004444 	.word	0x08004444

08001e48 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001e4c:	f7ff ffdc 	bl	8001e08 <HAL_RCC_GetHCLKFreq>
 8001e50:	4602      	mov	r2, r0
 8001e52:	4b05      	ldr	r3, [pc, #20]	; (8001e68 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001e54:	689b      	ldr	r3, [r3, #8]
 8001e56:	0b5b      	lsrs	r3, r3, #13
 8001e58:	f003 0307 	and.w	r3, r3, #7
 8001e5c:	4903      	ldr	r1, [pc, #12]	; (8001e6c <HAL_RCC_GetPCLK2Freq+0x24>)
 8001e5e:	5ccb      	ldrb	r3, [r1, r3]
 8001e60:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e64:	4618      	mov	r0, r3
 8001e66:	bd80      	pop	{r7, pc}
 8001e68:	40023800 	.word	0x40023800
 8001e6c:	08004444 	.word	0x08004444

08001e70 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001e70:	b480      	push	{r7}
 8001e72:	b083      	sub	sp, #12
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]
 8001e78:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	220f      	movs	r2, #15
 8001e7e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001e80:	4b12      	ldr	r3, [pc, #72]	; (8001ecc <HAL_RCC_GetClockConfig+0x5c>)
 8001e82:	689b      	ldr	r3, [r3, #8]
 8001e84:	f003 0203 	and.w	r2, r3, #3
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001e8c:	4b0f      	ldr	r3, [pc, #60]	; (8001ecc <HAL_RCC_GetClockConfig+0x5c>)
 8001e8e:	689b      	ldr	r3, [r3, #8]
 8001e90:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001e98:	4b0c      	ldr	r3, [pc, #48]	; (8001ecc <HAL_RCC_GetClockConfig+0x5c>)
 8001e9a:	689b      	ldr	r3, [r3, #8]
 8001e9c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001ea4:	4b09      	ldr	r3, [pc, #36]	; (8001ecc <HAL_RCC_GetClockConfig+0x5c>)
 8001ea6:	689b      	ldr	r3, [r3, #8]
 8001ea8:	08db      	lsrs	r3, r3, #3
 8001eaa:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001eb2:	4b07      	ldr	r3, [pc, #28]	; (8001ed0 <HAL_RCC_GetClockConfig+0x60>)
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f003 0207 	and.w	r2, r3, #7
 8001eba:	683b      	ldr	r3, [r7, #0]
 8001ebc:	601a      	str	r2, [r3, #0]
}
 8001ebe:	bf00      	nop
 8001ec0:	370c      	adds	r7, #12
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec8:	4770      	bx	lr
 8001eca:	bf00      	nop
 8001ecc:	40023800 	.word	0x40023800
 8001ed0:	40023c00 	.word	0x40023c00

08001ed4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	b082      	sub	sp, #8
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d101      	bne.n	8001ee6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001ee2:	2301      	movs	r3, #1
 8001ee4:	e041      	b.n	8001f6a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001eec:	b2db      	uxtb	r3, r3
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d106      	bne.n	8001f00 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001efa:	6878      	ldr	r0, [r7, #4]
 8001efc:	f7fe fe78 	bl	8000bf0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	2202      	movs	r2, #2
 8001f04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681a      	ldr	r2, [r3, #0]
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	3304      	adds	r3, #4
 8001f10:	4619      	mov	r1, r3
 8001f12:	4610      	mov	r0, r2
 8001f14:	f000 fa96 	bl	8002444 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	2201      	movs	r2, #1
 8001f1c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	2201      	movs	r2, #1
 8001f24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	2201      	movs	r2, #1
 8001f2c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	2201      	movs	r2, #1
 8001f34:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	2201      	movs	r2, #1
 8001f3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	2201      	movs	r2, #1
 8001f44:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	2201      	movs	r2, #1
 8001f4c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	2201      	movs	r2, #1
 8001f54:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	2201      	movs	r2, #1
 8001f5c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	2201      	movs	r2, #1
 8001f64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001f68:	2300      	movs	r3, #0
}
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	3708      	adds	r7, #8
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	bd80      	pop	{r7, pc}
	...

08001f74 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001f74:	b480      	push	{r7}
 8001f76:	b085      	sub	sp, #20
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f82:	b2db      	uxtb	r3, r3
 8001f84:	2b01      	cmp	r3, #1
 8001f86:	d001      	beq.n	8001f8c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001f88:	2301      	movs	r3, #1
 8001f8a:	e04e      	b.n	800202a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	2202      	movs	r2, #2
 8001f90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	68da      	ldr	r2, [r3, #12]
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f042 0201 	orr.w	r2, r2, #1
 8001fa2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	4a23      	ldr	r2, [pc, #140]	; (8002038 <HAL_TIM_Base_Start_IT+0xc4>)
 8001faa:	4293      	cmp	r3, r2
 8001fac:	d022      	beq.n	8001ff4 <HAL_TIM_Base_Start_IT+0x80>
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001fb6:	d01d      	beq.n	8001ff4 <HAL_TIM_Base_Start_IT+0x80>
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	4a1f      	ldr	r2, [pc, #124]	; (800203c <HAL_TIM_Base_Start_IT+0xc8>)
 8001fbe:	4293      	cmp	r3, r2
 8001fc0:	d018      	beq.n	8001ff4 <HAL_TIM_Base_Start_IT+0x80>
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	4a1e      	ldr	r2, [pc, #120]	; (8002040 <HAL_TIM_Base_Start_IT+0xcc>)
 8001fc8:	4293      	cmp	r3, r2
 8001fca:	d013      	beq.n	8001ff4 <HAL_TIM_Base_Start_IT+0x80>
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	4a1c      	ldr	r2, [pc, #112]	; (8002044 <HAL_TIM_Base_Start_IT+0xd0>)
 8001fd2:	4293      	cmp	r3, r2
 8001fd4:	d00e      	beq.n	8001ff4 <HAL_TIM_Base_Start_IT+0x80>
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	4a1b      	ldr	r2, [pc, #108]	; (8002048 <HAL_TIM_Base_Start_IT+0xd4>)
 8001fdc:	4293      	cmp	r3, r2
 8001fde:	d009      	beq.n	8001ff4 <HAL_TIM_Base_Start_IT+0x80>
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	4a19      	ldr	r2, [pc, #100]	; (800204c <HAL_TIM_Base_Start_IT+0xd8>)
 8001fe6:	4293      	cmp	r3, r2
 8001fe8:	d004      	beq.n	8001ff4 <HAL_TIM_Base_Start_IT+0x80>
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	4a18      	ldr	r2, [pc, #96]	; (8002050 <HAL_TIM_Base_Start_IT+0xdc>)
 8001ff0:	4293      	cmp	r3, r2
 8001ff2:	d111      	bne.n	8002018 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	689b      	ldr	r3, [r3, #8]
 8001ffa:	f003 0307 	and.w	r3, r3, #7
 8001ffe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	2b06      	cmp	r3, #6
 8002004:	d010      	beq.n	8002028 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	681a      	ldr	r2, [r3, #0]
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	f042 0201 	orr.w	r2, r2, #1
 8002014:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002016:	e007      	b.n	8002028 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	681a      	ldr	r2, [r3, #0]
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	f042 0201 	orr.w	r2, r2, #1
 8002026:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002028:	2300      	movs	r3, #0
}
 800202a:	4618      	mov	r0, r3
 800202c:	3714      	adds	r7, #20
 800202e:	46bd      	mov	sp, r7
 8002030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002034:	4770      	bx	lr
 8002036:	bf00      	nop
 8002038:	40010000 	.word	0x40010000
 800203c:	40000400 	.word	0x40000400
 8002040:	40000800 	.word	0x40000800
 8002044:	40000c00 	.word	0x40000c00
 8002048:	40010400 	.word	0x40010400
 800204c:	40014000 	.word	0x40014000
 8002050:	40001800 	.word	0x40001800

08002054 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	b082      	sub	sp, #8
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	691b      	ldr	r3, [r3, #16]
 8002062:	f003 0302 	and.w	r3, r3, #2
 8002066:	2b02      	cmp	r3, #2
 8002068:	d122      	bne.n	80020b0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	68db      	ldr	r3, [r3, #12]
 8002070:	f003 0302 	and.w	r3, r3, #2
 8002074:	2b02      	cmp	r3, #2
 8002076:	d11b      	bne.n	80020b0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f06f 0202 	mvn.w	r2, #2
 8002080:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	2201      	movs	r2, #1
 8002086:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	699b      	ldr	r3, [r3, #24]
 800208e:	f003 0303 	and.w	r3, r3, #3
 8002092:	2b00      	cmp	r3, #0
 8002094:	d003      	beq.n	800209e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002096:	6878      	ldr	r0, [r7, #4]
 8002098:	f000 f9b5 	bl	8002406 <HAL_TIM_IC_CaptureCallback>
 800209c:	e005      	b.n	80020aa <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800209e:	6878      	ldr	r0, [r7, #4]
 80020a0:	f000 f9a7 	bl	80023f2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80020a4:	6878      	ldr	r0, [r7, #4]
 80020a6:	f000 f9b8 	bl	800241a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	2200      	movs	r2, #0
 80020ae:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	691b      	ldr	r3, [r3, #16]
 80020b6:	f003 0304 	and.w	r3, r3, #4
 80020ba:	2b04      	cmp	r3, #4
 80020bc:	d122      	bne.n	8002104 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	68db      	ldr	r3, [r3, #12]
 80020c4:	f003 0304 	and.w	r3, r3, #4
 80020c8:	2b04      	cmp	r3, #4
 80020ca:	d11b      	bne.n	8002104 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f06f 0204 	mvn.w	r2, #4
 80020d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	2202      	movs	r2, #2
 80020da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	699b      	ldr	r3, [r3, #24]
 80020e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d003      	beq.n	80020f2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80020ea:	6878      	ldr	r0, [r7, #4]
 80020ec:	f000 f98b 	bl	8002406 <HAL_TIM_IC_CaptureCallback>
 80020f0:	e005      	b.n	80020fe <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80020f2:	6878      	ldr	r0, [r7, #4]
 80020f4:	f000 f97d 	bl	80023f2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80020f8:	6878      	ldr	r0, [r7, #4]
 80020fa:	f000 f98e 	bl	800241a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	2200      	movs	r2, #0
 8002102:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	691b      	ldr	r3, [r3, #16]
 800210a:	f003 0308 	and.w	r3, r3, #8
 800210e:	2b08      	cmp	r3, #8
 8002110:	d122      	bne.n	8002158 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	68db      	ldr	r3, [r3, #12]
 8002118:	f003 0308 	and.w	r3, r3, #8
 800211c:	2b08      	cmp	r3, #8
 800211e:	d11b      	bne.n	8002158 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f06f 0208 	mvn.w	r2, #8
 8002128:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	2204      	movs	r2, #4
 800212e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	69db      	ldr	r3, [r3, #28]
 8002136:	f003 0303 	and.w	r3, r3, #3
 800213a:	2b00      	cmp	r3, #0
 800213c:	d003      	beq.n	8002146 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800213e:	6878      	ldr	r0, [r7, #4]
 8002140:	f000 f961 	bl	8002406 <HAL_TIM_IC_CaptureCallback>
 8002144:	e005      	b.n	8002152 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002146:	6878      	ldr	r0, [r7, #4]
 8002148:	f000 f953 	bl	80023f2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800214c:	6878      	ldr	r0, [r7, #4]
 800214e:	f000 f964 	bl	800241a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	2200      	movs	r2, #0
 8002156:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	691b      	ldr	r3, [r3, #16]
 800215e:	f003 0310 	and.w	r3, r3, #16
 8002162:	2b10      	cmp	r3, #16
 8002164:	d122      	bne.n	80021ac <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	68db      	ldr	r3, [r3, #12]
 800216c:	f003 0310 	and.w	r3, r3, #16
 8002170:	2b10      	cmp	r3, #16
 8002172:	d11b      	bne.n	80021ac <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	f06f 0210 	mvn.w	r2, #16
 800217c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	2208      	movs	r2, #8
 8002182:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	69db      	ldr	r3, [r3, #28]
 800218a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800218e:	2b00      	cmp	r3, #0
 8002190:	d003      	beq.n	800219a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002192:	6878      	ldr	r0, [r7, #4]
 8002194:	f000 f937 	bl	8002406 <HAL_TIM_IC_CaptureCallback>
 8002198:	e005      	b.n	80021a6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800219a:	6878      	ldr	r0, [r7, #4]
 800219c:	f000 f929 	bl	80023f2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80021a0:	6878      	ldr	r0, [r7, #4]
 80021a2:	f000 f93a 	bl	800241a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	2200      	movs	r2, #0
 80021aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	691b      	ldr	r3, [r3, #16]
 80021b2:	f003 0301 	and.w	r3, r3, #1
 80021b6:	2b01      	cmp	r3, #1
 80021b8:	d10e      	bne.n	80021d8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	68db      	ldr	r3, [r3, #12]
 80021c0:	f003 0301 	and.w	r3, r3, #1
 80021c4:	2b01      	cmp	r3, #1
 80021c6:	d107      	bne.n	80021d8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f06f 0201 	mvn.w	r2, #1
 80021d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80021d2:	6878      	ldr	r0, [r7, #4]
 80021d4:	f7fe fca8 	bl	8000b28 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	691b      	ldr	r3, [r3, #16]
 80021de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021e2:	2b80      	cmp	r3, #128	; 0x80
 80021e4:	d10e      	bne.n	8002204 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	68db      	ldr	r3, [r3, #12]
 80021ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021f0:	2b80      	cmp	r3, #128	; 0x80
 80021f2:	d107      	bne.n	8002204 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80021fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80021fe:	6878      	ldr	r0, [r7, #4]
 8002200:	f000 fae0 	bl	80027c4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	691b      	ldr	r3, [r3, #16]
 800220a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800220e:	2b40      	cmp	r3, #64	; 0x40
 8002210:	d10e      	bne.n	8002230 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	68db      	ldr	r3, [r3, #12]
 8002218:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800221c:	2b40      	cmp	r3, #64	; 0x40
 800221e:	d107      	bne.n	8002230 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002228:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800222a:	6878      	ldr	r0, [r7, #4]
 800222c:	f000 f8ff 	bl	800242e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	691b      	ldr	r3, [r3, #16]
 8002236:	f003 0320 	and.w	r3, r3, #32
 800223a:	2b20      	cmp	r3, #32
 800223c:	d10e      	bne.n	800225c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	68db      	ldr	r3, [r3, #12]
 8002244:	f003 0320 	and.w	r3, r3, #32
 8002248:	2b20      	cmp	r3, #32
 800224a:	d107      	bne.n	800225c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f06f 0220 	mvn.w	r2, #32
 8002254:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002256:	6878      	ldr	r0, [r7, #4]
 8002258:	f000 faaa 	bl	80027b0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800225c:	bf00      	nop
 800225e:	3708      	adds	r7, #8
 8002260:	46bd      	mov	sp, r7
 8002262:	bd80      	pop	{r7, pc}

08002264 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	b084      	sub	sp, #16
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
 800226c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800226e:	2300      	movs	r3, #0
 8002270:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002278:	2b01      	cmp	r3, #1
 800227a:	d101      	bne.n	8002280 <HAL_TIM_ConfigClockSource+0x1c>
 800227c:	2302      	movs	r3, #2
 800227e:	e0b4      	b.n	80023ea <HAL_TIM_ConfigClockSource+0x186>
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	2201      	movs	r2, #1
 8002284:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	2202      	movs	r2, #2
 800228c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	689b      	ldr	r3, [r3, #8]
 8002296:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002298:	68bb      	ldr	r3, [r7, #8]
 800229a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800229e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80022a0:	68bb      	ldr	r3, [r7, #8]
 80022a2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80022a6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	68ba      	ldr	r2, [r7, #8]
 80022ae:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80022b0:	683b      	ldr	r3, [r7, #0]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80022b8:	d03e      	beq.n	8002338 <HAL_TIM_ConfigClockSource+0xd4>
 80022ba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80022be:	f200 8087 	bhi.w	80023d0 <HAL_TIM_ConfigClockSource+0x16c>
 80022c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80022c6:	f000 8086 	beq.w	80023d6 <HAL_TIM_ConfigClockSource+0x172>
 80022ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80022ce:	d87f      	bhi.n	80023d0 <HAL_TIM_ConfigClockSource+0x16c>
 80022d0:	2b70      	cmp	r3, #112	; 0x70
 80022d2:	d01a      	beq.n	800230a <HAL_TIM_ConfigClockSource+0xa6>
 80022d4:	2b70      	cmp	r3, #112	; 0x70
 80022d6:	d87b      	bhi.n	80023d0 <HAL_TIM_ConfigClockSource+0x16c>
 80022d8:	2b60      	cmp	r3, #96	; 0x60
 80022da:	d050      	beq.n	800237e <HAL_TIM_ConfigClockSource+0x11a>
 80022dc:	2b60      	cmp	r3, #96	; 0x60
 80022de:	d877      	bhi.n	80023d0 <HAL_TIM_ConfigClockSource+0x16c>
 80022e0:	2b50      	cmp	r3, #80	; 0x50
 80022e2:	d03c      	beq.n	800235e <HAL_TIM_ConfigClockSource+0xfa>
 80022e4:	2b50      	cmp	r3, #80	; 0x50
 80022e6:	d873      	bhi.n	80023d0 <HAL_TIM_ConfigClockSource+0x16c>
 80022e8:	2b40      	cmp	r3, #64	; 0x40
 80022ea:	d058      	beq.n	800239e <HAL_TIM_ConfigClockSource+0x13a>
 80022ec:	2b40      	cmp	r3, #64	; 0x40
 80022ee:	d86f      	bhi.n	80023d0 <HAL_TIM_ConfigClockSource+0x16c>
 80022f0:	2b30      	cmp	r3, #48	; 0x30
 80022f2:	d064      	beq.n	80023be <HAL_TIM_ConfigClockSource+0x15a>
 80022f4:	2b30      	cmp	r3, #48	; 0x30
 80022f6:	d86b      	bhi.n	80023d0 <HAL_TIM_ConfigClockSource+0x16c>
 80022f8:	2b20      	cmp	r3, #32
 80022fa:	d060      	beq.n	80023be <HAL_TIM_ConfigClockSource+0x15a>
 80022fc:	2b20      	cmp	r3, #32
 80022fe:	d867      	bhi.n	80023d0 <HAL_TIM_ConfigClockSource+0x16c>
 8002300:	2b00      	cmp	r3, #0
 8002302:	d05c      	beq.n	80023be <HAL_TIM_ConfigClockSource+0x15a>
 8002304:	2b10      	cmp	r3, #16
 8002306:	d05a      	beq.n	80023be <HAL_TIM_ConfigClockSource+0x15a>
 8002308:	e062      	b.n	80023d0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	6818      	ldr	r0, [r3, #0]
 800230e:	683b      	ldr	r3, [r7, #0]
 8002310:	6899      	ldr	r1, [r3, #8]
 8002312:	683b      	ldr	r3, [r7, #0]
 8002314:	685a      	ldr	r2, [r3, #4]
 8002316:	683b      	ldr	r3, [r7, #0]
 8002318:	68db      	ldr	r3, [r3, #12]
 800231a:	f000 f9ad 	bl	8002678 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	689b      	ldr	r3, [r3, #8]
 8002324:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002326:	68bb      	ldr	r3, [r7, #8]
 8002328:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800232c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	68ba      	ldr	r2, [r7, #8]
 8002334:	609a      	str	r2, [r3, #8]
      break;
 8002336:	e04f      	b.n	80023d8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	6818      	ldr	r0, [r3, #0]
 800233c:	683b      	ldr	r3, [r7, #0]
 800233e:	6899      	ldr	r1, [r3, #8]
 8002340:	683b      	ldr	r3, [r7, #0]
 8002342:	685a      	ldr	r2, [r3, #4]
 8002344:	683b      	ldr	r3, [r7, #0]
 8002346:	68db      	ldr	r3, [r3, #12]
 8002348:	f000 f996 	bl	8002678 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	689a      	ldr	r2, [r3, #8]
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800235a:	609a      	str	r2, [r3, #8]
      break;
 800235c:	e03c      	b.n	80023d8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	6818      	ldr	r0, [r3, #0]
 8002362:	683b      	ldr	r3, [r7, #0]
 8002364:	6859      	ldr	r1, [r3, #4]
 8002366:	683b      	ldr	r3, [r7, #0]
 8002368:	68db      	ldr	r3, [r3, #12]
 800236a:	461a      	mov	r2, r3
 800236c:	f000 f90a 	bl	8002584 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	2150      	movs	r1, #80	; 0x50
 8002376:	4618      	mov	r0, r3
 8002378:	f000 f963 	bl	8002642 <TIM_ITRx_SetConfig>
      break;
 800237c:	e02c      	b.n	80023d8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	6818      	ldr	r0, [r3, #0]
 8002382:	683b      	ldr	r3, [r7, #0]
 8002384:	6859      	ldr	r1, [r3, #4]
 8002386:	683b      	ldr	r3, [r7, #0]
 8002388:	68db      	ldr	r3, [r3, #12]
 800238a:	461a      	mov	r2, r3
 800238c:	f000 f929 	bl	80025e2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	2160      	movs	r1, #96	; 0x60
 8002396:	4618      	mov	r0, r3
 8002398:	f000 f953 	bl	8002642 <TIM_ITRx_SetConfig>
      break;
 800239c:	e01c      	b.n	80023d8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	6818      	ldr	r0, [r3, #0]
 80023a2:	683b      	ldr	r3, [r7, #0]
 80023a4:	6859      	ldr	r1, [r3, #4]
 80023a6:	683b      	ldr	r3, [r7, #0]
 80023a8:	68db      	ldr	r3, [r3, #12]
 80023aa:	461a      	mov	r2, r3
 80023ac:	f000 f8ea 	bl	8002584 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	2140      	movs	r1, #64	; 0x40
 80023b6:	4618      	mov	r0, r3
 80023b8:	f000 f943 	bl	8002642 <TIM_ITRx_SetConfig>
      break;
 80023bc:	e00c      	b.n	80023d8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681a      	ldr	r2, [r3, #0]
 80023c2:	683b      	ldr	r3, [r7, #0]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	4619      	mov	r1, r3
 80023c8:	4610      	mov	r0, r2
 80023ca:	f000 f93a 	bl	8002642 <TIM_ITRx_SetConfig>
      break;
 80023ce:	e003      	b.n	80023d8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80023d0:	2301      	movs	r3, #1
 80023d2:	73fb      	strb	r3, [r7, #15]
      break;
 80023d4:	e000      	b.n	80023d8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80023d6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	2201      	movs	r2, #1
 80023dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	2200      	movs	r2, #0
 80023e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80023e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80023ea:	4618      	mov	r0, r3
 80023ec:	3710      	adds	r7, #16
 80023ee:	46bd      	mov	sp, r7
 80023f0:	bd80      	pop	{r7, pc}

080023f2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80023f2:	b480      	push	{r7}
 80023f4:	b083      	sub	sp, #12
 80023f6:	af00      	add	r7, sp, #0
 80023f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80023fa:	bf00      	nop
 80023fc:	370c      	adds	r7, #12
 80023fe:	46bd      	mov	sp, r7
 8002400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002404:	4770      	bx	lr

08002406 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002406:	b480      	push	{r7}
 8002408:	b083      	sub	sp, #12
 800240a:	af00      	add	r7, sp, #0
 800240c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800240e:	bf00      	nop
 8002410:	370c      	adds	r7, #12
 8002412:	46bd      	mov	sp, r7
 8002414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002418:	4770      	bx	lr

0800241a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800241a:	b480      	push	{r7}
 800241c:	b083      	sub	sp, #12
 800241e:	af00      	add	r7, sp, #0
 8002420:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002422:	bf00      	nop
 8002424:	370c      	adds	r7, #12
 8002426:	46bd      	mov	sp, r7
 8002428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242c:	4770      	bx	lr

0800242e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800242e:	b480      	push	{r7}
 8002430:	b083      	sub	sp, #12
 8002432:	af00      	add	r7, sp, #0
 8002434:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002436:	bf00      	nop
 8002438:	370c      	adds	r7, #12
 800243a:	46bd      	mov	sp, r7
 800243c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002440:	4770      	bx	lr
	...

08002444 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002444:	b480      	push	{r7}
 8002446:	b085      	sub	sp, #20
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]
 800244c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	4a40      	ldr	r2, [pc, #256]	; (8002558 <TIM_Base_SetConfig+0x114>)
 8002458:	4293      	cmp	r3, r2
 800245a:	d013      	beq.n	8002484 <TIM_Base_SetConfig+0x40>
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002462:	d00f      	beq.n	8002484 <TIM_Base_SetConfig+0x40>
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	4a3d      	ldr	r2, [pc, #244]	; (800255c <TIM_Base_SetConfig+0x118>)
 8002468:	4293      	cmp	r3, r2
 800246a:	d00b      	beq.n	8002484 <TIM_Base_SetConfig+0x40>
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	4a3c      	ldr	r2, [pc, #240]	; (8002560 <TIM_Base_SetConfig+0x11c>)
 8002470:	4293      	cmp	r3, r2
 8002472:	d007      	beq.n	8002484 <TIM_Base_SetConfig+0x40>
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	4a3b      	ldr	r2, [pc, #236]	; (8002564 <TIM_Base_SetConfig+0x120>)
 8002478:	4293      	cmp	r3, r2
 800247a:	d003      	beq.n	8002484 <TIM_Base_SetConfig+0x40>
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	4a3a      	ldr	r2, [pc, #232]	; (8002568 <TIM_Base_SetConfig+0x124>)
 8002480:	4293      	cmp	r3, r2
 8002482:	d108      	bne.n	8002496 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800248a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800248c:	683b      	ldr	r3, [r7, #0]
 800248e:	685b      	ldr	r3, [r3, #4]
 8002490:	68fa      	ldr	r2, [r7, #12]
 8002492:	4313      	orrs	r3, r2
 8002494:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	4a2f      	ldr	r2, [pc, #188]	; (8002558 <TIM_Base_SetConfig+0x114>)
 800249a:	4293      	cmp	r3, r2
 800249c:	d02b      	beq.n	80024f6 <TIM_Base_SetConfig+0xb2>
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80024a4:	d027      	beq.n	80024f6 <TIM_Base_SetConfig+0xb2>
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	4a2c      	ldr	r2, [pc, #176]	; (800255c <TIM_Base_SetConfig+0x118>)
 80024aa:	4293      	cmp	r3, r2
 80024ac:	d023      	beq.n	80024f6 <TIM_Base_SetConfig+0xb2>
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	4a2b      	ldr	r2, [pc, #172]	; (8002560 <TIM_Base_SetConfig+0x11c>)
 80024b2:	4293      	cmp	r3, r2
 80024b4:	d01f      	beq.n	80024f6 <TIM_Base_SetConfig+0xb2>
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	4a2a      	ldr	r2, [pc, #168]	; (8002564 <TIM_Base_SetConfig+0x120>)
 80024ba:	4293      	cmp	r3, r2
 80024bc:	d01b      	beq.n	80024f6 <TIM_Base_SetConfig+0xb2>
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	4a29      	ldr	r2, [pc, #164]	; (8002568 <TIM_Base_SetConfig+0x124>)
 80024c2:	4293      	cmp	r3, r2
 80024c4:	d017      	beq.n	80024f6 <TIM_Base_SetConfig+0xb2>
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	4a28      	ldr	r2, [pc, #160]	; (800256c <TIM_Base_SetConfig+0x128>)
 80024ca:	4293      	cmp	r3, r2
 80024cc:	d013      	beq.n	80024f6 <TIM_Base_SetConfig+0xb2>
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	4a27      	ldr	r2, [pc, #156]	; (8002570 <TIM_Base_SetConfig+0x12c>)
 80024d2:	4293      	cmp	r3, r2
 80024d4:	d00f      	beq.n	80024f6 <TIM_Base_SetConfig+0xb2>
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	4a26      	ldr	r2, [pc, #152]	; (8002574 <TIM_Base_SetConfig+0x130>)
 80024da:	4293      	cmp	r3, r2
 80024dc:	d00b      	beq.n	80024f6 <TIM_Base_SetConfig+0xb2>
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	4a25      	ldr	r2, [pc, #148]	; (8002578 <TIM_Base_SetConfig+0x134>)
 80024e2:	4293      	cmp	r3, r2
 80024e4:	d007      	beq.n	80024f6 <TIM_Base_SetConfig+0xb2>
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	4a24      	ldr	r2, [pc, #144]	; (800257c <TIM_Base_SetConfig+0x138>)
 80024ea:	4293      	cmp	r3, r2
 80024ec:	d003      	beq.n	80024f6 <TIM_Base_SetConfig+0xb2>
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	4a23      	ldr	r2, [pc, #140]	; (8002580 <TIM_Base_SetConfig+0x13c>)
 80024f2:	4293      	cmp	r3, r2
 80024f4:	d108      	bne.n	8002508 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80024fc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80024fe:	683b      	ldr	r3, [r7, #0]
 8002500:	68db      	ldr	r3, [r3, #12]
 8002502:	68fa      	ldr	r2, [r7, #12]
 8002504:	4313      	orrs	r3, r2
 8002506:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800250e:	683b      	ldr	r3, [r7, #0]
 8002510:	695b      	ldr	r3, [r3, #20]
 8002512:	4313      	orrs	r3, r2
 8002514:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	68fa      	ldr	r2, [r7, #12]
 800251a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800251c:	683b      	ldr	r3, [r7, #0]
 800251e:	689a      	ldr	r2, [r3, #8]
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002524:	683b      	ldr	r3, [r7, #0]
 8002526:	681a      	ldr	r2, [r3, #0]
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	4a0a      	ldr	r2, [pc, #40]	; (8002558 <TIM_Base_SetConfig+0x114>)
 8002530:	4293      	cmp	r3, r2
 8002532:	d003      	beq.n	800253c <TIM_Base_SetConfig+0xf8>
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	4a0c      	ldr	r2, [pc, #48]	; (8002568 <TIM_Base_SetConfig+0x124>)
 8002538:	4293      	cmp	r3, r2
 800253a:	d103      	bne.n	8002544 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800253c:	683b      	ldr	r3, [r7, #0]
 800253e:	691a      	ldr	r2, [r3, #16]
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	2201      	movs	r2, #1
 8002548:	615a      	str	r2, [r3, #20]
}
 800254a:	bf00      	nop
 800254c:	3714      	adds	r7, #20
 800254e:	46bd      	mov	sp, r7
 8002550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002554:	4770      	bx	lr
 8002556:	bf00      	nop
 8002558:	40010000 	.word	0x40010000
 800255c:	40000400 	.word	0x40000400
 8002560:	40000800 	.word	0x40000800
 8002564:	40000c00 	.word	0x40000c00
 8002568:	40010400 	.word	0x40010400
 800256c:	40014000 	.word	0x40014000
 8002570:	40014400 	.word	0x40014400
 8002574:	40014800 	.word	0x40014800
 8002578:	40001800 	.word	0x40001800
 800257c:	40001c00 	.word	0x40001c00
 8002580:	40002000 	.word	0x40002000

08002584 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002584:	b480      	push	{r7}
 8002586:	b087      	sub	sp, #28
 8002588:	af00      	add	r7, sp, #0
 800258a:	60f8      	str	r0, [r7, #12]
 800258c:	60b9      	str	r1, [r7, #8]
 800258e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	6a1b      	ldr	r3, [r3, #32]
 8002594:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	6a1b      	ldr	r3, [r3, #32]
 800259a:	f023 0201 	bic.w	r2, r3, #1
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	699b      	ldr	r3, [r3, #24]
 80025a6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80025a8:	693b      	ldr	r3, [r7, #16]
 80025aa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80025ae:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	011b      	lsls	r3, r3, #4
 80025b4:	693a      	ldr	r2, [r7, #16]
 80025b6:	4313      	orrs	r3, r2
 80025b8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80025ba:	697b      	ldr	r3, [r7, #20]
 80025bc:	f023 030a 	bic.w	r3, r3, #10
 80025c0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80025c2:	697a      	ldr	r2, [r7, #20]
 80025c4:	68bb      	ldr	r3, [r7, #8]
 80025c6:	4313      	orrs	r3, r2
 80025c8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	693a      	ldr	r2, [r7, #16]
 80025ce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	697a      	ldr	r2, [r7, #20]
 80025d4:	621a      	str	r2, [r3, #32]
}
 80025d6:	bf00      	nop
 80025d8:	371c      	adds	r7, #28
 80025da:	46bd      	mov	sp, r7
 80025dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e0:	4770      	bx	lr

080025e2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80025e2:	b480      	push	{r7}
 80025e4:	b087      	sub	sp, #28
 80025e6:	af00      	add	r7, sp, #0
 80025e8:	60f8      	str	r0, [r7, #12]
 80025ea:	60b9      	str	r1, [r7, #8]
 80025ec:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	6a1b      	ldr	r3, [r3, #32]
 80025f2:	f023 0210 	bic.w	r2, r3, #16
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	699b      	ldr	r3, [r3, #24]
 80025fe:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	6a1b      	ldr	r3, [r3, #32]
 8002604:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002606:	697b      	ldr	r3, [r7, #20]
 8002608:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800260c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	031b      	lsls	r3, r3, #12
 8002612:	697a      	ldr	r2, [r7, #20]
 8002614:	4313      	orrs	r3, r2
 8002616:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002618:	693b      	ldr	r3, [r7, #16]
 800261a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800261e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002620:	68bb      	ldr	r3, [r7, #8]
 8002622:	011b      	lsls	r3, r3, #4
 8002624:	693a      	ldr	r2, [r7, #16]
 8002626:	4313      	orrs	r3, r2
 8002628:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	697a      	ldr	r2, [r7, #20]
 800262e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	693a      	ldr	r2, [r7, #16]
 8002634:	621a      	str	r2, [r3, #32]
}
 8002636:	bf00      	nop
 8002638:	371c      	adds	r7, #28
 800263a:	46bd      	mov	sp, r7
 800263c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002640:	4770      	bx	lr

08002642 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002642:	b480      	push	{r7}
 8002644:	b085      	sub	sp, #20
 8002646:	af00      	add	r7, sp, #0
 8002648:	6078      	str	r0, [r7, #4]
 800264a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	689b      	ldr	r3, [r3, #8]
 8002650:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002658:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800265a:	683a      	ldr	r2, [r7, #0]
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	4313      	orrs	r3, r2
 8002660:	f043 0307 	orr.w	r3, r3, #7
 8002664:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	68fa      	ldr	r2, [r7, #12]
 800266a:	609a      	str	r2, [r3, #8]
}
 800266c:	bf00      	nop
 800266e:	3714      	adds	r7, #20
 8002670:	46bd      	mov	sp, r7
 8002672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002676:	4770      	bx	lr

08002678 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002678:	b480      	push	{r7}
 800267a:	b087      	sub	sp, #28
 800267c:	af00      	add	r7, sp, #0
 800267e:	60f8      	str	r0, [r7, #12]
 8002680:	60b9      	str	r1, [r7, #8]
 8002682:	607a      	str	r2, [r7, #4]
 8002684:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	689b      	ldr	r3, [r3, #8]
 800268a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800268c:	697b      	ldr	r3, [r7, #20]
 800268e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002692:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002694:	683b      	ldr	r3, [r7, #0]
 8002696:	021a      	lsls	r2, r3, #8
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	431a      	orrs	r2, r3
 800269c:	68bb      	ldr	r3, [r7, #8]
 800269e:	4313      	orrs	r3, r2
 80026a0:	697a      	ldr	r2, [r7, #20]
 80026a2:	4313      	orrs	r3, r2
 80026a4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	697a      	ldr	r2, [r7, #20]
 80026aa:	609a      	str	r2, [r3, #8]
}
 80026ac:	bf00      	nop
 80026ae:	371c      	adds	r7, #28
 80026b0:	46bd      	mov	sp, r7
 80026b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b6:	4770      	bx	lr

080026b8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80026b8:	b480      	push	{r7}
 80026ba:	b085      	sub	sp, #20
 80026bc:	af00      	add	r7, sp, #0
 80026be:	6078      	str	r0, [r7, #4]
 80026c0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80026c8:	2b01      	cmp	r3, #1
 80026ca:	d101      	bne.n	80026d0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80026cc:	2302      	movs	r3, #2
 80026ce:	e05a      	b.n	8002786 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	2201      	movs	r2, #1
 80026d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	2202      	movs	r2, #2
 80026dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	685b      	ldr	r3, [r3, #4]
 80026e6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	689b      	ldr	r3, [r3, #8]
 80026ee:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80026f6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80026f8:	683b      	ldr	r3, [r7, #0]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	68fa      	ldr	r2, [r7, #12]
 80026fe:	4313      	orrs	r3, r2
 8002700:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	68fa      	ldr	r2, [r7, #12]
 8002708:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	4a21      	ldr	r2, [pc, #132]	; (8002794 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8002710:	4293      	cmp	r3, r2
 8002712:	d022      	beq.n	800275a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800271c:	d01d      	beq.n	800275a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	4a1d      	ldr	r2, [pc, #116]	; (8002798 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8002724:	4293      	cmp	r3, r2
 8002726:	d018      	beq.n	800275a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	4a1b      	ldr	r2, [pc, #108]	; (800279c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800272e:	4293      	cmp	r3, r2
 8002730:	d013      	beq.n	800275a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	4a1a      	ldr	r2, [pc, #104]	; (80027a0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8002738:	4293      	cmp	r3, r2
 800273a:	d00e      	beq.n	800275a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	4a18      	ldr	r2, [pc, #96]	; (80027a4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8002742:	4293      	cmp	r3, r2
 8002744:	d009      	beq.n	800275a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	4a17      	ldr	r2, [pc, #92]	; (80027a8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800274c:	4293      	cmp	r3, r2
 800274e:	d004      	beq.n	800275a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	4a15      	ldr	r2, [pc, #84]	; (80027ac <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8002756:	4293      	cmp	r3, r2
 8002758:	d10c      	bne.n	8002774 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800275a:	68bb      	ldr	r3, [r7, #8]
 800275c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002760:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002762:	683b      	ldr	r3, [r7, #0]
 8002764:	685b      	ldr	r3, [r3, #4]
 8002766:	68ba      	ldr	r2, [r7, #8]
 8002768:	4313      	orrs	r3, r2
 800276a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	68ba      	ldr	r2, [r7, #8]
 8002772:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	2201      	movs	r2, #1
 8002778:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	2200      	movs	r2, #0
 8002780:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002784:	2300      	movs	r3, #0
}
 8002786:	4618      	mov	r0, r3
 8002788:	3714      	adds	r7, #20
 800278a:	46bd      	mov	sp, r7
 800278c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002790:	4770      	bx	lr
 8002792:	bf00      	nop
 8002794:	40010000 	.word	0x40010000
 8002798:	40000400 	.word	0x40000400
 800279c:	40000800 	.word	0x40000800
 80027a0:	40000c00 	.word	0x40000c00
 80027a4:	40010400 	.word	0x40010400
 80027a8:	40014000 	.word	0x40014000
 80027ac:	40001800 	.word	0x40001800

080027b0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80027b0:	b480      	push	{r7}
 80027b2:	b083      	sub	sp, #12
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80027b8:	bf00      	nop
 80027ba:	370c      	adds	r7, #12
 80027bc:	46bd      	mov	sp, r7
 80027be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c2:	4770      	bx	lr

080027c4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80027c4:	b480      	push	{r7}
 80027c6:	b083      	sub	sp, #12
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80027cc:	bf00      	nop
 80027ce:	370c      	adds	r7, #12
 80027d0:	46bd      	mov	sp, r7
 80027d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d6:	4770      	bx	lr

080027d8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80027d8:	b580      	push	{r7, lr}
 80027da:	b082      	sub	sp, #8
 80027dc:	af00      	add	r7, sp, #0
 80027de:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d101      	bne.n	80027ea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80027e6:	2301      	movs	r3, #1
 80027e8:	e03f      	b.n	800286a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80027f0:	b2db      	uxtb	r3, r3
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d106      	bne.n	8002804 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	2200      	movs	r2, #0
 80027fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80027fe:	6878      	ldr	r0, [r7, #4]
 8002800:	f7fe fa1c 	bl	8000c3c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	2224      	movs	r2, #36	; 0x24
 8002808:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	68da      	ldr	r2, [r3, #12]
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800281a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800281c:	6878      	ldr	r0, [r7, #4]
 800281e:	f000 f9cb 	bl	8002bb8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	691a      	ldr	r2, [r3, #16]
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002830:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	695a      	ldr	r2, [r3, #20]
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002840:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	68da      	ldr	r2, [r3, #12]
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002850:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	2200      	movs	r2, #0
 8002856:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	2220      	movs	r2, #32
 800285c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	2220      	movs	r2, #32
 8002864:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002868:	2300      	movs	r3, #0
}
 800286a:	4618      	mov	r0, r3
 800286c:	3708      	adds	r7, #8
 800286e:	46bd      	mov	sp, r7
 8002870:	bd80      	pop	{r7, pc}

08002872 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002872:	b580      	push	{r7, lr}
 8002874:	b08a      	sub	sp, #40	; 0x28
 8002876:	af02      	add	r7, sp, #8
 8002878:	60f8      	str	r0, [r7, #12]
 800287a:	60b9      	str	r1, [r7, #8]
 800287c:	603b      	str	r3, [r7, #0]
 800287e:	4613      	mov	r3, r2
 8002880:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002882:	2300      	movs	r3, #0
 8002884:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800288c:	b2db      	uxtb	r3, r3
 800288e:	2b20      	cmp	r3, #32
 8002890:	d17c      	bne.n	800298c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002892:	68bb      	ldr	r3, [r7, #8]
 8002894:	2b00      	cmp	r3, #0
 8002896:	d002      	beq.n	800289e <HAL_UART_Transmit+0x2c>
 8002898:	88fb      	ldrh	r3, [r7, #6]
 800289a:	2b00      	cmp	r3, #0
 800289c:	d101      	bne.n	80028a2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800289e:	2301      	movs	r3, #1
 80028a0:	e075      	b.n	800298e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80028a8:	2b01      	cmp	r3, #1
 80028aa:	d101      	bne.n	80028b0 <HAL_UART_Transmit+0x3e>
 80028ac:	2302      	movs	r3, #2
 80028ae:	e06e      	b.n	800298e <HAL_UART_Transmit+0x11c>
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	2201      	movs	r2, #1
 80028b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	2200      	movs	r2, #0
 80028bc:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	2221      	movs	r2, #33	; 0x21
 80028c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80028c6:	f7fe fb7f 	bl	8000fc8 <HAL_GetTick>
 80028ca:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	88fa      	ldrh	r2, [r7, #6]
 80028d0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	88fa      	ldrh	r2, [r7, #6]
 80028d6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	689b      	ldr	r3, [r3, #8]
 80028dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80028e0:	d108      	bne.n	80028f4 <HAL_UART_Transmit+0x82>
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	691b      	ldr	r3, [r3, #16]
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d104      	bne.n	80028f4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80028ea:	2300      	movs	r3, #0
 80028ec:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80028ee:	68bb      	ldr	r3, [r7, #8]
 80028f0:	61bb      	str	r3, [r7, #24]
 80028f2:	e003      	b.n	80028fc <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80028f4:	68bb      	ldr	r3, [r7, #8]
 80028f6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80028f8:	2300      	movs	r3, #0
 80028fa:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	2200      	movs	r2, #0
 8002900:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002904:	e02a      	b.n	800295c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002906:	683b      	ldr	r3, [r7, #0]
 8002908:	9300      	str	r3, [sp, #0]
 800290a:	697b      	ldr	r3, [r7, #20]
 800290c:	2200      	movs	r2, #0
 800290e:	2180      	movs	r1, #128	; 0x80
 8002910:	68f8      	ldr	r0, [r7, #12]
 8002912:	f000 f8e2 	bl	8002ada <UART_WaitOnFlagUntilTimeout>
 8002916:	4603      	mov	r3, r0
 8002918:	2b00      	cmp	r3, #0
 800291a:	d001      	beq.n	8002920 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800291c:	2303      	movs	r3, #3
 800291e:	e036      	b.n	800298e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002920:	69fb      	ldr	r3, [r7, #28]
 8002922:	2b00      	cmp	r3, #0
 8002924:	d10b      	bne.n	800293e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002926:	69bb      	ldr	r3, [r7, #24]
 8002928:	881b      	ldrh	r3, [r3, #0]
 800292a:	461a      	mov	r2, r3
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002934:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002936:	69bb      	ldr	r3, [r7, #24]
 8002938:	3302      	adds	r3, #2
 800293a:	61bb      	str	r3, [r7, #24]
 800293c:	e007      	b.n	800294e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800293e:	69fb      	ldr	r3, [r7, #28]
 8002940:	781a      	ldrb	r2, [r3, #0]
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002948:	69fb      	ldr	r3, [r7, #28]
 800294a:	3301      	adds	r3, #1
 800294c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002952:	b29b      	uxth	r3, r3
 8002954:	3b01      	subs	r3, #1
 8002956:	b29a      	uxth	r2, r3
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002960:	b29b      	uxth	r3, r3
 8002962:	2b00      	cmp	r3, #0
 8002964:	d1cf      	bne.n	8002906 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002966:	683b      	ldr	r3, [r7, #0]
 8002968:	9300      	str	r3, [sp, #0]
 800296a:	697b      	ldr	r3, [r7, #20]
 800296c:	2200      	movs	r2, #0
 800296e:	2140      	movs	r1, #64	; 0x40
 8002970:	68f8      	ldr	r0, [r7, #12]
 8002972:	f000 f8b2 	bl	8002ada <UART_WaitOnFlagUntilTimeout>
 8002976:	4603      	mov	r3, r0
 8002978:	2b00      	cmp	r3, #0
 800297a:	d001      	beq.n	8002980 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800297c:	2303      	movs	r3, #3
 800297e:	e006      	b.n	800298e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	2220      	movs	r2, #32
 8002984:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002988:	2300      	movs	r3, #0
 800298a:	e000      	b.n	800298e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800298c:	2302      	movs	r3, #2
  }
}
 800298e:	4618      	mov	r0, r3
 8002990:	3720      	adds	r7, #32
 8002992:	46bd      	mov	sp, r7
 8002994:	bd80      	pop	{r7, pc}

08002996 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002996:	b580      	push	{r7, lr}
 8002998:	b08a      	sub	sp, #40	; 0x28
 800299a:	af02      	add	r7, sp, #8
 800299c:	60f8      	str	r0, [r7, #12]
 800299e:	60b9      	str	r1, [r7, #8]
 80029a0:	603b      	str	r3, [r7, #0]
 80029a2:	4613      	mov	r3, r2
 80029a4:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80029a6:	2300      	movs	r3, #0
 80029a8:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80029b0:	b2db      	uxtb	r3, r3
 80029b2:	2b20      	cmp	r3, #32
 80029b4:	f040 808c 	bne.w	8002ad0 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 80029b8:	68bb      	ldr	r3, [r7, #8]
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d002      	beq.n	80029c4 <HAL_UART_Receive+0x2e>
 80029be:	88fb      	ldrh	r3, [r7, #6]
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d101      	bne.n	80029c8 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 80029c4:	2301      	movs	r3, #1
 80029c6:	e084      	b.n	8002ad2 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80029ce:	2b01      	cmp	r3, #1
 80029d0:	d101      	bne.n	80029d6 <HAL_UART_Receive+0x40>
 80029d2:	2302      	movs	r3, #2
 80029d4:	e07d      	b.n	8002ad2 <HAL_UART_Receive+0x13c>
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	2201      	movs	r2, #1
 80029da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	2200      	movs	r2, #0
 80029e2:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	2222      	movs	r2, #34	; 0x22
 80029e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	2200      	movs	r2, #0
 80029f0:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80029f2:	f7fe fae9 	bl	8000fc8 <HAL_GetTick>
 80029f6:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	88fa      	ldrh	r2, [r7, #6]
 80029fc:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	88fa      	ldrh	r2, [r7, #6]
 8002a02:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	689b      	ldr	r3, [r3, #8]
 8002a08:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a0c:	d108      	bne.n	8002a20 <HAL_UART_Receive+0x8a>
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	691b      	ldr	r3, [r3, #16]
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d104      	bne.n	8002a20 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8002a16:	2300      	movs	r3, #0
 8002a18:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002a1a:	68bb      	ldr	r3, [r7, #8]
 8002a1c:	61bb      	str	r3, [r7, #24]
 8002a1e:	e003      	b.n	8002a28 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8002a20:	68bb      	ldr	r3, [r7, #8]
 8002a22:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002a24:	2300      	movs	r3, #0
 8002a26:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	2200      	movs	r2, #0
 8002a2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8002a30:	e043      	b.n	8002aba <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002a32:	683b      	ldr	r3, [r7, #0]
 8002a34:	9300      	str	r3, [sp, #0]
 8002a36:	697b      	ldr	r3, [r7, #20]
 8002a38:	2200      	movs	r2, #0
 8002a3a:	2120      	movs	r1, #32
 8002a3c:	68f8      	ldr	r0, [r7, #12]
 8002a3e:	f000 f84c 	bl	8002ada <UART_WaitOnFlagUntilTimeout>
 8002a42:	4603      	mov	r3, r0
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d001      	beq.n	8002a4c <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8002a48:	2303      	movs	r3, #3
 8002a4a:	e042      	b.n	8002ad2 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8002a4c:	69fb      	ldr	r3, [r7, #28]
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d10c      	bne.n	8002a6c <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	685b      	ldr	r3, [r3, #4]
 8002a58:	b29b      	uxth	r3, r3
 8002a5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002a5e:	b29a      	uxth	r2, r3
 8002a60:	69bb      	ldr	r3, [r7, #24]
 8002a62:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8002a64:	69bb      	ldr	r3, [r7, #24]
 8002a66:	3302      	adds	r3, #2
 8002a68:	61bb      	str	r3, [r7, #24]
 8002a6a:	e01f      	b.n	8002aac <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	689b      	ldr	r3, [r3, #8]
 8002a70:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a74:	d007      	beq.n	8002a86 <HAL_UART_Receive+0xf0>
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	689b      	ldr	r3, [r3, #8]
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d10a      	bne.n	8002a94 <HAL_UART_Receive+0xfe>
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	691b      	ldr	r3, [r3, #16]
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d106      	bne.n	8002a94 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	685b      	ldr	r3, [r3, #4]
 8002a8c:	b2da      	uxtb	r2, r3
 8002a8e:	69fb      	ldr	r3, [r7, #28]
 8002a90:	701a      	strb	r2, [r3, #0]
 8002a92:	e008      	b.n	8002aa6 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	685b      	ldr	r3, [r3, #4]
 8002a9a:	b2db      	uxtb	r3, r3
 8002a9c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002aa0:	b2da      	uxtb	r2, r3
 8002aa2:	69fb      	ldr	r3, [r7, #28]
 8002aa4:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8002aa6:	69fb      	ldr	r3, [r7, #28]
 8002aa8:	3301      	adds	r3, #1
 8002aaa:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002ab0:	b29b      	uxth	r3, r3
 8002ab2:	3b01      	subs	r3, #1
 8002ab4:	b29a      	uxth	r2, r3
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002abe:	b29b      	uxth	r3, r3
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d1b6      	bne.n	8002a32 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	2220      	movs	r2, #32
 8002ac8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8002acc:	2300      	movs	r3, #0
 8002ace:	e000      	b.n	8002ad2 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8002ad0:	2302      	movs	r3, #2
  }
}
 8002ad2:	4618      	mov	r0, r3
 8002ad4:	3720      	adds	r7, #32
 8002ad6:	46bd      	mov	sp, r7
 8002ad8:	bd80      	pop	{r7, pc}

08002ada <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002ada:	b580      	push	{r7, lr}
 8002adc:	b090      	sub	sp, #64	; 0x40
 8002ade:	af00      	add	r7, sp, #0
 8002ae0:	60f8      	str	r0, [r7, #12]
 8002ae2:	60b9      	str	r1, [r7, #8]
 8002ae4:	603b      	str	r3, [r7, #0]
 8002ae6:	4613      	mov	r3, r2
 8002ae8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002aea:	e050      	b.n	8002b8e <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002aec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002aee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002af2:	d04c      	beq.n	8002b8e <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002af4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d007      	beq.n	8002b0a <UART_WaitOnFlagUntilTimeout+0x30>
 8002afa:	f7fe fa65 	bl	8000fc8 <HAL_GetTick>
 8002afe:	4602      	mov	r2, r0
 8002b00:	683b      	ldr	r3, [r7, #0]
 8002b02:	1ad3      	subs	r3, r2, r3
 8002b04:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002b06:	429a      	cmp	r2, r3
 8002b08:	d241      	bcs.n	8002b8e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	330c      	adds	r3, #12
 8002b10:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b14:	e853 3f00 	ldrex	r3, [r3]
 8002b18:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002b1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b1c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002b20:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	330c      	adds	r3, #12
 8002b28:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002b2a:	637a      	str	r2, [r7, #52]	; 0x34
 8002b2c:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b2e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002b30:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002b32:	e841 2300 	strex	r3, r2, [r1]
 8002b36:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002b38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d1e5      	bne.n	8002b0a <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	3314      	adds	r3, #20
 8002b44:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b46:	697b      	ldr	r3, [r7, #20]
 8002b48:	e853 3f00 	ldrex	r3, [r3]
 8002b4c:	613b      	str	r3, [r7, #16]
   return(result);
 8002b4e:	693b      	ldr	r3, [r7, #16]
 8002b50:	f023 0301 	bic.w	r3, r3, #1
 8002b54:	63bb      	str	r3, [r7, #56]	; 0x38
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	3314      	adds	r3, #20
 8002b5c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002b5e:	623a      	str	r2, [r7, #32]
 8002b60:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b62:	69f9      	ldr	r1, [r7, #28]
 8002b64:	6a3a      	ldr	r2, [r7, #32]
 8002b66:	e841 2300 	strex	r3, r2, [r1]
 8002b6a:	61bb      	str	r3, [r7, #24]
   return(result);
 8002b6c:	69bb      	ldr	r3, [r7, #24]
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d1e5      	bne.n	8002b3e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	2220      	movs	r2, #32
 8002b76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	2220      	movs	r2, #32
 8002b7e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	2200      	movs	r2, #0
 8002b86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002b8a:	2303      	movs	r3, #3
 8002b8c:	e00f      	b.n	8002bae <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	681a      	ldr	r2, [r3, #0]
 8002b94:	68bb      	ldr	r3, [r7, #8]
 8002b96:	4013      	ands	r3, r2
 8002b98:	68ba      	ldr	r2, [r7, #8]
 8002b9a:	429a      	cmp	r2, r3
 8002b9c:	bf0c      	ite	eq
 8002b9e:	2301      	moveq	r3, #1
 8002ba0:	2300      	movne	r3, #0
 8002ba2:	b2db      	uxtb	r3, r3
 8002ba4:	461a      	mov	r2, r3
 8002ba6:	79fb      	ldrb	r3, [r7, #7]
 8002ba8:	429a      	cmp	r2, r3
 8002baa:	d09f      	beq.n	8002aec <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002bac:	2300      	movs	r3, #0
}
 8002bae:	4618      	mov	r0, r3
 8002bb0:	3740      	adds	r7, #64	; 0x40
 8002bb2:	46bd      	mov	sp, r7
 8002bb4:	bd80      	pop	{r7, pc}
	...

08002bb8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002bb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002bbc:	b09f      	sub	sp, #124	; 0x7c
 8002bbe:	af00      	add	r7, sp, #0
 8002bc0:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002bc2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	691b      	ldr	r3, [r3, #16]
 8002bc8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002bcc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002bce:	68d9      	ldr	r1, [r3, #12]
 8002bd0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002bd2:	681a      	ldr	r2, [r3, #0]
 8002bd4:	ea40 0301 	orr.w	r3, r0, r1
 8002bd8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002bda:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002bdc:	689a      	ldr	r2, [r3, #8]
 8002bde:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002be0:	691b      	ldr	r3, [r3, #16]
 8002be2:	431a      	orrs	r2, r3
 8002be4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002be6:	695b      	ldr	r3, [r3, #20]
 8002be8:	431a      	orrs	r2, r3
 8002bea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002bec:	69db      	ldr	r3, [r3, #28]
 8002bee:	4313      	orrs	r3, r2
 8002bf0:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8002bf2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	68db      	ldr	r3, [r3, #12]
 8002bf8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002bfc:	f021 010c 	bic.w	r1, r1, #12
 8002c00:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c02:	681a      	ldr	r2, [r3, #0]
 8002c04:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002c06:	430b      	orrs	r3, r1
 8002c08:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002c0a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	695b      	ldr	r3, [r3, #20]
 8002c10:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002c14:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c16:	6999      	ldr	r1, [r3, #24]
 8002c18:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c1a:	681a      	ldr	r2, [r3, #0]
 8002c1c:	ea40 0301 	orr.w	r3, r0, r1
 8002c20:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002c22:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c24:	681a      	ldr	r2, [r3, #0]
 8002c26:	4bc5      	ldr	r3, [pc, #788]	; (8002f3c <UART_SetConfig+0x384>)
 8002c28:	429a      	cmp	r2, r3
 8002c2a:	d004      	beq.n	8002c36 <UART_SetConfig+0x7e>
 8002c2c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c2e:	681a      	ldr	r2, [r3, #0]
 8002c30:	4bc3      	ldr	r3, [pc, #780]	; (8002f40 <UART_SetConfig+0x388>)
 8002c32:	429a      	cmp	r2, r3
 8002c34:	d103      	bne.n	8002c3e <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002c36:	f7ff f907 	bl	8001e48 <HAL_RCC_GetPCLK2Freq>
 8002c3a:	6778      	str	r0, [r7, #116]	; 0x74
 8002c3c:	e002      	b.n	8002c44 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002c3e:	f7ff f8ef 	bl	8001e20 <HAL_RCC_GetPCLK1Freq>
 8002c42:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002c44:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c46:	69db      	ldr	r3, [r3, #28]
 8002c48:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002c4c:	f040 80b6 	bne.w	8002dbc <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002c50:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002c52:	461c      	mov	r4, r3
 8002c54:	f04f 0500 	mov.w	r5, #0
 8002c58:	4622      	mov	r2, r4
 8002c5a:	462b      	mov	r3, r5
 8002c5c:	1891      	adds	r1, r2, r2
 8002c5e:	6439      	str	r1, [r7, #64]	; 0x40
 8002c60:	415b      	adcs	r3, r3
 8002c62:	647b      	str	r3, [r7, #68]	; 0x44
 8002c64:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002c68:	1912      	adds	r2, r2, r4
 8002c6a:	eb45 0303 	adc.w	r3, r5, r3
 8002c6e:	f04f 0000 	mov.w	r0, #0
 8002c72:	f04f 0100 	mov.w	r1, #0
 8002c76:	00d9      	lsls	r1, r3, #3
 8002c78:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002c7c:	00d0      	lsls	r0, r2, #3
 8002c7e:	4602      	mov	r2, r0
 8002c80:	460b      	mov	r3, r1
 8002c82:	1911      	adds	r1, r2, r4
 8002c84:	6639      	str	r1, [r7, #96]	; 0x60
 8002c86:	416b      	adcs	r3, r5
 8002c88:	667b      	str	r3, [r7, #100]	; 0x64
 8002c8a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c8c:	685b      	ldr	r3, [r3, #4]
 8002c8e:	461a      	mov	r2, r3
 8002c90:	f04f 0300 	mov.w	r3, #0
 8002c94:	1891      	adds	r1, r2, r2
 8002c96:	63b9      	str	r1, [r7, #56]	; 0x38
 8002c98:	415b      	adcs	r3, r3
 8002c9a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002c9c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002ca0:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8002ca4:	f7fd faec 	bl	8000280 <__aeabi_uldivmod>
 8002ca8:	4602      	mov	r2, r0
 8002caa:	460b      	mov	r3, r1
 8002cac:	4ba5      	ldr	r3, [pc, #660]	; (8002f44 <UART_SetConfig+0x38c>)
 8002cae:	fba3 2302 	umull	r2, r3, r3, r2
 8002cb2:	095b      	lsrs	r3, r3, #5
 8002cb4:	011e      	lsls	r6, r3, #4
 8002cb6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002cb8:	461c      	mov	r4, r3
 8002cba:	f04f 0500 	mov.w	r5, #0
 8002cbe:	4622      	mov	r2, r4
 8002cc0:	462b      	mov	r3, r5
 8002cc2:	1891      	adds	r1, r2, r2
 8002cc4:	6339      	str	r1, [r7, #48]	; 0x30
 8002cc6:	415b      	adcs	r3, r3
 8002cc8:	637b      	str	r3, [r7, #52]	; 0x34
 8002cca:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002cce:	1912      	adds	r2, r2, r4
 8002cd0:	eb45 0303 	adc.w	r3, r5, r3
 8002cd4:	f04f 0000 	mov.w	r0, #0
 8002cd8:	f04f 0100 	mov.w	r1, #0
 8002cdc:	00d9      	lsls	r1, r3, #3
 8002cde:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002ce2:	00d0      	lsls	r0, r2, #3
 8002ce4:	4602      	mov	r2, r0
 8002ce6:	460b      	mov	r3, r1
 8002ce8:	1911      	adds	r1, r2, r4
 8002cea:	65b9      	str	r1, [r7, #88]	; 0x58
 8002cec:	416b      	adcs	r3, r5
 8002cee:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002cf0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002cf2:	685b      	ldr	r3, [r3, #4]
 8002cf4:	461a      	mov	r2, r3
 8002cf6:	f04f 0300 	mov.w	r3, #0
 8002cfa:	1891      	adds	r1, r2, r2
 8002cfc:	62b9      	str	r1, [r7, #40]	; 0x28
 8002cfe:	415b      	adcs	r3, r3
 8002d00:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002d02:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002d06:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8002d0a:	f7fd fab9 	bl	8000280 <__aeabi_uldivmod>
 8002d0e:	4602      	mov	r2, r0
 8002d10:	460b      	mov	r3, r1
 8002d12:	4b8c      	ldr	r3, [pc, #560]	; (8002f44 <UART_SetConfig+0x38c>)
 8002d14:	fba3 1302 	umull	r1, r3, r3, r2
 8002d18:	095b      	lsrs	r3, r3, #5
 8002d1a:	2164      	movs	r1, #100	; 0x64
 8002d1c:	fb01 f303 	mul.w	r3, r1, r3
 8002d20:	1ad3      	subs	r3, r2, r3
 8002d22:	00db      	lsls	r3, r3, #3
 8002d24:	3332      	adds	r3, #50	; 0x32
 8002d26:	4a87      	ldr	r2, [pc, #540]	; (8002f44 <UART_SetConfig+0x38c>)
 8002d28:	fba2 2303 	umull	r2, r3, r2, r3
 8002d2c:	095b      	lsrs	r3, r3, #5
 8002d2e:	005b      	lsls	r3, r3, #1
 8002d30:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002d34:	441e      	add	r6, r3
 8002d36:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002d38:	4618      	mov	r0, r3
 8002d3a:	f04f 0100 	mov.w	r1, #0
 8002d3e:	4602      	mov	r2, r0
 8002d40:	460b      	mov	r3, r1
 8002d42:	1894      	adds	r4, r2, r2
 8002d44:	623c      	str	r4, [r7, #32]
 8002d46:	415b      	adcs	r3, r3
 8002d48:	627b      	str	r3, [r7, #36]	; 0x24
 8002d4a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002d4e:	1812      	adds	r2, r2, r0
 8002d50:	eb41 0303 	adc.w	r3, r1, r3
 8002d54:	f04f 0400 	mov.w	r4, #0
 8002d58:	f04f 0500 	mov.w	r5, #0
 8002d5c:	00dd      	lsls	r5, r3, #3
 8002d5e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8002d62:	00d4      	lsls	r4, r2, #3
 8002d64:	4622      	mov	r2, r4
 8002d66:	462b      	mov	r3, r5
 8002d68:	1814      	adds	r4, r2, r0
 8002d6a:	653c      	str	r4, [r7, #80]	; 0x50
 8002d6c:	414b      	adcs	r3, r1
 8002d6e:	657b      	str	r3, [r7, #84]	; 0x54
 8002d70:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002d72:	685b      	ldr	r3, [r3, #4]
 8002d74:	461a      	mov	r2, r3
 8002d76:	f04f 0300 	mov.w	r3, #0
 8002d7a:	1891      	adds	r1, r2, r2
 8002d7c:	61b9      	str	r1, [r7, #24]
 8002d7e:	415b      	adcs	r3, r3
 8002d80:	61fb      	str	r3, [r7, #28]
 8002d82:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002d86:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8002d8a:	f7fd fa79 	bl	8000280 <__aeabi_uldivmod>
 8002d8e:	4602      	mov	r2, r0
 8002d90:	460b      	mov	r3, r1
 8002d92:	4b6c      	ldr	r3, [pc, #432]	; (8002f44 <UART_SetConfig+0x38c>)
 8002d94:	fba3 1302 	umull	r1, r3, r3, r2
 8002d98:	095b      	lsrs	r3, r3, #5
 8002d9a:	2164      	movs	r1, #100	; 0x64
 8002d9c:	fb01 f303 	mul.w	r3, r1, r3
 8002da0:	1ad3      	subs	r3, r2, r3
 8002da2:	00db      	lsls	r3, r3, #3
 8002da4:	3332      	adds	r3, #50	; 0x32
 8002da6:	4a67      	ldr	r2, [pc, #412]	; (8002f44 <UART_SetConfig+0x38c>)
 8002da8:	fba2 2303 	umull	r2, r3, r2, r3
 8002dac:	095b      	lsrs	r3, r3, #5
 8002dae:	f003 0207 	and.w	r2, r3, #7
 8002db2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	4432      	add	r2, r6
 8002db8:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002dba:	e0b9      	b.n	8002f30 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002dbc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002dbe:	461c      	mov	r4, r3
 8002dc0:	f04f 0500 	mov.w	r5, #0
 8002dc4:	4622      	mov	r2, r4
 8002dc6:	462b      	mov	r3, r5
 8002dc8:	1891      	adds	r1, r2, r2
 8002dca:	6139      	str	r1, [r7, #16]
 8002dcc:	415b      	adcs	r3, r3
 8002dce:	617b      	str	r3, [r7, #20]
 8002dd0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002dd4:	1912      	adds	r2, r2, r4
 8002dd6:	eb45 0303 	adc.w	r3, r5, r3
 8002dda:	f04f 0000 	mov.w	r0, #0
 8002dde:	f04f 0100 	mov.w	r1, #0
 8002de2:	00d9      	lsls	r1, r3, #3
 8002de4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002de8:	00d0      	lsls	r0, r2, #3
 8002dea:	4602      	mov	r2, r0
 8002dec:	460b      	mov	r3, r1
 8002dee:	eb12 0804 	adds.w	r8, r2, r4
 8002df2:	eb43 0905 	adc.w	r9, r3, r5
 8002df6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002df8:	685b      	ldr	r3, [r3, #4]
 8002dfa:	4618      	mov	r0, r3
 8002dfc:	f04f 0100 	mov.w	r1, #0
 8002e00:	f04f 0200 	mov.w	r2, #0
 8002e04:	f04f 0300 	mov.w	r3, #0
 8002e08:	008b      	lsls	r3, r1, #2
 8002e0a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8002e0e:	0082      	lsls	r2, r0, #2
 8002e10:	4640      	mov	r0, r8
 8002e12:	4649      	mov	r1, r9
 8002e14:	f7fd fa34 	bl	8000280 <__aeabi_uldivmod>
 8002e18:	4602      	mov	r2, r0
 8002e1a:	460b      	mov	r3, r1
 8002e1c:	4b49      	ldr	r3, [pc, #292]	; (8002f44 <UART_SetConfig+0x38c>)
 8002e1e:	fba3 2302 	umull	r2, r3, r3, r2
 8002e22:	095b      	lsrs	r3, r3, #5
 8002e24:	011e      	lsls	r6, r3, #4
 8002e26:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002e28:	4618      	mov	r0, r3
 8002e2a:	f04f 0100 	mov.w	r1, #0
 8002e2e:	4602      	mov	r2, r0
 8002e30:	460b      	mov	r3, r1
 8002e32:	1894      	adds	r4, r2, r2
 8002e34:	60bc      	str	r4, [r7, #8]
 8002e36:	415b      	adcs	r3, r3
 8002e38:	60fb      	str	r3, [r7, #12]
 8002e3a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002e3e:	1812      	adds	r2, r2, r0
 8002e40:	eb41 0303 	adc.w	r3, r1, r3
 8002e44:	f04f 0400 	mov.w	r4, #0
 8002e48:	f04f 0500 	mov.w	r5, #0
 8002e4c:	00dd      	lsls	r5, r3, #3
 8002e4e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8002e52:	00d4      	lsls	r4, r2, #3
 8002e54:	4622      	mov	r2, r4
 8002e56:	462b      	mov	r3, r5
 8002e58:	1814      	adds	r4, r2, r0
 8002e5a:	64bc      	str	r4, [r7, #72]	; 0x48
 8002e5c:	414b      	adcs	r3, r1
 8002e5e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002e60:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e62:	685b      	ldr	r3, [r3, #4]
 8002e64:	4618      	mov	r0, r3
 8002e66:	f04f 0100 	mov.w	r1, #0
 8002e6a:	f04f 0200 	mov.w	r2, #0
 8002e6e:	f04f 0300 	mov.w	r3, #0
 8002e72:	008b      	lsls	r3, r1, #2
 8002e74:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8002e78:	0082      	lsls	r2, r0, #2
 8002e7a:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8002e7e:	f7fd f9ff 	bl	8000280 <__aeabi_uldivmod>
 8002e82:	4602      	mov	r2, r0
 8002e84:	460b      	mov	r3, r1
 8002e86:	4b2f      	ldr	r3, [pc, #188]	; (8002f44 <UART_SetConfig+0x38c>)
 8002e88:	fba3 1302 	umull	r1, r3, r3, r2
 8002e8c:	095b      	lsrs	r3, r3, #5
 8002e8e:	2164      	movs	r1, #100	; 0x64
 8002e90:	fb01 f303 	mul.w	r3, r1, r3
 8002e94:	1ad3      	subs	r3, r2, r3
 8002e96:	011b      	lsls	r3, r3, #4
 8002e98:	3332      	adds	r3, #50	; 0x32
 8002e9a:	4a2a      	ldr	r2, [pc, #168]	; (8002f44 <UART_SetConfig+0x38c>)
 8002e9c:	fba2 2303 	umull	r2, r3, r2, r3
 8002ea0:	095b      	lsrs	r3, r3, #5
 8002ea2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002ea6:	441e      	add	r6, r3
 8002ea8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002eaa:	4618      	mov	r0, r3
 8002eac:	f04f 0100 	mov.w	r1, #0
 8002eb0:	4602      	mov	r2, r0
 8002eb2:	460b      	mov	r3, r1
 8002eb4:	1894      	adds	r4, r2, r2
 8002eb6:	603c      	str	r4, [r7, #0]
 8002eb8:	415b      	adcs	r3, r3
 8002eba:	607b      	str	r3, [r7, #4]
 8002ebc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002ec0:	1812      	adds	r2, r2, r0
 8002ec2:	eb41 0303 	adc.w	r3, r1, r3
 8002ec6:	f04f 0400 	mov.w	r4, #0
 8002eca:	f04f 0500 	mov.w	r5, #0
 8002ece:	00dd      	lsls	r5, r3, #3
 8002ed0:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8002ed4:	00d4      	lsls	r4, r2, #3
 8002ed6:	4622      	mov	r2, r4
 8002ed8:	462b      	mov	r3, r5
 8002eda:	eb12 0a00 	adds.w	sl, r2, r0
 8002ede:	eb43 0b01 	adc.w	fp, r3, r1
 8002ee2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ee4:	685b      	ldr	r3, [r3, #4]
 8002ee6:	4618      	mov	r0, r3
 8002ee8:	f04f 0100 	mov.w	r1, #0
 8002eec:	f04f 0200 	mov.w	r2, #0
 8002ef0:	f04f 0300 	mov.w	r3, #0
 8002ef4:	008b      	lsls	r3, r1, #2
 8002ef6:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8002efa:	0082      	lsls	r2, r0, #2
 8002efc:	4650      	mov	r0, sl
 8002efe:	4659      	mov	r1, fp
 8002f00:	f7fd f9be 	bl	8000280 <__aeabi_uldivmod>
 8002f04:	4602      	mov	r2, r0
 8002f06:	460b      	mov	r3, r1
 8002f08:	4b0e      	ldr	r3, [pc, #56]	; (8002f44 <UART_SetConfig+0x38c>)
 8002f0a:	fba3 1302 	umull	r1, r3, r3, r2
 8002f0e:	095b      	lsrs	r3, r3, #5
 8002f10:	2164      	movs	r1, #100	; 0x64
 8002f12:	fb01 f303 	mul.w	r3, r1, r3
 8002f16:	1ad3      	subs	r3, r2, r3
 8002f18:	011b      	lsls	r3, r3, #4
 8002f1a:	3332      	adds	r3, #50	; 0x32
 8002f1c:	4a09      	ldr	r2, [pc, #36]	; (8002f44 <UART_SetConfig+0x38c>)
 8002f1e:	fba2 2303 	umull	r2, r3, r2, r3
 8002f22:	095b      	lsrs	r3, r3, #5
 8002f24:	f003 020f 	and.w	r2, r3, #15
 8002f28:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	4432      	add	r2, r6
 8002f2e:	609a      	str	r2, [r3, #8]
}
 8002f30:	bf00      	nop
 8002f32:	377c      	adds	r7, #124	; 0x7c
 8002f34:	46bd      	mov	sp, r7
 8002f36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002f3a:	bf00      	nop
 8002f3c:	40011000 	.word	0x40011000
 8002f40:	40011400 	.word	0x40011400
 8002f44:	51eb851f 	.word	0x51eb851f

08002f48 <__errno>:
 8002f48:	4b01      	ldr	r3, [pc, #4]	; (8002f50 <__errno+0x8>)
 8002f4a:	6818      	ldr	r0, [r3, #0]
 8002f4c:	4770      	bx	lr
 8002f4e:	bf00      	nop
 8002f50:	20000010 	.word	0x20000010

08002f54 <__libc_init_array>:
 8002f54:	b570      	push	{r4, r5, r6, lr}
 8002f56:	4d0d      	ldr	r5, [pc, #52]	; (8002f8c <__libc_init_array+0x38>)
 8002f58:	4c0d      	ldr	r4, [pc, #52]	; (8002f90 <__libc_init_array+0x3c>)
 8002f5a:	1b64      	subs	r4, r4, r5
 8002f5c:	10a4      	asrs	r4, r4, #2
 8002f5e:	2600      	movs	r6, #0
 8002f60:	42a6      	cmp	r6, r4
 8002f62:	d109      	bne.n	8002f78 <__libc_init_array+0x24>
 8002f64:	4d0b      	ldr	r5, [pc, #44]	; (8002f94 <__libc_init_array+0x40>)
 8002f66:	4c0c      	ldr	r4, [pc, #48]	; (8002f98 <__libc_init_array+0x44>)
 8002f68:	f001 fa2a 	bl	80043c0 <_init>
 8002f6c:	1b64      	subs	r4, r4, r5
 8002f6e:	10a4      	asrs	r4, r4, #2
 8002f70:	2600      	movs	r6, #0
 8002f72:	42a6      	cmp	r6, r4
 8002f74:	d105      	bne.n	8002f82 <__libc_init_array+0x2e>
 8002f76:	bd70      	pop	{r4, r5, r6, pc}
 8002f78:	f855 3b04 	ldr.w	r3, [r5], #4
 8002f7c:	4798      	blx	r3
 8002f7e:	3601      	adds	r6, #1
 8002f80:	e7ee      	b.n	8002f60 <__libc_init_array+0xc>
 8002f82:	f855 3b04 	ldr.w	r3, [r5], #4
 8002f86:	4798      	blx	r3
 8002f88:	3601      	adds	r6, #1
 8002f8a:	e7f2      	b.n	8002f72 <__libc_init_array+0x1e>
 8002f8c:	080044ec 	.word	0x080044ec
 8002f90:	080044ec 	.word	0x080044ec
 8002f94:	080044ec 	.word	0x080044ec
 8002f98:	080044f0 	.word	0x080044f0

08002f9c <memset>:
 8002f9c:	4402      	add	r2, r0
 8002f9e:	4603      	mov	r3, r0
 8002fa0:	4293      	cmp	r3, r2
 8002fa2:	d100      	bne.n	8002fa6 <memset+0xa>
 8002fa4:	4770      	bx	lr
 8002fa6:	f803 1b01 	strb.w	r1, [r3], #1
 8002faa:	e7f9      	b.n	8002fa0 <memset+0x4>

08002fac <iprintf>:
 8002fac:	b40f      	push	{r0, r1, r2, r3}
 8002fae:	4b0a      	ldr	r3, [pc, #40]	; (8002fd8 <iprintf+0x2c>)
 8002fb0:	b513      	push	{r0, r1, r4, lr}
 8002fb2:	681c      	ldr	r4, [r3, #0]
 8002fb4:	b124      	cbz	r4, 8002fc0 <iprintf+0x14>
 8002fb6:	69a3      	ldr	r3, [r4, #24]
 8002fb8:	b913      	cbnz	r3, 8002fc0 <iprintf+0x14>
 8002fba:	4620      	mov	r0, r4
 8002fbc:	f000 fa22 	bl	8003404 <__sinit>
 8002fc0:	ab05      	add	r3, sp, #20
 8002fc2:	9a04      	ldr	r2, [sp, #16]
 8002fc4:	68a1      	ldr	r1, [r4, #8]
 8002fc6:	9301      	str	r3, [sp, #4]
 8002fc8:	4620      	mov	r0, r4
 8002fca:	f000 fd57 	bl	8003a7c <_vfiprintf_r>
 8002fce:	b002      	add	sp, #8
 8002fd0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002fd4:	b004      	add	sp, #16
 8002fd6:	4770      	bx	lr
 8002fd8:	20000010 	.word	0x20000010

08002fdc <setvbuf>:
 8002fdc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8002fe0:	461d      	mov	r5, r3
 8002fe2:	4b5d      	ldr	r3, [pc, #372]	; (8003158 <setvbuf+0x17c>)
 8002fe4:	681f      	ldr	r7, [r3, #0]
 8002fe6:	4604      	mov	r4, r0
 8002fe8:	460e      	mov	r6, r1
 8002fea:	4690      	mov	r8, r2
 8002fec:	b127      	cbz	r7, 8002ff8 <setvbuf+0x1c>
 8002fee:	69bb      	ldr	r3, [r7, #24]
 8002ff0:	b913      	cbnz	r3, 8002ff8 <setvbuf+0x1c>
 8002ff2:	4638      	mov	r0, r7
 8002ff4:	f000 fa06 	bl	8003404 <__sinit>
 8002ff8:	4b58      	ldr	r3, [pc, #352]	; (800315c <setvbuf+0x180>)
 8002ffa:	429c      	cmp	r4, r3
 8002ffc:	d167      	bne.n	80030ce <setvbuf+0xf2>
 8002ffe:	687c      	ldr	r4, [r7, #4]
 8003000:	f1b8 0f02 	cmp.w	r8, #2
 8003004:	d006      	beq.n	8003014 <setvbuf+0x38>
 8003006:	f1b8 0f01 	cmp.w	r8, #1
 800300a:	f200 809f 	bhi.w	800314c <setvbuf+0x170>
 800300e:	2d00      	cmp	r5, #0
 8003010:	f2c0 809c 	blt.w	800314c <setvbuf+0x170>
 8003014:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003016:	07db      	lsls	r3, r3, #31
 8003018:	d405      	bmi.n	8003026 <setvbuf+0x4a>
 800301a:	89a3      	ldrh	r3, [r4, #12]
 800301c:	0598      	lsls	r0, r3, #22
 800301e:	d402      	bmi.n	8003026 <setvbuf+0x4a>
 8003020:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003022:	f000 fa8d 	bl	8003540 <__retarget_lock_acquire_recursive>
 8003026:	4621      	mov	r1, r4
 8003028:	4638      	mov	r0, r7
 800302a:	f000 f957 	bl	80032dc <_fflush_r>
 800302e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003030:	b141      	cbz	r1, 8003044 <setvbuf+0x68>
 8003032:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003036:	4299      	cmp	r1, r3
 8003038:	d002      	beq.n	8003040 <setvbuf+0x64>
 800303a:	4638      	mov	r0, r7
 800303c:	f000 faee 	bl	800361c <_free_r>
 8003040:	2300      	movs	r3, #0
 8003042:	6363      	str	r3, [r4, #52]	; 0x34
 8003044:	2300      	movs	r3, #0
 8003046:	61a3      	str	r3, [r4, #24]
 8003048:	6063      	str	r3, [r4, #4]
 800304a:	89a3      	ldrh	r3, [r4, #12]
 800304c:	0619      	lsls	r1, r3, #24
 800304e:	d503      	bpl.n	8003058 <setvbuf+0x7c>
 8003050:	6921      	ldr	r1, [r4, #16]
 8003052:	4638      	mov	r0, r7
 8003054:	f000 fae2 	bl	800361c <_free_r>
 8003058:	89a3      	ldrh	r3, [r4, #12]
 800305a:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 800305e:	f023 0303 	bic.w	r3, r3, #3
 8003062:	f1b8 0f02 	cmp.w	r8, #2
 8003066:	81a3      	strh	r3, [r4, #12]
 8003068:	d06c      	beq.n	8003144 <setvbuf+0x168>
 800306a:	ab01      	add	r3, sp, #4
 800306c:	466a      	mov	r2, sp
 800306e:	4621      	mov	r1, r4
 8003070:	4638      	mov	r0, r7
 8003072:	f000 fa67 	bl	8003544 <__swhatbuf_r>
 8003076:	89a3      	ldrh	r3, [r4, #12]
 8003078:	4318      	orrs	r0, r3
 800307a:	81a0      	strh	r0, [r4, #12]
 800307c:	2d00      	cmp	r5, #0
 800307e:	d130      	bne.n	80030e2 <setvbuf+0x106>
 8003080:	9d00      	ldr	r5, [sp, #0]
 8003082:	4628      	mov	r0, r5
 8003084:	f000 fac2 	bl	800360c <malloc>
 8003088:	4606      	mov	r6, r0
 800308a:	2800      	cmp	r0, #0
 800308c:	d155      	bne.n	800313a <setvbuf+0x15e>
 800308e:	f8dd 9000 	ldr.w	r9, [sp]
 8003092:	45a9      	cmp	r9, r5
 8003094:	d14a      	bne.n	800312c <setvbuf+0x150>
 8003096:	f04f 35ff 	mov.w	r5, #4294967295
 800309a:	2200      	movs	r2, #0
 800309c:	60a2      	str	r2, [r4, #8]
 800309e:	f104 0247 	add.w	r2, r4, #71	; 0x47
 80030a2:	6022      	str	r2, [r4, #0]
 80030a4:	6122      	str	r2, [r4, #16]
 80030a6:	2201      	movs	r2, #1
 80030a8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80030ac:	6162      	str	r2, [r4, #20]
 80030ae:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80030b0:	f043 0302 	orr.w	r3, r3, #2
 80030b4:	07d2      	lsls	r2, r2, #31
 80030b6:	81a3      	strh	r3, [r4, #12]
 80030b8:	d405      	bmi.n	80030c6 <setvbuf+0xea>
 80030ba:	f413 7f00 	tst.w	r3, #512	; 0x200
 80030be:	d102      	bne.n	80030c6 <setvbuf+0xea>
 80030c0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80030c2:	f000 fa3e 	bl	8003542 <__retarget_lock_release_recursive>
 80030c6:	4628      	mov	r0, r5
 80030c8:	b003      	add	sp, #12
 80030ca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80030ce:	4b24      	ldr	r3, [pc, #144]	; (8003160 <setvbuf+0x184>)
 80030d0:	429c      	cmp	r4, r3
 80030d2:	d101      	bne.n	80030d8 <setvbuf+0xfc>
 80030d4:	68bc      	ldr	r4, [r7, #8]
 80030d6:	e793      	b.n	8003000 <setvbuf+0x24>
 80030d8:	4b22      	ldr	r3, [pc, #136]	; (8003164 <setvbuf+0x188>)
 80030da:	429c      	cmp	r4, r3
 80030dc:	bf08      	it	eq
 80030de:	68fc      	ldreq	r4, [r7, #12]
 80030e0:	e78e      	b.n	8003000 <setvbuf+0x24>
 80030e2:	2e00      	cmp	r6, #0
 80030e4:	d0cd      	beq.n	8003082 <setvbuf+0xa6>
 80030e6:	69bb      	ldr	r3, [r7, #24]
 80030e8:	b913      	cbnz	r3, 80030f0 <setvbuf+0x114>
 80030ea:	4638      	mov	r0, r7
 80030ec:	f000 f98a 	bl	8003404 <__sinit>
 80030f0:	f1b8 0f01 	cmp.w	r8, #1
 80030f4:	bf08      	it	eq
 80030f6:	89a3      	ldrheq	r3, [r4, #12]
 80030f8:	6026      	str	r6, [r4, #0]
 80030fa:	bf04      	itt	eq
 80030fc:	f043 0301 	orreq.w	r3, r3, #1
 8003100:	81a3      	strheq	r3, [r4, #12]
 8003102:	89a2      	ldrh	r2, [r4, #12]
 8003104:	f012 0308 	ands.w	r3, r2, #8
 8003108:	e9c4 6504 	strd	r6, r5, [r4, #16]
 800310c:	d01c      	beq.n	8003148 <setvbuf+0x16c>
 800310e:	07d3      	lsls	r3, r2, #31
 8003110:	bf41      	itttt	mi
 8003112:	2300      	movmi	r3, #0
 8003114:	426d      	negmi	r5, r5
 8003116:	60a3      	strmi	r3, [r4, #8]
 8003118:	61a5      	strmi	r5, [r4, #24]
 800311a:	bf58      	it	pl
 800311c:	60a5      	strpl	r5, [r4, #8]
 800311e:	6e65      	ldr	r5, [r4, #100]	; 0x64
 8003120:	f015 0501 	ands.w	r5, r5, #1
 8003124:	d115      	bne.n	8003152 <setvbuf+0x176>
 8003126:	f412 7f00 	tst.w	r2, #512	; 0x200
 800312a:	e7c8      	b.n	80030be <setvbuf+0xe2>
 800312c:	4648      	mov	r0, r9
 800312e:	f000 fa6d 	bl	800360c <malloc>
 8003132:	4606      	mov	r6, r0
 8003134:	2800      	cmp	r0, #0
 8003136:	d0ae      	beq.n	8003096 <setvbuf+0xba>
 8003138:	464d      	mov	r5, r9
 800313a:	89a3      	ldrh	r3, [r4, #12]
 800313c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003140:	81a3      	strh	r3, [r4, #12]
 8003142:	e7d0      	b.n	80030e6 <setvbuf+0x10a>
 8003144:	2500      	movs	r5, #0
 8003146:	e7a8      	b.n	800309a <setvbuf+0xbe>
 8003148:	60a3      	str	r3, [r4, #8]
 800314a:	e7e8      	b.n	800311e <setvbuf+0x142>
 800314c:	f04f 35ff 	mov.w	r5, #4294967295
 8003150:	e7b9      	b.n	80030c6 <setvbuf+0xea>
 8003152:	2500      	movs	r5, #0
 8003154:	e7b7      	b.n	80030c6 <setvbuf+0xea>
 8003156:	bf00      	nop
 8003158:	20000010 	.word	0x20000010
 800315c:	08004470 	.word	0x08004470
 8003160:	08004490 	.word	0x08004490
 8003164:	08004450 	.word	0x08004450

08003168 <sniprintf>:
 8003168:	b40c      	push	{r2, r3}
 800316a:	b530      	push	{r4, r5, lr}
 800316c:	4b17      	ldr	r3, [pc, #92]	; (80031cc <sniprintf+0x64>)
 800316e:	1e0c      	subs	r4, r1, #0
 8003170:	681d      	ldr	r5, [r3, #0]
 8003172:	b09d      	sub	sp, #116	; 0x74
 8003174:	da08      	bge.n	8003188 <sniprintf+0x20>
 8003176:	238b      	movs	r3, #139	; 0x8b
 8003178:	602b      	str	r3, [r5, #0]
 800317a:	f04f 30ff 	mov.w	r0, #4294967295
 800317e:	b01d      	add	sp, #116	; 0x74
 8003180:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003184:	b002      	add	sp, #8
 8003186:	4770      	bx	lr
 8003188:	f44f 7302 	mov.w	r3, #520	; 0x208
 800318c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8003190:	bf14      	ite	ne
 8003192:	f104 33ff 	addne.w	r3, r4, #4294967295
 8003196:	4623      	moveq	r3, r4
 8003198:	9304      	str	r3, [sp, #16]
 800319a:	9307      	str	r3, [sp, #28]
 800319c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80031a0:	9002      	str	r0, [sp, #8]
 80031a2:	9006      	str	r0, [sp, #24]
 80031a4:	f8ad 3016 	strh.w	r3, [sp, #22]
 80031a8:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80031aa:	ab21      	add	r3, sp, #132	; 0x84
 80031ac:	a902      	add	r1, sp, #8
 80031ae:	4628      	mov	r0, r5
 80031b0:	9301      	str	r3, [sp, #4]
 80031b2:	f000 fb39 	bl	8003828 <_svfiprintf_r>
 80031b6:	1c43      	adds	r3, r0, #1
 80031b8:	bfbc      	itt	lt
 80031ba:	238b      	movlt	r3, #139	; 0x8b
 80031bc:	602b      	strlt	r3, [r5, #0]
 80031be:	2c00      	cmp	r4, #0
 80031c0:	d0dd      	beq.n	800317e <sniprintf+0x16>
 80031c2:	9b02      	ldr	r3, [sp, #8]
 80031c4:	2200      	movs	r2, #0
 80031c6:	701a      	strb	r2, [r3, #0]
 80031c8:	e7d9      	b.n	800317e <sniprintf+0x16>
 80031ca:	bf00      	nop
 80031cc:	20000010 	.word	0x20000010

080031d0 <__sflush_r>:
 80031d0:	898a      	ldrh	r2, [r1, #12]
 80031d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80031d6:	4605      	mov	r5, r0
 80031d8:	0710      	lsls	r0, r2, #28
 80031da:	460c      	mov	r4, r1
 80031dc:	d458      	bmi.n	8003290 <__sflush_r+0xc0>
 80031de:	684b      	ldr	r3, [r1, #4]
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	dc05      	bgt.n	80031f0 <__sflush_r+0x20>
 80031e4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	dc02      	bgt.n	80031f0 <__sflush_r+0x20>
 80031ea:	2000      	movs	r0, #0
 80031ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80031f0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80031f2:	2e00      	cmp	r6, #0
 80031f4:	d0f9      	beq.n	80031ea <__sflush_r+0x1a>
 80031f6:	2300      	movs	r3, #0
 80031f8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80031fc:	682f      	ldr	r7, [r5, #0]
 80031fe:	602b      	str	r3, [r5, #0]
 8003200:	d032      	beq.n	8003268 <__sflush_r+0x98>
 8003202:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003204:	89a3      	ldrh	r3, [r4, #12]
 8003206:	075a      	lsls	r2, r3, #29
 8003208:	d505      	bpl.n	8003216 <__sflush_r+0x46>
 800320a:	6863      	ldr	r3, [r4, #4]
 800320c:	1ac0      	subs	r0, r0, r3
 800320e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003210:	b10b      	cbz	r3, 8003216 <__sflush_r+0x46>
 8003212:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003214:	1ac0      	subs	r0, r0, r3
 8003216:	2300      	movs	r3, #0
 8003218:	4602      	mov	r2, r0
 800321a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800321c:	6a21      	ldr	r1, [r4, #32]
 800321e:	4628      	mov	r0, r5
 8003220:	47b0      	blx	r6
 8003222:	1c43      	adds	r3, r0, #1
 8003224:	89a3      	ldrh	r3, [r4, #12]
 8003226:	d106      	bne.n	8003236 <__sflush_r+0x66>
 8003228:	6829      	ldr	r1, [r5, #0]
 800322a:	291d      	cmp	r1, #29
 800322c:	d82c      	bhi.n	8003288 <__sflush_r+0xb8>
 800322e:	4a2a      	ldr	r2, [pc, #168]	; (80032d8 <__sflush_r+0x108>)
 8003230:	40ca      	lsrs	r2, r1
 8003232:	07d6      	lsls	r6, r2, #31
 8003234:	d528      	bpl.n	8003288 <__sflush_r+0xb8>
 8003236:	2200      	movs	r2, #0
 8003238:	6062      	str	r2, [r4, #4]
 800323a:	04d9      	lsls	r1, r3, #19
 800323c:	6922      	ldr	r2, [r4, #16]
 800323e:	6022      	str	r2, [r4, #0]
 8003240:	d504      	bpl.n	800324c <__sflush_r+0x7c>
 8003242:	1c42      	adds	r2, r0, #1
 8003244:	d101      	bne.n	800324a <__sflush_r+0x7a>
 8003246:	682b      	ldr	r3, [r5, #0]
 8003248:	b903      	cbnz	r3, 800324c <__sflush_r+0x7c>
 800324a:	6560      	str	r0, [r4, #84]	; 0x54
 800324c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800324e:	602f      	str	r7, [r5, #0]
 8003250:	2900      	cmp	r1, #0
 8003252:	d0ca      	beq.n	80031ea <__sflush_r+0x1a>
 8003254:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003258:	4299      	cmp	r1, r3
 800325a:	d002      	beq.n	8003262 <__sflush_r+0x92>
 800325c:	4628      	mov	r0, r5
 800325e:	f000 f9dd 	bl	800361c <_free_r>
 8003262:	2000      	movs	r0, #0
 8003264:	6360      	str	r0, [r4, #52]	; 0x34
 8003266:	e7c1      	b.n	80031ec <__sflush_r+0x1c>
 8003268:	6a21      	ldr	r1, [r4, #32]
 800326a:	2301      	movs	r3, #1
 800326c:	4628      	mov	r0, r5
 800326e:	47b0      	blx	r6
 8003270:	1c41      	adds	r1, r0, #1
 8003272:	d1c7      	bne.n	8003204 <__sflush_r+0x34>
 8003274:	682b      	ldr	r3, [r5, #0]
 8003276:	2b00      	cmp	r3, #0
 8003278:	d0c4      	beq.n	8003204 <__sflush_r+0x34>
 800327a:	2b1d      	cmp	r3, #29
 800327c:	d001      	beq.n	8003282 <__sflush_r+0xb2>
 800327e:	2b16      	cmp	r3, #22
 8003280:	d101      	bne.n	8003286 <__sflush_r+0xb6>
 8003282:	602f      	str	r7, [r5, #0]
 8003284:	e7b1      	b.n	80031ea <__sflush_r+0x1a>
 8003286:	89a3      	ldrh	r3, [r4, #12]
 8003288:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800328c:	81a3      	strh	r3, [r4, #12]
 800328e:	e7ad      	b.n	80031ec <__sflush_r+0x1c>
 8003290:	690f      	ldr	r7, [r1, #16]
 8003292:	2f00      	cmp	r7, #0
 8003294:	d0a9      	beq.n	80031ea <__sflush_r+0x1a>
 8003296:	0793      	lsls	r3, r2, #30
 8003298:	680e      	ldr	r6, [r1, #0]
 800329a:	bf08      	it	eq
 800329c:	694b      	ldreq	r3, [r1, #20]
 800329e:	600f      	str	r7, [r1, #0]
 80032a0:	bf18      	it	ne
 80032a2:	2300      	movne	r3, #0
 80032a4:	eba6 0807 	sub.w	r8, r6, r7
 80032a8:	608b      	str	r3, [r1, #8]
 80032aa:	f1b8 0f00 	cmp.w	r8, #0
 80032ae:	dd9c      	ble.n	80031ea <__sflush_r+0x1a>
 80032b0:	6a21      	ldr	r1, [r4, #32]
 80032b2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80032b4:	4643      	mov	r3, r8
 80032b6:	463a      	mov	r2, r7
 80032b8:	4628      	mov	r0, r5
 80032ba:	47b0      	blx	r6
 80032bc:	2800      	cmp	r0, #0
 80032be:	dc06      	bgt.n	80032ce <__sflush_r+0xfe>
 80032c0:	89a3      	ldrh	r3, [r4, #12]
 80032c2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80032c6:	81a3      	strh	r3, [r4, #12]
 80032c8:	f04f 30ff 	mov.w	r0, #4294967295
 80032cc:	e78e      	b.n	80031ec <__sflush_r+0x1c>
 80032ce:	4407      	add	r7, r0
 80032d0:	eba8 0800 	sub.w	r8, r8, r0
 80032d4:	e7e9      	b.n	80032aa <__sflush_r+0xda>
 80032d6:	bf00      	nop
 80032d8:	20400001 	.word	0x20400001

080032dc <_fflush_r>:
 80032dc:	b538      	push	{r3, r4, r5, lr}
 80032de:	690b      	ldr	r3, [r1, #16]
 80032e0:	4605      	mov	r5, r0
 80032e2:	460c      	mov	r4, r1
 80032e4:	b913      	cbnz	r3, 80032ec <_fflush_r+0x10>
 80032e6:	2500      	movs	r5, #0
 80032e8:	4628      	mov	r0, r5
 80032ea:	bd38      	pop	{r3, r4, r5, pc}
 80032ec:	b118      	cbz	r0, 80032f6 <_fflush_r+0x1a>
 80032ee:	6983      	ldr	r3, [r0, #24]
 80032f0:	b90b      	cbnz	r3, 80032f6 <_fflush_r+0x1a>
 80032f2:	f000 f887 	bl	8003404 <__sinit>
 80032f6:	4b14      	ldr	r3, [pc, #80]	; (8003348 <_fflush_r+0x6c>)
 80032f8:	429c      	cmp	r4, r3
 80032fa:	d11b      	bne.n	8003334 <_fflush_r+0x58>
 80032fc:	686c      	ldr	r4, [r5, #4]
 80032fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003302:	2b00      	cmp	r3, #0
 8003304:	d0ef      	beq.n	80032e6 <_fflush_r+0xa>
 8003306:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003308:	07d0      	lsls	r0, r2, #31
 800330a:	d404      	bmi.n	8003316 <_fflush_r+0x3a>
 800330c:	0599      	lsls	r1, r3, #22
 800330e:	d402      	bmi.n	8003316 <_fflush_r+0x3a>
 8003310:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003312:	f000 f915 	bl	8003540 <__retarget_lock_acquire_recursive>
 8003316:	4628      	mov	r0, r5
 8003318:	4621      	mov	r1, r4
 800331a:	f7ff ff59 	bl	80031d0 <__sflush_r>
 800331e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003320:	07da      	lsls	r2, r3, #31
 8003322:	4605      	mov	r5, r0
 8003324:	d4e0      	bmi.n	80032e8 <_fflush_r+0xc>
 8003326:	89a3      	ldrh	r3, [r4, #12]
 8003328:	059b      	lsls	r3, r3, #22
 800332a:	d4dd      	bmi.n	80032e8 <_fflush_r+0xc>
 800332c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800332e:	f000 f908 	bl	8003542 <__retarget_lock_release_recursive>
 8003332:	e7d9      	b.n	80032e8 <_fflush_r+0xc>
 8003334:	4b05      	ldr	r3, [pc, #20]	; (800334c <_fflush_r+0x70>)
 8003336:	429c      	cmp	r4, r3
 8003338:	d101      	bne.n	800333e <_fflush_r+0x62>
 800333a:	68ac      	ldr	r4, [r5, #8]
 800333c:	e7df      	b.n	80032fe <_fflush_r+0x22>
 800333e:	4b04      	ldr	r3, [pc, #16]	; (8003350 <_fflush_r+0x74>)
 8003340:	429c      	cmp	r4, r3
 8003342:	bf08      	it	eq
 8003344:	68ec      	ldreq	r4, [r5, #12]
 8003346:	e7da      	b.n	80032fe <_fflush_r+0x22>
 8003348:	08004470 	.word	0x08004470
 800334c:	08004490 	.word	0x08004490
 8003350:	08004450 	.word	0x08004450

08003354 <std>:
 8003354:	2300      	movs	r3, #0
 8003356:	b510      	push	{r4, lr}
 8003358:	4604      	mov	r4, r0
 800335a:	e9c0 3300 	strd	r3, r3, [r0]
 800335e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003362:	6083      	str	r3, [r0, #8]
 8003364:	8181      	strh	r1, [r0, #12]
 8003366:	6643      	str	r3, [r0, #100]	; 0x64
 8003368:	81c2      	strh	r2, [r0, #14]
 800336a:	6183      	str	r3, [r0, #24]
 800336c:	4619      	mov	r1, r3
 800336e:	2208      	movs	r2, #8
 8003370:	305c      	adds	r0, #92	; 0x5c
 8003372:	f7ff fe13 	bl	8002f9c <memset>
 8003376:	4b05      	ldr	r3, [pc, #20]	; (800338c <std+0x38>)
 8003378:	6263      	str	r3, [r4, #36]	; 0x24
 800337a:	4b05      	ldr	r3, [pc, #20]	; (8003390 <std+0x3c>)
 800337c:	62a3      	str	r3, [r4, #40]	; 0x28
 800337e:	4b05      	ldr	r3, [pc, #20]	; (8003394 <std+0x40>)
 8003380:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003382:	4b05      	ldr	r3, [pc, #20]	; (8003398 <std+0x44>)
 8003384:	6224      	str	r4, [r4, #32]
 8003386:	6323      	str	r3, [r4, #48]	; 0x30
 8003388:	bd10      	pop	{r4, pc}
 800338a:	bf00      	nop
 800338c:	08004025 	.word	0x08004025
 8003390:	08004047 	.word	0x08004047
 8003394:	0800407f 	.word	0x0800407f
 8003398:	080040a3 	.word	0x080040a3

0800339c <_cleanup_r>:
 800339c:	4901      	ldr	r1, [pc, #4]	; (80033a4 <_cleanup_r+0x8>)
 800339e:	f000 b8af 	b.w	8003500 <_fwalk_reent>
 80033a2:	bf00      	nop
 80033a4:	080032dd 	.word	0x080032dd

080033a8 <__sfmoreglue>:
 80033a8:	b570      	push	{r4, r5, r6, lr}
 80033aa:	1e4a      	subs	r2, r1, #1
 80033ac:	2568      	movs	r5, #104	; 0x68
 80033ae:	4355      	muls	r5, r2
 80033b0:	460e      	mov	r6, r1
 80033b2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80033b6:	f000 f981 	bl	80036bc <_malloc_r>
 80033ba:	4604      	mov	r4, r0
 80033bc:	b140      	cbz	r0, 80033d0 <__sfmoreglue+0x28>
 80033be:	2100      	movs	r1, #0
 80033c0:	e9c0 1600 	strd	r1, r6, [r0]
 80033c4:	300c      	adds	r0, #12
 80033c6:	60a0      	str	r0, [r4, #8]
 80033c8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80033cc:	f7ff fde6 	bl	8002f9c <memset>
 80033d0:	4620      	mov	r0, r4
 80033d2:	bd70      	pop	{r4, r5, r6, pc}

080033d4 <__sfp_lock_acquire>:
 80033d4:	4801      	ldr	r0, [pc, #4]	; (80033dc <__sfp_lock_acquire+0x8>)
 80033d6:	f000 b8b3 	b.w	8003540 <__retarget_lock_acquire_recursive>
 80033da:	bf00      	nop
 80033dc:	200001c8 	.word	0x200001c8

080033e0 <__sfp_lock_release>:
 80033e0:	4801      	ldr	r0, [pc, #4]	; (80033e8 <__sfp_lock_release+0x8>)
 80033e2:	f000 b8ae 	b.w	8003542 <__retarget_lock_release_recursive>
 80033e6:	bf00      	nop
 80033e8:	200001c8 	.word	0x200001c8

080033ec <__sinit_lock_acquire>:
 80033ec:	4801      	ldr	r0, [pc, #4]	; (80033f4 <__sinit_lock_acquire+0x8>)
 80033ee:	f000 b8a7 	b.w	8003540 <__retarget_lock_acquire_recursive>
 80033f2:	bf00      	nop
 80033f4:	200001c3 	.word	0x200001c3

080033f8 <__sinit_lock_release>:
 80033f8:	4801      	ldr	r0, [pc, #4]	; (8003400 <__sinit_lock_release+0x8>)
 80033fa:	f000 b8a2 	b.w	8003542 <__retarget_lock_release_recursive>
 80033fe:	bf00      	nop
 8003400:	200001c3 	.word	0x200001c3

08003404 <__sinit>:
 8003404:	b510      	push	{r4, lr}
 8003406:	4604      	mov	r4, r0
 8003408:	f7ff fff0 	bl	80033ec <__sinit_lock_acquire>
 800340c:	69a3      	ldr	r3, [r4, #24]
 800340e:	b11b      	cbz	r3, 8003418 <__sinit+0x14>
 8003410:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003414:	f7ff bff0 	b.w	80033f8 <__sinit_lock_release>
 8003418:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800341c:	6523      	str	r3, [r4, #80]	; 0x50
 800341e:	4b13      	ldr	r3, [pc, #76]	; (800346c <__sinit+0x68>)
 8003420:	4a13      	ldr	r2, [pc, #76]	; (8003470 <__sinit+0x6c>)
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	62a2      	str	r2, [r4, #40]	; 0x28
 8003426:	42a3      	cmp	r3, r4
 8003428:	bf04      	itt	eq
 800342a:	2301      	moveq	r3, #1
 800342c:	61a3      	streq	r3, [r4, #24]
 800342e:	4620      	mov	r0, r4
 8003430:	f000 f820 	bl	8003474 <__sfp>
 8003434:	6060      	str	r0, [r4, #4]
 8003436:	4620      	mov	r0, r4
 8003438:	f000 f81c 	bl	8003474 <__sfp>
 800343c:	60a0      	str	r0, [r4, #8]
 800343e:	4620      	mov	r0, r4
 8003440:	f000 f818 	bl	8003474 <__sfp>
 8003444:	2200      	movs	r2, #0
 8003446:	60e0      	str	r0, [r4, #12]
 8003448:	2104      	movs	r1, #4
 800344a:	6860      	ldr	r0, [r4, #4]
 800344c:	f7ff ff82 	bl	8003354 <std>
 8003450:	68a0      	ldr	r0, [r4, #8]
 8003452:	2201      	movs	r2, #1
 8003454:	2109      	movs	r1, #9
 8003456:	f7ff ff7d 	bl	8003354 <std>
 800345a:	68e0      	ldr	r0, [r4, #12]
 800345c:	2202      	movs	r2, #2
 800345e:	2112      	movs	r1, #18
 8003460:	f7ff ff78 	bl	8003354 <std>
 8003464:	2301      	movs	r3, #1
 8003466:	61a3      	str	r3, [r4, #24]
 8003468:	e7d2      	b.n	8003410 <__sinit+0xc>
 800346a:	bf00      	nop
 800346c:	0800444c 	.word	0x0800444c
 8003470:	0800339d 	.word	0x0800339d

08003474 <__sfp>:
 8003474:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003476:	4607      	mov	r7, r0
 8003478:	f7ff ffac 	bl	80033d4 <__sfp_lock_acquire>
 800347c:	4b1e      	ldr	r3, [pc, #120]	; (80034f8 <__sfp+0x84>)
 800347e:	681e      	ldr	r6, [r3, #0]
 8003480:	69b3      	ldr	r3, [r6, #24]
 8003482:	b913      	cbnz	r3, 800348a <__sfp+0x16>
 8003484:	4630      	mov	r0, r6
 8003486:	f7ff ffbd 	bl	8003404 <__sinit>
 800348a:	3648      	adds	r6, #72	; 0x48
 800348c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8003490:	3b01      	subs	r3, #1
 8003492:	d503      	bpl.n	800349c <__sfp+0x28>
 8003494:	6833      	ldr	r3, [r6, #0]
 8003496:	b30b      	cbz	r3, 80034dc <__sfp+0x68>
 8003498:	6836      	ldr	r6, [r6, #0]
 800349a:	e7f7      	b.n	800348c <__sfp+0x18>
 800349c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80034a0:	b9d5      	cbnz	r5, 80034d8 <__sfp+0x64>
 80034a2:	4b16      	ldr	r3, [pc, #88]	; (80034fc <__sfp+0x88>)
 80034a4:	60e3      	str	r3, [r4, #12]
 80034a6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80034aa:	6665      	str	r5, [r4, #100]	; 0x64
 80034ac:	f000 f847 	bl	800353e <__retarget_lock_init_recursive>
 80034b0:	f7ff ff96 	bl	80033e0 <__sfp_lock_release>
 80034b4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80034b8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80034bc:	6025      	str	r5, [r4, #0]
 80034be:	61a5      	str	r5, [r4, #24]
 80034c0:	2208      	movs	r2, #8
 80034c2:	4629      	mov	r1, r5
 80034c4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80034c8:	f7ff fd68 	bl	8002f9c <memset>
 80034cc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80034d0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80034d4:	4620      	mov	r0, r4
 80034d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80034d8:	3468      	adds	r4, #104	; 0x68
 80034da:	e7d9      	b.n	8003490 <__sfp+0x1c>
 80034dc:	2104      	movs	r1, #4
 80034de:	4638      	mov	r0, r7
 80034e0:	f7ff ff62 	bl	80033a8 <__sfmoreglue>
 80034e4:	4604      	mov	r4, r0
 80034e6:	6030      	str	r0, [r6, #0]
 80034e8:	2800      	cmp	r0, #0
 80034ea:	d1d5      	bne.n	8003498 <__sfp+0x24>
 80034ec:	f7ff ff78 	bl	80033e0 <__sfp_lock_release>
 80034f0:	230c      	movs	r3, #12
 80034f2:	603b      	str	r3, [r7, #0]
 80034f4:	e7ee      	b.n	80034d4 <__sfp+0x60>
 80034f6:	bf00      	nop
 80034f8:	0800444c 	.word	0x0800444c
 80034fc:	ffff0001 	.word	0xffff0001

08003500 <_fwalk_reent>:
 8003500:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003504:	4606      	mov	r6, r0
 8003506:	4688      	mov	r8, r1
 8003508:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800350c:	2700      	movs	r7, #0
 800350e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003512:	f1b9 0901 	subs.w	r9, r9, #1
 8003516:	d505      	bpl.n	8003524 <_fwalk_reent+0x24>
 8003518:	6824      	ldr	r4, [r4, #0]
 800351a:	2c00      	cmp	r4, #0
 800351c:	d1f7      	bne.n	800350e <_fwalk_reent+0xe>
 800351e:	4638      	mov	r0, r7
 8003520:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003524:	89ab      	ldrh	r3, [r5, #12]
 8003526:	2b01      	cmp	r3, #1
 8003528:	d907      	bls.n	800353a <_fwalk_reent+0x3a>
 800352a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800352e:	3301      	adds	r3, #1
 8003530:	d003      	beq.n	800353a <_fwalk_reent+0x3a>
 8003532:	4629      	mov	r1, r5
 8003534:	4630      	mov	r0, r6
 8003536:	47c0      	blx	r8
 8003538:	4307      	orrs	r7, r0
 800353a:	3568      	adds	r5, #104	; 0x68
 800353c:	e7e9      	b.n	8003512 <_fwalk_reent+0x12>

0800353e <__retarget_lock_init_recursive>:
 800353e:	4770      	bx	lr

08003540 <__retarget_lock_acquire_recursive>:
 8003540:	4770      	bx	lr

08003542 <__retarget_lock_release_recursive>:
 8003542:	4770      	bx	lr

08003544 <__swhatbuf_r>:
 8003544:	b570      	push	{r4, r5, r6, lr}
 8003546:	460e      	mov	r6, r1
 8003548:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800354c:	2900      	cmp	r1, #0
 800354e:	b096      	sub	sp, #88	; 0x58
 8003550:	4614      	mov	r4, r2
 8003552:	461d      	mov	r5, r3
 8003554:	da07      	bge.n	8003566 <__swhatbuf_r+0x22>
 8003556:	2300      	movs	r3, #0
 8003558:	602b      	str	r3, [r5, #0]
 800355a:	89b3      	ldrh	r3, [r6, #12]
 800355c:	061a      	lsls	r2, r3, #24
 800355e:	d410      	bmi.n	8003582 <__swhatbuf_r+0x3e>
 8003560:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003564:	e00e      	b.n	8003584 <__swhatbuf_r+0x40>
 8003566:	466a      	mov	r2, sp
 8003568:	f000 fe82 	bl	8004270 <_fstat_r>
 800356c:	2800      	cmp	r0, #0
 800356e:	dbf2      	blt.n	8003556 <__swhatbuf_r+0x12>
 8003570:	9a01      	ldr	r2, [sp, #4]
 8003572:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8003576:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800357a:	425a      	negs	r2, r3
 800357c:	415a      	adcs	r2, r3
 800357e:	602a      	str	r2, [r5, #0]
 8003580:	e7ee      	b.n	8003560 <__swhatbuf_r+0x1c>
 8003582:	2340      	movs	r3, #64	; 0x40
 8003584:	2000      	movs	r0, #0
 8003586:	6023      	str	r3, [r4, #0]
 8003588:	b016      	add	sp, #88	; 0x58
 800358a:	bd70      	pop	{r4, r5, r6, pc}

0800358c <__smakebuf_r>:
 800358c:	898b      	ldrh	r3, [r1, #12]
 800358e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003590:	079d      	lsls	r5, r3, #30
 8003592:	4606      	mov	r6, r0
 8003594:	460c      	mov	r4, r1
 8003596:	d507      	bpl.n	80035a8 <__smakebuf_r+0x1c>
 8003598:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800359c:	6023      	str	r3, [r4, #0]
 800359e:	6123      	str	r3, [r4, #16]
 80035a0:	2301      	movs	r3, #1
 80035a2:	6163      	str	r3, [r4, #20]
 80035a4:	b002      	add	sp, #8
 80035a6:	bd70      	pop	{r4, r5, r6, pc}
 80035a8:	ab01      	add	r3, sp, #4
 80035aa:	466a      	mov	r2, sp
 80035ac:	f7ff ffca 	bl	8003544 <__swhatbuf_r>
 80035b0:	9900      	ldr	r1, [sp, #0]
 80035b2:	4605      	mov	r5, r0
 80035b4:	4630      	mov	r0, r6
 80035b6:	f000 f881 	bl	80036bc <_malloc_r>
 80035ba:	b948      	cbnz	r0, 80035d0 <__smakebuf_r+0x44>
 80035bc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80035c0:	059a      	lsls	r2, r3, #22
 80035c2:	d4ef      	bmi.n	80035a4 <__smakebuf_r+0x18>
 80035c4:	f023 0303 	bic.w	r3, r3, #3
 80035c8:	f043 0302 	orr.w	r3, r3, #2
 80035cc:	81a3      	strh	r3, [r4, #12]
 80035ce:	e7e3      	b.n	8003598 <__smakebuf_r+0xc>
 80035d0:	4b0d      	ldr	r3, [pc, #52]	; (8003608 <__smakebuf_r+0x7c>)
 80035d2:	62b3      	str	r3, [r6, #40]	; 0x28
 80035d4:	89a3      	ldrh	r3, [r4, #12]
 80035d6:	6020      	str	r0, [r4, #0]
 80035d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80035dc:	81a3      	strh	r3, [r4, #12]
 80035de:	9b00      	ldr	r3, [sp, #0]
 80035e0:	6163      	str	r3, [r4, #20]
 80035e2:	9b01      	ldr	r3, [sp, #4]
 80035e4:	6120      	str	r0, [r4, #16]
 80035e6:	b15b      	cbz	r3, 8003600 <__smakebuf_r+0x74>
 80035e8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80035ec:	4630      	mov	r0, r6
 80035ee:	f000 fe51 	bl	8004294 <_isatty_r>
 80035f2:	b128      	cbz	r0, 8003600 <__smakebuf_r+0x74>
 80035f4:	89a3      	ldrh	r3, [r4, #12]
 80035f6:	f023 0303 	bic.w	r3, r3, #3
 80035fa:	f043 0301 	orr.w	r3, r3, #1
 80035fe:	81a3      	strh	r3, [r4, #12]
 8003600:	89a0      	ldrh	r0, [r4, #12]
 8003602:	4305      	orrs	r5, r0
 8003604:	81a5      	strh	r5, [r4, #12]
 8003606:	e7cd      	b.n	80035a4 <__smakebuf_r+0x18>
 8003608:	0800339d 	.word	0x0800339d

0800360c <malloc>:
 800360c:	4b02      	ldr	r3, [pc, #8]	; (8003618 <malloc+0xc>)
 800360e:	4601      	mov	r1, r0
 8003610:	6818      	ldr	r0, [r3, #0]
 8003612:	f000 b853 	b.w	80036bc <_malloc_r>
 8003616:	bf00      	nop
 8003618:	20000010 	.word	0x20000010

0800361c <_free_r>:
 800361c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800361e:	2900      	cmp	r1, #0
 8003620:	d048      	beq.n	80036b4 <_free_r+0x98>
 8003622:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003626:	9001      	str	r0, [sp, #4]
 8003628:	2b00      	cmp	r3, #0
 800362a:	f1a1 0404 	sub.w	r4, r1, #4
 800362e:	bfb8      	it	lt
 8003630:	18e4      	addlt	r4, r4, r3
 8003632:	f000 fe79 	bl	8004328 <__malloc_lock>
 8003636:	4a20      	ldr	r2, [pc, #128]	; (80036b8 <_free_r+0x9c>)
 8003638:	9801      	ldr	r0, [sp, #4]
 800363a:	6813      	ldr	r3, [r2, #0]
 800363c:	4615      	mov	r5, r2
 800363e:	b933      	cbnz	r3, 800364e <_free_r+0x32>
 8003640:	6063      	str	r3, [r4, #4]
 8003642:	6014      	str	r4, [r2, #0]
 8003644:	b003      	add	sp, #12
 8003646:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800364a:	f000 be73 	b.w	8004334 <__malloc_unlock>
 800364e:	42a3      	cmp	r3, r4
 8003650:	d90b      	bls.n	800366a <_free_r+0x4e>
 8003652:	6821      	ldr	r1, [r4, #0]
 8003654:	1862      	adds	r2, r4, r1
 8003656:	4293      	cmp	r3, r2
 8003658:	bf04      	itt	eq
 800365a:	681a      	ldreq	r2, [r3, #0]
 800365c:	685b      	ldreq	r3, [r3, #4]
 800365e:	6063      	str	r3, [r4, #4]
 8003660:	bf04      	itt	eq
 8003662:	1852      	addeq	r2, r2, r1
 8003664:	6022      	streq	r2, [r4, #0]
 8003666:	602c      	str	r4, [r5, #0]
 8003668:	e7ec      	b.n	8003644 <_free_r+0x28>
 800366a:	461a      	mov	r2, r3
 800366c:	685b      	ldr	r3, [r3, #4]
 800366e:	b10b      	cbz	r3, 8003674 <_free_r+0x58>
 8003670:	42a3      	cmp	r3, r4
 8003672:	d9fa      	bls.n	800366a <_free_r+0x4e>
 8003674:	6811      	ldr	r1, [r2, #0]
 8003676:	1855      	adds	r5, r2, r1
 8003678:	42a5      	cmp	r5, r4
 800367a:	d10b      	bne.n	8003694 <_free_r+0x78>
 800367c:	6824      	ldr	r4, [r4, #0]
 800367e:	4421      	add	r1, r4
 8003680:	1854      	adds	r4, r2, r1
 8003682:	42a3      	cmp	r3, r4
 8003684:	6011      	str	r1, [r2, #0]
 8003686:	d1dd      	bne.n	8003644 <_free_r+0x28>
 8003688:	681c      	ldr	r4, [r3, #0]
 800368a:	685b      	ldr	r3, [r3, #4]
 800368c:	6053      	str	r3, [r2, #4]
 800368e:	4421      	add	r1, r4
 8003690:	6011      	str	r1, [r2, #0]
 8003692:	e7d7      	b.n	8003644 <_free_r+0x28>
 8003694:	d902      	bls.n	800369c <_free_r+0x80>
 8003696:	230c      	movs	r3, #12
 8003698:	6003      	str	r3, [r0, #0]
 800369a:	e7d3      	b.n	8003644 <_free_r+0x28>
 800369c:	6825      	ldr	r5, [r4, #0]
 800369e:	1961      	adds	r1, r4, r5
 80036a0:	428b      	cmp	r3, r1
 80036a2:	bf04      	itt	eq
 80036a4:	6819      	ldreq	r1, [r3, #0]
 80036a6:	685b      	ldreq	r3, [r3, #4]
 80036a8:	6063      	str	r3, [r4, #4]
 80036aa:	bf04      	itt	eq
 80036ac:	1949      	addeq	r1, r1, r5
 80036ae:	6021      	streq	r1, [r4, #0]
 80036b0:	6054      	str	r4, [r2, #4]
 80036b2:	e7c7      	b.n	8003644 <_free_r+0x28>
 80036b4:	b003      	add	sp, #12
 80036b6:	bd30      	pop	{r4, r5, pc}
 80036b8:	20000098 	.word	0x20000098

080036bc <_malloc_r>:
 80036bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80036be:	1ccd      	adds	r5, r1, #3
 80036c0:	f025 0503 	bic.w	r5, r5, #3
 80036c4:	3508      	adds	r5, #8
 80036c6:	2d0c      	cmp	r5, #12
 80036c8:	bf38      	it	cc
 80036ca:	250c      	movcc	r5, #12
 80036cc:	2d00      	cmp	r5, #0
 80036ce:	4606      	mov	r6, r0
 80036d0:	db01      	blt.n	80036d6 <_malloc_r+0x1a>
 80036d2:	42a9      	cmp	r1, r5
 80036d4:	d903      	bls.n	80036de <_malloc_r+0x22>
 80036d6:	230c      	movs	r3, #12
 80036d8:	6033      	str	r3, [r6, #0]
 80036da:	2000      	movs	r0, #0
 80036dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80036de:	f000 fe23 	bl	8004328 <__malloc_lock>
 80036e2:	4921      	ldr	r1, [pc, #132]	; (8003768 <_malloc_r+0xac>)
 80036e4:	680a      	ldr	r2, [r1, #0]
 80036e6:	4614      	mov	r4, r2
 80036e8:	b99c      	cbnz	r4, 8003712 <_malloc_r+0x56>
 80036ea:	4f20      	ldr	r7, [pc, #128]	; (800376c <_malloc_r+0xb0>)
 80036ec:	683b      	ldr	r3, [r7, #0]
 80036ee:	b923      	cbnz	r3, 80036fa <_malloc_r+0x3e>
 80036f0:	4621      	mov	r1, r4
 80036f2:	4630      	mov	r0, r6
 80036f4:	f000 fc86 	bl	8004004 <_sbrk_r>
 80036f8:	6038      	str	r0, [r7, #0]
 80036fa:	4629      	mov	r1, r5
 80036fc:	4630      	mov	r0, r6
 80036fe:	f000 fc81 	bl	8004004 <_sbrk_r>
 8003702:	1c43      	adds	r3, r0, #1
 8003704:	d123      	bne.n	800374e <_malloc_r+0x92>
 8003706:	230c      	movs	r3, #12
 8003708:	6033      	str	r3, [r6, #0]
 800370a:	4630      	mov	r0, r6
 800370c:	f000 fe12 	bl	8004334 <__malloc_unlock>
 8003710:	e7e3      	b.n	80036da <_malloc_r+0x1e>
 8003712:	6823      	ldr	r3, [r4, #0]
 8003714:	1b5b      	subs	r3, r3, r5
 8003716:	d417      	bmi.n	8003748 <_malloc_r+0x8c>
 8003718:	2b0b      	cmp	r3, #11
 800371a:	d903      	bls.n	8003724 <_malloc_r+0x68>
 800371c:	6023      	str	r3, [r4, #0]
 800371e:	441c      	add	r4, r3
 8003720:	6025      	str	r5, [r4, #0]
 8003722:	e004      	b.n	800372e <_malloc_r+0x72>
 8003724:	6863      	ldr	r3, [r4, #4]
 8003726:	42a2      	cmp	r2, r4
 8003728:	bf0c      	ite	eq
 800372a:	600b      	streq	r3, [r1, #0]
 800372c:	6053      	strne	r3, [r2, #4]
 800372e:	4630      	mov	r0, r6
 8003730:	f000 fe00 	bl	8004334 <__malloc_unlock>
 8003734:	f104 000b 	add.w	r0, r4, #11
 8003738:	1d23      	adds	r3, r4, #4
 800373a:	f020 0007 	bic.w	r0, r0, #7
 800373e:	1ac2      	subs	r2, r0, r3
 8003740:	d0cc      	beq.n	80036dc <_malloc_r+0x20>
 8003742:	1a1b      	subs	r3, r3, r0
 8003744:	50a3      	str	r3, [r4, r2]
 8003746:	e7c9      	b.n	80036dc <_malloc_r+0x20>
 8003748:	4622      	mov	r2, r4
 800374a:	6864      	ldr	r4, [r4, #4]
 800374c:	e7cc      	b.n	80036e8 <_malloc_r+0x2c>
 800374e:	1cc4      	adds	r4, r0, #3
 8003750:	f024 0403 	bic.w	r4, r4, #3
 8003754:	42a0      	cmp	r0, r4
 8003756:	d0e3      	beq.n	8003720 <_malloc_r+0x64>
 8003758:	1a21      	subs	r1, r4, r0
 800375a:	4630      	mov	r0, r6
 800375c:	f000 fc52 	bl	8004004 <_sbrk_r>
 8003760:	3001      	adds	r0, #1
 8003762:	d1dd      	bne.n	8003720 <_malloc_r+0x64>
 8003764:	e7cf      	b.n	8003706 <_malloc_r+0x4a>
 8003766:	bf00      	nop
 8003768:	20000098 	.word	0x20000098
 800376c:	2000009c 	.word	0x2000009c

08003770 <__ssputs_r>:
 8003770:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003774:	688e      	ldr	r6, [r1, #8]
 8003776:	429e      	cmp	r6, r3
 8003778:	4682      	mov	sl, r0
 800377a:	460c      	mov	r4, r1
 800377c:	4690      	mov	r8, r2
 800377e:	461f      	mov	r7, r3
 8003780:	d838      	bhi.n	80037f4 <__ssputs_r+0x84>
 8003782:	898a      	ldrh	r2, [r1, #12]
 8003784:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003788:	d032      	beq.n	80037f0 <__ssputs_r+0x80>
 800378a:	6825      	ldr	r5, [r4, #0]
 800378c:	6909      	ldr	r1, [r1, #16]
 800378e:	eba5 0901 	sub.w	r9, r5, r1
 8003792:	6965      	ldr	r5, [r4, #20]
 8003794:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003798:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800379c:	3301      	adds	r3, #1
 800379e:	444b      	add	r3, r9
 80037a0:	106d      	asrs	r5, r5, #1
 80037a2:	429d      	cmp	r5, r3
 80037a4:	bf38      	it	cc
 80037a6:	461d      	movcc	r5, r3
 80037a8:	0553      	lsls	r3, r2, #21
 80037aa:	d531      	bpl.n	8003810 <__ssputs_r+0xa0>
 80037ac:	4629      	mov	r1, r5
 80037ae:	f7ff ff85 	bl	80036bc <_malloc_r>
 80037b2:	4606      	mov	r6, r0
 80037b4:	b950      	cbnz	r0, 80037cc <__ssputs_r+0x5c>
 80037b6:	230c      	movs	r3, #12
 80037b8:	f8ca 3000 	str.w	r3, [sl]
 80037bc:	89a3      	ldrh	r3, [r4, #12]
 80037be:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80037c2:	81a3      	strh	r3, [r4, #12]
 80037c4:	f04f 30ff 	mov.w	r0, #4294967295
 80037c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80037cc:	6921      	ldr	r1, [r4, #16]
 80037ce:	464a      	mov	r2, r9
 80037d0:	f000 fd82 	bl	80042d8 <memcpy>
 80037d4:	89a3      	ldrh	r3, [r4, #12]
 80037d6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80037da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80037de:	81a3      	strh	r3, [r4, #12]
 80037e0:	6126      	str	r6, [r4, #16]
 80037e2:	6165      	str	r5, [r4, #20]
 80037e4:	444e      	add	r6, r9
 80037e6:	eba5 0509 	sub.w	r5, r5, r9
 80037ea:	6026      	str	r6, [r4, #0]
 80037ec:	60a5      	str	r5, [r4, #8]
 80037ee:	463e      	mov	r6, r7
 80037f0:	42be      	cmp	r6, r7
 80037f2:	d900      	bls.n	80037f6 <__ssputs_r+0x86>
 80037f4:	463e      	mov	r6, r7
 80037f6:	4632      	mov	r2, r6
 80037f8:	6820      	ldr	r0, [r4, #0]
 80037fa:	4641      	mov	r1, r8
 80037fc:	f000 fd7a 	bl	80042f4 <memmove>
 8003800:	68a3      	ldr	r3, [r4, #8]
 8003802:	6822      	ldr	r2, [r4, #0]
 8003804:	1b9b      	subs	r3, r3, r6
 8003806:	4432      	add	r2, r6
 8003808:	60a3      	str	r3, [r4, #8]
 800380a:	6022      	str	r2, [r4, #0]
 800380c:	2000      	movs	r0, #0
 800380e:	e7db      	b.n	80037c8 <__ssputs_r+0x58>
 8003810:	462a      	mov	r2, r5
 8003812:	f000 fd95 	bl	8004340 <_realloc_r>
 8003816:	4606      	mov	r6, r0
 8003818:	2800      	cmp	r0, #0
 800381a:	d1e1      	bne.n	80037e0 <__ssputs_r+0x70>
 800381c:	6921      	ldr	r1, [r4, #16]
 800381e:	4650      	mov	r0, sl
 8003820:	f7ff fefc 	bl	800361c <_free_r>
 8003824:	e7c7      	b.n	80037b6 <__ssputs_r+0x46>
	...

08003828 <_svfiprintf_r>:
 8003828:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800382c:	4698      	mov	r8, r3
 800382e:	898b      	ldrh	r3, [r1, #12]
 8003830:	061b      	lsls	r3, r3, #24
 8003832:	b09d      	sub	sp, #116	; 0x74
 8003834:	4607      	mov	r7, r0
 8003836:	460d      	mov	r5, r1
 8003838:	4614      	mov	r4, r2
 800383a:	d50e      	bpl.n	800385a <_svfiprintf_r+0x32>
 800383c:	690b      	ldr	r3, [r1, #16]
 800383e:	b963      	cbnz	r3, 800385a <_svfiprintf_r+0x32>
 8003840:	2140      	movs	r1, #64	; 0x40
 8003842:	f7ff ff3b 	bl	80036bc <_malloc_r>
 8003846:	6028      	str	r0, [r5, #0]
 8003848:	6128      	str	r0, [r5, #16]
 800384a:	b920      	cbnz	r0, 8003856 <_svfiprintf_r+0x2e>
 800384c:	230c      	movs	r3, #12
 800384e:	603b      	str	r3, [r7, #0]
 8003850:	f04f 30ff 	mov.w	r0, #4294967295
 8003854:	e0d1      	b.n	80039fa <_svfiprintf_r+0x1d2>
 8003856:	2340      	movs	r3, #64	; 0x40
 8003858:	616b      	str	r3, [r5, #20]
 800385a:	2300      	movs	r3, #0
 800385c:	9309      	str	r3, [sp, #36]	; 0x24
 800385e:	2320      	movs	r3, #32
 8003860:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003864:	f8cd 800c 	str.w	r8, [sp, #12]
 8003868:	2330      	movs	r3, #48	; 0x30
 800386a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8003a14 <_svfiprintf_r+0x1ec>
 800386e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003872:	f04f 0901 	mov.w	r9, #1
 8003876:	4623      	mov	r3, r4
 8003878:	469a      	mov	sl, r3
 800387a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800387e:	b10a      	cbz	r2, 8003884 <_svfiprintf_r+0x5c>
 8003880:	2a25      	cmp	r2, #37	; 0x25
 8003882:	d1f9      	bne.n	8003878 <_svfiprintf_r+0x50>
 8003884:	ebba 0b04 	subs.w	fp, sl, r4
 8003888:	d00b      	beq.n	80038a2 <_svfiprintf_r+0x7a>
 800388a:	465b      	mov	r3, fp
 800388c:	4622      	mov	r2, r4
 800388e:	4629      	mov	r1, r5
 8003890:	4638      	mov	r0, r7
 8003892:	f7ff ff6d 	bl	8003770 <__ssputs_r>
 8003896:	3001      	adds	r0, #1
 8003898:	f000 80aa 	beq.w	80039f0 <_svfiprintf_r+0x1c8>
 800389c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800389e:	445a      	add	r2, fp
 80038a0:	9209      	str	r2, [sp, #36]	; 0x24
 80038a2:	f89a 3000 	ldrb.w	r3, [sl]
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	f000 80a2 	beq.w	80039f0 <_svfiprintf_r+0x1c8>
 80038ac:	2300      	movs	r3, #0
 80038ae:	f04f 32ff 	mov.w	r2, #4294967295
 80038b2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80038b6:	f10a 0a01 	add.w	sl, sl, #1
 80038ba:	9304      	str	r3, [sp, #16]
 80038bc:	9307      	str	r3, [sp, #28]
 80038be:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80038c2:	931a      	str	r3, [sp, #104]	; 0x68
 80038c4:	4654      	mov	r4, sl
 80038c6:	2205      	movs	r2, #5
 80038c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80038cc:	4851      	ldr	r0, [pc, #324]	; (8003a14 <_svfiprintf_r+0x1ec>)
 80038ce:	f7fc fc87 	bl	80001e0 <memchr>
 80038d2:	9a04      	ldr	r2, [sp, #16]
 80038d4:	b9d8      	cbnz	r0, 800390e <_svfiprintf_r+0xe6>
 80038d6:	06d0      	lsls	r0, r2, #27
 80038d8:	bf44      	itt	mi
 80038da:	2320      	movmi	r3, #32
 80038dc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80038e0:	0711      	lsls	r1, r2, #28
 80038e2:	bf44      	itt	mi
 80038e4:	232b      	movmi	r3, #43	; 0x2b
 80038e6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80038ea:	f89a 3000 	ldrb.w	r3, [sl]
 80038ee:	2b2a      	cmp	r3, #42	; 0x2a
 80038f0:	d015      	beq.n	800391e <_svfiprintf_r+0xf6>
 80038f2:	9a07      	ldr	r2, [sp, #28]
 80038f4:	4654      	mov	r4, sl
 80038f6:	2000      	movs	r0, #0
 80038f8:	f04f 0c0a 	mov.w	ip, #10
 80038fc:	4621      	mov	r1, r4
 80038fe:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003902:	3b30      	subs	r3, #48	; 0x30
 8003904:	2b09      	cmp	r3, #9
 8003906:	d94e      	bls.n	80039a6 <_svfiprintf_r+0x17e>
 8003908:	b1b0      	cbz	r0, 8003938 <_svfiprintf_r+0x110>
 800390a:	9207      	str	r2, [sp, #28]
 800390c:	e014      	b.n	8003938 <_svfiprintf_r+0x110>
 800390e:	eba0 0308 	sub.w	r3, r0, r8
 8003912:	fa09 f303 	lsl.w	r3, r9, r3
 8003916:	4313      	orrs	r3, r2
 8003918:	9304      	str	r3, [sp, #16]
 800391a:	46a2      	mov	sl, r4
 800391c:	e7d2      	b.n	80038c4 <_svfiprintf_r+0x9c>
 800391e:	9b03      	ldr	r3, [sp, #12]
 8003920:	1d19      	adds	r1, r3, #4
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	9103      	str	r1, [sp, #12]
 8003926:	2b00      	cmp	r3, #0
 8003928:	bfbb      	ittet	lt
 800392a:	425b      	neglt	r3, r3
 800392c:	f042 0202 	orrlt.w	r2, r2, #2
 8003930:	9307      	strge	r3, [sp, #28]
 8003932:	9307      	strlt	r3, [sp, #28]
 8003934:	bfb8      	it	lt
 8003936:	9204      	strlt	r2, [sp, #16]
 8003938:	7823      	ldrb	r3, [r4, #0]
 800393a:	2b2e      	cmp	r3, #46	; 0x2e
 800393c:	d10c      	bne.n	8003958 <_svfiprintf_r+0x130>
 800393e:	7863      	ldrb	r3, [r4, #1]
 8003940:	2b2a      	cmp	r3, #42	; 0x2a
 8003942:	d135      	bne.n	80039b0 <_svfiprintf_r+0x188>
 8003944:	9b03      	ldr	r3, [sp, #12]
 8003946:	1d1a      	adds	r2, r3, #4
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	9203      	str	r2, [sp, #12]
 800394c:	2b00      	cmp	r3, #0
 800394e:	bfb8      	it	lt
 8003950:	f04f 33ff 	movlt.w	r3, #4294967295
 8003954:	3402      	adds	r4, #2
 8003956:	9305      	str	r3, [sp, #20]
 8003958:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8003a24 <_svfiprintf_r+0x1fc>
 800395c:	7821      	ldrb	r1, [r4, #0]
 800395e:	2203      	movs	r2, #3
 8003960:	4650      	mov	r0, sl
 8003962:	f7fc fc3d 	bl	80001e0 <memchr>
 8003966:	b140      	cbz	r0, 800397a <_svfiprintf_r+0x152>
 8003968:	2340      	movs	r3, #64	; 0x40
 800396a:	eba0 000a 	sub.w	r0, r0, sl
 800396e:	fa03 f000 	lsl.w	r0, r3, r0
 8003972:	9b04      	ldr	r3, [sp, #16]
 8003974:	4303      	orrs	r3, r0
 8003976:	3401      	adds	r4, #1
 8003978:	9304      	str	r3, [sp, #16]
 800397a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800397e:	4826      	ldr	r0, [pc, #152]	; (8003a18 <_svfiprintf_r+0x1f0>)
 8003980:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003984:	2206      	movs	r2, #6
 8003986:	f7fc fc2b 	bl	80001e0 <memchr>
 800398a:	2800      	cmp	r0, #0
 800398c:	d038      	beq.n	8003a00 <_svfiprintf_r+0x1d8>
 800398e:	4b23      	ldr	r3, [pc, #140]	; (8003a1c <_svfiprintf_r+0x1f4>)
 8003990:	bb1b      	cbnz	r3, 80039da <_svfiprintf_r+0x1b2>
 8003992:	9b03      	ldr	r3, [sp, #12]
 8003994:	3307      	adds	r3, #7
 8003996:	f023 0307 	bic.w	r3, r3, #7
 800399a:	3308      	adds	r3, #8
 800399c:	9303      	str	r3, [sp, #12]
 800399e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80039a0:	4433      	add	r3, r6
 80039a2:	9309      	str	r3, [sp, #36]	; 0x24
 80039a4:	e767      	b.n	8003876 <_svfiprintf_r+0x4e>
 80039a6:	fb0c 3202 	mla	r2, ip, r2, r3
 80039aa:	460c      	mov	r4, r1
 80039ac:	2001      	movs	r0, #1
 80039ae:	e7a5      	b.n	80038fc <_svfiprintf_r+0xd4>
 80039b0:	2300      	movs	r3, #0
 80039b2:	3401      	adds	r4, #1
 80039b4:	9305      	str	r3, [sp, #20]
 80039b6:	4619      	mov	r1, r3
 80039b8:	f04f 0c0a 	mov.w	ip, #10
 80039bc:	4620      	mov	r0, r4
 80039be:	f810 2b01 	ldrb.w	r2, [r0], #1
 80039c2:	3a30      	subs	r2, #48	; 0x30
 80039c4:	2a09      	cmp	r2, #9
 80039c6:	d903      	bls.n	80039d0 <_svfiprintf_r+0x1a8>
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d0c5      	beq.n	8003958 <_svfiprintf_r+0x130>
 80039cc:	9105      	str	r1, [sp, #20]
 80039ce:	e7c3      	b.n	8003958 <_svfiprintf_r+0x130>
 80039d0:	fb0c 2101 	mla	r1, ip, r1, r2
 80039d4:	4604      	mov	r4, r0
 80039d6:	2301      	movs	r3, #1
 80039d8:	e7f0      	b.n	80039bc <_svfiprintf_r+0x194>
 80039da:	ab03      	add	r3, sp, #12
 80039dc:	9300      	str	r3, [sp, #0]
 80039de:	462a      	mov	r2, r5
 80039e0:	4b0f      	ldr	r3, [pc, #60]	; (8003a20 <_svfiprintf_r+0x1f8>)
 80039e2:	a904      	add	r1, sp, #16
 80039e4:	4638      	mov	r0, r7
 80039e6:	f3af 8000 	nop.w
 80039ea:	1c42      	adds	r2, r0, #1
 80039ec:	4606      	mov	r6, r0
 80039ee:	d1d6      	bne.n	800399e <_svfiprintf_r+0x176>
 80039f0:	89ab      	ldrh	r3, [r5, #12]
 80039f2:	065b      	lsls	r3, r3, #25
 80039f4:	f53f af2c 	bmi.w	8003850 <_svfiprintf_r+0x28>
 80039f8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80039fa:	b01d      	add	sp, #116	; 0x74
 80039fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003a00:	ab03      	add	r3, sp, #12
 8003a02:	9300      	str	r3, [sp, #0]
 8003a04:	462a      	mov	r2, r5
 8003a06:	4b06      	ldr	r3, [pc, #24]	; (8003a20 <_svfiprintf_r+0x1f8>)
 8003a08:	a904      	add	r1, sp, #16
 8003a0a:	4638      	mov	r0, r7
 8003a0c:	f000 f9d4 	bl	8003db8 <_printf_i>
 8003a10:	e7eb      	b.n	80039ea <_svfiprintf_r+0x1c2>
 8003a12:	bf00      	nop
 8003a14:	080044b0 	.word	0x080044b0
 8003a18:	080044ba 	.word	0x080044ba
 8003a1c:	00000000 	.word	0x00000000
 8003a20:	08003771 	.word	0x08003771
 8003a24:	080044b6 	.word	0x080044b6

08003a28 <__sfputc_r>:
 8003a28:	6893      	ldr	r3, [r2, #8]
 8003a2a:	3b01      	subs	r3, #1
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	b410      	push	{r4}
 8003a30:	6093      	str	r3, [r2, #8]
 8003a32:	da08      	bge.n	8003a46 <__sfputc_r+0x1e>
 8003a34:	6994      	ldr	r4, [r2, #24]
 8003a36:	42a3      	cmp	r3, r4
 8003a38:	db01      	blt.n	8003a3e <__sfputc_r+0x16>
 8003a3a:	290a      	cmp	r1, #10
 8003a3c:	d103      	bne.n	8003a46 <__sfputc_r+0x1e>
 8003a3e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003a42:	f000 bb33 	b.w	80040ac <__swbuf_r>
 8003a46:	6813      	ldr	r3, [r2, #0]
 8003a48:	1c58      	adds	r0, r3, #1
 8003a4a:	6010      	str	r0, [r2, #0]
 8003a4c:	7019      	strb	r1, [r3, #0]
 8003a4e:	4608      	mov	r0, r1
 8003a50:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003a54:	4770      	bx	lr

08003a56 <__sfputs_r>:
 8003a56:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a58:	4606      	mov	r6, r0
 8003a5a:	460f      	mov	r7, r1
 8003a5c:	4614      	mov	r4, r2
 8003a5e:	18d5      	adds	r5, r2, r3
 8003a60:	42ac      	cmp	r4, r5
 8003a62:	d101      	bne.n	8003a68 <__sfputs_r+0x12>
 8003a64:	2000      	movs	r0, #0
 8003a66:	e007      	b.n	8003a78 <__sfputs_r+0x22>
 8003a68:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003a6c:	463a      	mov	r2, r7
 8003a6e:	4630      	mov	r0, r6
 8003a70:	f7ff ffda 	bl	8003a28 <__sfputc_r>
 8003a74:	1c43      	adds	r3, r0, #1
 8003a76:	d1f3      	bne.n	8003a60 <__sfputs_r+0xa>
 8003a78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003a7c <_vfiprintf_r>:
 8003a7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003a80:	460d      	mov	r5, r1
 8003a82:	b09d      	sub	sp, #116	; 0x74
 8003a84:	4614      	mov	r4, r2
 8003a86:	4698      	mov	r8, r3
 8003a88:	4606      	mov	r6, r0
 8003a8a:	b118      	cbz	r0, 8003a94 <_vfiprintf_r+0x18>
 8003a8c:	6983      	ldr	r3, [r0, #24]
 8003a8e:	b90b      	cbnz	r3, 8003a94 <_vfiprintf_r+0x18>
 8003a90:	f7ff fcb8 	bl	8003404 <__sinit>
 8003a94:	4b89      	ldr	r3, [pc, #548]	; (8003cbc <_vfiprintf_r+0x240>)
 8003a96:	429d      	cmp	r5, r3
 8003a98:	d11b      	bne.n	8003ad2 <_vfiprintf_r+0x56>
 8003a9a:	6875      	ldr	r5, [r6, #4]
 8003a9c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003a9e:	07d9      	lsls	r1, r3, #31
 8003aa0:	d405      	bmi.n	8003aae <_vfiprintf_r+0x32>
 8003aa2:	89ab      	ldrh	r3, [r5, #12]
 8003aa4:	059a      	lsls	r2, r3, #22
 8003aa6:	d402      	bmi.n	8003aae <_vfiprintf_r+0x32>
 8003aa8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003aaa:	f7ff fd49 	bl	8003540 <__retarget_lock_acquire_recursive>
 8003aae:	89ab      	ldrh	r3, [r5, #12]
 8003ab0:	071b      	lsls	r3, r3, #28
 8003ab2:	d501      	bpl.n	8003ab8 <_vfiprintf_r+0x3c>
 8003ab4:	692b      	ldr	r3, [r5, #16]
 8003ab6:	b9eb      	cbnz	r3, 8003af4 <_vfiprintf_r+0x78>
 8003ab8:	4629      	mov	r1, r5
 8003aba:	4630      	mov	r0, r6
 8003abc:	f000 fb5a 	bl	8004174 <__swsetup_r>
 8003ac0:	b1c0      	cbz	r0, 8003af4 <_vfiprintf_r+0x78>
 8003ac2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003ac4:	07dc      	lsls	r4, r3, #31
 8003ac6:	d50e      	bpl.n	8003ae6 <_vfiprintf_r+0x6a>
 8003ac8:	f04f 30ff 	mov.w	r0, #4294967295
 8003acc:	b01d      	add	sp, #116	; 0x74
 8003ace:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003ad2:	4b7b      	ldr	r3, [pc, #492]	; (8003cc0 <_vfiprintf_r+0x244>)
 8003ad4:	429d      	cmp	r5, r3
 8003ad6:	d101      	bne.n	8003adc <_vfiprintf_r+0x60>
 8003ad8:	68b5      	ldr	r5, [r6, #8]
 8003ada:	e7df      	b.n	8003a9c <_vfiprintf_r+0x20>
 8003adc:	4b79      	ldr	r3, [pc, #484]	; (8003cc4 <_vfiprintf_r+0x248>)
 8003ade:	429d      	cmp	r5, r3
 8003ae0:	bf08      	it	eq
 8003ae2:	68f5      	ldreq	r5, [r6, #12]
 8003ae4:	e7da      	b.n	8003a9c <_vfiprintf_r+0x20>
 8003ae6:	89ab      	ldrh	r3, [r5, #12]
 8003ae8:	0598      	lsls	r0, r3, #22
 8003aea:	d4ed      	bmi.n	8003ac8 <_vfiprintf_r+0x4c>
 8003aec:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003aee:	f7ff fd28 	bl	8003542 <__retarget_lock_release_recursive>
 8003af2:	e7e9      	b.n	8003ac8 <_vfiprintf_r+0x4c>
 8003af4:	2300      	movs	r3, #0
 8003af6:	9309      	str	r3, [sp, #36]	; 0x24
 8003af8:	2320      	movs	r3, #32
 8003afa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003afe:	f8cd 800c 	str.w	r8, [sp, #12]
 8003b02:	2330      	movs	r3, #48	; 0x30
 8003b04:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8003cc8 <_vfiprintf_r+0x24c>
 8003b08:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003b0c:	f04f 0901 	mov.w	r9, #1
 8003b10:	4623      	mov	r3, r4
 8003b12:	469a      	mov	sl, r3
 8003b14:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003b18:	b10a      	cbz	r2, 8003b1e <_vfiprintf_r+0xa2>
 8003b1a:	2a25      	cmp	r2, #37	; 0x25
 8003b1c:	d1f9      	bne.n	8003b12 <_vfiprintf_r+0x96>
 8003b1e:	ebba 0b04 	subs.w	fp, sl, r4
 8003b22:	d00b      	beq.n	8003b3c <_vfiprintf_r+0xc0>
 8003b24:	465b      	mov	r3, fp
 8003b26:	4622      	mov	r2, r4
 8003b28:	4629      	mov	r1, r5
 8003b2a:	4630      	mov	r0, r6
 8003b2c:	f7ff ff93 	bl	8003a56 <__sfputs_r>
 8003b30:	3001      	adds	r0, #1
 8003b32:	f000 80aa 	beq.w	8003c8a <_vfiprintf_r+0x20e>
 8003b36:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003b38:	445a      	add	r2, fp
 8003b3a:	9209      	str	r2, [sp, #36]	; 0x24
 8003b3c:	f89a 3000 	ldrb.w	r3, [sl]
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	f000 80a2 	beq.w	8003c8a <_vfiprintf_r+0x20e>
 8003b46:	2300      	movs	r3, #0
 8003b48:	f04f 32ff 	mov.w	r2, #4294967295
 8003b4c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003b50:	f10a 0a01 	add.w	sl, sl, #1
 8003b54:	9304      	str	r3, [sp, #16]
 8003b56:	9307      	str	r3, [sp, #28]
 8003b58:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003b5c:	931a      	str	r3, [sp, #104]	; 0x68
 8003b5e:	4654      	mov	r4, sl
 8003b60:	2205      	movs	r2, #5
 8003b62:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003b66:	4858      	ldr	r0, [pc, #352]	; (8003cc8 <_vfiprintf_r+0x24c>)
 8003b68:	f7fc fb3a 	bl	80001e0 <memchr>
 8003b6c:	9a04      	ldr	r2, [sp, #16]
 8003b6e:	b9d8      	cbnz	r0, 8003ba8 <_vfiprintf_r+0x12c>
 8003b70:	06d1      	lsls	r1, r2, #27
 8003b72:	bf44      	itt	mi
 8003b74:	2320      	movmi	r3, #32
 8003b76:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003b7a:	0713      	lsls	r3, r2, #28
 8003b7c:	bf44      	itt	mi
 8003b7e:	232b      	movmi	r3, #43	; 0x2b
 8003b80:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003b84:	f89a 3000 	ldrb.w	r3, [sl]
 8003b88:	2b2a      	cmp	r3, #42	; 0x2a
 8003b8a:	d015      	beq.n	8003bb8 <_vfiprintf_r+0x13c>
 8003b8c:	9a07      	ldr	r2, [sp, #28]
 8003b8e:	4654      	mov	r4, sl
 8003b90:	2000      	movs	r0, #0
 8003b92:	f04f 0c0a 	mov.w	ip, #10
 8003b96:	4621      	mov	r1, r4
 8003b98:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003b9c:	3b30      	subs	r3, #48	; 0x30
 8003b9e:	2b09      	cmp	r3, #9
 8003ba0:	d94e      	bls.n	8003c40 <_vfiprintf_r+0x1c4>
 8003ba2:	b1b0      	cbz	r0, 8003bd2 <_vfiprintf_r+0x156>
 8003ba4:	9207      	str	r2, [sp, #28]
 8003ba6:	e014      	b.n	8003bd2 <_vfiprintf_r+0x156>
 8003ba8:	eba0 0308 	sub.w	r3, r0, r8
 8003bac:	fa09 f303 	lsl.w	r3, r9, r3
 8003bb0:	4313      	orrs	r3, r2
 8003bb2:	9304      	str	r3, [sp, #16]
 8003bb4:	46a2      	mov	sl, r4
 8003bb6:	e7d2      	b.n	8003b5e <_vfiprintf_r+0xe2>
 8003bb8:	9b03      	ldr	r3, [sp, #12]
 8003bba:	1d19      	adds	r1, r3, #4
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	9103      	str	r1, [sp, #12]
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	bfbb      	ittet	lt
 8003bc4:	425b      	neglt	r3, r3
 8003bc6:	f042 0202 	orrlt.w	r2, r2, #2
 8003bca:	9307      	strge	r3, [sp, #28]
 8003bcc:	9307      	strlt	r3, [sp, #28]
 8003bce:	bfb8      	it	lt
 8003bd0:	9204      	strlt	r2, [sp, #16]
 8003bd2:	7823      	ldrb	r3, [r4, #0]
 8003bd4:	2b2e      	cmp	r3, #46	; 0x2e
 8003bd6:	d10c      	bne.n	8003bf2 <_vfiprintf_r+0x176>
 8003bd8:	7863      	ldrb	r3, [r4, #1]
 8003bda:	2b2a      	cmp	r3, #42	; 0x2a
 8003bdc:	d135      	bne.n	8003c4a <_vfiprintf_r+0x1ce>
 8003bde:	9b03      	ldr	r3, [sp, #12]
 8003be0:	1d1a      	adds	r2, r3, #4
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	9203      	str	r2, [sp, #12]
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	bfb8      	it	lt
 8003bea:	f04f 33ff 	movlt.w	r3, #4294967295
 8003bee:	3402      	adds	r4, #2
 8003bf0:	9305      	str	r3, [sp, #20]
 8003bf2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8003cd8 <_vfiprintf_r+0x25c>
 8003bf6:	7821      	ldrb	r1, [r4, #0]
 8003bf8:	2203      	movs	r2, #3
 8003bfa:	4650      	mov	r0, sl
 8003bfc:	f7fc faf0 	bl	80001e0 <memchr>
 8003c00:	b140      	cbz	r0, 8003c14 <_vfiprintf_r+0x198>
 8003c02:	2340      	movs	r3, #64	; 0x40
 8003c04:	eba0 000a 	sub.w	r0, r0, sl
 8003c08:	fa03 f000 	lsl.w	r0, r3, r0
 8003c0c:	9b04      	ldr	r3, [sp, #16]
 8003c0e:	4303      	orrs	r3, r0
 8003c10:	3401      	adds	r4, #1
 8003c12:	9304      	str	r3, [sp, #16]
 8003c14:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003c18:	482c      	ldr	r0, [pc, #176]	; (8003ccc <_vfiprintf_r+0x250>)
 8003c1a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003c1e:	2206      	movs	r2, #6
 8003c20:	f7fc fade 	bl	80001e0 <memchr>
 8003c24:	2800      	cmp	r0, #0
 8003c26:	d03f      	beq.n	8003ca8 <_vfiprintf_r+0x22c>
 8003c28:	4b29      	ldr	r3, [pc, #164]	; (8003cd0 <_vfiprintf_r+0x254>)
 8003c2a:	bb1b      	cbnz	r3, 8003c74 <_vfiprintf_r+0x1f8>
 8003c2c:	9b03      	ldr	r3, [sp, #12]
 8003c2e:	3307      	adds	r3, #7
 8003c30:	f023 0307 	bic.w	r3, r3, #7
 8003c34:	3308      	adds	r3, #8
 8003c36:	9303      	str	r3, [sp, #12]
 8003c38:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003c3a:	443b      	add	r3, r7
 8003c3c:	9309      	str	r3, [sp, #36]	; 0x24
 8003c3e:	e767      	b.n	8003b10 <_vfiprintf_r+0x94>
 8003c40:	fb0c 3202 	mla	r2, ip, r2, r3
 8003c44:	460c      	mov	r4, r1
 8003c46:	2001      	movs	r0, #1
 8003c48:	e7a5      	b.n	8003b96 <_vfiprintf_r+0x11a>
 8003c4a:	2300      	movs	r3, #0
 8003c4c:	3401      	adds	r4, #1
 8003c4e:	9305      	str	r3, [sp, #20]
 8003c50:	4619      	mov	r1, r3
 8003c52:	f04f 0c0a 	mov.w	ip, #10
 8003c56:	4620      	mov	r0, r4
 8003c58:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003c5c:	3a30      	subs	r2, #48	; 0x30
 8003c5e:	2a09      	cmp	r2, #9
 8003c60:	d903      	bls.n	8003c6a <_vfiprintf_r+0x1ee>
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d0c5      	beq.n	8003bf2 <_vfiprintf_r+0x176>
 8003c66:	9105      	str	r1, [sp, #20]
 8003c68:	e7c3      	b.n	8003bf2 <_vfiprintf_r+0x176>
 8003c6a:	fb0c 2101 	mla	r1, ip, r1, r2
 8003c6e:	4604      	mov	r4, r0
 8003c70:	2301      	movs	r3, #1
 8003c72:	e7f0      	b.n	8003c56 <_vfiprintf_r+0x1da>
 8003c74:	ab03      	add	r3, sp, #12
 8003c76:	9300      	str	r3, [sp, #0]
 8003c78:	462a      	mov	r2, r5
 8003c7a:	4b16      	ldr	r3, [pc, #88]	; (8003cd4 <_vfiprintf_r+0x258>)
 8003c7c:	a904      	add	r1, sp, #16
 8003c7e:	4630      	mov	r0, r6
 8003c80:	f3af 8000 	nop.w
 8003c84:	4607      	mov	r7, r0
 8003c86:	1c78      	adds	r0, r7, #1
 8003c88:	d1d6      	bne.n	8003c38 <_vfiprintf_r+0x1bc>
 8003c8a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003c8c:	07d9      	lsls	r1, r3, #31
 8003c8e:	d405      	bmi.n	8003c9c <_vfiprintf_r+0x220>
 8003c90:	89ab      	ldrh	r3, [r5, #12]
 8003c92:	059a      	lsls	r2, r3, #22
 8003c94:	d402      	bmi.n	8003c9c <_vfiprintf_r+0x220>
 8003c96:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003c98:	f7ff fc53 	bl	8003542 <__retarget_lock_release_recursive>
 8003c9c:	89ab      	ldrh	r3, [r5, #12]
 8003c9e:	065b      	lsls	r3, r3, #25
 8003ca0:	f53f af12 	bmi.w	8003ac8 <_vfiprintf_r+0x4c>
 8003ca4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003ca6:	e711      	b.n	8003acc <_vfiprintf_r+0x50>
 8003ca8:	ab03      	add	r3, sp, #12
 8003caa:	9300      	str	r3, [sp, #0]
 8003cac:	462a      	mov	r2, r5
 8003cae:	4b09      	ldr	r3, [pc, #36]	; (8003cd4 <_vfiprintf_r+0x258>)
 8003cb0:	a904      	add	r1, sp, #16
 8003cb2:	4630      	mov	r0, r6
 8003cb4:	f000 f880 	bl	8003db8 <_printf_i>
 8003cb8:	e7e4      	b.n	8003c84 <_vfiprintf_r+0x208>
 8003cba:	bf00      	nop
 8003cbc:	08004470 	.word	0x08004470
 8003cc0:	08004490 	.word	0x08004490
 8003cc4:	08004450 	.word	0x08004450
 8003cc8:	080044b0 	.word	0x080044b0
 8003ccc:	080044ba 	.word	0x080044ba
 8003cd0:	00000000 	.word	0x00000000
 8003cd4:	08003a57 	.word	0x08003a57
 8003cd8:	080044b6 	.word	0x080044b6

08003cdc <_printf_common>:
 8003cdc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003ce0:	4616      	mov	r6, r2
 8003ce2:	4699      	mov	r9, r3
 8003ce4:	688a      	ldr	r2, [r1, #8]
 8003ce6:	690b      	ldr	r3, [r1, #16]
 8003ce8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003cec:	4293      	cmp	r3, r2
 8003cee:	bfb8      	it	lt
 8003cf0:	4613      	movlt	r3, r2
 8003cf2:	6033      	str	r3, [r6, #0]
 8003cf4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003cf8:	4607      	mov	r7, r0
 8003cfa:	460c      	mov	r4, r1
 8003cfc:	b10a      	cbz	r2, 8003d02 <_printf_common+0x26>
 8003cfe:	3301      	adds	r3, #1
 8003d00:	6033      	str	r3, [r6, #0]
 8003d02:	6823      	ldr	r3, [r4, #0]
 8003d04:	0699      	lsls	r1, r3, #26
 8003d06:	bf42      	ittt	mi
 8003d08:	6833      	ldrmi	r3, [r6, #0]
 8003d0a:	3302      	addmi	r3, #2
 8003d0c:	6033      	strmi	r3, [r6, #0]
 8003d0e:	6825      	ldr	r5, [r4, #0]
 8003d10:	f015 0506 	ands.w	r5, r5, #6
 8003d14:	d106      	bne.n	8003d24 <_printf_common+0x48>
 8003d16:	f104 0a19 	add.w	sl, r4, #25
 8003d1a:	68e3      	ldr	r3, [r4, #12]
 8003d1c:	6832      	ldr	r2, [r6, #0]
 8003d1e:	1a9b      	subs	r3, r3, r2
 8003d20:	42ab      	cmp	r3, r5
 8003d22:	dc26      	bgt.n	8003d72 <_printf_common+0x96>
 8003d24:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003d28:	1e13      	subs	r3, r2, #0
 8003d2a:	6822      	ldr	r2, [r4, #0]
 8003d2c:	bf18      	it	ne
 8003d2e:	2301      	movne	r3, #1
 8003d30:	0692      	lsls	r2, r2, #26
 8003d32:	d42b      	bmi.n	8003d8c <_printf_common+0xb0>
 8003d34:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003d38:	4649      	mov	r1, r9
 8003d3a:	4638      	mov	r0, r7
 8003d3c:	47c0      	blx	r8
 8003d3e:	3001      	adds	r0, #1
 8003d40:	d01e      	beq.n	8003d80 <_printf_common+0xa4>
 8003d42:	6823      	ldr	r3, [r4, #0]
 8003d44:	68e5      	ldr	r5, [r4, #12]
 8003d46:	6832      	ldr	r2, [r6, #0]
 8003d48:	f003 0306 	and.w	r3, r3, #6
 8003d4c:	2b04      	cmp	r3, #4
 8003d4e:	bf08      	it	eq
 8003d50:	1aad      	subeq	r5, r5, r2
 8003d52:	68a3      	ldr	r3, [r4, #8]
 8003d54:	6922      	ldr	r2, [r4, #16]
 8003d56:	bf0c      	ite	eq
 8003d58:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003d5c:	2500      	movne	r5, #0
 8003d5e:	4293      	cmp	r3, r2
 8003d60:	bfc4      	itt	gt
 8003d62:	1a9b      	subgt	r3, r3, r2
 8003d64:	18ed      	addgt	r5, r5, r3
 8003d66:	2600      	movs	r6, #0
 8003d68:	341a      	adds	r4, #26
 8003d6a:	42b5      	cmp	r5, r6
 8003d6c:	d11a      	bne.n	8003da4 <_printf_common+0xc8>
 8003d6e:	2000      	movs	r0, #0
 8003d70:	e008      	b.n	8003d84 <_printf_common+0xa8>
 8003d72:	2301      	movs	r3, #1
 8003d74:	4652      	mov	r2, sl
 8003d76:	4649      	mov	r1, r9
 8003d78:	4638      	mov	r0, r7
 8003d7a:	47c0      	blx	r8
 8003d7c:	3001      	adds	r0, #1
 8003d7e:	d103      	bne.n	8003d88 <_printf_common+0xac>
 8003d80:	f04f 30ff 	mov.w	r0, #4294967295
 8003d84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003d88:	3501      	adds	r5, #1
 8003d8a:	e7c6      	b.n	8003d1a <_printf_common+0x3e>
 8003d8c:	18e1      	adds	r1, r4, r3
 8003d8e:	1c5a      	adds	r2, r3, #1
 8003d90:	2030      	movs	r0, #48	; 0x30
 8003d92:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003d96:	4422      	add	r2, r4
 8003d98:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003d9c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003da0:	3302      	adds	r3, #2
 8003da2:	e7c7      	b.n	8003d34 <_printf_common+0x58>
 8003da4:	2301      	movs	r3, #1
 8003da6:	4622      	mov	r2, r4
 8003da8:	4649      	mov	r1, r9
 8003daa:	4638      	mov	r0, r7
 8003dac:	47c0      	blx	r8
 8003dae:	3001      	adds	r0, #1
 8003db0:	d0e6      	beq.n	8003d80 <_printf_common+0xa4>
 8003db2:	3601      	adds	r6, #1
 8003db4:	e7d9      	b.n	8003d6a <_printf_common+0x8e>
	...

08003db8 <_printf_i>:
 8003db8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003dbc:	460c      	mov	r4, r1
 8003dbe:	4691      	mov	r9, r2
 8003dc0:	7e27      	ldrb	r7, [r4, #24]
 8003dc2:	990c      	ldr	r1, [sp, #48]	; 0x30
 8003dc4:	2f78      	cmp	r7, #120	; 0x78
 8003dc6:	4680      	mov	r8, r0
 8003dc8:	469a      	mov	sl, r3
 8003dca:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003dce:	d807      	bhi.n	8003de0 <_printf_i+0x28>
 8003dd0:	2f62      	cmp	r7, #98	; 0x62
 8003dd2:	d80a      	bhi.n	8003dea <_printf_i+0x32>
 8003dd4:	2f00      	cmp	r7, #0
 8003dd6:	f000 80d8 	beq.w	8003f8a <_printf_i+0x1d2>
 8003dda:	2f58      	cmp	r7, #88	; 0x58
 8003ddc:	f000 80a3 	beq.w	8003f26 <_printf_i+0x16e>
 8003de0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003de4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003de8:	e03a      	b.n	8003e60 <_printf_i+0xa8>
 8003dea:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003dee:	2b15      	cmp	r3, #21
 8003df0:	d8f6      	bhi.n	8003de0 <_printf_i+0x28>
 8003df2:	a001      	add	r0, pc, #4	; (adr r0, 8003df8 <_printf_i+0x40>)
 8003df4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8003df8:	08003e51 	.word	0x08003e51
 8003dfc:	08003e65 	.word	0x08003e65
 8003e00:	08003de1 	.word	0x08003de1
 8003e04:	08003de1 	.word	0x08003de1
 8003e08:	08003de1 	.word	0x08003de1
 8003e0c:	08003de1 	.word	0x08003de1
 8003e10:	08003e65 	.word	0x08003e65
 8003e14:	08003de1 	.word	0x08003de1
 8003e18:	08003de1 	.word	0x08003de1
 8003e1c:	08003de1 	.word	0x08003de1
 8003e20:	08003de1 	.word	0x08003de1
 8003e24:	08003f71 	.word	0x08003f71
 8003e28:	08003e95 	.word	0x08003e95
 8003e2c:	08003f53 	.word	0x08003f53
 8003e30:	08003de1 	.word	0x08003de1
 8003e34:	08003de1 	.word	0x08003de1
 8003e38:	08003f93 	.word	0x08003f93
 8003e3c:	08003de1 	.word	0x08003de1
 8003e40:	08003e95 	.word	0x08003e95
 8003e44:	08003de1 	.word	0x08003de1
 8003e48:	08003de1 	.word	0x08003de1
 8003e4c:	08003f5b 	.word	0x08003f5b
 8003e50:	680b      	ldr	r3, [r1, #0]
 8003e52:	1d1a      	adds	r2, r3, #4
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	600a      	str	r2, [r1, #0]
 8003e58:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003e5c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003e60:	2301      	movs	r3, #1
 8003e62:	e0a3      	b.n	8003fac <_printf_i+0x1f4>
 8003e64:	6825      	ldr	r5, [r4, #0]
 8003e66:	6808      	ldr	r0, [r1, #0]
 8003e68:	062e      	lsls	r6, r5, #24
 8003e6a:	f100 0304 	add.w	r3, r0, #4
 8003e6e:	d50a      	bpl.n	8003e86 <_printf_i+0xce>
 8003e70:	6805      	ldr	r5, [r0, #0]
 8003e72:	600b      	str	r3, [r1, #0]
 8003e74:	2d00      	cmp	r5, #0
 8003e76:	da03      	bge.n	8003e80 <_printf_i+0xc8>
 8003e78:	232d      	movs	r3, #45	; 0x2d
 8003e7a:	426d      	negs	r5, r5
 8003e7c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003e80:	485e      	ldr	r0, [pc, #376]	; (8003ffc <_printf_i+0x244>)
 8003e82:	230a      	movs	r3, #10
 8003e84:	e019      	b.n	8003eba <_printf_i+0x102>
 8003e86:	f015 0f40 	tst.w	r5, #64	; 0x40
 8003e8a:	6805      	ldr	r5, [r0, #0]
 8003e8c:	600b      	str	r3, [r1, #0]
 8003e8e:	bf18      	it	ne
 8003e90:	b22d      	sxthne	r5, r5
 8003e92:	e7ef      	b.n	8003e74 <_printf_i+0xbc>
 8003e94:	680b      	ldr	r3, [r1, #0]
 8003e96:	6825      	ldr	r5, [r4, #0]
 8003e98:	1d18      	adds	r0, r3, #4
 8003e9a:	6008      	str	r0, [r1, #0]
 8003e9c:	0628      	lsls	r0, r5, #24
 8003e9e:	d501      	bpl.n	8003ea4 <_printf_i+0xec>
 8003ea0:	681d      	ldr	r5, [r3, #0]
 8003ea2:	e002      	b.n	8003eaa <_printf_i+0xf2>
 8003ea4:	0669      	lsls	r1, r5, #25
 8003ea6:	d5fb      	bpl.n	8003ea0 <_printf_i+0xe8>
 8003ea8:	881d      	ldrh	r5, [r3, #0]
 8003eaa:	4854      	ldr	r0, [pc, #336]	; (8003ffc <_printf_i+0x244>)
 8003eac:	2f6f      	cmp	r7, #111	; 0x6f
 8003eae:	bf0c      	ite	eq
 8003eb0:	2308      	moveq	r3, #8
 8003eb2:	230a      	movne	r3, #10
 8003eb4:	2100      	movs	r1, #0
 8003eb6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003eba:	6866      	ldr	r6, [r4, #4]
 8003ebc:	60a6      	str	r6, [r4, #8]
 8003ebe:	2e00      	cmp	r6, #0
 8003ec0:	bfa2      	ittt	ge
 8003ec2:	6821      	ldrge	r1, [r4, #0]
 8003ec4:	f021 0104 	bicge.w	r1, r1, #4
 8003ec8:	6021      	strge	r1, [r4, #0]
 8003eca:	b90d      	cbnz	r5, 8003ed0 <_printf_i+0x118>
 8003ecc:	2e00      	cmp	r6, #0
 8003ece:	d04d      	beq.n	8003f6c <_printf_i+0x1b4>
 8003ed0:	4616      	mov	r6, r2
 8003ed2:	fbb5 f1f3 	udiv	r1, r5, r3
 8003ed6:	fb03 5711 	mls	r7, r3, r1, r5
 8003eda:	5dc7      	ldrb	r7, [r0, r7]
 8003edc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003ee0:	462f      	mov	r7, r5
 8003ee2:	42bb      	cmp	r3, r7
 8003ee4:	460d      	mov	r5, r1
 8003ee6:	d9f4      	bls.n	8003ed2 <_printf_i+0x11a>
 8003ee8:	2b08      	cmp	r3, #8
 8003eea:	d10b      	bne.n	8003f04 <_printf_i+0x14c>
 8003eec:	6823      	ldr	r3, [r4, #0]
 8003eee:	07df      	lsls	r7, r3, #31
 8003ef0:	d508      	bpl.n	8003f04 <_printf_i+0x14c>
 8003ef2:	6923      	ldr	r3, [r4, #16]
 8003ef4:	6861      	ldr	r1, [r4, #4]
 8003ef6:	4299      	cmp	r1, r3
 8003ef8:	bfde      	ittt	le
 8003efa:	2330      	movle	r3, #48	; 0x30
 8003efc:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003f00:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003f04:	1b92      	subs	r2, r2, r6
 8003f06:	6122      	str	r2, [r4, #16]
 8003f08:	f8cd a000 	str.w	sl, [sp]
 8003f0c:	464b      	mov	r3, r9
 8003f0e:	aa03      	add	r2, sp, #12
 8003f10:	4621      	mov	r1, r4
 8003f12:	4640      	mov	r0, r8
 8003f14:	f7ff fee2 	bl	8003cdc <_printf_common>
 8003f18:	3001      	adds	r0, #1
 8003f1a:	d14c      	bne.n	8003fb6 <_printf_i+0x1fe>
 8003f1c:	f04f 30ff 	mov.w	r0, #4294967295
 8003f20:	b004      	add	sp, #16
 8003f22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003f26:	4835      	ldr	r0, [pc, #212]	; (8003ffc <_printf_i+0x244>)
 8003f28:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003f2c:	6823      	ldr	r3, [r4, #0]
 8003f2e:	680e      	ldr	r6, [r1, #0]
 8003f30:	061f      	lsls	r7, r3, #24
 8003f32:	f856 5b04 	ldr.w	r5, [r6], #4
 8003f36:	600e      	str	r6, [r1, #0]
 8003f38:	d514      	bpl.n	8003f64 <_printf_i+0x1ac>
 8003f3a:	07d9      	lsls	r1, r3, #31
 8003f3c:	bf44      	itt	mi
 8003f3e:	f043 0320 	orrmi.w	r3, r3, #32
 8003f42:	6023      	strmi	r3, [r4, #0]
 8003f44:	b91d      	cbnz	r5, 8003f4e <_printf_i+0x196>
 8003f46:	6823      	ldr	r3, [r4, #0]
 8003f48:	f023 0320 	bic.w	r3, r3, #32
 8003f4c:	6023      	str	r3, [r4, #0]
 8003f4e:	2310      	movs	r3, #16
 8003f50:	e7b0      	b.n	8003eb4 <_printf_i+0xfc>
 8003f52:	6823      	ldr	r3, [r4, #0]
 8003f54:	f043 0320 	orr.w	r3, r3, #32
 8003f58:	6023      	str	r3, [r4, #0]
 8003f5a:	2378      	movs	r3, #120	; 0x78
 8003f5c:	4828      	ldr	r0, [pc, #160]	; (8004000 <_printf_i+0x248>)
 8003f5e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003f62:	e7e3      	b.n	8003f2c <_printf_i+0x174>
 8003f64:	065e      	lsls	r6, r3, #25
 8003f66:	bf48      	it	mi
 8003f68:	b2ad      	uxthmi	r5, r5
 8003f6a:	e7e6      	b.n	8003f3a <_printf_i+0x182>
 8003f6c:	4616      	mov	r6, r2
 8003f6e:	e7bb      	b.n	8003ee8 <_printf_i+0x130>
 8003f70:	680b      	ldr	r3, [r1, #0]
 8003f72:	6826      	ldr	r6, [r4, #0]
 8003f74:	6960      	ldr	r0, [r4, #20]
 8003f76:	1d1d      	adds	r5, r3, #4
 8003f78:	600d      	str	r5, [r1, #0]
 8003f7a:	0635      	lsls	r5, r6, #24
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	d501      	bpl.n	8003f84 <_printf_i+0x1cc>
 8003f80:	6018      	str	r0, [r3, #0]
 8003f82:	e002      	b.n	8003f8a <_printf_i+0x1d2>
 8003f84:	0671      	lsls	r1, r6, #25
 8003f86:	d5fb      	bpl.n	8003f80 <_printf_i+0x1c8>
 8003f88:	8018      	strh	r0, [r3, #0]
 8003f8a:	2300      	movs	r3, #0
 8003f8c:	6123      	str	r3, [r4, #16]
 8003f8e:	4616      	mov	r6, r2
 8003f90:	e7ba      	b.n	8003f08 <_printf_i+0x150>
 8003f92:	680b      	ldr	r3, [r1, #0]
 8003f94:	1d1a      	adds	r2, r3, #4
 8003f96:	600a      	str	r2, [r1, #0]
 8003f98:	681e      	ldr	r6, [r3, #0]
 8003f9a:	6862      	ldr	r2, [r4, #4]
 8003f9c:	2100      	movs	r1, #0
 8003f9e:	4630      	mov	r0, r6
 8003fa0:	f7fc f91e 	bl	80001e0 <memchr>
 8003fa4:	b108      	cbz	r0, 8003faa <_printf_i+0x1f2>
 8003fa6:	1b80      	subs	r0, r0, r6
 8003fa8:	6060      	str	r0, [r4, #4]
 8003faa:	6863      	ldr	r3, [r4, #4]
 8003fac:	6123      	str	r3, [r4, #16]
 8003fae:	2300      	movs	r3, #0
 8003fb0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003fb4:	e7a8      	b.n	8003f08 <_printf_i+0x150>
 8003fb6:	6923      	ldr	r3, [r4, #16]
 8003fb8:	4632      	mov	r2, r6
 8003fba:	4649      	mov	r1, r9
 8003fbc:	4640      	mov	r0, r8
 8003fbe:	47d0      	blx	sl
 8003fc0:	3001      	adds	r0, #1
 8003fc2:	d0ab      	beq.n	8003f1c <_printf_i+0x164>
 8003fc4:	6823      	ldr	r3, [r4, #0]
 8003fc6:	079b      	lsls	r3, r3, #30
 8003fc8:	d413      	bmi.n	8003ff2 <_printf_i+0x23a>
 8003fca:	68e0      	ldr	r0, [r4, #12]
 8003fcc:	9b03      	ldr	r3, [sp, #12]
 8003fce:	4298      	cmp	r0, r3
 8003fd0:	bfb8      	it	lt
 8003fd2:	4618      	movlt	r0, r3
 8003fd4:	e7a4      	b.n	8003f20 <_printf_i+0x168>
 8003fd6:	2301      	movs	r3, #1
 8003fd8:	4632      	mov	r2, r6
 8003fda:	4649      	mov	r1, r9
 8003fdc:	4640      	mov	r0, r8
 8003fde:	47d0      	blx	sl
 8003fe0:	3001      	adds	r0, #1
 8003fe2:	d09b      	beq.n	8003f1c <_printf_i+0x164>
 8003fe4:	3501      	adds	r5, #1
 8003fe6:	68e3      	ldr	r3, [r4, #12]
 8003fe8:	9903      	ldr	r1, [sp, #12]
 8003fea:	1a5b      	subs	r3, r3, r1
 8003fec:	42ab      	cmp	r3, r5
 8003fee:	dcf2      	bgt.n	8003fd6 <_printf_i+0x21e>
 8003ff0:	e7eb      	b.n	8003fca <_printf_i+0x212>
 8003ff2:	2500      	movs	r5, #0
 8003ff4:	f104 0619 	add.w	r6, r4, #25
 8003ff8:	e7f5      	b.n	8003fe6 <_printf_i+0x22e>
 8003ffa:	bf00      	nop
 8003ffc:	080044c1 	.word	0x080044c1
 8004000:	080044d2 	.word	0x080044d2

08004004 <_sbrk_r>:
 8004004:	b538      	push	{r3, r4, r5, lr}
 8004006:	4d06      	ldr	r5, [pc, #24]	; (8004020 <_sbrk_r+0x1c>)
 8004008:	2300      	movs	r3, #0
 800400a:	4604      	mov	r4, r0
 800400c:	4608      	mov	r0, r1
 800400e:	602b      	str	r3, [r5, #0]
 8004010:	f7fc ff32 	bl	8000e78 <_sbrk>
 8004014:	1c43      	adds	r3, r0, #1
 8004016:	d102      	bne.n	800401e <_sbrk_r+0x1a>
 8004018:	682b      	ldr	r3, [r5, #0]
 800401a:	b103      	cbz	r3, 800401e <_sbrk_r+0x1a>
 800401c:	6023      	str	r3, [r4, #0]
 800401e:	bd38      	pop	{r3, r4, r5, pc}
 8004020:	200001cc 	.word	0x200001cc

08004024 <__sread>:
 8004024:	b510      	push	{r4, lr}
 8004026:	460c      	mov	r4, r1
 8004028:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800402c:	f000 f9ae 	bl	800438c <_read_r>
 8004030:	2800      	cmp	r0, #0
 8004032:	bfab      	itete	ge
 8004034:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004036:	89a3      	ldrhlt	r3, [r4, #12]
 8004038:	181b      	addge	r3, r3, r0
 800403a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800403e:	bfac      	ite	ge
 8004040:	6563      	strge	r3, [r4, #84]	; 0x54
 8004042:	81a3      	strhlt	r3, [r4, #12]
 8004044:	bd10      	pop	{r4, pc}

08004046 <__swrite>:
 8004046:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800404a:	461f      	mov	r7, r3
 800404c:	898b      	ldrh	r3, [r1, #12]
 800404e:	05db      	lsls	r3, r3, #23
 8004050:	4605      	mov	r5, r0
 8004052:	460c      	mov	r4, r1
 8004054:	4616      	mov	r6, r2
 8004056:	d505      	bpl.n	8004064 <__swrite+0x1e>
 8004058:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800405c:	2302      	movs	r3, #2
 800405e:	2200      	movs	r2, #0
 8004060:	f000 f928 	bl	80042b4 <_lseek_r>
 8004064:	89a3      	ldrh	r3, [r4, #12]
 8004066:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800406a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800406e:	81a3      	strh	r3, [r4, #12]
 8004070:	4632      	mov	r2, r6
 8004072:	463b      	mov	r3, r7
 8004074:	4628      	mov	r0, r5
 8004076:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800407a:	f000 b869 	b.w	8004150 <_write_r>

0800407e <__sseek>:
 800407e:	b510      	push	{r4, lr}
 8004080:	460c      	mov	r4, r1
 8004082:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004086:	f000 f915 	bl	80042b4 <_lseek_r>
 800408a:	1c43      	adds	r3, r0, #1
 800408c:	89a3      	ldrh	r3, [r4, #12]
 800408e:	bf15      	itete	ne
 8004090:	6560      	strne	r0, [r4, #84]	; 0x54
 8004092:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004096:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800409a:	81a3      	strheq	r3, [r4, #12]
 800409c:	bf18      	it	ne
 800409e:	81a3      	strhne	r3, [r4, #12]
 80040a0:	bd10      	pop	{r4, pc}

080040a2 <__sclose>:
 80040a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80040a6:	f000 b8d3 	b.w	8004250 <_close_r>
	...

080040ac <__swbuf_r>:
 80040ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80040ae:	460e      	mov	r6, r1
 80040b0:	4614      	mov	r4, r2
 80040b2:	4605      	mov	r5, r0
 80040b4:	b118      	cbz	r0, 80040be <__swbuf_r+0x12>
 80040b6:	6983      	ldr	r3, [r0, #24]
 80040b8:	b90b      	cbnz	r3, 80040be <__swbuf_r+0x12>
 80040ba:	f7ff f9a3 	bl	8003404 <__sinit>
 80040be:	4b21      	ldr	r3, [pc, #132]	; (8004144 <__swbuf_r+0x98>)
 80040c0:	429c      	cmp	r4, r3
 80040c2:	d12b      	bne.n	800411c <__swbuf_r+0x70>
 80040c4:	686c      	ldr	r4, [r5, #4]
 80040c6:	69a3      	ldr	r3, [r4, #24]
 80040c8:	60a3      	str	r3, [r4, #8]
 80040ca:	89a3      	ldrh	r3, [r4, #12]
 80040cc:	071a      	lsls	r2, r3, #28
 80040ce:	d52f      	bpl.n	8004130 <__swbuf_r+0x84>
 80040d0:	6923      	ldr	r3, [r4, #16]
 80040d2:	b36b      	cbz	r3, 8004130 <__swbuf_r+0x84>
 80040d4:	6923      	ldr	r3, [r4, #16]
 80040d6:	6820      	ldr	r0, [r4, #0]
 80040d8:	1ac0      	subs	r0, r0, r3
 80040da:	6963      	ldr	r3, [r4, #20]
 80040dc:	b2f6      	uxtb	r6, r6
 80040de:	4283      	cmp	r3, r0
 80040e0:	4637      	mov	r7, r6
 80040e2:	dc04      	bgt.n	80040ee <__swbuf_r+0x42>
 80040e4:	4621      	mov	r1, r4
 80040e6:	4628      	mov	r0, r5
 80040e8:	f7ff f8f8 	bl	80032dc <_fflush_r>
 80040ec:	bb30      	cbnz	r0, 800413c <__swbuf_r+0x90>
 80040ee:	68a3      	ldr	r3, [r4, #8]
 80040f0:	3b01      	subs	r3, #1
 80040f2:	60a3      	str	r3, [r4, #8]
 80040f4:	6823      	ldr	r3, [r4, #0]
 80040f6:	1c5a      	adds	r2, r3, #1
 80040f8:	6022      	str	r2, [r4, #0]
 80040fa:	701e      	strb	r6, [r3, #0]
 80040fc:	6963      	ldr	r3, [r4, #20]
 80040fe:	3001      	adds	r0, #1
 8004100:	4283      	cmp	r3, r0
 8004102:	d004      	beq.n	800410e <__swbuf_r+0x62>
 8004104:	89a3      	ldrh	r3, [r4, #12]
 8004106:	07db      	lsls	r3, r3, #31
 8004108:	d506      	bpl.n	8004118 <__swbuf_r+0x6c>
 800410a:	2e0a      	cmp	r6, #10
 800410c:	d104      	bne.n	8004118 <__swbuf_r+0x6c>
 800410e:	4621      	mov	r1, r4
 8004110:	4628      	mov	r0, r5
 8004112:	f7ff f8e3 	bl	80032dc <_fflush_r>
 8004116:	b988      	cbnz	r0, 800413c <__swbuf_r+0x90>
 8004118:	4638      	mov	r0, r7
 800411a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800411c:	4b0a      	ldr	r3, [pc, #40]	; (8004148 <__swbuf_r+0x9c>)
 800411e:	429c      	cmp	r4, r3
 8004120:	d101      	bne.n	8004126 <__swbuf_r+0x7a>
 8004122:	68ac      	ldr	r4, [r5, #8]
 8004124:	e7cf      	b.n	80040c6 <__swbuf_r+0x1a>
 8004126:	4b09      	ldr	r3, [pc, #36]	; (800414c <__swbuf_r+0xa0>)
 8004128:	429c      	cmp	r4, r3
 800412a:	bf08      	it	eq
 800412c:	68ec      	ldreq	r4, [r5, #12]
 800412e:	e7ca      	b.n	80040c6 <__swbuf_r+0x1a>
 8004130:	4621      	mov	r1, r4
 8004132:	4628      	mov	r0, r5
 8004134:	f000 f81e 	bl	8004174 <__swsetup_r>
 8004138:	2800      	cmp	r0, #0
 800413a:	d0cb      	beq.n	80040d4 <__swbuf_r+0x28>
 800413c:	f04f 37ff 	mov.w	r7, #4294967295
 8004140:	e7ea      	b.n	8004118 <__swbuf_r+0x6c>
 8004142:	bf00      	nop
 8004144:	08004470 	.word	0x08004470
 8004148:	08004490 	.word	0x08004490
 800414c:	08004450 	.word	0x08004450

08004150 <_write_r>:
 8004150:	b538      	push	{r3, r4, r5, lr}
 8004152:	4d07      	ldr	r5, [pc, #28]	; (8004170 <_write_r+0x20>)
 8004154:	4604      	mov	r4, r0
 8004156:	4608      	mov	r0, r1
 8004158:	4611      	mov	r1, r2
 800415a:	2200      	movs	r2, #0
 800415c:	602a      	str	r2, [r5, #0]
 800415e:	461a      	mov	r2, r3
 8004160:	f7fc fa38 	bl	80005d4 <_write>
 8004164:	1c43      	adds	r3, r0, #1
 8004166:	d102      	bne.n	800416e <_write_r+0x1e>
 8004168:	682b      	ldr	r3, [r5, #0]
 800416a:	b103      	cbz	r3, 800416e <_write_r+0x1e>
 800416c:	6023      	str	r3, [r4, #0]
 800416e:	bd38      	pop	{r3, r4, r5, pc}
 8004170:	200001cc 	.word	0x200001cc

08004174 <__swsetup_r>:
 8004174:	4b32      	ldr	r3, [pc, #200]	; (8004240 <__swsetup_r+0xcc>)
 8004176:	b570      	push	{r4, r5, r6, lr}
 8004178:	681d      	ldr	r5, [r3, #0]
 800417a:	4606      	mov	r6, r0
 800417c:	460c      	mov	r4, r1
 800417e:	b125      	cbz	r5, 800418a <__swsetup_r+0x16>
 8004180:	69ab      	ldr	r3, [r5, #24]
 8004182:	b913      	cbnz	r3, 800418a <__swsetup_r+0x16>
 8004184:	4628      	mov	r0, r5
 8004186:	f7ff f93d 	bl	8003404 <__sinit>
 800418a:	4b2e      	ldr	r3, [pc, #184]	; (8004244 <__swsetup_r+0xd0>)
 800418c:	429c      	cmp	r4, r3
 800418e:	d10f      	bne.n	80041b0 <__swsetup_r+0x3c>
 8004190:	686c      	ldr	r4, [r5, #4]
 8004192:	89a3      	ldrh	r3, [r4, #12]
 8004194:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004198:	0719      	lsls	r1, r3, #28
 800419a:	d42c      	bmi.n	80041f6 <__swsetup_r+0x82>
 800419c:	06dd      	lsls	r5, r3, #27
 800419e:	d411      	bmi.n	80041c4 <__swsetup_r+0x50>
 80041a0:	2309      	movs	r3, #9
 80041a2:	6033      	str	r3, [r6, #0]
 80041a4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80041a8:	81a3      	strh	r3, [r4, #12]
 80041aa:	f04f 30ff 	mov.w	r0, #4294967295
 80041ae:	e03e      	b.n	800422e <__swsetup_r+0xba>
 80041b0:	4b25      	ldr	r3, [pc, #148]	; (8004248 <__swsetup_r+0xd4>)
 80041b2:	429c      	cmp	r4, r3
 80041b4:	d101      	bne.n	80041ba <__swsetup_r+0x46>
 80041b6:	68ac      	ldr	r4, [r5, #8]
 80041b8:	e7eb      	b.n	8004192 <__swsetup_r+0x1e>
 80041ba:	4b24      	ldr	r3, [pc, #144]	; (800424c <__swsetup_r+0xd8>)
 80041bc:	429c      	cmp	r4, r3
 80041be:	bf08      	it	eq
 80041c0:	68ec      	ldreq	r4, [r5, #12]
 80041c2:	e7e6      	b.n	8004192 <__swsetup_r+0x1e>
 80041c4:	0758      	lsls	r0, r3, #29
 80041c6:	d512      	bpl.n	80041ee <__swsetup_r+0x7a>
 80041c8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80041ca:	b141      	cbz	r1, 80041de <__swsetup_r+0x6a>
 80041cc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80041d0:	4299      	cmp	r1, r3
 80041d2:	d002      	beq.n	80041da <__swsetup_r+0x66>
 80041d4:	4630      	mov	r0, r6
 80041d6:	f7ff fa21 	bl	800361c <_free_r>
 80041da:	2300      	movs	r3, #0
 80041dc:	6363      	str	r3, [r4, #52]	; 0x34
 80041de:	89a3      	ldrh	r3, [r4, #12]
 80041e0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80041e4:	81a3      	strh	r3, [r4, #12]
 80041e6:	2300      	movs	r3, #0
 80041e8:	6063      	str	r3, [r4, #4]
 80041ea:	6923      	ldr	r3, [r4, #16]
 80041ec:	6023      	str	r3, [r4, #0]
 80041ee:	89a3      	ldrh	r3, [r4, #12]
 80041f0:	f043 0308 	orr.w	r3, r3, #8
 80041f4:	81a3      	strh	r3, [r4, #12]
 80041f6:	6923      	ldr	r3, [r4, #16]
 80041f8:	b94b      	cbnz	r3, 800420e <__swsetup_r+0x9a>
 80041fa:	89a3      	ldrh	r3, [r4, #12]
 80041fc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004200:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004204:	d003      	beq.n	800420e <__swsetup_r+0x9a>
 8004206:	4621      	mov	r1, r4
 8004208:	4630      	mov	r0, r6
 800420a:	f7ff f9bf 	bl	800358c <__smakebuf_r>
 800420e:	89a0      	ldrh	r0, [r4, #12]
 8004210:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004214:	f010 0301 	ands.w	r3, r0, #1
 8004218:	d00a      	beq.n	8004230 <__swsetup_r+0xbc>
 800421a:	2300      	movs	r3, #0
 800421c:	60a3      	str	r3, [r4, #8]
 800421e:	6963      	ldr	r3, [r4, #20]
 8004220:	425b      	negs	r3, r3
 8004222:	61a3      	str	r3, [r4, #24]
 8004224:	6923      	ldr	r3, [r4, #16]
 8004226:	b943      	cbnz	r3, 800423a <__swsetup_r+0xc6>
 8004228:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800422c:	d1ba      	bne.n	80041a4 <__swsetup_r+0x30>
 800422e:	bd70      	pop	{r4, r5, r6, pc}
 8004230:	0781      	lsls	r1, r0, #30
 8004232:	bf58      	it	pl
 8004234:	6963      	ldrpl	r3, [r4, #20]
 8004236:	60a3      	str	r3, [r4, #8]
 8004238:	e7f4      	b.n	8004224 <__swsetup_r+0xb0>
 800423a:	2000      	movs	r0, #0
 800423c:	e7f7      	b.n	800422e <__swsetup_r+0xba>
 800423e:	bf00      	nop
 8004240:	20000010 	.word	0x20000010
 8004244:	08004470 	.word	0x08004470
 8004248:	08004490 	.word	0x08004490
 800424c:	08004450 	.word	0x08004450

08004250 <_close_r>:
 8004250:	b538      	push	{r3, r4, r5, lr}
 8004252:	4d06      	ldr	r5, [pc, #24]	; (800426c <_close_r+0x1c>)
 8004254:	2300      	movs	r3, #0
 8004256:	4604      	mov	r4, r0
 8004258:	4608      	mov	r0, r1
 800425a:	602b      	str	r3, [r5, #0]
 800425c:	f7fc f9e6 	bl	800062c <_close>
 8004260:	1c43      	adds	r3, r0, #1
 8004262:	d102      	bne.n	800426a <_close_r+0x1a>
 8004264:	682b      	ldr	r3, [r5, #0]
 8004266:	b103      	cbz	r3, 800426a <_close_r+0x1a>
 8004268:	6023      	str	r3, [r4, #0]
 800426a:	bd38      	pop	{r3, r4, r5, pc}
 800426c:	200001cc 	.word	0x200001cc

08004270 <_fstat_r>:
 8004270:	b538      	push	{r3, r4, r5, lr}
 8004272:	4d07      	ldr	r5, [pc, #28]	; (8004290 <_fstat_r+0x20>)
 8004274:	2300      	movs	r3, #0
 8004276:	4604      	mov	r4, r0
 8004278:	4608      	mov	r0, r1
 800427a:	4611      	mov	r1, r2
 800427c:	602b      	str	r3, [r5, #0]
 800427e:	f7fc fa25 	bl	80006cc <_fstat>
 8004282:	1c43      	adds	r3, r0, #1
 8004284:	d102      	bne.n	800428c <_fstat_r+0x1c>
 8004286:	682b      	ldr	r3, [r5, #0]
 8004288:	b103      	cbz	r3, 800428c <_fstat_r+0x1c>
 800428a:	6023      	str	r3, [r4, #0]
 800428c:	bd38      	pop	{r3, r4, r5, pc}
 800428e:	bf00      	nop
 8004290:	200001cc 	.word	0x200001cc

08004294 <_isatty_r>:
 8004294:	b538      	push	{r3, r4, r5, lr}
 8004296:	4d06      	ldr	r5, [pc, #24]	; (80042b0 <_isatty_r+0x1c>)
 8004298:	2300      	movs	r3, #0
 800429a:	4604      	mov	r4, r0
 800429c:	4608      	mov	r0, r1
 800429e:	602b      	str	r3, [r5, #0]
 80042a0:	f7fc f982 	bl	80005a8 <_isatty>
 80042a4:	1c43      	adds	r3, r0, #1
 80042a6:	d102      	bne.n	80042ae <_isatty_r+0x1a>
 80042a8:	682b      	ldr	r3, [r5, #0]
 80042aa:	b103      	cbz	r3, 80042ae <_isatty_r+0x1a>
 80042ac:	6023      	str	r3, [r4, #0]
 80042ae:	bd38      	pop	{r3, r4, r5, pc}
 80042b0:	200001cc 	.word	0x200001cc

080042b4 <_lseek_r>:
 80042b4:	b538      	push	{r3, r4, r5, lr}
 80042b6:	4d07      	ldr	r5, [pc, #28]	; (80042d4 <_lseek_r+0x20>)
 80042b8:	4604      	mov	r4, r0
 80042ba:	4608      	mov	r0, r1
 80042bc:	4611      	mov	r1, r2
 80042be:	2200      	movs	r2, #0
 80042c0:	602a      	str	r2, [r5, #0]
 80042c2:	461a      	mov	r2, r3
 80042c4:	f7fc f9c9 	bl	800065a <_lseek>
 80042c8:	1c43      	adds	r3, r0, #1
 80042ca:	d102      	bne.n	80042d2 <_lseek_r+0x1e>
 80042cc:	682b      	ldr	r3, [r5, #0]
 80042ce:	b103      	cbz	r3, 80042d2 <_lseek_r+0x1e>
 80042d0:	6023      	str	r3, [r4, #0]
 80042d2:	bd38      	pop	{r3, r4, r5, pc}
 80042d4:	200001cc 	.word	0x200001cc

080042d8 <memcpy>:
 80042d8:	440a      	add	r2, r1
 80042da:	4291      	cmp	r1, r2
 80042dc:	f100 33ff 	add.w	r3, r0, #4294967295
 80042e0:	d100      	bne.n	80042e4 <memcpy+0xc>
 80042e2:	4770      	bx	lr
 80042e4:	b510      	push	{r4, lr}
 80042e6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80042ea:	f803 4f01 	strb.w	r4, [r3, #1]!
 80042ee:	4291      	cmp	r1, r2
 80042f0:	d1f9      	bne.n	80042e6 <memcpy+0xe>
 80042f2:	bd10      	pop	{r4, pc}

080042f4 <memmove>:
 80042f4:	4288      	cmp	r0, r1
 80042f6:	b510      	push	{r4, lr}
 80042f8:	eb01 0402 	add.w	r4, r1, r2
 80042fc:	d902      	bls.n	8004304 <memmove+0x10>
 80042fe:	4284      	cmp	r4, r0
 8004300:	4623      	mov	r3, r4
 8004302:	d807      	bhi.n	8004314 <memmove+0x20>
 8004304:	1e43      	subs	r3, r0, #1
 8004306:	42a1      	cmp	r1, r4
 8004308:	d008      	beq.n	800431c <memmove+0x28>
 800430a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800430e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004312:	e7f8      	b.n	8004306 <memmove+0x12>
 8004314:	4402      	add	r2, r0
 8004316:	4601      	mov	r1, r0
 8004318:	428a      	cmp	r2, r1
 800431a:	d100      	bne.n	800431e <memmove+0x2a>
 800431c:	bd10      	pop	{r4, pc}
 800431e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004322:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004326:	e7f7      	b.n	8004318 <memmove+0x24>

08004328 <__malloc_lock>:
 8004328:	4801      	ldr	r0, [pc, #4]	; (8004330 <__malloc_lock+0x8>)
 800432a:	f7ff b909 	b.w	8003540 <__retarget_lock_acquire_recursive>
 800432e:	bf00      	nop
 8004330:	200001c4 	.word	0x200001c4

08004334 <__malloc_unlock>:
 8004334:	4801      	ldr	r0, [pc, #4]	; (800433c <__malloc_unlock+0x8>)
 8004336:	f7ff b904 	b.w	8003542 <__retarget_lock_release_recursive>
 800433a:	bf00      	nop
 800433c:	200001c4 	.word	0x200001c4

08004340 <_realloc_r>:
 8004340:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004342:	4607      	mov	r7, r0
 8004344:	4614      	mov	r4, r2
 8004346:	460e      	mov	r6, r1
 8004348:	b921      	cbnz	r1, 8004354 <_realloc_r+0x14>
 800434a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800434e:	4611      	mov	r1, r2
 8004350:	f7ff b9b4 	b.w	80036bc <_malloc_r>
 8004354:	b922      	cbnz	r2, 8004360 <_realloc_r+0x20>
 8004356:	f7ff f961 	bl	800361c <_free_r>
 800435a:	4625      	mov	r5, r4
 800435c:	4628      	mov	r0, r5
 800435e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004360:	f000 f826 	bl	80043b0 <_malloc_usable_size_r>
 8004364:	42a0      	cmp	r0, r4
 8004366:	d20f      	bcs.n	8004388 <_realloc_r+0x48>
 8004368:	4621      	mov	r1, r4
 800436a:	4638      	mov	r0, r7
 800436c:	f7ff f9a6 	bl	80036bc <_malloc_r>
 8004370:	4605      	mov	r5, r0
 8004372:	2800      	cmp	r0, #0
 8004374:	d0f2      	beq.n	800435c <_realloc_r+0x1c>
 8004376:	4631      	mov	r1, r6
 8004378:	4622      	mov	r2, r4
 800437a:	f7ff ffad 	bl	80042d8 <memcpy>
 800437e:	4631      	mov	r1, r6
 8004380:	4638      	mov	r0, r7
 8004382:	f7ff f94b 	bl	800361c <_free_r>
 8004386:	e7e9      	b.n	800435c <_realloc_r+0x1c>
 8004388:	4635      	mov	r5, r6
 800438a:	e7e7      	b.n	800435c <_realloc_r+0x1c>

0800438c <_read_r>:
 800438c:	b538      	push	{r3, r4, r5, lr}
 800438e:	4d07      	ldr	r5, [pc, #28]	; (80043ac <_read_r+0x20>)
 8004390:	4604      	mov	r4, r0
 8004392:	4608      	mov	r0, r1
 8004394:	4611      	mov	r1, r2
 8004396:	2200      	movs	r2, #0
 8004398:	602a      	str	r2, [r5, #0]
 800439a:	461a      	mov	r2, r3
 800439c:	f7fc f96e 	bl	800067c <_read>
 80043a0:	1c43      	adds	r3, r0, #1
 80043a2:	d102      	bne.n	80043aa <_read_r+0x1e>
 80043a4:	682b      	ldr	r3, [r5, #0]
 80043a6:	b103      	cbz	r3, 80043aa <_read_r+0x1e>
 80043a8:	6023      	str	r3, [r4, #0]
 80043aa:	bd38      	pop	{r3, r4, r5, pc}
 80043ac:	200001cc 	.word	0x200001cc

080043b0 <_malloc_usable_size_r>:
 80043b0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80043b4:	1f18      	subs	r0, r3, #4
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	bfbc      	itt	lt
 80043ba:	580b      	ldrlt	r3, [r1, r0]
 80043bc:	18c0      	addlt	r0, r0, r3
 80043be:	4770      	bx	lr

080043c0 <_init>:
 80043c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80043c2:	bf00      	nop
 80043c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80043c6:	bc08      	pop	{r3}
 80043c8:	469e      	mov	lr, r3
 80043ca:	4770      	bx	lr

080043cc <_fini>:
 80043cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80043ce:	bf00      	nop
 80043d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80043d2:	bc08      	pop	{r3}
 80043d4:	469e      	mov	lr, r3
 80043d6:	4770      	bx	lr
