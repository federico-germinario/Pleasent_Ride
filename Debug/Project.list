
Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cf3c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000650  0800d0d0  0800d0d0  0001d0d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d720  0800d720  000201f8  2**0
                  CONTENTS
  4 .ARM          00000008  0800d720  0800d720  0001d720  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d728  0800d728  000201f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d728  0800d728  0001d728  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d72c  0800d72c  0001d72c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f8  20000000  0800d730  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201f8  2**0
                  CONTENTS
 10 .bss          00000764  200001f8  200001f8  000201f8  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000095c  2000095c  000201f8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201f8  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001663d  00000000  00000000  00020228  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002988  00000000  00000000  00036865  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001250  00000000  00000000  000391f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001180  00000000  00000000  0003a440  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024f16  00000000  00000000  0003b5c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00015dc7  00000000  00000000  000604d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000dca3a  00000000  00000000  0007629d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00152cd7  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006308  00000000  00000000  00152d2c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001f8 	.word	0x200001f8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800d0b4 	.word	0x0800d0b4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001fc 	.word	0x200001fc
 80001cc:	0800d0b4 	.word	0x0800d0b4

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295
 8000c5c:	f000 b96e 	b.w	8000f3c <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9d08      	ldr	r5, [sp, #32]
 8000c7e:	4604      	mov	r4, r0
 8000c80:	468c      	mov	ip, r1
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	f040 8083 	bne.w	8000d8e <__udivmoddi4+0x116>
 8000c88:	428a      	cmp	r2, r1
 8000c8a:	4617      	mov	r7, r2
 8000c8c:	d947      	bls.n	8000d1e <__udivmoddi4+0xa6>
 8000c8e:	fab2 f282 	clz	r2, r2
 8000c92:	b142      	cbz	r2, 8000ca6 <__udivmoddi4+0x2e>
 8000c94:	f1c2 0020 	rsb	r0, r2, #32
 8000c98:	fa24 f000 	lsr.w	r0, r4, r0
 8000c9c:	4091      	lsls	r1, r2
 8000c9e:	4097      	lsls	r7, r2
 8000ca0:	ea40 0c01 	orr.w	ip, r0, r1
 8000ca4:	4094      	lsls	r4, r2
 8000ca6:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000caa:	0c23      	lsrs	r3, r4, #16
 8000cac:	fbbc f6f8 	udiv	r6, ip, r8
 8000cb0:	fa1f fe87 	uxth.w	lr, r7
 8000cb4:	fb08 c116 	mls	r1, r8, r6, ip
 8000cb8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cbc:	fb06 f10e 	mul.w	r1, r6, lr
 8000cc0:	4299      	cmp	r1, r3
 8000cc2:	d909      	bls.n	8000cd8 <__udivmoddi4+0x60>
 8000cc4:	18fb      	adds	r3, r7, r3
 8000cc6:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cca:	f080 8119 	bcs.w	8000f00 <__udivmoddi4+0x288>
 8000cce:	4299      	cmp	r1, r3
 8000cd0:	f240 8116 	bls.w	8000f00 <__udivmoddi4+0x288>
 8000cd4:	3e02      	subs	r6, #2
 8000cd6:	443b      	add	r3, r7
 8000cd8:	1a5b      	subs	r3, r3, r1
 8000cda:	b2a4      	uxth	r4, r4
 8000cdc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ce0:	fb08 3310 	mls	r3, r8, r0, r3
 8000ce4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ce8:	fb00 fe0e 	mul.w	lr, r0, lr
 8000cec:	45a6      	cmp	lr, r4
 8000cee:	d909      	bls.n	8000d04 <__udivmoddi4+0x8c>
 8000cf0:	193c      	adds	r4, r7, r4
 8000cf2:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cf6:	f080 8105 	bcs.w	8000f04 <__udivmoddi4+0x28c>
 8000cfa:	45a6      	cmp	lr, r4
 8000cfc:	f240 8102 	bls.w	8000f04 <__udivmoddi4+0x28c>
 8000d00:	3802      	subs	r0, #2
 8000d02:	443c      	add	r4, r7
 8000d04:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d08:	eba4 040e 	sub.w	r4, r4, lr
 8000d0c:	2600      	movs	r6, #0
 8000d0e:	b11d      	cbz	r5, 8000d18 <__udivmoddi4+0xa0>
 8000d10:	40d4      	lsrs	r4, r2
 8000d12:	2300      	movs	r3, #0
 8000d14:	e9c5 4300 	strd	r4, r3, [r5]
 8000d18:	4631      	mov	r1, r6
 8000d1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d1e:	b902      	cbnz	r2, 8000d22 <__udivmoddi4+0xaa>
 8000d20:	deff      	udf	#255	; 0xff
 8000d22:	fab2 f282 	clz	r2, r2
 8000d26:	2a00      	cmp	r2, #0
 8000d28:	d150      	bne.n	8000dcc <__udivmoddi4+0x154>
 8000d2a:	1bcb      	subs	r3, r1, r7
 8000d2c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d30:	fa1f f887 	uxth.w	r8, r7
 8000d34:	2601      	movs	r6, #1
 8000d36:	fbb3 fcfe 	udiv	ip, r3, lr
 8000d3a:	0c21      	lsrs	r1, r4, #16
 8000d3c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000d40:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d44:	fb08 f30c 	mul.w	r3, r8, ip
 8000d48:	428b      	cmp	r3, r1
 8000d4a:	d907      	bls.n	8000d5c <__udivmoddi4+0xe4>
 8000d4c:	1879      	adds	r1, r7, r1
 8000d4e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d52:	d202      	bcs.n	8000d5a <__udivmoddi4+0xe2>
 8000d54:	428b      	cmp	r3, r1
 8000d56:	f200 80e9 	bhi.w	8000f2c <__udivmoddi4+0x2b4>
 8000d5a:	4684      	mov	ip, r0
 8000d5c:	1ac9      	subs	r1, r1, r3
 8000d5e:	b2a3      	uxth	r3, r4
 8000d60:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d64:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d68:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000d6c:	fb08 f800 	mul.w	r8, r8, r0
 8000d70:	45a0      	cmp	r8, r4
 8000d72:	d907      	bls.n	8000d84 <__udivmoddi4+0x10c>
 8000d74:	193c      	adds	r4, r7, r4
 8000d76:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d7a:	d202      	bcs.n	8000d82 <__udivmoddi4+0x10a>
 8000d7c:	45a0      	cmp	r8, r4
 8000d7e:	f200 80d9 	bhi.w	8000f34 <__udivmoddi4+0x2bc>
 8000d82:	4618      	mov	r0, r3
 8000d84:	eba4 0408 	sub.w	r4, r4, r8
 8000d88:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d8c:	e7bf      	b.n	8000d0e <__udivmoddi4+0x96>
 8000d8e:	428b      	cmp	r3, r1
 8000d90:	d909      	bls.n	8000da6 <__udivmoddi4+0x12e>
 8000d92:	2d00      	cmp	r5, #0
 8000d94:	f000 80b1 	beq.w	8000efa <__udivmoddi4+0x282>
 8000d98:	2600      	movs	r6, #0
 8000d9a:	e9c5 0100 	strd	r0, r1, [r5]
 8000d9e:	4630      	mov	r0, r6
 8000da0:	4631      	mov	r1, r6
 8000da2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000da6:	fab3 f683 	clz	r6, r3
 8000daa:	2e00      	cmp	r6, #0
 8000dac:	d14a      	bne.n	8000e44 <__udivmoddi4+0x1cc>
 8000dae:	428b      	cmp	r3, r1
 8000db0:	d302      	bcc.n	8000db8 <__udivmoddi4+0x140>
 8000db2:	4282      	cmp	r2, r0
 8000db4:	f200 80b8 	bhi.w	8000f28 <__udivmoddi4+0x2b0>
 8000db8:	1a84      	subs	r4, r0, r2
 8000dba:	eb61 0103 	sbc.w	r1, r1, r3
 8000dbe:	2001      	movs	r0, #1
 8000dc0:	468c      	mov	ip, r1
 8000dc2:	2d00      	cmp	r5, #0
 8000dc4:	d0a8      	beq.n	8000d18 <__udivmoddi4+0xa0>
 8000dc6:	e9c5 4c00 	strd	r4, ip, [r5]
 8000dca:	e7a5      	b.n	8000d18 <__udivmoddi4+0xa0>
 8000dcc:	f1c2 0320 	rsb	r3, r2, #32
 8000dd0:	fa20 f603 	lsr.w	r6, r0, r3
 8000dd4:	4097      	lsls	r7, r2
 8000dd6:	fa01 f002 	lsl.w	r0, r1, r2
 8000dda:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dde:	40d9      	lsrs	r1, r3
 8000de0:	4330      	orrs	r0, r6
 8000de2:	0c03      	lsrs	r3, r0, #16
 8000de4:	fbb1 f6fe 	udiv	r6, r1, lr
 8000de8:	fa1f f887 	uxth.w	r8, r7
 8000dec:	fb0e 1116 	mls	r1, lr, r6, r1
 8000df0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000df4:	fb06 f108 	mul.w	r1, r6, r8
 8000df8:	4299      	cmp	r1, r3
 8000dfa:	fa04 f402 	lsl.w	r4, r4, r2
 8000dfe:	d909      	bls.n	8000e14 <__udivmoddi4+0x19c>
 8000e00:	18fb      	adds	r3, r7, r3
 8000e02:	f106 3cff 	add.w	ip, r6, #4294967295
 8000e06:	f080 808d 	bcs.w	8000f24 <__udivmoddi4+0x2ac>
 8000e0a:	4299      	cmp	r1, r3
 8000e0c:	f240 808a 	bls.w	8000f24 <__udivmoddi4+0x2ac>
 8000e10:	3e02      	subs	r6, #2
 8000e12:	443b      	add	r3, r7
 8000e14:	1a5b      	subs	r3, r3, r1
 8000e16:	b281      	uxth	r1, r0
 8000e18:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e1c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e20:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e24:	fb00 f308 	mul.w	r3, r0, r8
 8000e28:	428b      	cmp	r3, r1
 8000e2a:	d907      	bls.n	8000e3c <__udivmoddi4+0x1c4>
 8000e2c:	1879      	adds	r1, r7, r1
 8000e2e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e32:	d273      	bcs.n	8000f1c <__udivmoddi4+0x2a4>
 8000e34:	428b      	cmp	r3, r1
 8000e36:	d971      	bls.n	8000f1c <__udivmoddi4+0x2a4>
 8000e38:	3802      	subs	r0, #2
 8000e3a:	4439      	add	r1, r7
 8000e3c:	1acb      	subs	r3, r1, r3
 8000e3e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000e42:	e778      	b.n	8000d36 <__udivmoddi4+0xbe>
 8000e44:	f1c6 0c20 	rsb	ip, r6, #32
 8000e48:	fa03 f406 	lsl.w	r4, r3, r6
 8000e4c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000e50:	431c      	orrs	r4, r3
 8000e52:	fa20 f70c 	lsr.w	r7, r0, ip
 8000e56:	fa01 f306 	lsl.w	r3, r1, r6
 8000e5a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000e5e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000e62:	431f      	orrs	r7, r3
 8000e64:	0c3b      	lsrs	r3, r7, #16
 8000e66:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e6a:	fa1f f884 	uxth.w	r8, r4
 8000e6e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e72:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000e76:	fb09 fa08 	mul.w	sl, r9, r8
 8000e7a:	458a      	cmp	sl, r1
 8000e7c:	fa02 f206 	lsl.w	r2, r2, r6
 8000e80:	fa00 f306 	lsl.w	r3, r0, r6
 8000e84:	d908      	bls.n	8000e98 <__udivmoddi4+0x220>
 8000e86:	1861      	adds	r1, r4, r1
 8000e88:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e8c:	d248      	bcs.n	8000f20 <__udivmoddi4+0x2a8>
 8000e8e:	458a      	cmp	sl, r1
 8000e90:	d946      	bls.n	8000f20 <__udivmoddi4+0x2a8>
 8000e92:	f1a9 0902 	sub.w	r9, r9, #2
 8000e96:	4421      	add	r1, r4
 8000e98:	eba1 010a 	sub.w	r1, r1, sl
 8000e9c:	b2bf      	uxth	r7, r7
 8000e9e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000ea2:	fb0e 1110 	mls	r1, lr, r0, r1
 8000ea6:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000eaa:	fb00 f808 	mul.w	r8, r0, r8
 8000eae:	45b8      	cmp	r8, r7
 8000eb0:	d907      	bls.n	8000ec2 <__udivmoddi4+0x24a>
 8000eb2:	19e7      	adds	r7, r4, r7
 8000eb4:	f100 31ff 	add.w	r1, r0, #4294967295
 8000eb8:	d22e      	bcs.n	8000f18 <__udivmoddi4+0x2a0>
 8000eba:	45b8      	cmp	r8, r7
 8000ebc:	d92c      	bls.n	8000f18 <__udivmoddi4+0x2a0>
 8000ebe:	3802      	subs	r0, #2
 8000ec0:	4427      	add	r7, r4
 8000ec2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ec6:	eba7 0708 	sub.w	r7, r7, r8
 8000eca:	fba0 8902 	umull	r8, r9, r0, r2
 8000ece:	454f      	cmp	r7, r9
 8000ed0:	46c6      	mov	lr, r8
 8000ed2:	4649      	mov	r1, r9
 8000ed4:	d31a      	bcc.n	8000f0c <__udivmoddi4+0x294>
 8000ed6:	d017      	beq.n	8000f08 <__udivmoddi4+0x290>
 8000ed8:	b15d      	cbz	r5, 8000ef2 <__udivmoddi4+0x27a>
 8000eda:	ebb3 020e 	subs.w	r2, r3, lr
 8000ede:	eb67 0701 	sbc.w	r7, r7, r1
 8000ee2:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000ee6:	40f2      	lsrs	r2, r6
 8000ee8:	ea4c 0202 	orr.w	r2, ip, r2
 8000eec:	40f7      	lsrs	r7, r6
 8000eee:	e9c5 2700 	strd	r2, r7, [r5]
 8000ef2:	2600      	movs	r6, #0
 8000ef4:	4631      	mov	r1, r6
 8000ef6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000efa:	462e      	mov	r6, r5
 8000efc:	4628      	mov	r0, r5
 8000efe:	e70b      	b.n	8000d18 <__udivmoddi4+0xa0>
 8000f00:	4606      	mov	r6, r0
 8000f02:	e6e9      	b.n	8000cd8 <__udivmoddi4+0x60>
 8000f04:	4618      	mov	r0, r3
 8000f06:	e6fd      	b.n	8000d04 <__udivmoddi4+0x8c>
 8000f08:	4543      	cmp	r3, r8
 8000f0a:	d2e5      	bcs.n	8000ed8 <__udivmoddi4+0x260>
 8000f0c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000f10:	eb69 0104 	sbc.w	r1, r9, r4
 8000f14:	3801      	subs	r0, #1
 8000f16:	e7df      	b.n	8000ed8 <__udivmoddi4+0x260>
 8000f18:	4608      	mov	r0, r1
 8000f1a:	e7d2      	b.n	8000ec2 <__udivmoddi4+0x24a>
 8000f1c:	4660      	mov	r0, ip
 8000f1e:	e78d      	b.n	8000e3c <__udivmoddi4+0x1c4>
 8000f20:	4681      	mov	r9, r0
 8000f22:	e7b9      	b.n	8000e98 <__udivmoddi4+0x220>
 8000f24:	4666      	mov	r6, ip
 8000f26:	e775      	b.n	8000e14 <__udivmoddi4+0x19c>
 8000f28:	4630      	mov	r0, r6
 8000f2a:	e74a      	b.n	8000dc2 <__udivmoddi4+0x14a>
 8000f2c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f30:	4439      	add	r1, r7
 8000f32:	e713      	b.n	8000d5c <__udivmoddi4+0xe4>
 8000f34:	3802      	subs	r0, #2
 8000f36:	443c      	add	r4, r7
 8000f38:	e724      	b.n	8000d84 <__udivmoddi4+0x10c>
 8000f3a:	bf00      	nop

08000f3c <__aeabi_idiv0>:
 8000f3c:	4770      	bx	lr
 8000f3e:	bf00      	nop

08000f40 <MPU6050_Init>:
#include <errno.h>
#include <sys/stat.h>
#include "retarget_uart.h"


void MPU6050_Init(){
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b086      	sub	sp, #24
 8000f44:	af04      	add	r7, sp, #16
	uint8_t check, Data;
	uint8_t attempts = 0;
 8000f46:	2300      	movs	r3, #0
 8000f48:	71fb      	strb	r3, [r7, #7]

	// Check if the device is ready
	while(check != 104){
 8000f4a:	e011      	b.n	8000f70 <MPU6050_Init+0x30>
		HAL_I2C_Mem_Read(&hi2c1, MPU6050_ADDR, WHO_AM_I_REG, 1, &check, 1, 1000);
 8000f4c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f50:	9302      	str	r3, [sp, #8]
 8000f52:	2301      	movs	r3, #1
 8000f54:	9301      	str	r3, [sp, #4]
 8000f56:	1dbb      	adds	r3, r7, #6
 8000f58:	9300      	str	r3, [sp, #0]
 8000f5a:	2301      	movs	r3, #1
 8000f5c:	2275      	movs	r2, #117	; 0x75
 8000f5e:	21d0      	movs	r1, #208	; 0xd0
 8000f60:	4845      	ldr	r0, [pc, #276]	; (8001078 <MPU6050_Init+0x138>)
 8000f62:	f004 f813 	bl	8004f8c <HAL_I2C_Mem_Read>
		if(attempts++ > 50){
 8000f66:	79fb      	ldrb	r3, [r7, #7]
 8000f68:	1c5a      	adds	r2, r3, #1
 8000f6a:	71fa      	strb	r2, [r7, #7]
 8000f6c:	2b32      	cmp	r3, #50	; 0x32
 8000f6e:	d803      	bhi.n	8000f78 <MPU6050_Init+0x38>
	while(check != 104){
 8000f70:	79bb      	ldrb	r3, [r7, #6]
 8000f72:	2b68      	cmp	r3, #104	; 0x68
 8000f74:	d1ea      	bne.n	8000f4c <MPU6050_Init+0xc>
 8000f76:	e000      	b.n	8000f7a <MPU6050_Init+0x3a>
			break;
 8000f78:	bf00      	nop
		}
	}

	if(check == 104){ // If the device is ready
 8000f7a:	79bb      	ldrb	r3, [r7, #6]
 8000f7c:	2b68      	cmp	r3, #104	; 0x68
 8000f7e:	d177      	bne.n	8001070 <MPU6050_Init+0x130>

		// We write all zeros in register 0X6B to wake up the sensor
		Data = 0;
 8000f80:	2300      	movs	r3, #0
 8000f82:	717b      	strb	r3, [r7, #5]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, PWR_MGMT_1_REG, 1, &Data, 1, 1000);
 8000f84:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f88:	9302      	str	r3, [sp, #8]
 8000f8a:	2301      	movs	r3, #1
 8000f8c:	9301      	str	r3, [sp, #4]
 8000f8e:	1d7b      	adds	r3, r7, #5
 8000f90:	9300      	str	r3, [sp, #0]
 8000f92:	2301      	movs	r3, #1
 8000f94:	226b      	movs	r2, #107	; 0x6b
 8000f96:	21d0      	movs	r1, #208	; 0xd0
 8000f98:	4837      	ldr	r0, [pc, #220]	; (8001078 <MPU6050_Init+0x138>)
 8000f9a:	f003 fefd 	bl	8004d98 <HAL_I2C_Mem_Write>

		// Let's put Gyro fs at 1KHz
		Data = 0x02;
 8000f9e:	2302      	movs	r3, #2
 8000fa0:	717b      	strb	r3, [r7, #5]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, CONFIG_REG, 1, &Data, 1, 1000);
 8000fa2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fa6:	9302      	str	r3, [sp, #8]
 8000fa8:	2301      	movs	r3, #1
 8000faa:	9301      	str	r3, [sp, #4]
 8000fac:	1d7b      	adds	r3, r7, #5
 8000fae:	9300      	str	r3, [sp, #0]
 8000fb0:	2301      	movs	r3, #1
 8000fb2:	221a      	movs	r2, #26
 8000fb4:	21d0      	movs	r1, #208	; 0xd0
 8000fb6:	4830      	ldr	r0, [pc, #192]	; (8001078 <MPU6050_Init+0x138>)
 8000fb8:	f003 feee 	bl	8004d98 <HAL_I2C_Mem_Write>

		// DATA RATE = Gyroscope Output Rate (1 Khz) / (1 + SMPLRT_DIV (99)) ==> 10 Hz
		Data = 0x63;
 8000fbc:	2363      	movs	r3, #99	; 0x63
 8000fbe:	717b      	strb	r3, [r7, #5]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &Data, 1, 1000);
 8000fc0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fc4:	9302      	str	r3, [sp, #8]
 8000fc6:	2301      	movs	r3, #1
 8000fc8:	9301      	str	r3, [sp, #4]
 8000fca:	1d7b      	adds	r3, r7, #5
 8000fcc:	9300      	str	r3, [sp, #0]
 8000fce:	2301      	movs	r3, #1
 8000fd0:	2219      	movs	r2, #25
 8000fd2:	21d0      	movs	r1, #208	; 0xd0
 8000fd4:	4828      	ldr	r0, [pc, #160]	; (8001078 <MPU6050_Init+0x138>)
 8000fd6:	f003 fedf 	bl	8004d98 <HAL_I2C_Mem_Write>

		// Accelerometer configuration:
		// XA_ST = 0, YA_ST = 0, ZA_ST = 0, FS_SEL = 0 ==> Full Scale Range = +- 2g
		Data = 0x00;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	717b      	strb	r3, [r7, #5]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &Data, 1, 1000);
 8000fde:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fe2:	9302      	str	r3, [sp, #8]
 8000fe4:	2301      	movs	r3, #1
 8000fe6:	9301      	str	r3, [sp, #4]
 8000fe8:	1d7b      	adds	r3, r7, #5
 8000fea:	9300      	str	r3, [sp, #0]
 8000fec:	2301      	movs	r3, #1
 8000fee:	221c      	movs	r2, #28
 8000ff0:	21d0      	movs	r1, #208	; 0xd0
 8000ff2:	4821      	ldr	r0, [pc, #132]	; (8001078 <MPU6050_Init+0x138>)
 8000ff4:	f003 fed0 	bl	8004d98 <HAL_I2C_Mem_Write>

		// Gyroscope configuration:
		// XG_ST = 0, YG_ST = 0, ZG_ST = 0, FS_SEL = 0 ==> Full Scale Range = +- 250 */s
		Data = 0x00;
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	717b      	strb	r3, [r7, #5]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &Data, 1, 1000);
 8000ffc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001000:	9302      	str	r3, [sp, #8]
 8001002:	2301      	movs	r3, #1
 8001004:	9301      	str	r3, [sp, #4]
 8001006:	1d7b      	adds	r3, r7, #5
 8001008:	9300      	str	r3, [sp, #0]
 800100a:	2301      	movs	r3, #1
 800100c:	221b      	movs	r2, #27
 800100e:	21d0      	movs	r1, #208	; 0xd0
 8001010:	4819      	ldr	r0, [pc, #100]	; (8001078 <MPU6050_Init+0x138>)
 8001012:	f003 fec1 	bl	8004d98 <HAL_I2C_Mem_Write>

		// Enable write buffers for accel and gyro
		Data = 0x78;
 8001016:	2378      	movs	r3, #120	; 0x78
 8001018:	717b      	strb	r3, [r7, #5]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, FIFO_EN_REG, 1, &Data, 1, 1000);
 800101a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800101e:	9302      	str	r3, [sp, #8]
 8001020:	2301      	movs	r3, #1
 8001022:	9301      	str	r3, [sp, #4]
 8001024:	1d7b      	adds	r3, r7, #5
 8001026:	9300      	str	r3, [sp, #0]
 8001028:	2301      	movs	r3, #1
 800102a:	2223      	movs	r2, #35	; 0x23
 800102c:	21d0      	movs	r1, #208	; 0xd0
 800102e:	4812      	ldr	r0, [pc, #72]	; (8001078 <MPU6050_Init+0x138>)
 8001030:	f003 feb2 	bl	8004d98 <HAL_I2C_Mem_Write>

		// Enable the buffer
		Data = 0x44;
 8001034:	2344      	movs	r3, #68	; 0x44
 8001036:	717b      	strb	r3, [r7, #5]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, USER_CTRL, 1, &Data, 1, 1000);
 8001038:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800103c:	9302      	str	r3, [sp, #8]
 800103e:	2301      	movs	r3, #1
 8001040:	9301      	str	r3, [sp, #4]
 8001042:	1d7b      	adds	r3, r7, #5
 8001044:	9300      	str	r3, [sp, #0]
 8001046:	2301      	movs	r3, #1
 8001048:	226a      	movs	r2, #106	; 0x6a
 800104a:	21d0      	movs	r1, #208	; 0xd0
 800104c:	480a      	ldr	r0, [pc, #40]	; (8001078 <MPU6050_Init+0x138>)
 800104e:	f003 fea3 	bl	8004d98 <HAL_I2C_Mem_Write>

		// Enable interrupt with data read
		Data = 0x01;
 8001052:	2301      	movs	r3, #1
 8001054:	717b      	strb	r3, [r7, #5]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, INT_ENABLE, 1, &Data, 1, 1000);
 8001056:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800105a:	9302      	str	r3, [sp, #8]
 800105c:	2301      	movs	r3, #1
 800105e:	9301      	str	r3, [sp, #4]
 8001060:	1d7b      	adds	r3, r7, #5
 8001062:	9300      	str	r3, [sp, #0]
 8001064:	2301      	movs	r3, #1
 8001066:	2238      	movs	r2, #56	; 0x38
 8001068:	21d0      	movs	r1, #208	; 0xd0
 800106a:	4803      	ldr	r0, [pc, #12]	; (8001078 <MPU6050_Init+0x138>)
 800106c:	f003 fe94 	bl	8004d98 <HAL_I2C_Mem_Write>
	}
}
 8001070:	bf00      	nop
 8001072:	3708      	adds	r7, #8
 8001074:	46bd      	mov	sp, r7
 8001076:	bd80      	pop	{r7, pc}
 8001078:	200002cc 	.word	0x200002cc

0800107c <fake_gps_init>:

// Initialization of the circular buffer containing the coordinates generated by Google Eart.
void fake_gps_init(){
 800107c:	b480      	push	{r7}
 800107e:	af00      	add	r7, sp, #0

	fake_gps[0].longitude = 9.232127873367;
 8001080:	4b29      	ldr	r3, [pc, #164]	; (8001128 <fake_gps_init+0xac>)
 8001082:	4a2a      	ldr	r2, [pc, #168]	; (800112c <fake_gps_init+0xb0>)
 8001084:	601a      	str	r2, [r3, #0]
	fake_gps[0].latitude = 45.476947477674;
 8001086:	4b28      	ldr	r3, [pc, #160]	; (8001128 <fake_gps_init+0xac>)
 8001088:	4a29      	ldr	r2, [pc, #164]	; (8001130 <fake_gps_init+0xb4>)
 800108a:	605a      	str	r2, [r3, #4]

	fake_gps[1].longitude = 9.23132169559556;
 800108c:	4b26      	ldr	r3, [pc, #152]	; (8001128 <fake_gps_init+0xac>)
 800108e:	4a29      	ldr	r2, [pc, #164]	; (8001134 <fake_gps_init+0xb8>)
 8001090:	609a      	str	r2, [r3, #8]
	fake_gps[1].latitude = 45.4769356338021;
 8001092:	4b25      	ldr	r3, [pc, #148]	; (8001128 <fake_gps_init+0xac>)
 8001094:	4a28      	ldr	r2, [pc, #160]	; (8001138 <fake_gps_init+0xbc>)
 8001096:	60da      	str	r2, [r3, #12]

	fake_gps[2].longitude = 9.23027839341514;
 8001098:	4b23      	ldr	r3, [pc, #140]	; (8001128 <fake_gps_init+0xac>)
 800109a:	4a28      	ldr	r2, [pc, #160]	; (800113c <fake_gps_init+0xc0>)
 800109c:	611a      	str	r2, [r3, #16]
	fake_gps[2].latitude = 45.4769302429461;
 800109e:	4b22      	ldr	r3, [pc, #136]	; (8001128 <fake_gps_init+0xac>)
 80010a0:	4a27      	ldr	r2, [pc, #156]	; (8001140 <fake_gps_init+0xc4>)
 80010a2:	615a      	str	r2, [r3, #20]

	fake_gps[3].longitude = 9.22848735956641;
 80010a4:	4b20      	ldr	r3, [pc, #128]	; (8001128 <fake_gps_init+0xac>)
 80010a6:	4a27      	ldr	r2, [pc, #156]	; (8001144 <fake_gps_init+0xc8>)
 80010a8:	619a      	str	r2, [r3, #24]
	fake_gps[3].latitude = 45.4768485383483;
 80010aa:	4b1f      	ldr	r3, [pc, #124]	; (8001128 <fake_gps_init+0xac>)
 80010ac:	4a26      	ldr	r2, [pc, #152]	; (8001148 <fake_gps_init+0xcc>)
 80010ae:	61da      	str	r2, [r3, #28]

	fake_gps[4].longitude = 9.22811674289873;
 80010b0:	4b1d      	ldr	r3, [pc, #116]	; (8001128 <fake_gps_init+0xac>)
 80010b2:	4a26      	ldr	r2, [pc, #152]	; (800114c <fake_gps_init+0xd0>)
 80010b4:	621a      	str	r2, [r3, #32]
	fake_gps[4].latitude = 45.4767904670821;
 80010b6:	4b1c      	ldr	r3, [pc, #112]	; (8001128 <fake_gps_init+0xac>)
 80010b8:	4a25      	ldr	r2, [pc, #148]	; (8001150 <fake_gps_init+0xd4>)
 80010ba:	625a      	str	r2, [r3, #36]	; 0x24

	fake_gps[5].longitude = 9.22542983923211;
 80010bc:	4b1a      	ldr	r3, [pc, #104]	; (8001128 <fake_gps_init+0xac>)
 80010be:	4a25      	ldr	r2, [pc, #148]	; (8001154 <fake_gps_init+0xd8>)
 80010c0:	629a      	str	r2, [r3, #40]	; 0x28
    fake_gps[5].latitude = 45.4767755259172;
 80010c2:	4b19      	ldr	r3, [pc, #100]	; (8001128 <fake_gps_init+0xac>)
 80010c4:	4a24      	ldr	r2, [pc, #144]	; (8001158 <fake_gps_init+0xdc>)
 80010c6:	62da      	str	r2, [r3, #44]	; 0x2c

    fake_gps[6].longitude = 9.22554076080336;
 80010c8:	4b17      	ldr	r3, [pc, #92]	; (8001128 <fake_gps_init+0xac>)
 80010ca:	4a24      	ldr	r2, [pc, #144]	; (800115c <fake_gps_init+0xe0>)
 80010cc:	631a      	str	r2, [r3, #48]	; 0x30
    fake_gps[6].latitude = 45.477625700989;
 80010ce:	4b16      	ldr	r3, [pc, #88]	; (8001128 <fake_gps_init+0xac>)
 80010d0:	4a23      	ldr	r2, [pc, #140]	; (8001160 <fake_gps_init+0xe4>)
 80010d2:	635a      	str	r2, [r3, #52]	; 0x34

    fake_gps[7].longitude = 9.22552155468664;
 80010d4:	4b14      	ldr	r3, [pc, #80]	; (8001128 <fake_gps_init+0xac>)
 80010d6:	4a23      	ldr	r2, [pc, #140]	; (8001164 <fake_gps_init+0xe8>)
 80010d8:	639a      	str	r2, [r3, #56]	; 0x38
    fake_gps[7].latitude = 45.4788784152841;
 80010da:	4b13      	ldr	r3, [pc, #76]	; (8001128 <fake_gps_init+0xac>)
 80010dc:	4a22      	ldr	r2, [pc, #136]	; (8001168 <fake_gps_init+0xec>)
 80010de:	63da      	str	r2, [r3, #60]	; 0x3c

    fake_gps[8].longitude = 9.22652317861608;
 80010e0:	4b11      	ldr	r3, [pc, #68]	; (8001128 <fake_gps_init+0xac>)
 80010e2:	4a22      	ldr	r2, [pc, #136]	; (800116c <fake_gps_init+0xf0>)
 80010e4:	641a      	str	r2, [r3, #64]	; 0x40
    fake_gps[8].latitude = 45.4792292326394;
 80010e6:	4b10      	ldr	r3, [pc, #64]	; (8001128 <fake_gps_init+0xac>)
 80010e8:	4a21      	ldr	r2, [pc, #132]	; (8001170 <fake_gps_init+0xf4>)
 80010ea:	645a      	str	r2, [r3, #68]	; 0x44

    fake_gps[9].longitude = 9.22803205121175;
 80010ec:	4b0e      	ldr	r3, [pc, #56]	; (8001128 <fake_gps_init+0xac>)
 80010ee:	4a21      	ldr	r2, [pc, #132]	; (8001174 <fake_gps_init+0xf8>)
 80010f0:	649a      	str	r2, [r3, #72]	; 0x48
    fake_gps[9].latitude = 45.4791161835439;
 80010f2:	4b0d      	ldr	r3, [pc, #52]	; (8001128 <fake_gps_init+0xac>)
 80010f4:	4a20      	ldr	r2, [pc, #128]	; (8001178 <fake_gps_init+0xfc>)
 80010f6:	64da      	str	r2, [r3, #76]	; 0x4c

    fake_gps[10].longitude = 9.22938409789064;
 80010f8:	4b0b      	ldr	r3, [pc, #44]	; (8001128 <fake_gps_init+0xac>)
 80010fa:	4a20      	ldr	r2, [pc, #128]	; (800117c <fake_gps_init+0x100>)
 80010fc:	651a      	str	r2, [r3, #80]	; 0x50
    fake_gps[10].latitude = 45.4790173241089;
 80010fe:	4b0a      	ldr	r3, [pc, #40]	; (8001128 <fake_gps_init+0xac>)
 8001100:	4a1f      	ldr	r2, [pc, #124]	; (8001180 <fake_gps_init+0x104>)
 8001102:	655a      	str	r2, [r3, #84]	; 0x54

    fake_gps[11].longitude = 9.22994266430211;
 8001104:	4b08      	ldr	r3, [pc, #32]	; (8001128 <fake_gps_init+0xac>)
 8001106:	4a1f      	ldr	r2, [pc, #124]	; (8001184 <fake_gps_init+0x108>)
 8001108:	659a      	str	r2, [r3, #88]	; 0x58
    fake_gps[11].latitude = 45.4782498335493;
 800110a:	4b07      	ldr	r3, [pc, #28]	; (8001128 <fake_gps_init+0xac>)
 800110c:	4a1e      	ldr	r2, [pc, #120]	; (8001188 <fake_gps_init+0x10c>)
 800110e:	65da      	str	r2, [r3, #92]	; 0x5c

    fake_gps[12].longitude = 9.22997546730472;
 8001110:	4b05      	ldr	r3, [pc, #20]	; (8001128 <fake_gps_init+0xac>)
 8001112:	4a1e      	ldr	r2, [pc, #120]	; (800118c <fake_gps_init+0x110>)
 8001114:	661a      	str	r2, [r3, #96]	; 0x60
    fake_gps[12].latitude = 45.4788991756912;
 8001116:	4b04      	ldr	r3, [pc, #16]	; (8001128 <fake_gps_init+0xac>)
 8001118:	4a1d      	ldr	r2, [pc, #116]	; (8001190 <fake_gps_init+0x114>)
 800111a:	665a      	str	r2, [r3, #100]	; 0x64
}
 800111c:	bf00      	nop
 800111e:	46bd      	mov	sp, r7
 8001120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001124:	4770      	bx	lr
 8001126:	bf00      	nop
 8001128:	200003e4 	.word	0x200003e4
 800112c:	4113b6cc 	.word	0x4113b6cc
 8001130:	4235e865 	.word	0x4235e865
 8001134:	4113b37e 	.word	0x4113b37e
 8001138:	4235e862 	.word	0x4235e862
 800113c:	4113af38 	.word	0x4113af38
 8001140:	4235e860 	.word	0x4235e860
 8001144:	4113a7e2 	.word	0x4113a7e2
 8001148:	4235e84b 	.word	0x4235e84b
 800114c:	4113a65e 	.word	0x4113a65e
 8001150:	4235e83c 	.word	0x4235e83c
 8001154:	41139b5c 	.word	0x41139b5c
 8001158:	4235e838 	.word	0x4235e838
 800115c:	41139bd1 	.word	0x41139bd1
 8001160:	4235e917 	.word	0x4235e917
 8001164:	41139bbc 	.word	0x41139bbc
 8001168:	4235ea5f 	.word	0x4235ea5f
 800116c:	41139fd7 	.word	0x41139fd7
 8001170:	4235eabb 	.word	0x4235eabb
 8001174:	4113a605 	.word	0x4113a605
 8001178:	4235ea9d 	.word	0x4235ea9d
 800117c:	4113ab8f 	.word	0x4113ab8f
 8001180:	4235ea84 	.word	0x4235ea84
 8001184:	4113add8 	.word	0x4113add8
 8001188:	4235e9ba 	.word	0x4235e9ba
 800118c:	4113adfb 	.word	0x4113adfb
 8001190:	4235ea65 	.word	0x4235ea65

08001194 <get_coordinate>:

Coordinate get_coordinate(){
 8001194:	b480      	push	{r7}
 8001196:	b087      	sub	sp, #28
 8001198:	af00      	add	r7, sp, #0
	Coordinate c = fake_gps[coordinate_index];
 800119a:	4b1a      	ldr	r3, [pc, #104]	; (8001204 <get_coordinate+0x70>)
 800119c:	781b      	ldrb	r3, [r3, #0]
 800119e:	491a      	ldr	r1, [pc, #104]	; (8001208 <get_coordinate+0x74>)
 80011a0:	f107 0208 	add.w	r2, r7, #8
 80011a4:	00db      	lsls	r3, r3, #3
 80011a6:	440b      	add	r3, r1
 80011a8:	e893 0003 	ldmia.w	r3, {r0, r1}
 80011ac:	e882 0003 	stmia.w	r2, {r0, r1}
	coordinate_index = (coordinate_index + 1) % COORDINATE_NUMBER;
 80011b0:	4b14      	ldr	r3, [pc, #80]	; (8001204 <get_coordinate+0x70>)
 80011b2:	781b      	ldrb	r3, [r3, #0]
 80011b4:	1c59      	adds	r1, r3, #1
 80011b6:	4b15      	ldr	r3, [pc, #84]	; (800120c <get_coordinate+0x78>)
 80011b8:	fb83 2301 	smull	r2, r3, r3, r1
 80011bc:	109a      	asrs	r2, r3, #2
 80011be:	17cb      	asrs	r3, r1, #31
 80011c0:	1ad2      	subs	r2, r2, r3
 80011c2:	4613      	mov	r3, r2
 80011c4:	005b      	lsls	r3, r3, #1
 80011c6:	4413      	add	r3, r2
 80011c8:	009b      	lsls	r3, r3, #2
 80011ca:	4413      	add	r3, r2
 80011cc:	1aca      	subs	r2, r1, r3
 80011ce:	b2d2      	uxtb	r2, r2
 80011d0:	4b0c      	ldr	r3, [pc, #48]	; (8001204 <get_coordinate+0x70>)
 80011d2:	701a      	strb	r2, [r3, #0]
	return c;
 80011d4:	f107 0310 	add.w	r3, r7, #16
 80011d8:	f107 0208 	add.w	r2, r7, #8
 80011dc:	e892 0003 	ldmia.w	r2, {r0, r1}
 80011e0:	e883 0003 	stmia.w	r3, {r0, r1}
 80011e4:	693a      	ldr	r2, [r7, #16]
 80011e6:	697b      	ldr	r3, [r7, #20]
 80011e8:	ee07 2a10 	vmov	s14, r2
 80011ec:	ee07 3a90 	vmov	s15, r3
}
 80011f0:	eeb0 0a47 	vmov.f32	s0, s14
 80011f4:	eef0 0a67 	vmov.f32	s1, s15
 80011f8:	371c      	adds	r7, #28
 80011fa:	46bd      	mov	sp, r7
 80011fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001200:	4770      	bx	lr
 8001202:	bf00      	nop
 8001204:	20000217 	.word	0x20000217
 8001208:	200003e4 	.word	0x200003e4
 800120c:	4ec4ec4f 	.word	0x4ec4ec4f

08001210 <reset_esp8266>:

void reset_esp8266(){
 8001210:	b580      	push	{r7, lr}
 8001212:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(ESP_Reset_GPIO_Port, ESP_Reset_Pin, GPIO_PIN_RESET);
 8001214:	2200      	movs	r2, #0
 8001216:	f44f 7180 	mov.w	r1, #256	; 0x100
 800121a:	4807      	ldr	r0, [pc, #28]	; (8001238 <reset_esp8266+0x28>)
 800121c:	f003 fa18 	bl	8004650 <HAL_GPIO_WritePin>
	HAL_Delay(20);
 8001220:	2014      	movs	r0, #20
 8001222:	f001 fe6d 	bl	8002f00 <HAL_Delay>
	HAL_GPIO_WritePin(ESP_Reset_GPIO_Port, ESP_Reset_Pin, GPIO_PIN_SET);
 8001226:	2201      	movs	r2, #1
 8001228:	f44f 7180 	mov.w	r1, #256	; 0x100
 800122c:	4802      	ldr	r0, [pc, #8]	; (8001238 <reset_esp8266+0x28>)
 800122e:	f003 fa0f 	bl	8004650 <HAL_GPIO_WritePin>
}
 8001232:	bf00      	nop
 8001234:	bd80      	pop	{r7, pc}
 8001236:	bf00      	nop
 8001238:	40021000 	.word	0x40021000

0800123c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  memset(mq_data, 0, MQ_DATA_LENGTH*sizeof(float));
 8001240:	2220      	movs	r2, #32
 8001242:	2100      	movs	r1, #0
 8001244:	481b      	ldr	r0, [pc, #108]	; (80012b4 <main+0x78>)
 8001246:	f007 ff47 	bl	80090d8 <memset>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800124a:	f001 fde7 	bl	8002e1c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800124e:	f000 f83d 	bl	80012cc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001252:	f000 fa83 	bl	800175c <MX_GPIO_Init>

  reset_esp8266();
 8001256:	f7ff ffdb 	bl	8001210 <reset_esp8266>

  MX_USART2_UART_Init();
 800125a:	f000 fa0b 	bl	8001674 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 800125e:	f000 f91f 	bl	80014a0 <MX_TIM2_Init>
  MX_USART3_UART_Init();
 8001262:	f000 fa31 	bl	80016c8 <MX_USART3_UART_Init>
  MX_I2C1_Init();
 8001266:	f000 f8ed 	bl	8001444 <MX_I2C1_Init>
  MX_ADC1_Init();
 800126a:	f000 f899 	bl	80013a0 <MX_ADC1_Init>
  MX_DMA_Init();
 800126e:	f000 fa55 	bl	800171c <MX_DMA_Init>
  MX_TIM3_Init();
 8001272:	f000 f963 	bl	800153c <MX_TIM3_Init>
  MX_TIM4_Init();
 8001276:	f000 f9af 	bl	80015d8 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  RetargetInit(&huart3); // Retarget printf to uart3
 800127a:	480f      	ldr	r0, [pc, #60]	; (80012b8 <main+0x7c>)
 800127c:	f001 fca4 	bl	8002bc8 <RetargetInit>
  fake_gps_init();
 8001280:	f7ff fefc 	bl	800107c <fake_gps_init>

  MPU6050_Init();
 8001284:	f7ff fe5c 	bl	8000f40 <MPU6050_Init>
  HAL_DMA_Init(&hdma_i2c1_rx);
 8001288:	480c      	ldr	r0, [pc, #48]	; (80012bc <main+0x80>)
 800128a:	f002 fc99 	bl	8003bc0 <HAL_DMA_Init>

  DEBUG_PRINT(("Start tim3\r\n"));
 800128e:	480c      	ldr	r0, [pc, #48]	; (80012c0 <main+0x84>)
 8001290:	f008 fc1a 	bl	8009ac8 <puts>
  HAL_TIM_Base_Start(&htim3);
 8001294:	480b      	ldr	r0, [pc, #44]	; (80012c4 <main+0x88>)
 8001296:	f006 ff45 	bl	8008124 <HAL_TIM_Base_Start>
  HAL_ADC_Start_IT(&hadc1);
 800129a:	480b      	ldr	r0, [pc, #44]	; (80012c8 <main+0x8c>)
 800129c:	f001 feb8 	bl	8003010 <HAL_ADC_Start_IT>

  HAL_SuspendTick();
 80012a0:	f001 fe52 	bl	8002f48 <HAL_SuspendTick>
  HAL_PWR_EnableSleepOnExit();
 80012a4:	f006 fa6a 	bl	800777c <HAL_PWR_EnableSleepOnExit>
  HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 80012a8:	2101      	movs	r1, #1
 80012aa:	2000      	movs	r0, #0
 80012ac:	f006 fa4a 	bl	8007744 <HAL_PWR_EnterSLEEPMode>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1){
 80012b0:	e7fe      	b.n	80012b0 <main+0x74>
 80012b2:	bf00      	nop
 80012b4:	20000324 	.word	0x20000324
 80012b8:	20000288 	.word	0x20000288
 80012bc:	20000850 	.word	0x20000850
 80012c0:	0800d0d0 	.word	0x0800d0d0
 80012c4:	20000348 	.word	0x20000348
 80012c8:	2000039c 	.word	0x2000039c

080012cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b094      	sub	sp, #80	; 0x50
 80012d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80012d2:	f107 0320 	add.w	r3, r7, #32
 80012d6:	2230      	movs	r2, #48	; 0x30
 80012d8:	2100      	movs	r1, #0
 80012da:	4618      	mov	r0, r3
 80012dc:	f007 fefc 	bl	80090d8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80012e0:	f107 030c 	add.w	r3, r7, #12
 80012e4:	2200      	movs	r2, #0
 80012e6:	601a      	str	r2, [r3, #0]
 80012e8:	605a      	str	r2, [r3, #4]
 80012ea:	609a      	str	r2, [r3, #8]
 80012ec:	60da      	str	r2, [r3, #12]
 80012ee:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80012f0:	2300      	movs	r3, #0
 80012f2:	60bb      	str	r3, [r7, #8]
 80012f4:	4b28      	ldr	r3, [pc, #160]	; (8001398 <SystemClock_Config+0xcc>)
 80012f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012f8:	4a27      	ldr	r2, [pc, #156]	; (8001398 <SystemClock_Config+0xcc>)
 80012fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012fe:	6413      	str	r3, [r2, #64]	; 0x40
 8001300:	4b25      	ldr	r3, [pc, #148]	; (8001398 <SystemClock_Config+0xcc>)
 8001302:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001304:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001308:	60bb      	str	r3, [r7, #8]
 800130a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800130c:	2300      	movs	r3, #0
 800130e:	607b      	str	r3, [r7, #4]
 8001310:	4b22      	ldr	r3, [pc, #136]	; (800139c <SystemClock_Config+0xd0>)
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	4a21      	ldr	r2, [pc, #132]	; (800139c <SystemClock_Config+0xd0>)
 8001316:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800131a:	6013      	str	r3, [r2, #0]
 800131c:	4b1f      	ldr	r3, [pc, #124]	; (800139c <SystemClock_Config+0xd0>)
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001324:	607b      	str	r3, [r7, #4]
 8001326:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001328:	2302      	movs	r3, #2
 800132a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800132c:	2301      	movs	r3, #1
 800132e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001330:	2310      	movs	r3, #16
 8001332:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001334:	2302      	movs	r3, #2
 8001336:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001338:	2300      	movs	r3, #0
 800133a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800133c:	2308      	movs	r3, #8
 800133e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 8001340:	2332      	movs	r3, #50	; 0x32
 8001342:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001344:	2302      	movs	r3, #2
 8001346:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001348:	2307      	movs	r3, #7
 800134a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800134c:	f107 0320 	add.w	r3, r7, #32
 8001350:	4618      	mov	r0, r3
 8001352:	f006 fa23 	bl	800779c <HAL_RCC_OscConfig>
 8001356:	4603      	mov	r3, r0
 8001358:	2b00      	cmp	r3, #0
 800135a:	d001      	beq.n	8001360 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800135c:	f001 f9e2 	bl	8002724 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001360:	230f      	movs	r3, #15
 8001362:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001364:	2302      	movs	r3, #2
 8001366:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001368:	2300      	movs	r3, #0
 800136a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800136c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001370:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001372:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001376:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001378:	f107 030c 	add.w	r3, r7, #12
 800137c:	2101      	movs	r1, #1
 800137e:	4618      	mov	r0, r3
 8001380:	f006 fc84 	bl	8007c8c <HAL_RCC_ClockConfig>
 8001384:	4603      	mov	r3, r0
 8001386:	2b00      	cmp	r3, #0
 8001388:	d001      	beq.n	800138e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800138a:	f001 f9cb 	bl	8002724 <Error_Handler>
  }
}
 800138e:	bf00      	nop
 8001390:	3750      	adds	r7, #80	; 0x50
 8001392:	46bd      	mov	sp, r7
 8001394:	bd80      	pop	{r7, pc}
 8001396:	bf00      	nop
 8001398:	40023800 	.word	0x40023800
 800139c:	40007000 	.word	0x40007000

080013a0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b084      	sub	sp, #16
 80013a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80013a6:	463b      	mov	r3, r7
 80013a8:	2200      	movs	r2, #0
 80013aa:	601a      	str	r2, [r3, #0]
 80013ac:	605a      	str	r2, [r3, #4]
 80013ae:	609a      	str	r2, [r3, #8]
 80013b0:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80013b2:	4b22      	ldr	r3, [pc, #136]	; (800143c <MX_ADC1_Init+0x9c>)
 80013b4:	4a22      	ldr	r2, [pc, #136]	; (8001440 <MX_ADC1_Init+0xa0>)
 80013b6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80013b8:	4b20      	ldr	r3, [pc, #128]	; (800143c <MX_ADC1_Init+0x9c>)
 80013ba:	2200      	movs	r2, #0
 80013bc:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80013be:	4b1f      	ldr	r3, [pc, #124]	; (800143c <MX_ADC1_Init+0x9c>)
 80013c0:	2200      	movs	r2, #0
 80013c2:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80013c4:	4b1d      	ldr	r3, [pc, #116]	; (800143c <MX_ADC1_Init+0x9c>)
 80013c6:	2200      	movs	r2, #0
 80013c8:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80013ca:	4b1c      	ldr	r3, [pc, #112]	; (800143c <MX_ADC1_Init+0x9c>)
 80013cc:	2200      	movs	r2, #0
 80013ce:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80013d0:	4b1a      	ldr	r3, [pc, #104]	; (800143c <MX_ADC1_Init+0x9c>)
 80013d2:	2200      	movs	r2, #0
 80013d4:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80013d8:	4b18      	ldr	r3, [pc, #96]	; (800143c <MX_ADC1_Init+0x9c>)
 80013da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80013de:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 80013e0:	4b16      	ldr	r3, [pc, #88]	; (800143c <MX_ADC1_Init+0x9c>)
 80013e2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80013e6:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80013e8:	4b14      	ldr	r3, [pc, #80]	; (800143c <MX_ADC1_Init+0x9c>)
 80013ea:	2200      	movs	r2, #0
 80013ec:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80013ee:	4b13      	ldr	r3, [pc, #76]	; (800143c <MX_ADC1_Init+0x9c>)
 80013f0:	2201      	movs	r2, #1
 80013f2:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80013f4:	4b11      	ldr	r3, [pc, #68]	; (800143c <MX_ADC1_Init+0x9c>)
 80013f6:	2200      	movs	r2, #0
 80013f8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80013fc:	4b0f      	ldr	r3, [pc, #60]	; (800143c <MX_ADC1_Init+0x9c>)
 80013fe:	2201      	movs	r2, #1
 8001400:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001402:	480e      	ldr	r0, [pc, #56]	; (800143c <MX_ADC1_Init+0x9c>)
 8001404:	f001 fdc0 	bl	8002f88 <HAL_ADC_Init>
 8001408:	4603      	mov	r3, r0
 800140a:	2b00      	cmp	r3, #0
 800140c:	d001      	beq.n	8001412 <MX_ADC1_Init+0x72>
  {
    Error_Handler();
 800140e:	f001 f989 	bl	8002724 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001412:	2300      	movs	r3, #0
 8001414:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001416:	2301      	movs	r3, #1
 8001418:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 800141a:	2307      	movs	r3, #7
 800141c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800141e:	463b      	mov	r3, r7
 8001420:	4619      	mov	r1, r3
 8001422:	4806      	ldr	r0, [pc, #24]	; (800143c <MX_ADC1_Init+0x9c>)
 8001424:	f002 f834 	bl	8003490 <HAL_ADC_ConfigChannel>
 8001428:	4603      	mov	r3, r0
 800142a:	2b00      	cmp	r3, #0
 800142c:	d001      	beq.n	8001432 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 800142e:	f001 f979 	bl	8002724 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001432:	bf00      	nop
 8001434:	3710      	adds	r7, #16
 8001436:	46bd      	mov	sp, r7
 8001438:	bd80      	pop	{r7, pc}
 800143a:	bf00      	nop
 800143c:	2000039c 	.word	0x2000039c
 8001440:	40012000 	.word	0x40012000

08001444 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001448:	4b12      	ldr	r3, [pc, #72]	; (8001494 <MX_I2C1_Init+0x50>)
 800144a:	4a13      	ldr	r2, [pc, #76]	; (8001498 <MX_I2C1_Init+0x54>)
 800144c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800144e:	4b11      	ldr	r3, [pc, #68]	; (8001494 <MX_I2C1_Init+0x50>)
 8001450:	4a12      	ldr	r2, [pc, #72]	; (800149c <MX_I2C1_Init+0x58>)
 8001452:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001454:	4b0f      	ldr	r3, [pc, #60]	; (8001494 <MX_I2C1_Init+0x50>)
 8001456:	2200      	movs	r2, #0
 8001458:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800145a:	4b0e      	ldr	r3, [pc, #56]	; (8001494 <MX_I2C1_Init+0x50>)
 800145c:	2200      	movs	r2, #0
 800145e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001460:	4b0c      	ldr	r3, [pc, #48]	; (8001494 <MX_I2C1_Init+0x50>)
 8001462:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001466:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001468:	4b0a      	ldr	r3, [pc, #40]	; (8001494 <MX_I2C1_Init+0x50>)
 800146a:	2200      	movs	r2, #0
 800146c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800146e:	4b09      	ldr	r3, [pc, #36]	; (8001494 <MX_I2C1_Init+0x50>)
 8001470:	2200      	movs	r2, #0
 8001472:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001474:	4b07      	ldr	r3, [pc, #28]	; (8001494 <MX_I2C1_Init+0x50>)
 8001476:	2200      	movs	r2, #0
 8001478:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800147a:	4b06      	ldr	r3, [pc, #24]	; (8001494 <MX_I2C1_Init+0x50>)
 800147c:	2200      	movs	r2, #0
 800147e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001480:	4804      	ldr	r0, [pc, #16]	; (8001494 <MX_I2C1_Init+0x50>)
 8001482:	f003 f917 	bl	80046b4 <HAL_I2C_Init>
 8001486:	4603      	mov	r3, r0
 8001488:	2b00      	cmp	r3, #0
 800148a:	d001      	beq.n	8001490 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800148c:	f001 f94a 	bl	8002724 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001490:	bf00      	nop
 8001492:	bd80      	pop	{r7, pc}
 8001494:	200002cc 	.word	0x200002cc
 8001498:	40005400 	.word	0x40005400
 800149c:	000186a0 	.word	0x000186a0

080014a0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b086      	sub	sp, #24
 80014a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80014a6:	f107 0308 	add.w	r3, r7, #8
 80014aa:	2200      	movs	r2, #0
 80014ac:	601a      	str	r2, [r3, #0]
 80014ae:	605a      	str	r2, [r3, #4]
 80014b0:	609a      	str	r2, [r3, #8]
 80014b2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014b4:	463b      	mov	r3, r7
 80014b6:	2200      	movs	r2, #0
 80014b8:	601a      	str	r2, [r3, #0]
 80014ba:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80014bc:	4b1e      	ldr	r3, [pc, #120]	; (8001538 <MX_TIM2_Init+0x98>)
 80014be:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80014c2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 49999;
 80014c4:	4b1c      	ldr	r3, [pc, #112]	; (8001538 <MX_TIM2_Init+0x98>)
 80014c6:	f24c 324f 	movw	r2, #49999	; 0xc34f
 80014ca:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014cc:	4b1a      	ldr	r3, [pc, #104]	; (8001538 <MX_TIM2_Init+0x98>)
 80014ce:	2200      	movs	r2, #0
 80014d0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 14999;
 80014d2:	4b19      	ldr	r3, [pc, #100]	; (8001538 <MX_TIM2_Init+0x98>)
 80014d4:	f643 2297 	movw	r2, #14999	; 0x3a97
 80014d8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014da:	4b17      	ldr	r3, [pc, #92]	; (8001538 <MX_TIM2_Init+0x98>)
 80014dc:	2200      	movs	r2, #0
 80014de:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014e0:	4b15      	ldr	r3, [pc, #84]	; (8001538 <MX_TIM2_Init+0x98>)
 80014e2:	2200      	movs	r2, #0
 80014e4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80014e6:	4814      	ldr	r0, [pc, #80]	; (8001538 <MX_TIM2_Init+0x98>)
 80014e8:	f006 fdcc 	bl	8008084 <HAL_TIM_Base_Init>
 80014ec:	4603      	mov	r3, r0
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d001      	beq.n	80014f6 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80014f2:	f001 f917 	bl	8002724 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80014f6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014fa:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80014fc:	f107 0308 	add.w	r3, r7, #8
 8001500:	4619      	mov	r1, r3
 8001502:	480d      	ldr	r0, [pc, #52]	; (8001538 <MX_TIM2_Init+0x98>)
 8001504:	f006 ffee 	bl	80084e4 <HAL_TIM_ConfigClockSource>
 8001508:	4603      	mov	r3, r0
 800150a:	2b00      	cmp	r3, #0
 800150c:	d001      	beq.n	8001512 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800150e:	f001 f909 	bl	8002724 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001512:	2300      	movs	r3, #0
 8001514:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001516:	2300      	movs	r3, #0
 8001518:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800151a:	463b      	mov	r3, r7
 800151c:	4619      	mov	r1, r3
 800151e:	4806      	ldr	r0, [pc, #24]	; (8001538 <MX_TIM2_Init+0x98>)
 8001520:	f007 fa0a 	bl	8008938 <HAL_TIMEx_MasterConfigSynchronization>
 8001524:	4603      	mov	r3, r0
 8001526:	2b00      	cmp	r3, #0
 8001528:	d001      	beq.n	800152e <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800152a:	f001 f8fb 	bl	8002724 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800152e:	bf00      	nop
 8001530:	3718      	adds	r7, #24
 8001532:	46bd      	mov	sp, r7
 8001534:	bd80      	pop	{r7, pc}
 8001536:	bf00      	nop
 8001538:	200008b4 	.word	0x200008b4

0800153c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b086      	sub	sp, #24
 8001540:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001542:	f107 0308 	add.w	r3, r7, #8
 8001546:	2200      	movs	r2, #0
 8001548:	601a      	str	r2, [r3, #0]
 800154a:	605a      	str	r2, [r3, #4]
 800154c:	609a      	str	r2, [r3, #8]
 800154e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001550:	463b      	mov	r3, r7
 8001552:	2200      	movs	r2, #0
 8001554:	601a      	str	r2, [r3, #0]
 8001556:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001558:	4b1d      	ldr	r3, [pc, #116]	; (80015d0 <MX_TIM3_Init+0x94>)
 800155a:	4a1e      	ldr	r2, [pc, #120]	; (80015d4 <MX_TIM3_Init+0x98>)
 800155c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 49999;
 800155e:	4b1c      	ldr	r3, [pc, #112]	; (80015d0 <MX_TIM3_Init+0x94>)
 8001560:	f24c 324f 	movw	r2, #49999	; 0xc34f
 8001564:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001566:	4b1a      	ldr	r3, [pc, #104]	; (80015d0 <MX_TIM3_Init+0x94>)
 8001568:	2200      	movs	r2, #0
 800156a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 2499;
 800156c:	4b18      	ldr	r3, [pc, #96]	; (80015d0 <MX_TIM3_Init+0x94>)
 800156e:	f640 12c3 	movw	r2, #2499	; 0x9c3
 8001572:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001574:	4b16      	ldr	r3, [pc, #88]	; (80015d0 <MX_TIM3_Init+0x94>)
 8001576:	2200      	movs	r2, #0
 8001578:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800157a:	4b15      	ldr	r3, [pc, #84]	; (80015d0 <MX_TIM3_Init+0x94>)
 800157c:	2200      	movs	r2, #0
 800157e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001580:	4813      	ldr	r0, [pc, #76]	; (80015d0 <MX_TIM3_Init+0x94>)
 8001582:	f006 fd7f 	bl	8008084 <HAL_TIM_Base_Init>
 8001586:	4603      	mov	r3, r0
 8001588:	2b00      	cmp	r3, #0
 800158a:	d001      	beq.n	8001590 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 800158c:	f001 f8ca 	bl	8002724 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001590:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001594:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001596:	f107 0308 	add.w	r3, r7, #8
 800159a:	4619      	mov	r1, r3
 800159c:	480c      	ldr	r0, [pc, #48]	; (80015d0 <MX_TIM3_Init+0x94>)
 800159e:	f006 ffa1 	bl	80084e4 <HAL_TIM_ConfigClockSource>
 80015a2:	4603      	mov	r3, r0
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d001      	beq.n	80015ac <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 80015a8:	f001 f8bc 	bl	8002724 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80015ac:	2320      	movs	r3, #32
 80015ae:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015b0:	2300      	movs	r3, #0
 80015b2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80015b4:	463b      	mov	r3, r7
 80015b6:	4619      	mov	r1, r3
 80015b8:	4805      	ldr	r0, [pc, #20]	; (80015d0 <MX_TIM3_Init+0x94>)
 80015ba:	f007 f9bd 	bl	8008938 <HAL_TIMEx_MasterConfigSynchronization>
 80015be:	4603      	mov	r3, r0
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d001      	beq.n	80015c8 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 80015c4:	f001 f8ae 	bl	8002724 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80015c8:	bf00      	nop
 80015ca:	3718      	adds	r7, #24
 80015cc:	46bd      	mov	sp, r7
 80015ce:	bd80      	pop	{r7, pc}
 80015d0:	20000348 	.word	0x20000348
 80015d4:	40000400 	.word	0x40000400

080015d8 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	b086      	sub	sp, #24
 80015dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80015de:	f107 0308 	add.w	r3, r7, #8
 80015e2:	2200      	movs	r2, #0
 80015e4:	601a      	str	r2, [r3, #0]
 80015e6:	605a      	str	r2, [r3, #4]
 80015e8:	609a      	str	r2, [r3, #8]
 80015ea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015ec:	463b      	mov	r3, r7
 80015ee:	2200      	movs	r2, #0
 80015f0:	601a      	str	r2, [r3, #0]
 80015f2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80015f4:	4b1d      	ldr	r3, [pc, #116]	; (800166c <MX_TIM4_Init+0x94>)
 80015f6:	4a1e      	ldr	r2, [pc, #120]	; (8001670 <MX_TIM4_Init+0x98>)
 80015f8:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 49999;
 80015fa:	4b1c      	ldr	r3, [pc, #112]	; (800166c <MX_TIM4_Init+0x94>)
 80015fc:	f24c 324f 	movw	r2, #49999	; 0xc34f
 8001600:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 8001602:	4b1a      	ldr	r3, [pc, #104]	; (800166c <MX_TIM4_Init+0x94>)
 8001604:	2210      	movs	r2, #16
 8001606:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 3999;
 8001608:	4b18      	ldr	r3, [pc, #96]	; (800166c <MX_TIM4_Init+0x94>)
 800160a:	f640 729f 	movw	r2, #3999	; 0xf9f
 800160e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001610:	4b16      	ldr	r3, [pc, #88]	; (800166c <MX_TIM4_Init+0x94>)
 8001612:	2200      	movs	r2, #0
 8001614:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001616:	4b15      	ldr	r3, [pc, #84]	; (800166c <MX_TIM4_Init+0x94>)
 8001618:	2200      	movs	r2, #0
 800161a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800161c:	4813      	ldr	r0, [pc, #76]	; (800166c <MX_TIM4_Init+0x94>)
 800161e:	f006 fd31 	bl	8008084 <HAL_TIM_Base_Init>
 8001622:	4603      	mov	r3, r0
 8001624:	2b00      	cmp	r3, #0
 8001626:	d001      	beq.n	800162c <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 8001628:	f001 f87c 	bl	8002724 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800162c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001630:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001632:	f107 0308 	add.w	r3, r7, #8
 8001636:	4619      	mov	r1, r3
 8001638:	480c      	ldr	r0, [pc, #48]	; (800166c <MX_TIM4_Init+0x94>)
 800163a:	f006 ff53 	bl	80084e4 <HAL_TIM_ConfigClockSource>
 800163e:	4603      	mov	r3, r0
 8001640:	2b00      	cmp	r3, #0
 8001642:	d001      	beq.n	8001648 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8001644:	f001 f86e 	bl	8002724 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001648:	2300      	movs	r3, #0
 800164a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800164c:	2300      	movs	r3, #0
 800164e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001650:	463b      	mov	r3, r7
 8001652:	4619      	mov	r1, r3
 8001654:	4805      	ldr	r0, [pc, #20]	; (800166c <MX_TIM4_Init+0x94>)
 8001656:	f007 f96f 	bl	8008938 <HAL_TIMEx_MasterConfigSynchronization>
 800165a:	4603      	mov	r3, r0
 800165c:	2b00      	cmp	r3, #0
 800165e:	d001      	beq.n	8001664 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8001660:	f001 f860 	bl	8002724 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001664:	bf00      	nop
 8001666:	3718      	adds	r7, #24
 8001668:	46bd      	mov	sp, r7
 800166a:	bd80      	pop	{r7, pc}
 800166c:	20000240 	.word	0x20000240
 8001670:	40000800 	.word	0x40000800

08001674 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001678:	4b11      	ldr	r3, [pc, #68]	; (80016c0 <MX_USART2_UART_Init+0x4c>)
 800167a:	4a12      	ldr	r2, [pc, #72]	; (80016c4 <MX_USART2_UART_Init+0x50>)
 800167c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800167e:	4b10      	ldr	r3, [pc, #64]	; (80016c0 <MX_USART2_UART_Init+0x4c>)
 8001680:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001684:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001686:	4b0e      	ldr	r3, [pc, #56]	; (80016c0 <MX_USART2_UART_Init+0x4c>)
 8001688:	2200      	movs	r2, #0
 800168a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800168c:	4b0c      	ldr	r3, [pc, #48]	; (80016c0 <MX_USART2_UART_Init+0x4c>)
 800168e:	2200      	movs	r2, #0
 8001690:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001692:	4b0b      	ldr	r3, [pc, #44]	; (80016c0 <MX_USART2_UART_Init+0x4c>)
 8001694:	2200      	movs	r2, #0
 8001696:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001698:	4b09      	ldr	r3, [pc, #36]	; (80016c0 <MX_USART2_UART_Init+0x4c>)
 800169a:	220c      	movs	r2, #12
 800169c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800169e:	4b08      	ldr	r3, [pc, #32]	; (80016c0 <MX_USART2_UART_Init+0x4c>)
 80016a0:	2200      	movs	r2, #0
 80016a2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80016a4:	4b06      	ldr	r3, [pc, #24]	; (80016c0 <MX_USART2_UART_Init+0x4c>)
 80016a6:	2200      	movs	r2, #0
 80016a8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80016aa:	4805      	ldr	r0, [pc, #20]	; (80016c0 <MX_USART2_UART_Init+0x4c>)
 80016ac:	f007 f9d4 	bl	8008a58 <HAL_UART_Init>
 80016b0:	4603      	mov	r3, r0
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d001      	beq.n	80016ba <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80016b6:	f001 f835 	bl	8002724 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80016ba:	bf00      	nop
 80016bc:	bd80      	pop	{r7, pc}
 80016be:	bf00      	nop
 80016c0:	200008fc 	.word	0x200008fc
 80016c4:	40004400 	.word	0x40004400

080016c8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80016cc:	4b11      	ldr	r3, [pc, #68]	; (8001714 <MX_USART3_UART_Init+0x4c>)
 80016ce:	4a12      	ldr	r2, [pc, #72]	; (8001718 <MX_USART3_UART_Init+0x50>)
 80016d0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80016d2:	4b10      	ldr	r3, [pc, #64]	; (8001714 <MX_USART3_UART_Init+0x4c>)
 80016d4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80016d8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80016da:	4b0e      	ldr	r3, [pc, #56]	; (8001714 <MX_USART3_UART_Init+0x4c>)
 80016dc:	2200      	movs	r2, #0
 80016de:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80016e0:	4b0c      	ldr	r3, [pc, #48]	; (8001714 <MX_USART3_UART_Init+0x4c>)
 80016e2:	2200      	movs	r2, #0
 80016e4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80016e6:	4b0b      	ldr	r3, [pc, #44]	; (8001714 <MX_USART3_UART_Init+0x4c>)
 80016e8:	2200      	movs	r2, #0
 80016ea:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80016ec:	4b09      	ldr	r3, [pc, #36]	; (8001714 <MX_USART3_UART_Init+0x4c>)
 80016ee:	220c      	movs	r2, #12
 80016f0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016f2:	4b08      	ldr	r3, [pc, #32]	; (8001714 <MX_USART3_UART_Init+0x4c>)
 80016f4:	2200      	movs	r2, #0
 80016f6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80016f8:	4b06      	ldr	r3, [pc, #24]	; (8001714 <MX_USART3_UART_Init+0x4c>)
 80016fa:	2200      	movs	r2, #0
 80016fc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80016fe:	4805      	ldr	r0, [pc, #20]	; (8001714 <MX_USART3_UART_Init+0x4c>)
 8001700:	f007 f9aa 	bl	8008a58 <HAL_UART_Init>
 8001704:	4603      	mov	r3, r0
 8001706:	2b00      	cmp	r3, #0
 8001708:	d001      	beq.n	800170e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800170a:	f001 f80b 	bl	8002724 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800170e:	bf00      	nop
 8001710:	bd80      	pop	{r7, pc}
 8001712:	bf00      	nop
 8001714:	20000288 	.word	0x20000288
 8001718:	40004800 	.word	0x40004800

0800171c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	b082      	sub	sp, #8
 8001720:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001722:	2300      	movs	r3, #0
 8001724:	607b      	str	r3, [r7, #4]
 8001726:	4b0c      	ldr	r3, [pc, #48]	; (8001758 <MX_DMA_Init+0x3c>)
 8001728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800172a:	4a0b      	ldr	r2, [pc, #44]	; (8001758 <MX_DMA_Init+0x3c>)
 800172c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001730:	6313      	str	r3, [r2, #48]	; 0x30
 8001732:	4b09      	ldr	r3, [pc, #36]	; (8001758 <MX_DMA_Init+0x3c>)
 8001734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001736:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800173a:	607b      	str	r3, [r7, #4]
 800173c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 1, 0);
 800173e:	2200      	movs	r2, #0
 8001740:	2101      	movs	r1, #1
 8001742:	200b      	movs	r0, #11
 8001744:	f002 f9e9 	bl	8003b1a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8001748:	200b      	movs	r0, #11
 800174a:	f002 fa02 	bl	8003b52 <HAL_NVIC_EnableIRQ>

}
 800174e:	bf00      	nop
 8001750:	3708      	adds	r7, #8
 8001752:	46bd      	mov	sp, r7
 8001754:	bd80      	pop	{r7, pc}
 8001756:	bf00      	nop
 8001758:	40023800 	.word	0x40023800

0800175c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	b08a      	sub	sp, #40	; 0x28
 8001760:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001762:	f107 0314 	add.w	r3, r7, #20
 8001766:	2200      	movs	r2, #0
 8001768:	601a      	str	r2, [r3, #0]
 800176a:	605a      	str	r2, [r3, #4]
 800176c:	609a      	str	r2, [r3, #8]
 800176e:	60da      	str	r2, [r3, #12]
 8001770:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001772:	2300      	movs	r3, #0
 8001774:	613b      	str	r3, [r7, #16]
 8001776:	4b44      	ldr	r3, [pc, #272]	; (8001888 <MX_GPIO_Init+0x12c>)
 8001778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800177a:	4a43      	ldr	r2, [pc, #268]	; (8001888 <MX_GPIO_Init+0x12c>)
 800177c:	f043 0304 	orr.w	r3, r3, #4
 8001780:	6313      	str	r3, [r2, #48]	; 0x30
 8001782:	4b41      	ldr	r3, [pc, #260]	; (8001888 <MX_GPIO_Init+0x12c>)
 8001784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001786:	f003 0304 	and.w	r3, r3, #4
 800178a:	613b      	str	r3, [r7, #16]
 800178c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800178e:	2300      	movs	r3, #0
 8001790:	60fb      	str	r3, [r7, #12]
 8001792:	4b3d      	ldr	r3, [pc, #244]	; (8001888 <MX_GPIO_Init+0x12c>)
 8001794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001796:	4a3c      	ldr	r2, [pc, #240]	; (8001888 <MX_GPIO_Init+0x12c>)
 8001798:	f043 0301 	orr.w	r3, r3, #1
 800179c:	6313      	str	r3, [r2, #48]	; 0x30
 800179e:	4b3a      	ldr	r3, [pc, #232]	; (8001888 <MX_GPIO_Init+0x12c>)
 80017a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017a2:	f003 0301 	and.w	r3, r3, #1
 80017a6:	60fb      	str	r3, [r7, #12]
 80017a8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80017aa:	2300      	movs	r3, #0
 80017ac:	60bb      	str	r3, [r7, #8]
 80017ae:	4b36      	ldr	r3, [pc, #216]	; (8001888 <MX_GPIO_Init+0x12c>)
 80017b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017b2:	4a35      	ldr	r2, [pc, #212]	; (8001888 <MX_GPIO_Init+0x12c>)
 80017b4:	f043 0310 	orr.w	r3, r3, #16
 80017b8:	6313      	str	r3, [r2, #48]	; 0x30
 80017ba:	4b33      	ldr	r3, [pc, #204]	; (8001888 <MX_GPIO_Init+0x12c>)
 80017bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017be:	f003 0310 	and.w	r3, r3, #16
 80017c2:	60bb      	str	r3, [r7, #8]
 80017c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80017c6:	2300      	movs	r3, #0
 80017c8:	607b      	str	r3, [r7, #4]
 80017ca:	4b2f      	ldr	r3, [pc, #188]	; (8001888 <MX_GPIO_Init+0x12c>)
 80017cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ce:	4a2e      	ldr	r2, [pc, #184]	; (8001888 <MX_GPIO_Init+0x12c>)
 80017d0:	f043 0302 	orr.w	r3, r3, #2
 80017d4:	6313      	str	r3, [r2, #48]	; 0x30
 80017d6:	4b2c      	ldr	r3, [pc, #176]	; (8001888 <MX_GPIO_Init+0x12c>)
 80017d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017da:	f003 0302 	and.w	r3, r3, #2
 80017de:	607b      	str	r3, [r7, #4]
 80017e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80017e2:	2300      	movs	r3, #0
 80017e4:	603b      	str	r3, [r7, #0]
 80017e6:	4b28      	ldr	r3, [pc, #160]	; (8001888 <MX_GPIO_Init+0x12c>)
 80017e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ea:	4a27      	ldr	r2, [pc, #156]	; (8001888 <MX_GPIO_Init+0x12c>)
 80017ec:	f043 0308 	orr.w	r3, r3, #8
 80017f0:	6313      	str	r3, [r2, #48]	; 0x30
 80017f2:	4b25      	ldr	r3, [pc, #148]	; (8001888 <MX_GPIO_Init+0x12c>)
 80017f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017f6:	f003 0308 	and.w	r3, r3, #8
 80017fa:	603b      	str	r3, [r7, #0]
 80017fc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ESP_Reset_GPIO_Port, ESP_Reset_Pin, GPIO_PIN_SET);
 80017fe:	2201      	movs	r2, #1
 8001800:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001804:	4821      	ldr	r0, [pc, #132]	; (800188c <MX_GPIO_Init+0x130>)
 8001806:	f002 ff23 	bl	8004650 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : ESP_Signal_Pin */
  GPIO_InitStruct.Pin = ESP_Signal_Pin;
 800180a:	2302      	movs	r3, #2
 800180c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800180e:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001812:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001814:	2300      	movs	r3, #0
 8001816:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ESP_Signal_GPIO_Port, &GPIO_InitStruct);
 8001818:	f107 0314 	add.w	r3, r7, #20
 800181c:	4619      	mov	r1, r3
 800181e:	481c      	ldr	r0, [pc, #112]	; (8001890 <MX_GPIO_Init+0x134>)
 8001820:	f002 fd7a 	bl	8004318 <HAL_GPIO_Init>

  /*Configure GPIO pin : ESP_Reset_Pin */
  GPIO_InitStruct.Pin = ESP_Reset_Pin;
 8001824:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001828:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800182a:	2301      	movs	r3, #1
 800182c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800182e:	2300      	movs	r3, #0
 8001830:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001832:	2300      	movs	r3, #0
 8001834:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(ESP_Reset_GPIO_Port, &GPIO_InitStruct);
 8001836:	f107 0314 	add.w	r3, r7, #20
 800183a:	4619      	mov	r1, r3
 800183c:	4813      	ldr	r0, [pc, #76]	; (800188c <MX_GPIO_Init+0x130>)
 800183e:	f002 fd6b 	bl	8004318 <HAL_GPIO_Init>

  /*Configure GPIO pin : MPU_DATA_RDY_Pin */
  GPIO_InitStruct.Pin = MPU_DATA_RDY_Pin;
 8001842:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001846:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001848:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800184c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800184e:	2300      	movs	r3, #0
 8001850:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(MPU_DATA_RDY_GPIO_Port, &GPIO_InitStruct);
 8001852:	f107 0314 	add.w	r3, r7, #20
 8001856:	4619      	mov	r1, r3
 8001858:	480e      	ldr	r0, [pc, #56]	; (8001894 <MX_GPIO_Init+0x138>)
 800185a:	f002 fd5d 	bl	8004318 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 1, 0);
 800185e:	2200      	movs	r2, #0
 8001860:	2101      	movs	r1, #1
 8001862:	2007      	movs	r0, #7
 8001864:	f002 f959 	bl	8003b1a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8001868:	2007      	movs	r0, #7
 800186a:	f002 f972 	bl	8003b52 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 2, 0);
 800186e:	2200      	movs	r2, #0
 8001870:	2102      	movs	r1, #2
 8001872:	2028      	movs	r0, #40	; 0x28
 8001874:	f002 f951 	bl	8003b1a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001878:	2028      	movs	r0, #40	; 0x28
 800187a:	f002 f96a 	bl	8003b52 <HAL_NVIC_EnableIRQ>

}
 800187e:	bf00      	nop
 8001880:	3728      	adds	r7, #40	; 0x28
 8001882:	46bd      	mov	sp, r7
 8001884:	bd80      	pop	{r7, pc}
 8001886:	bf00      	nop
 8001888:	40023800 	.word	0x40023800
 800188c:	40021000 	.word	0x40021000
 8001890:	40020800 	.word	0x40020800
 8001894:	40020c00 	.word	0x40020c00

08001898 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001898:	b5b0      	push	{r4, r5, r7, lr}
 800189a:	b08c      	sub	sp, #48	; 0x30
 800189c:	af04      	add	r7, sp, #16
 800189e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

	if (htim->Instance == TIM2) {
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80018a8:	d111      	bne.n	80018ce <HAL_TIM_PeriodElapsedCallback+0x36>
		HAL_ResumeTick();
 80018aa:	f001 fb5d 	bl	8002f68 <HAL_ResumeTick>
		DEBUG_PRINT(("Timer 30 s scaduto! INVIO IL RESET ALL'ESP!\r\n"));
 80018ae:	4850      	ldr	r0, [pc, #320]	; (80019f0 <HAL_TIM_PeriodElapsedCallback+0x158>)
 80018b0:	f008 f90a 	bl	8009ac8 <puts>

		// Check MPU
		if(MPU_OK == 0){
 80018b4:	4b4f      	ldr	r3, [pc, #316]	; (80019f4 <HAL_TIM_PeriodElapsedCallback+0x15c>)
 80018b6:	781b      	ldrb	r3, [r3, #0]
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d101      	bne.n	80018c0 <HAL_TIM_PeriodElapsedCallback+0x28>
			MPU6050_Init();
 80018bc:	f7ff fb40 	bl	8000f40 <MPU6050_Init>
		}
		trueSignal = 0;
 80018c0:	4b4d      	ldr	r3, [pc, #308]	; (80019f8 <HAL_TIM_PeriodElapsedCallback+0x160>)
 80018c2:	2200      	movs	r2, #0
 80018c4:	701a      	strb	r2, [r3, #0]

		reset_esp8266();
 80018c6:	f7ff fca3 	bl	8001210 <reset_esp8266>
		HAL_SuspendTick();
 80018ca:	f001 fb3d 	bl	8002f48 <HAL_SuspendTick>
	}

	if(htim->Instance == TIM4) {
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	4a4a      	ldr	r2, [pc, #296]	; (80019fc <HAL_TIM_PeriodElapsedCallback+0x164>)
 80018d4:	4293      	cmp	r3, r2
 80018d6:	f040 8083 	bne.w	80019e0 <HAL_TIM_PeriodElapsedCallback+0x148>
		uint32_t cycles = 0;
 80018da:	2300      	movs	r3, #0
 80018dc:	61fb      	str	r3, [r7, #28]
		double timeCallback;

		DWT->CTRL |= 1;
 80018de:	4b48      	ldr	r3, [pc, #288]	; (8001a00 <HAL_TIM_PeriodElapsedCallback+0x168>)
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	4a47      	ldr	r2, [pc, #284]	; (8001a00 <HAL_TIM_PeriodElapsedCallback+0x168>)
 80018e4:	f043 0301 	orr.w	r3, r3, #1
 80018e8:	6013      	str	r3, [r2, #0]
		DWT->CYCCNT = 0;
 80018ea:	4b45      	ldr	r3, [pc, #276]	; (8001a00 <HAL_TIM_PeriodElapsedCallback+0x168>)
 80018ec:	2200      	movs	r2, #0
 80018ee:	605a      	str	r2, [r3, #4]
		DEBUG_PRINT(("Tim4 callback\r\n"));
 80018f0:	4844      	ldr	r0, [pc, #272]	; (8001a04 <HAL_TIM_PeriodElapsedCallback+0x16c>)
 80018f2:	f008 f8e9 	bl	8009ac8 <puts>

		uint8_t countArr[2];
		uint16_t count=0;
 80018f6:	2300      	movs	r3, #0
 80018f8:	837b      	strh	r3, [r7, #26]

		uint8_t Data = 0x0;
 80018fa:	2300      	movs	r3, #0
 80018fc:	72fb      	strb	r3, [r7, #11]

		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, FIFO_EN_REG, 1, &Data, 1, 1000);
 80018fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001902:	9302      	str	r3, [sp, #8]
 8001904:	2301      	movs	r3, #1
 8001906:	9301      	str	r3, [sp, #4]
 8001908:	f107 030b 	add.w	r3, r7, #11
 800190c:	9300      	str	r3, [sp, #0]
 800190e:	2301      	movs	r3, #1
 8001910:	2223      	movs	r2, #35	; 0x23
 8001912:	21d0      	movs	r1, #208	; 0xd0
 8001914:	483c      	ldr	r0, [pc, #240]	; (8001a08 <HAL_TIM_PeriodElapsedCallback+0x170>)
 8001916:	f003 fa3f 	bl	8004d98 <HAL_I2C_Mem_Write>
		HAL_I2C_Mem_Read(&hi2c1, MPU6050_ADDR, FIFO_COUNTH, 1, countArr, 2, 1000);
 800191a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800191e:	9302      	str	r3, [sp, #8]
 8001920:	2302      	movs	r3, #2
 8001922:	9301      	str	r3, [sp, #4]
 8001924:	f107 030c 	add.w	r3, r7, #12
 8001928:	9300      	str	r3, [sp, #0]
 800192a:	2301      	movs	r3, #1
 800192c:	2272      	movs	r2, #114	; 0x72
 800192e:	21d0      	movs	r1, #208	; 0xd0
 8001930:	4835      	ldr	r0, [pc, #212]	; (8001a08 <HAL_TIM_PeriodElapsedCallback+0x170>)
 8001932:	f003 fb2b 	bl	8004f8c <HAL_I2C_Mem_Read>
		count = (uint16_t) (countArr[0] << 8 | countArr[1]);
 8001936:	7b3b      	ldrb	r3, [r7, #12]
 8001938:	021b      	lsls	r3, r3, #8
 800193a:	b21a      	sxth	r2, r3
 800193c:	7b7b      	ldrb	r3, [r7, #13]
 800193e:	b21b      	sxth	r3, r3
 8001940:	4313      	orrs	r3, r2
 8001942:	b21b      	sxth	r3, r3
 8001944:	837b      	strh	r3, [r7, #26]
		DEBUG_PRINT(("Fifo count: %d\r\n", count));
 8001946:	8b7b      	ldrh	r3, [r7, #26]
 8001948:	4619      	mov	r1, r3
 800194a:	4830      	ldr	r0, [pc, #192]	; (8001a0c <HAL_TIM_PeriodElapsedCallback+0x174>)
 800194c:	f008 f836 	bl	80099bc <iprintf>

		if(count > 0 && count <= 1024) {
 8001950:	8b7b      	ldrh	r3, [r7, #26]
 8001952:	2b00      	cmp	r3, #0
 8001954:	d019      	beq.n	800198a <HAL_TIM_PeriodElapsedCallback+0xf2>
 8001956:	8b7b      	ldrh	r3, [r7, #26]
 8001958:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800195c:	d815      	bhi.n	800198a <HAL_TIM_PeriodElapsedCallback+0xf2>
			mpu_index = count;
 800195e:	4a2c      	ldr	r2, [pc, #176]	; (8001a10 <HAL_TIM_PeriodElapsedCallback+0x178>)
 8001960:	8b7b      	ldrh	r3, [r7, #26]
 8001962:	8013      	strh	r3, [r2, #0]

			Data = FIFO_R_W;
 8001964:	2374      	movs	r3, #116	; 0x74
 8001966:	72fb      	strb	r3, [r7, #11]
			HAL_I2C_Master_Transmit(&hi2c1, MPU6050_ADDR, &Data, 1, 1000);
 8001968:	f107 020b 	add.w	r2, r7, #11
 800196c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001970:	9300      	str	r3, [sp, #0]
 8001972:	2301      	movs	r3, #1
 8001974:	21d0      	movs	r1, #208	; 0xd0
 8001976:	4824      	ldr	r0, [pc, #144]	; (8001a08 <HAL_TIM_PeriodElapsedCallback+0x170>)
 8001978:	f002 ffe0 	bl	800493c <HAL_I2C_Master_Transmit>
			HAL_I2C_Master_Receive_DMA(&hi2c1, MPU6050_ADDR, &mpu_data[0], count);
 800197c:	8b7b      	ldrh	r3, [r7, #26]
 800197e:	4a25      	ldr	r2, [pc, #148]	; (8001a14 <HAL_TIM_PeriodElapsedCallback+0x17c>)
 8001980:	21d0      	movs	r1, #208	; 0xd0
 8001982:	4821      	ldr	r0, [pc, #132]	; (8001a08 <HAL_TIM_PeriodElapsedCallback+0x170>)
 8001984:	f003 f8d8 	bl	8004b38 <HAL_I2C_Master_Receive_DMA>
 8001988:	e001      	b.n	800198e <HAL_TIM_PeriodElapsedCallback+0xf6>
		}
		else {
			MPU6050_Init();
 800198a:	f7ff fad9 	bl	8000f40 <MPU6050_Init>
		}

		cycles = DWT->CYCCNT;
 800198e:	4b1c      	ldr	r3, [pc, #112]	; (8001a00 <HAL_TIM_PeriodElapsedCallback+0x168>)
 8001990:	685b      	ldr	r3, [r3, #4]
 8001992:	61fb      	str	r3, [r7, #28]
		cycles--;
 8001994:	69fb      	ldr	r3, [r7, #28]
 8001996:	3b01      	subs	r3, #1
 8001998:	61fb      	str	r3, [r7, #28]

		timeCallback = ((double)cycles/HAL_RCC_GetHCLKFreq())*10e+3;
 800199a:	69f8      	ldr	r0, [r7, #28]
 800199c:	f7fe fdb2 	bl	8000504 <__aeabi_ui2d>
 80019a0:	4604      	mov	r4, r0
 80019a2:	460d      	mov	r5, r1
 80019a4:	f006 fb3a 	bl	800801c <HAL_RCC_GetHCLKFreq>
 80019a8:	4603      	mov	r3, r0
 80019aa:	4618      	mov	r0, r3
 80019ac:	f7fe fdaa 	bl	8000504 <__aeabi_ui2d>
 80019b0:	4602      	mov	r2, r0
 80019b2:	460b      	mov	r3, r1
 80019b4:	4620      	mov	r0, r4
 80019b6:	4629      	mov	r1, r5
 80019b8:	f7fe ff48 	bl	800084c <__aeabi_ddiv>
 80019bc:	4602      	mov	r2, r0
 80019be:	460b      	mov	r3, r1
 80019c0:	4610      	mov	r0, r2
 80019c2:	4619      	mov	r1, r3
 80019c4:	a308      	add	r3, pc, #32	; (adr r3, 80019e8 <HAL_TIM_PeriodElapsedCallback+0x150>)
 80019c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019ca:	f7fe fe15 	bl	80005f8 <__aeabi_dmul>
 80019ce:	4602      	mov	r2, r0
 80019d0:	460b      	mov	r3, r1
 80019d2:	e9c7 2304 	strd	r2, r3, [r7, #16]
        printf("TIME (tim4 callback) =  %.2lf ms\n\r", timeCallback);
 80019d6:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80019da:	480f      	ldr	r0, [pc, #60]	; (8001a18 <HAL_TIM_PeriodElapsedCallback+0x180>)
 80019dc:	f007 ffee 	bl	80099bc <iprintf>
  /* USER CODE END Callback 0 */

  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80019e0:	bf00      	nop
 80019e2:	3720      	adds	r7, #32
 80019e4:	46bd      	mov	sp, r7
 80019e6:	bdb0      	pop	{r4, r5, r7, pc}
 80019e8:	00000000 	.word	0x00000000
 80019ec:	40c38800 	.word	0x40c38800
 80019f0:	0800d0dc 	.word	0x0800d0dc
 80019f4:	20000216 	.word	0x20000216
 80019f8:	20000215 	.word	0x20000215
 80019fc:	40000800 	.word	0x40000800
 8001a00:	e0001000 	.word	0xe0001000
 8001a04:	0800d10c 	.word	0x0800d10c
 8001a08:	200002cc 	.word	0x200002cc
 8001a0c:	0800d11c 	.word	0x0800d11c
 8001a10:	20000224 	.word	0x20000224
 8001a14:	2000044c 	.word	0x2000044c
 8001a18:	0800d130 	.word	0x0800d130
 8001a1c:	00000000 	.word	0x00000000

08001a20 <HAL_GPIO_EXTI_Callback>:


// Callback interrupt ESP8266
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8001a20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001a24:	b0a2      	sub	sp, #136	; 0x88
 8001a26:	af08      	add	r7, sp, #32
 8001a28:	4603      	mov	r3, r0
 8001a2a:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == ESP_Signal_Pin){
 8001a2c:	88fb      	ldrh	r3, [r7, #6]
 8001a2e:	2b02      	cmp	r3, #2
 8001a30:	f040 80e5 	bne.w	8001bfe <HAL_GPIO_EXTI_Callback+0x1de>
		uint32_t cycles = 0;
 8001a34:	2300      	movs	r3, #0
 8001a36:	667b      	str	r3, [r7, #100]	; 0x64
		double timeCallback;

		DWT->CTRL |= 1;
 8001a38:	4b7f      	ldr	r3, [pc, #508]	; (8001c38 <HAL_GPIO_EXTI_Callback+0x218>)
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	4a7e      	ldr	r2, [pc, #504]	; (8001c38 <HAL_GPIO_EXTI_Callback+0x218>)
 8001a3e:	f043 0301 	orr.w	r3, r3, #1
 8001a42:	6013      	str	r3, [r2, #0]
		DWT->CYCCNT = 0;
 8001a44:	4b7c      	ldr	r3, [pc, #496]	; (8001c38 <HAL_GPIO_EXTI_Callback+0x218>)
 8001a46:	2200      	movs	r2, #0
 8001a48:	605a      	str	r2, [r3, #4]

		HAL_NVIC_DisableIRQ(EXTI1_IRQn);
 8001a4a:	2007      	movs	r0, #7
 8001a4c:	f002 f88f 	bl	8003b6e <HAL_NVIC_DisableIRQ>
		__HAL_TIM_CLEAR_FLAG(&htim2, TIM_SR_UIF);
 8001a50:	4b7a      	ldr	r3, [pc, #488]	; (8001c3c <HAL_GPIO_EXTI_Callback+0x21c>)
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	f06f 0201 	mvn.w	r2, #1
 8001a58:	611a      	str	r2, [r3, #16]
		if(trueSignal){
 8001a5a:	4b79      	ldr	r3, [pc, #484]	; (8001c40 <HAL_GPIO_EXTI_Callback+0x220>)
 8001a5c:	781b      	ldrb	r3, [r3, #0]
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	f000 8091 	beq.w	8001b86 <HAL_GPIO_EXTI_Callback+0x166>
			uint16_t road_quality = bad_quality_road_counter;
 8001a64:	4b77      	ldr	r3, [pc, #476]	; (8001c44 <HAL_GPIO_EXTI_Callback+0x224>)
 8001a66:	881b      	ldrh	r3, [r3, #0]
 8001a68:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
			bad_quality_road_counter = 0;
 8001a6c:	4b75      	ldr	r3, [pc, #468]	; (8001c44 <HAL_GPIO_EXTI_Callback+0x224>)
 8001a6e:	2200      	movs	r2, #0
 8001a70:	801a      	strh	r2, [r3, #0]
			float mq_mean = float_sum(mq_data, mq_index)/mq_index;
 8001a72:	4b75      	ldr	r3, [pc, #468]	; (8001c48 <HAL_GPIO_EXTI_Callback+0x228>)
 8001a74:	781b      	ldrb	r3, [r3, #0]
 8001a76:	4619      	mov	r1, r3
 8001a78:	4874      	ldr	r0, [pc, #464]	; (8001c4c <HAL_GPIO_EXTI_Callback+0x22c>)
 8001a7a:	f000 f97b 	bl	8001d74 <float_sum>
 8001a7e:	eef0 6a40 	vmov.f32	s13, s0
 8001a82:	4b71      	ldr	r3, [pc, #452]	; (8001c48 <HAL_GPIO_EXTI_Callback+0x228>)
 8001a84:	781b      	ldrb	r3, [r3, #0]
 8001a86:	ee07 3a90 	vmov	s15, r3
 8001a8a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001a8e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001a92:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
			Coordinate c = get_coordinate();
 8001a96:	f7ff fb7d 	bl	8001194 <get_coordinate>
 8001a9a:	eeb0 7a40 	vmov.f32	s14, s0
 8001a9e:	eef0 7a60 	vmov.f32	s15, s1
 8001aa2:	ed87 7a12 	vstr	s14, [r7, #72]	; 0x48
 8001aa6:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c

			DEBUG_PRINT(("ESP_SIGNAL! i=%d, longitude=%f, latitude=%f, mq_mean = %f, road_quality = %d, fall_detected = %d\r\n\n", i, c.longitude, c.latitude, mq_mean, road_quality, fall_detected));
 8001aaa:	4b69      	ldr	r3, [pc, #420]	; (8001c50 <HAL_GPIO_EXTI_Callback+0x230>)
 8001aac:	781b      	ldrb	r3, [r3, #0]
 8001aae:	461e      	mov	r6, r3
 8001ab0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	f7fe fd48 	bl	8000548 <__aeabi_f2d>
 8001ab8:	4680      	mov	r8, r0
 8001aba:	4689      	mov	r9, r1
 8001abc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001abe:	4618      	mov	r0, r3
 8001ac0:	f7fe fd42 	bl	8000548 <__aeabi_f2d>
 8001ac4:	4604      	mov	r4, r0
 8001ac6:	460d      	mov	r5, r1
 8001ac8:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8001aca:	f7fe fd3d 	bl	8000548 <__aeabi_f2d>
 8001ace:	4602      	mov	r2, r0
 8001ad0:	460b      	mov	r3, r1
 8001ad2:	f8b7 1062 	ldrh.w	r1, [r7, #98]	; 0x62
 8001ad6:	485f      	ldr	r0, [pc, #380]	; (8001c54 <HAL_GPIO_EXTI_Callback+0x234>)
 8001ad8:	7800      	ldrb	r0, [r0, #0]
 8001ada:	9005      	str	r0, [sp, #20]
 8001adc:	9104      	str	r1, [sp, #16]
 8001ade:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001ae2:	e9cd 4500 	strd	r4, r5, [sp]
 8001ae6:	4642      	mov	r2, r8
 8001ae8:	464b      	mov	r3, r9
 8001aea:	4631      	mov	r1, r6
 8001aec:	485a      	ldr	r0, [pc, #360]	; (8001c58 <HAL_GPIO_EXTI_Callback+0x238>)
 8001aee:	f007 ff65 	bl	80099bc <iprintf>

			char line[60];

			snprintf(line, sizeof(line), "%d,%f,%f,%f,%d,%d\n", i, c.longitude, c.latitude, mq_mean, road_quality, fall_detected);
 8001af2:	4b57      	ldr	r3, [pc, #348]	; (8001c50 <HAL_GPIO_EXTI_Callback+0x230>)
 8001af4:	781b      	ldrb	r3, [r3, #0]
 8001af6:	469a      	mov	sl, r3
 8001af8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001afa:	4618      	mov	r0, r3
 8001afc:	f7fe fd24 	bl	8000548 <__aeabi_f2d>
 8001b00:	4604      	mov	r4, r0
 8001b02:	460d      	mov	r5, r1
 8001b04:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001b06:	4618      	mov	r0, r3
 8001b08:	f7fe fd1e 	bl	8000548 <__aeabi_f2d>
 8001b0c:	4680      	mov	r8, r0
 8001b0e:	4689      	mov	r9, r1
 8001b10:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8001b12:	f7fe fd19 	bl	8000548 <__aeabi_f2d>
 8001b16:	4602      	mov	r2, r0
 8001b18:	460b      	mov	r3, r1
 8001b1a:	f8b7 1062 	ldrh.w	r1, [r7, #98]	; 0x62
 8001b1e:	484d      	ldr	r0, [pc, #308]	; (8001c54 <HAL_GPIO_EXTI_Callback+0x234>)
 8001b20:	7800      	ldrb	r0, [r0, #0]
 8001b22:	4606      	mov	r6, r0
 8001b24:	f107 000c 	add.w	r0, r7, #12
 8001b28:	9607      	str	r6, [sp, #28]
 8001b2a:	9106      	str	r1, [sp, #24]
 8001b2c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8001b30:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8001b34:	e9cd 4500 	strd	r4, r5, [sp]
 8001b38:	4653      	mov	r3, sl
 8001b3a:	4a48      	ldr	r2, [pc, #288]	; (8001c5c <HAL_GPIO_EXTI_Callback+0x23c>)
 8001b3c:	213c      	movs	r1, #60	; 0x3c
 8001b3e:	f008 f891 	bl	8009c64 <sniprintf>

			if(fall_detected){
 8001b42:	4b44      	ldr	r3, [pc, #272]	; (8001c54 <HAL_GPIO_EXTI_Callback+0x234>)
 8001b44:	781b      	ldrb	r3, [r3, #0]
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d002      	beq.n	8001b50 <HAL_GPIO_EXTI_Callback+0x130>
				fall_detected=0;
 8001b4a:	4b42      	ldr	r3, [pc, #264]	; (8001c54 <HAL_GPIO_EXTI_Callback+0x234>)
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	701a      	strb	r2, [r3, #0]
			}

			i++;
 8001b50:	4b3f      	ldr	r3, [pc, #252]	; (8001c50 <HAL_GPIO_EXTI_Callback+0x230>)
 8001b52:	781b      	ldrb	r3, [r3, #0]
 8001b54:	3301      	adds	r3, #1
 8001b56:	b2da      	uxtb	r2, r3
 8001b58:	4b3d      	ldr	r3, [pc, #244]	; (8001c50 <HAL_GPIO_EXTI_Callback+0x230>)
 8001b5a:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit(&huart2, (uint8_t*) (line), strlen(line), 1000);
 8001b5c:	f107 030c 	add.w	r3, r7, #12
 8001b60:	4618      	mov	r0, r3
 8001b62:	f7fe fb35 	bl	80001d0 <strlen>
 8001b66:	4603      	mov	r3, r0
 8001b68:	b29a      	uxth	r2, r3
 8001b6a:	f107 010c 	add.w	r1, r7, #12
 8001b6e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b72:	483b      	ldr	r0, [pc, #236]	; (8001c60 <HAL_GPIO_EXTI_Callback+0x240>)
 8001b74:	f006 ffbd 	bl	8008af2 <HAL_UART_Transmit>

			HAL_TIM_Base_Start_IT(&htim2); //Timer 30 sec
 8001b78:	4830      	ldr	r0, [pc, #192]	; (8001c3c <HAL_GPIO_EXTI_Callback+0x21c>)
 8001b7a:	f006 fb3b 	bl	80081f4 <HAL_TIM_Base_Start_IT>
			trueSignal=0;
 8001b7e:	4b30      	ldr	r3, [pc, #192]	; (8001c40 <HAL_GPIO_EXTI_Callback+0x220>)
 8001b80:	2200      	movs	r2, #0
 8001b82:	701a      	strb	r2, [r3, #0]
 8001b84:	e009      	b.n	8001b9a <HAL_GPIO_EXTI_Callback+0x17a>
		}else{
			HAL_ResumeTick();
 8001b86:	f001 f9ef 	bl	8002f68 <HAL_ResumeTick>
			HAL_Delay(200);
 8001b8a:	20c8      	movs	r0, #200	; 0xc8
 8001b8c:	f001 f9b8 	bl	8002f00 <HAL_Delay>
			trueSignal = 1;
 8001b90:	4b2b      	ldr	r3, [pc, #172]	; (8001c40 <HAL_GPIO_EXTI_Callback+0x220>)
 8001b92:	2201      	movs	r2, #1
 8001b94:	701a      	strb	r2, [r3, #0]
			HAL_SuspendTick();
 8001b96:	f001 f9d7 	bl	8002f48 <HAL_SuspendTick>
		}

		__HAL_GPIO_EXTI_CLEAR_IT(EXTI1_IRQn);
 8001b9a:	4b32      	ldr	r3, [pc, #200]	; (8001c64 <HAL_GPIO_EXTI_Callback+0x244>)
 8001b9c:	2207      	movs	r2, #7
 8001b9e:	615a      	str	r2, [r3, #20]
		HAL_NVIC_ClearPendingIRQ(EXTI1_IRQn);
 8001ba0:	2007      	movs	r0, #7
 8001ba2:	f001 fffe 	bl	8003ba2 <HAL_NVIC_ClearPendingIRQ>

		HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8001ba6:	2007      	movs	r0, #7
 8001ba8:	f001 ffd3 	bl	8003b52 <HAL_NVIC_EnableIRQ>

		cycles = DWT->CYCCNT;
 8001bac:	4b22      	ldr	r3, [pc, #136]	; (8001c38 <HAL_GPIO_EXTI_Callback+0x218>)
 8001bae:	685b      	ldr	r3, [r3, #4]
 8001bb0:	667b      	str	r3, [r7, #100]	; 0x64
		cycles--;
 8001bb2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001bb4:	3b01      	subs	r3, #1
 8001bb6:	667b      	str	r3, [r7, #100]	; 0x64

		timeCallback = ((double)cycles/HAL_RCC_GetHCLKFreq())*10e+3;
 8001bb8:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8001bba:	f7fe fca3 	bl	8000504 <__aeabi_ui2d>
 8001bbe:	4604      	mov	r4, r0
 8001bc0:	460d      	mov	r5, r1
 8001bc2:	f006 fa2b 	bl	800801c <HAL_RCC_GetHCLKFreq>
 8001bc6:	4603      	mov	r3, r0
 8001bc8:	4618      	mov	r0, r3
 8001bca:	f7fe fc9b 	bl	8000504 <__aeabi_ui2d>
 8001bce:	4602      	mov	r2, r0
 8001bd0:	460b      	mov	r3, r1
 8001bd2:	4620      	mov	r0, r4
 8001bd4:	4629      	mov	r1, r5
 8001bd6:	f7fe fe39 	bl	800084c <__aeabi_ddiv>
 8001bda:	4602      	mov	r2, r0
 8001bdc:	460b      	mov	r3, r1
 8001bde:	4610      	mov	r0, r2
 8001be0:	4619      	mov	r1, r3
 8001be2:	a313      	add	r3, pc, #76	; (adr r3, 8001c30 <HAL_GPIO_EXTI_Callback+0x210>)
 8001be4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001be8:	f7fe fd06 	bl	80005f8 <__aeabi_dmul>
 8001bec:	4602      	mov	r2, r0
 8001bee:	460b      	mov	r3, r1
 8001bf0:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50

		printf("TIME (ESP_Signal) =  %.2lf ms\n\r", timeCallback);
 8001bf4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8001bf8:	481b      	ldr	r0, [pc, #108]	; (8001c68 <HAL_GPIO_EXTI_Callback+0x248>)
 8001bfa:	f007 fedf 	bl	80099bc <iprintf>
	}

	if(GPIO_Pin == MPU_DATA_RDY_Pin){
 8001bfe:	88fb      	ldrh	r3, [r7, #6]
 8001c00:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001c04:	d10d      	bne.n	8001c22 <HAL_GPIO_EXTI_Callback+0x202>

		//Periodic timer start for mpu reading
		DEBUG_PRINT(("EXTI 11 Interrupt\r\n"));
 8001c06:	4819      	ldr	r0, [pc, #100]	; (8001c6c <HAL_GPIO_EXTI_Callback+0x24c>)
 8001c08:	f007 ff5e 	bl	8009ac8 <puts>
		__HAL_TIM_CLEAR_FLAG(&htim4, TIM_SR_UIF);
 8001c0c:	4b18      	ldr	r3, [pc, #96]	; (8001c70 <HAL_GPIO_EXTI_Callback+0x250>)
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	f06f 0201 	mvn.w	r2, #1
 8001c14:	611a      	str	r2, [r3, #16]
		HAL_TIM_Base_Start_IT(&htim4);
 8001c16:	4816      	ldr	r0, [pc, #88]	; (8001c70 <HAL_GPIO_EXTI_Callback+0x250>)
 8001c18:	f006 faec 	bl	80081f4 <HAL_TIM_Base_Start_IT>
		HAL_NVIC_DisableIRQ(EXTI15_10_IRQn);
 8001c1c:	2028      	movs	r0, #40	; 0x28
 8001c1e:	f001 ffa6 	bl	8003b6e <HAL_NVIC_DisableIRQ>
	}
}
 8001c22:	bf00      	nop
 8001c24:	3768      	adds	r7, #104	; 0x68
 8001c26:	46bd      	mov	sp, r7
 8001c28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001c2c:	f3af 8000 	nop.w
 8001c30:	00000000 	.word	0x00000000
 8001c34:	40c38800 	.word	0x40c38800
 8001c38:	e0001000 	.word	0xe0001000
 8001c3c:	200008b4 	.word	0x200008b4
 8001c40:	20000215 	.word	0x20000215
 8001c44:	2000022a 	.word	0x2000022a
 8001c48:	20000218 	.word	0x20000218
 8001c4c:	20000324 	.word	0x20000324
 8001c50:	20000214 	.word	0x20000214
 8001c54:	20000226 	.word	0x20000226
 8001c58:	0800d154 	.word	0x0800d154
 8001c5c:	0800d1b8 	.word	0x0800d1b8
 8001c60:	200008fc 	.word	0x200008fc
 8001c64:	40013c00 	.word	0x40013c00
 8001c68:	0800d1cc 	.word	0x0800d1cc
 8001c6c:	0800d1ec 	.word	0x0800d1ec
 8001c70:	20000240 	.word	0x20000240
 8001c74:	00000000 	.word	0x00000000

08001c78 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef*hadc){
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b086      	sub	sp, #24
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]

	uint16_t rawValue; float ppm; float v;

	rawValue = HAL_ADC_GetValue(hadc);
 8001c80:	6878      	ldr	r0, [r7, #4]
 8001c82:	f001 fbe4 	bl	800344e <HAL_ADC_GetValue>
 8001c86:	4603      	mov	r3, r0
 8001c88:	82fb      	strh	r3, [r7, #22]

	v = ((float)rawValue) / 4095 * 4660;
 8001c8a:	8afb      	ldrh	r3, [r7, #22]
 8001c8c:	ee07 3a90 	vmov	s15, r3
 8001c90:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001c94:	eddf 6a2e 	vldr	s13, [pc, #184]	; 8001d50 <HAL_ADC_ConvCpltCallback+0xd8>
 8001c98:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001c9c:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 8001d54 <HAL_ADC_ConvCpltCallback+0xdc>
 8001ca0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001ca4:	edc7 7a04 	vstr	s15, [r7, #16]
	ppm = ((v - 320.0) / 0.65) + 400;
 8001ca8:	6938      	ldr	r0, [r7, #16]
 8001caa:	f7fe fc4d 	bl	8000548 <__aeabi_f2d>
 8001cae:	f04f 0200 	mov.w	r2, #0
 8001cb2:	4b29      	ldr	r3, [pc, #164]	; (8001d58 <HAL_ADC_ConvCpltCallback+0xe0>)
 8001cb4:	f7fe fae8 	bl	8000288 <__aeabi_dsub>
 8001cb8:	4602      	mov	r2, r0
 8001cba:	460b      	mov	r3, r1
 8001cbc:	4610      	mov	r0, r2
 8001cbe:	4619      	mov	r1, r3
 8001cc0:	a321      	add	r3, pc, #132	; (adr r3, 8001d48 <HAL_ADC_ConvCpltCallback+0xd0>)
 8001cc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cc6:	f7fe fdc1 	bl	800084c <__aeabi_ddiv>
 8001cca:	4602      	mov	r2, r0
 8001ccc:	460b      	mov	r3, r1
 8001cce:	4610      	mov	r0, r2
 8001cd0:	4619      	mov	r1, r3
 8001cd2:	f04f 0200 	mov.w	r2, #0
 8001cd6:	4b21      	ldr	r3, [pc, #132]	; (8001d5c <HAL_ADC_ConvCpltCallback+0xe4>)
 8001cd8:	f7fe fad8 	bl	800028c <__adddf3>
 8001cdc:	4602      	mov	r2, r0
 8001cde:	460b      	mov	r3, r1
 8001ce0:	4610      	mov	r0, r2
 8001ce2:	4619      	mov	r1, r3
 8001ce4:	f7fe ff60 	bl	8000ba8 <__aeabi_d2f>
 8001ce8:	4603      	mov	r3, r0
 8001cea:	60fb      	str	r3, [r7, #12]
	DEBUG_PRINT(("rawValue: %hu\r\n", rawValue));
 8001cec:	8afb      	ldrh	r3, [r7, #22]
 8001cee:	4619      	mov	r1, r3
 8001cf0:	481b      	ldr	r0, [pc, #108]	; (8001d60 <HAL_ADC_ConvCpltCallback+0xe8>)
 8001cf2:	f007 fe63 	bl	80099bc <iprintf>
	DEBUG_PRINT(("v: %f\r\n", v));
 8001cf6:	6938      	ldr	r0, [r7, #16]
 8001cf8:	f7fe fc26 	bl	8000548 <__aeabi_f2d>
 8001cfc:	4602      	mov	r2, r0
 8001cfe:	460b      	mov	r3, r1
 8001d00:	4818      	ldr	r0, [pc, #96]	; (8001d64 <HAL_ADC_ConvCpltCallback+0xec>)
 8001d02:	f007 fe5b 	bl	80099bc <iprintf>
	DEBUG_PRINT(("PPM: %f\r\n", ppm));
 8001d06:	68f8      	ldr	r0, [r7, #12]
 8001d08:	f7fe fc1e 	bl	8000548 <__aeabi_f2d>
 8001d0c:	4602      	mov	r2, r0
 8001d0e:	460b      	mov	r3, r1
 8001d10:	4815      	ldr	r0, [pc, #84]	; (8001d68 <HAL_ADC_ConvCpltCallback+0xf0>)
 8001d12:	f007 fe53 	bl	80099bc <iprintf>
	mq_data[mq_index] = ppm;
 8001d16:	4b15      	ldr	r3, [pc, #84]	; (8001d6c <HAL_ADC_ConvCpltCallback+0xf4>)
 8001d18:	781b      	ldrb	r3, [r3, #0]
 8001d1a:	4a15      	ldr	r2, [pc, #84]	; (8001d70 <HAL_ADC_ConvCpltCallback+0xf8>)
 8001d1c:	009b      	lsls	r3, r3, #2
 8001d1e:	4413      	add	r3, r2
 8001d20:	68fa      	ldr	r2, [r7, #12]
 8001d22:	601a      	str	r2, [r3, #0]
	mq_index = (mq_index + 1) % MQ_DATA_LENGTH;
 8001d24:	4b11      	ldr	r3, [pc, #68]	; (8001d6c <HAL_ADC_ConvCpltCallback+0xf4>)
 8001d26:	781b      	ldrb	r3, [r3, #0]
 8001d28:	3301      	adds	r3, #1
 8001d2a:	425a      	negs	r2, r3
 8001d2c:	f003 0307 	and.w	r3, r3, #7
 8001d30:	f002 0207 	and.w	r2, r2, #7
 8001d34:	bf58      	it	pl
 8001d36:	4253      	negpl	r3, r2
 8001d38:	b2da      	uxtb	r2, r3
 8001d3a:	4b0c      	ldr	r3, [pc, #48]	; (8001d6c <HAL_ADC_ConvCpltCallback+0xf4>)
 8001d3c:	701a      	strb	r2, [r3, #0]
}
 8001d3e:	bf00      	nop
 8001d40:	3718      	adds	r7, #24
 8001d42:	46bd      	mov	sp, r7
 8001d44:	bd80      	pop	{r7, pc}
 8001d46:	bf00      	nop
 8001d48:	cccccccd 	.word	0xcccccccd
 8001d4c:	3fe4cccc 	.word	0x3fe4cccc
 8001d50:	457ff000 	.word	0x457ff000
 8001d54:	4591a000 	.word	0x4591a000
 8001d58:	40740000 	.word	0x40740000
 8001d5c:	40790000 	.word	0x40790000
 8001d60:	0800d200 	.word	0x0800d200
 8001d64:	0800d210 	.word	0x0800d210
 8001d68:	0800d218 	.word	0x0800d218
 8001d6c:	20000218 	.word	0x20000218
 8001d70:	20000324 	.word	0x20000324

08001d74 <float_sum>:

float float_sum(float* collection, uint8_t index) {
 8001d74:	b480      	push	{r7}
 8001d76:	b085      	sub	sp, #20
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
 8001d7c:	460b      	mov	r3, r1
 8001d7e:	70fb      	strb	r3, [r7, #3]
	float sum = 0.0;
 8001d80:	f04f 0300 	mov.w	r3, #0
 8001d84:	60fb      	str	r3, [r7, #12]
	for(int i=0; i<index; i++){
 8001d86:	2300      	movs	r3, #0
 8001d88:	60bb      	str	r3, [r7, #8]
 8001d8a:	e00e      	b.n	8001daa <float_sum+0x36>
		sum += collection[i];
 8001d8c:	68bb      	ldr	r3, [r7, #8]
 8001d8e:	009b      	lsls	r3, r3, #2
 8001d90:	687a      	ldr	r2, [r7, #4]
 8001d92:	4413      	add	r3, r2
 8001d94:	edd3 7a00 	vldr	s15, [r3]
 8001d98:	ed97 7a03 	vldr	s14, [r7, #12]
 8001d9c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001da0:	edc7 7a03 	vstr	s15, [r7, #12]
	for(int i=0; i<index; i++){
 8001da4:	68bb      	ldr	r3, [r7, #8]
 8001da6:	3301      	adds	r3, #1
 8001da8:	60bb      	str	r3, [r7, #8]
 8001daa:	78fb      	ldrb	r3, [r7, #3]
 8001dac:	68ba      	ldr	r2, [r7, #8]
 8001dae:	429a      	cmp	r2, r3
 8001db0:	dbec      	blt.n	8001d8c <float_sum+0x18>
	}
	return sum;
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	ee07 3a90 	vmov	s15, r3
}
 8001db8:	eeb0 0a67 	vmov.f32	s0, s15
 8001dbc:	3714      	adds	r7, #20
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc4:	4770      	bx	lr
	...

08001dc8 <fall_counter_increment>:

void fall_counter_increment(float gyro_value){
 8001dc8:	b480      	push	{r7}
 8001dca:	b083      	sub	sp, #12
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	ed87 0a01 	vstr	s0, [r7, #4]
	if(check_fall){
 8001dd2:	4b12      	ldr	r3, [pc, #72]	; (8001e1c <fall_counter_increment+0x54>)
 8001dd4:	781b      	ldrb	r3, [r3, #0]
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d01a      	beq.n	8001e10 <fall_counter_increment+0x48>
		check_fall_counter++;
 8001dda:	4b11      	ldr	r3, [pc, #68]	; (8001e20 <fall_counter_increment+0x58>)
 8001ddc:	781b      	ldrb	r3, [r3, #0]
 8001dde:	3301      	adds	r3, #1
 8001de0:	b2da      	uxtb	r2, r3
 8001de2:	4b0f      	ldr	r3, [pc, #60]	; (8001e20 <fall_counter_increment+0x58>)
 8001de4:	701a      	strb	r2, [r3, #0]
		if(check_fall_counter>20){
 8001de6:	4b0e      	ldr	r3, [pc, #56]	; (8001e20 <fall_counter_increment+0x58>)
 8001de8:	781b      	ldrb	r3, [r3, #0]
 8001dea:	2b14      	cmp	r3, #20
 8001dec:	d910      	bls.n	8001e10 <fall_counter_increment+0x48>
			if(gyro_value>30.0){
 8001dee:	edd7 7a01 	vldr	s15, [r7, #4]
 8001df2:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 8001df6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001dfa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001dfe:	dc00      	bgt.n	8001e02 <fall_counter_increment+0x3a>
				check_fall_counter=check_fall=0;
			}
		}
	}
}
 8001e00:	e006      	b.n	8001e10 <fall_counter_increment+0x48>
				check_fall_counter=check_fall=0;
 8001e02:	4b06      	ldr	r3, [pc, #24]	; (8001e1c <fall_counter_increment+0x54>)
 8001e04:	2200      	movs	r2, #0
 8001e06:	701a      	strb	r2, [r3, #0]
 8001e08:	4b04      	ldr	r3, [pc, #16]	; (8001e1c <fall_counter_increment+0x54>)
 8001e0a:	781a      	ldrb	r2, [r3, #0]
 8001e0c:	4b04      	ldr	r3, [pc, #16]	; (8001e20 <fall_counter_increment+0x58>)
 8001e0e:	701a      	strb	r2, [r3, #0]
}
 8001e10:	bf00      	nop
 8001e12:	370c      	adds	r7, #12
 8001e14:	46bd      	mov	sp, r7
 8001e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1a:	4770      	bx	lr
 8001e1c:	20000227 	.word	0x20000227
 8001e20:	20000228 	.word	0x20000228
 8001e24:	00000000 	.word	0x00000000

08001e28 <HAL_I2C_MasterRxCpltCallback>:

void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef* hi2c){
 8001e28:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001e2a:	b0af      	sub	sp, #188	; 0xbc
 8001e2c:	af04      	add	r7, sp, #16
 8001e2e:	6078      	str	r0, [r7, #4]
 8001e30:	466b      	mov	r3, sp
 8001e32:	461e      	mov	r6, r3
	uint32_t cycles = 0;
 8001e34:	2300      	movs	r3, #0
 8001e36:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	double timeCallback;

	DWT->CTRL |= 1;
 8001e3a:	4b53      	ldr	r3, [pc, #332]	; (8001f88 <HAL_I2C_MasterRxCpltCallback+0x160>)
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	4a52      	ldr	r2, [pc, #328]	; (8001f88 <HAL_I2C_MasterRxCpltCallback+0x160>)
 8001e40:	f043 0301 	orr.w	r3, r3, #1
 8001e44:	6013      	str	r3, [r2, #0]
	DWT->CYCCNT = 0;
 8001e46:	4b50      	ldr	r3, [pc, #320]	; (8001f88 <HAL_I2C_MasterRxCpltCallback+0x160>)
 8001e48:	2200      	movs	r2, #0
 8001e4a:	605a      	str	r2, [r3, #4]

	MPU_OK = 1;
 8001e4c:	4b4f      	ldr	r3, [pc, #316]	; (8001f8c <HAL_I2C_MasterRxCpltCallback+0x164>)
 8001e4e:	2201      	movs	r2, #1
 8001e50:	701a      	strb	r2, [r3, #0]

	/// Reactivate write buffer

	uint8_t Data = 0x78;
 8001e52:	2378      	movs	r3, #120	; 0x78
 8001e54:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, FIFO_EN_REG, 1, &Data, 1, 1000);
 8001e58:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e5c:	9302      	str	r3, [sp, #8]
 8001e5e:	2301      	movs	r3, #1
 8001e60:	9301      	str	r3, [sp, #4]
 8001e62:	f107 035f 	add.w	r3, r7, #95	; 0x5f
 8001e66:	9300      	str	r3, [sp, #0]
 8001e68:	2301      	movs	r3, #1
 8001e6a:	2223      	movs	r2, #35	; 0x23
 8001e6c:	21d0      	movs	r1, #208	; 0xd0
 8001e6e:	4848      	ldr	r0, [pc, #288]	; (8001f90 <HAL_I2C_MasterRxCpltCallback+0x168>)
 8001e70:	f002 ff92 	bl	8004d98 <HAL_I2C_Mem_Write>
	Data = 0x44;
 8001e74:	2344      	movs	r3, #68	; 0x44
 8001e76:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, USER_CTRL, 1, &Data, 1, 1000);
 8001e7a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e7e:	9302      	str	r3, [sp, #8]
 8001e80:	2301      	movs	r3, #1
 8001e82:	9301      	str	r3, [sp, #4]
 8001e84:	f107 035f 	add.w	r3, r7, #95	; 0x5f
 8001e88:	9300      	str	r3, [sp, #0]
 8001e8a:	2301      	movs	r3, #1
 8001e8c:	226a      	movs	r2, #106	; 0x6a
 8001e8e:	21d0      	movs	r1, #208	; 0xd0
 8001e90:	483f      	ldr	r0, [pc, #252]	; (8001f90 <HAL_I2C_MasterRxCpltCallback+0x168>)
 8001e92:	f002 ff81 	bl	8004d98 <HAL_I2C_Mem_Write>

	float means[SLIDING_WINDOWS];
	float temp_sums[SLIDING_WINDOWS*2];
	float accel_vectors[mpu_index/12], gyro_vectors[mpu_index/12];
 8001e96:	4b3f      	ldr	r3, [pc, #252]	; (8001f94 <HAL_I2C_MasterRxCpltCallback+0x16c>)
 8001e98:	881b      	ldrh	r3, [r3, #0]
 8001e9a:	4a3f      	ldr	r2, [pc, #252]	; (8001f98 <HAL_I2C_MasterRxCpltCallback+0x170>)
 8001e9c:	fba2 2303 	umull	r2, r3, r2, r3
 8001ea0:	08db      	lsrs	r3, r3, #3
 8001ea2:	b29b      	uxth	r3, r3
 8001ea4:	461c      	mov	r4, r3
 8001ea6:	1e63      	subs	r3, r4, #1
 8001ea8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8001eac:	4623      	mov	r3, r4
 8001eae:	4618      	mov	r0, r3
 8001eb0:	f04f 0100 	mov.w	r1, #0
 8001eb4:	f04f 0200 	mov.w	r2, #0
 8001eb8:	f04f 0300 	mov.w	r3, #0
 8001ebc:	014b      	lsls	r3, r1, #5
 8001ebe:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001ec2:	0142      	lsls	r2, r0, #5
 8001ec4:	4623      	mov	r3, r4
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	f04f 0100 	mov.w	r1, #0
 8001ecc:	f04f 0200 	mov.w	r2, #0
 8001ed0:	f04f 0300 	mov.w	r3, #0
 8001ed4:	014b      	lsls	r3, r1, #5
 8001ed6:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001eda:	0142      	lsls	r2, r0, #5
 8001edc:	4623      	mov	r3, r4
 8001ede:	009b      	lsls	r3, r3, #2
 8001ee0:	3307      	adds	r3, #7
 8001ee2:	08db      	lsrs	r3, r3, #3
 8001ee4:	00db      	lsls	r3, r3, #3
 8001ee6:	ebad 0d03 	sub.w	sp, sp, r3
 8001eea:	ab04      	add	r3, sp, #16
 8001eec:	3303      	adds	r3, #3
 8001eee:	089b      	lsrs	r3, r3, #2
 8001ef0:	009b      	lsls	r3, r3, #2
 8001ef2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8001ef6:	4b27      	ldr	r3, [pc, #156]	; (8001f94 <HAL_I2C_MasterRxCpltCallback+0x16c>)
 8001ef8:	881b      	ldrh	r3, [r3, #0]
 8001efa:	4a27      	ldr	r2, [pc, #156]	; (8001f98 <HAL_I2C_MasterRxCpltCallback+0x170>)
 8001efc:	fba2 2303 	umull	r2, r3, r2, r3
 8001f00:	08db      	lsrs	r3, r3, #3
 8001f02:	b29b      	uxth	r3, r3
 8001f04:	461c      	mov	r4, r3
 8001f06:	1e63      	subs	r3, r4, #1
 8001f08:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001f0a:	4623      	mov	r3, r4
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	f04f 0100 	mov.w	r1, #0
 8001f12:	f04f 0200 	mov.w	r2, #0
 8001f16:	f04f 0300 	mov.w	r3, #0
 8001f1a:	014b      	lsls	r3, r1, #5
 8001f1c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001f20:	0142      	lsls	r2, r0, #5
 8001f22:	4623      	mov	r3, r4
 8001f24:	4618      	mov	r0, r3
 8001f26:	f04f 0100 	mov.w	r1, #0
 8001f2a:	f04f 0200 	mov.w	r2, #0
 8001f2e:	f04f 0300 	mov.w	r3, #0
 8001f32:	014b      	lsls	r3, r1, #5
 8001f34:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001f38:	0142      	lsls	r2, r0, #5
 8001f3a:	4623      	mov	r3, r4
 8001f3c:	009b      	lsls	r3, r3, #2
 8001f3e:	3307      	adds	r3, #7
 8001f40:	08db      	lsrs	r3, r3, #3
 8001f42:	00db      	lsls	r3, r3, #3
 8001f44:	ebad 0d03 	sub.w	sp, sp, r3
 8001f48:	ab04      	add	r3, sp, #16
 8001f4a:	3303      	adds	r3, #3
 8001f4c:	089b      	lsrs	r3, r3, #2
 8001f4e:	009b      	lsls	r3, r3, #2
 8001f50:	67bb      	str	r3, [r7, #120]	; 0x78
	uint16_t accel_vector_index=0, gyro_vector_index = 0;
 8001f52:	2300      	movs	r3, #0
 8001f54:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 8001f58:	2300      	movs	r3, #0
 8001f5a:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96
	float accel_sum = 0;
 8001f5e:	f04f 0300 	mov.w	r3, #0
 8001f62:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
	uint8_t sum_counter = 0, sum_index=0;
 8001f66:	2300      	movs	r3, #0
 8001f68:	f887 309e 	strb.w	r3, [r7, #158]	; 0x9e
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
	DEBUG_PRINT(("receive dma callback, mpu index: %d\r\n", mpu_index));
 8001f72:	4b08      	ldr	r3, [pc, #32]	; (8001f94 <HAL_I2C_MasterRxCpltCallback+0x16c>)
 8001f74:	881b      	ldrh	r3, [r3, #0]
 8001f76:	4619      	mov	r1, r3
 8001f78:	4808      	ldr	r0, [pc, #32]	; (8001f9c <HAL_I2C_MasterRxCpltCallback+0x174>)
 8001f7a:	f007 fd1f 	bl	80099bc <iprintf>
	for(int i=0; i<mpu_index; i+=12){
 8001f7e:	2300      	movs	r3, #0
 8001f80:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8001f84:	e25c      	b.n	8002440 <HAL_I2C_MasterRxCpltCallback+0x618>
 8001f86:	bf00      	nop
 8001f88:	e0001000 	.word	0xe0001000
 8001f8c:	20000216 	.word	0x20000216
 8001f90:	200002cc 	.word	0x200002cc
 8001f94:	20000224 	.word	0x20000224
 8001f98:	aaaaaaab 	.word	0xaaaaaaab
 8001f9c:	0800d224 	.word	0x0800d224
		Accel_X_RAW = (int16_t)(mpu_data[i] << 8 | mpu_data[i+1]);
 8001fa0:	4ac9      	ldr	r2, [pc, #804]	; (80022c8 <HAL_I2C_MasterRxCpltCallback+0x4a0>)
 8001fa2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001fa6:	4413      	add	r3, r2
 8001fa8:	781b      	ldrb	r3, [r3, #0]
 8001faa:	021b      	lsls	r3, r3, #8
 8001fac:	b21a      	sxth	r2, r3
 8001fae:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001fb2:	3301      	adds	r3, #1
 8001fb4:	49c4      	ldr	r1, [pc, #784]	; (80022c8 <HAL_I2C_MasterRxCpltCallback+0x4a0>)
 8001fb6:	5ccb      	ldrb	r3, [r1, r3]
 8001fb8:	b21b      	sxth	r3, r3
 8001fba:	4313      	orrs	r3, r2
 8001fbc:	b21b      	sxth	r3, r3
 8001fbe:	ee07 3a90 	vmov	s15, r3
 8001fc2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001fc6:	4bc1      	ldr	r3, [pc, #772]	; (80022cc <HAL_I2C_MasterRxCpltCallback+0x4a4>)
 8001fc8:	edc3 7a00 	vstr	s15, [r3]
		Accel_Y_RAW = (int16_t)(mpu_data[i+2] << 8 | mpu_data[i+3]);
 8001fcc:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001fd0:	3302      	adds	r3, #2
 8001fd2:	4abd      	ldr	r2, [pc, #756]	; (80022c8 <HAL_I2C_MasterRxCpltCallback+0x4a0>)
 8001fd4:	5cd3      	ldrb	r3, [r2, r3]
 8001fd6:	021b      	lsls	r3, r3, #8
 8001fd8:	b21a      	sxth	r2, r3
 8001fda:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001fde:	3303      	adds	r3, #3
 8001fe0:	49b9      	ldr	r1, [pc, #740]	; (80022c8 <HAL_I2C_MasterRxCpltCallback+0x4a0>)
 8001fe2:	5ccb      	ldrb	r3, [r1, r3]
 8001fe4:	b21b      	sxth	r3, r3
 8001fe6:	4313      	orrs	r3, r2
 8001fe8:	b21b      	sxth	r3, r3
 8001fea:	ee07 3a90 	vmov	s15, r3
 8001fee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001ff2:	4bb7      	ldr	r3, [pc, #732]	; (80022d0 <HAL_I2C_MasterRxCpltCallback+0x4a8>)
 8001ff4:	edc3 7a00 	vstr	s15, [r3]
		Accel_Z_RAW = (int16_t)(mpu_data[i+4] << 8 | mpu_data[i+5]);
 8001ff8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001ffc:	3304      	adds	r3, #4
 8001ffe:	4ab2      	ldr	r2, [pc, #712]	; (80022c8 <HAL_I2C_MasterRxCpltCallback+0x4a0>)
 8002000:	5cd3      	ldrb	r3, [r2, r3]
 8002002:	021b      	lsls	r3, r3, #8
 8002004:	b21a      	sxth	r2, r3
 8002006:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800200a:	3305      	adds	r3, #5
 800200c:	49ae      	ldr	r1, [pc, #696]	; (80022c8 <HAL_I2C_MasterRxCpltCallback+0x4a0>)
 800200e:	5ccb      	ldrb	r3, [r1, r3]
 8002010:	b21b      	sxth	r3, r3
 8002012:	4313      	orrs	r3, r2
 8002014:	b21b      	sxth	r3, r3
 8002016:	ee07 3a90 	vmov	s15, r3
 800201a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800201e:	4bad      	ldr	r3, [pc, #692]	; (80022d4 <HAL_I2C_MasterRxCpltCallback+0x4ac>)
 8002020:	edc3 7a00 	vstr	s15, [r3]


		Ax = Accel_X_RAW/16384.0 + offset_accelX;  // get the float g
 8002024:	4ba9      	ldr	r3, [pc, #676]	; (80022cc <HAL_I2C_MasterRxCpltCallback+0x4a4>)
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	4618      	mov	r0, r3
 800202a:	f7fe fa8d 	bl	8000548 <__aeabi_f2d>
 800202e:	f04f 0200 	mov.w	r2, #0
 8002032:	4ba9      	ldr	r3, [pc, #676]	; (80022d8 <HAL_I2C_MasterRxCpltCallback+0x4b0>)
 8002034:	f7fe fc0a 	bl	800084c <__aeabi_ddiv>
 8002038:	4602      	mov	r2, r0
 800203a:	460b      	mov	r3, r1
 800203c:	4614      	mov	r4, r2
 800203e:	461d      	mov	r5, r3
 8002040:	4ba6      	ldr	r3, [pc, #664]	; (80022dc <HAL_I2C_MasterRxCpltCallback+0x4b4>)
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	4618      	mov	r0, r3
 8002046:	f7fe fa7f 	bl	8000548 <__aeabi_f2d>
 800204a:	4602      	mov	r2, r0
 800204c:	460b      	mov	r3, r1
 800204e:	4620      	mov	r0, r4
 8002050:	4629      	mov	r1, r5
 8002052:	f7fe f91b 	bl	800028c <__adddf3>
 8002056:	4602      	mov	r2, r0
 8002058:	460b      	mov	r3, r1
 800205a:	4610      	mov	r0, r2
 800205c:	4619      	mov	r1, r3
 800205e:	f7fe fda3 	bl	8000ba8 <__aeabi_d2f>
 8002062:	4603      	mov	r3, r0
 8002064:	4a9e      	ldr	r2, [pc, #632]	; (80022e0 <HAL_I2C_MasterRxCpltCallback+0x4b8>)
 8002066:	6013      	str	r3, [r2, #0]
		Ay = Accel_Y_RAW/16384.0 + offset_accelY;
 8002068:	4b99      	ldr	r3, [pc, #612]	; (80022d0 <HAL_I2C_MasterRxCpltCallback+0x4a8>)
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	4618      	mov	r0, r3
 800206e:	f7fe fa6b 	bl	8000548 <__aeabi_f2d>
 8002072:	f04f 0200 	mov.w	r2, #0
 8002076:	4b98      	ldr	r3, [pc, #608]	; (80022d8 <HAL_I2C_MasterRxCpltCallback+0x4b0>)
 8002078:	f7fe fbe8 	bl	800084c <__aeabi_ddiv>
 800207c:	4602      	mov	r2, r0
 800207e:	460b      	mov	r3, r1
 8002080:	4614      	mov	r4, r2
 8002082:	461d      	mov	r5, r3
 8002084:	4b97      	ldr	r3, [pc, #604]	; (80022e4 <HAL_I2C_MasterRxCpltCallback+0x4bc>)
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	4618      	mov	r0, r3
 800208a:	f7fe fa5d 	bl	8000548 <__aeabi_f2d>
 800208e:	4602      	mov	r2, r0
 8002090:	460b      	mov	r3, r1
 8002092:	4620      	mov	r0, r4
 8002094:	4629      	mov	r1, r5
 8002096:	f7fe f8f9 	bl	800028c <__adddf3>
 800209a:	4602      	mov	r2, r0
 800209c:	460b      	mov	r3, r1
 800209e:	4610      	mov	r0, r2
 80020a0:	4619      	mov	r1, r3
 80020a2:	f7fe fd81 	bl	8000ba8 <__aeabi_d2f>
 80020a6:	4603      	mov	r3, r0
 80020a8:	4a8f      	ldr	r2, [pc, #572]	; (80022e8 <HAL_I2C_MasterRxCpltCallback+0x4c0>)
 80020aa:	6013      	str	r3, [r2, #0]
		Az = Accel_Z_RAW/16384.0 + offset_accelZ;
 80020ac:	4b89      	ldr	r3, [pc, #548]	; (80022d4 <HAL_I2C_MasterRxCpltCallback+0x4ac>)
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	4618      	mov	r0, r3
 80020b2:	f7fe fa49 	bl	8000548 <__aeabi_f2d>
 80020b6:	f04f 0200 	mov.w	r2, #0
 80020ba:	4b87      	ldr	r3, [pc, #540]	; (80022d8 <HAL_I2C_MasterRxCpltCallback+0x4b0>)
 80020bc:	f7fe fbc6 	bl	800084c <__aeabi_ddiv>
 80020c0:	4602      	mov	r2, r0
 80020c2:	460b      	mov	r3, r1
 80020c4:	4614      	mov	r4, r2
 80020c6:	461d      	mov	r5, r3
 80020c8:	4b88      	ldr	r3, [pc, #544]	; (80022ec <HAL_I2C_MasterRxCpltCallback+0x4c4>)
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	4618      	mov	r0, r3
 80020ce:	f7fe fa3b 	bl	8000548 <__aeabi_f2d>
 80020d2:	4602      	mov	r2, r0
 80020d4:	460b      	mov	r3, r1
 80020d6:	4620      	mov	r0, r4
 80020d8:	4629      	mov	r1, r5
 80020da:	f7fe f8d7 	bl	800028c <__adddf3>
 80020de:	4602      	mov	r2, r0
 80020e0:	460b      	mov	r3, r1
 80020e2:	4610      	mov	r0, r2
 80020e4:	4619      	mov	r1, r3
 80020e6:	f7fe fd5f 	bl	8000ba8 <__aeabi_d2f>
 80020ea:	4603      	mov	r3, r0
 80020ec:	4a80      	ldr	r2, [pc, #512]	; (80022f0 <HAL_I2C_MasterRxCpltCallback+0x4c8>)
 80020ee:	6013      	str	r3, [r2, #0]

		float raw_amp = sqrt(pow(Ax, 2)+pow(Ay, 2)+pow(Az, 2));
 80020f0:	4b7b      	ldr	r3, [pc, #492]	; (80022e0 <HAL_I2C_MasterRxCpltCallback+0x4b8>)
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	4618      	mov	r0, r3
 80020f6:	f7fe fa27 	bl	8000548 <__aeabi_f2d>
 80020fa:	4602      	mov	r2, r0
 80020fc:	460b      	mov	r3, r1
 80020fe:	ed9f 1b6e 	vldr	d1, [pc, #440]	; 80022b8 <HAL_I2C_MasterRxCpltCallback+0x490>
 8002102:	ec43 2b10 	vmov	d0, r2, r3
 8002106:	f009 ffed 	bl	800c0e4 <pow>
 800210a:	ec55 4b10 	vmov	r4, r5, d0
 800210e:	4b76      	ldr	r3, [pc, #472]	; (80022e8 <HAL_I2C_MasterRxCpltCallback+0x4c0>)
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	4618      	mov	r0, r3
 8002114:	f7fe fa18 	bl	8000548 <__aeabi_f2d>
 8002118:	4602      	mov	r2, r0
 800211a:	460b      	mov	r3, r1
 800211c:	ed9f 1b66 	vldr	d1, [pc, #408]	; 80022b8 <HAL_I2C_MasterRxCpltCallback+0x490>
 8002120:	ec43 2b10 	vmov	d0, r2, r3
 8002124:	f009 ffde 	bl	800c0e4 <pow>
 8002128:	ec53 2b10 	vmov	r2, r3, d0
 800212c:	4620      	mov	r0, r4
 800212e:	4629      	mov	r1, r5
 8002130:	f7fe f8ac 	bl	800028c <__adddf3>
 8002134:	4602      	mov	r2, r0
 8002136:	460b      	mov	r3, r1
 8002138:	4614      	mov	r4, r2
 800213a:	461d      	mov	r5, r3
 800213c:	4b6c      	ldr	r3, [pc, #432]	; (80022f0 <HAL_I2C_MasterRxCpltCallback+0x4c8>)
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	4618      	mov	r0, r3
 8002142:	f7fe fa01 	bl	8000548 <__aeabi_f2d>
 8002146:	4602      	mov	r2, r0
 8002148:	460b      	mov	r3, r1
 800214a:	ed9f 1b5b 	vldr	d1, [pc, #364]	; 80022b8 <HAL_I2C_MasterRxCpltCallback+0x490>
 800214e:	ec43 2b10 	vmov	d0, r2, r3
 8002152:	f009 ffc7 	bl	800c0e4 <pow>
 8002156:	ec53 2b10 	vmov	r2, r3, d0
 800215a:	4620      	mov	r0, r4
 800215c:	4629      	mov	r1, r5
 800215e:	f7fe f895 	bl	800028c <__adddf3>
 8002162:	4602      	mov	r2, r0
 8002164:	460b      	mov	r3, r1
 8002166:	ec43 2b17 	vmov	d7, r2, r3
 800216a:	eeb0 0a47 	vmov.f32	s0, s14
 800216e:	eef0 0a67 	vmov.f32	s1, s15
 8002172:	f00a f865 	bl	800c240 <sqrt>
 8002176:	ec53 2b10 	vmov	r2, r3, d0
 800217a:	4610      	mov	r0, r2
 800217c:	4619      	mov	r1, r3
 800217e:	f7fe fd13 	bl	8000ba8 <__aeabi_d2f>
 8002182:	4603      	mov	r3, r0
 8002184:	667b      	str	r3, [r7, #100]	; 0x64
		accel_vectors[accel_vector_index++] = raw_amp;
 8002186:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 800218a:	1c5a      	adds	r2, r3, #1
 800218c:	f8a7 2094 	strh.w	r2, [r7, #148]	; 0x94
 8002190:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002194:	009b      	lsls	r3, r3, #2
 8002196:	4413      	add	r3, r2
 8002198:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800219a:	601a      	str	r2, [r3, #0]
		accel_sum = accel_sum + raw_amp;
 800219c:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 80021a0:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 80021a4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80021a8:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
		sum_counter++;
 80021ac:	f897 309e 	ldrb.w	r3, [r7, #158]	; 0x9e
 80021b0:	3301      	adds	r3, #1
 80021b2:	f887 309e 	strb.w	r3, [r7, #158]	; 0x9e
		if (sum_counter == 10){
 80021b6:	f897 309e 	ldrb.w	r3, [r7, #158]	; 0x9e
 80021ba:	2b0a      	cmp	r3, #10
 80021bc:	d113      	bne.n	80021e6 <HAL_I2C_MasterRxCpltCallback+0x3be>
			temp_sums[sum_index++] = accel_sum;
 80021be:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 80021c2:	1c5a      	adds	r2, r3, #1
 80021c4:	f887 209f 	strb.w	r2, [r7, #159]	; 0x9f
 80021c8:	009b      	lsls	r3, r3, #2
 80021ca:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 80021ce:	4413      	add	r3, r2
 80021d0:	3ba0      	subs	r3, #160	; 0xa0
 80021d2:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80021d6:	601a      	str	r2, [r3, #0]
			sum_counter = 0;
 80021d8:	2300      	movs	r3, #0
 80021da:	f887 309e 	strb.w	r3, [r7, #158]	; 0x9e
			accel_sum = 0;
 80021de:	f04f 0300 	mov.w	r3, #0
 80021e2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
		}

		Gyro_X_RAW = (int16_t)(mpu_data[i+6] << 8 | mpu_data[i+6+1]);
 80021e6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80021ea:	3306      	adds	r3, #6
 80021ec:	4a36      	ldr	r2, [pc, #216]	; (80022c8 <HAL_I2C_MasterRxCpltCallback+0x4a0>)
 80021ee:	5cd3      	ldrb	r3, [r2, r3]
 80021f0:	021b      	lsls	r3, r3, #8
 80021f2:	b21a      	sxth	r2, r3
 80021f4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80021f8:	3307      	adds	r3, #7
 80021fa:	4933      	ldr	r1, [pc, #204]	; (80022c8 <HAL_I2C_MasterRxCpltCallback+0x4a0>)
 80021fc:	5ccb      	ldrb	r3, [r1, r3]
 80021fe:	b21b      	sxth	r3, r3
 8002200:	4313      	orrs	r3, r2
 8002202:	b21b      	sxth	r3, r3
 8002204:	ee07 3a90 	vmov	s15, r3
 8002208:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800220c:	4b39      	ldr	r3, [pc, #228]	; (80022f4 <HAL_I2C_MasterRxCpltCallback+0x4cc>)
 800220e:	edc3 7a00 	vstr	s15, [r3]
		Gyro_Y_RAW = (int16_t)(mpu_data[i+6+2] << 8 | mpu_data[i+6+3]);
 8002212:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002216:	3308      	adds	r3, #8
 8002218:	4a2b      	ldr	r2, [pc, #172]	; (80022c8 <HAL_I2C_MasterRxCpltCallback+0x4a0>)
 800221a:	5cd3      	ldrb	r3, [r2, r3]
 800221c:	021b      	lsls	r3, r3, #8
 800221e:	b21a      	sxth	r2, r3
 8002220:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002224:	3309      	adds	r3, #9
 8002226:	4928      	ldr	r1, [pc, #160]	; (80022c8 <HAL_I2C_MasterRxCpltCallback+0x4a0>)
 8002228:	5ccb      	ldrb	r3, [r1, r3]
 800222a:	b21b      	sxth	r3, r3
 800222c:	4313      	orrs	r3, r2
 800222e:	b21b      	sxth	r3, r3
 8002230:	ee07 3a90 	vmov	s15, r3
 8002234:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002238:	4b2f      	ldr	r3, [pc, #188]	; (80022f8 <HAL_I2C_MasterRxCpltCallback+0x4d0>)
 800223a:	edc3 7a00 	vstr	s15, [r3]
		Gyro_Z_RAW = (int16_t)(mpu_data[i+6+4] << 8 | mpu_data[i+6+5]);
 800223e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002242:	330a      	adds	r3, #10
 8002244:	4a20      	ldr	r2, [pc, #128]	; (80022c8 <HAL_I2C_MasterRxCpltCallback+0x4a0>)
 8002246:	5cd3      	ldrb	r3, [r2, r3]
 8002248:	021b      	lsls	r3, r3, #8
 800224a:	b21a      	sxth	r2, r3
 800224c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002250:	330b      	adds	r3, #11
 8002252:	491d      	ldr	r1, [pc, #116]	; (80022c8 <HAL_I2C_MasterRxCpltCallback+0x4a0>)
 8002254:	5ccb      	ldrb	r3, [r1, r3]
 8002256:	b21b      	sxth	r3, r3
 8002258:	4313      	orrs	r3, r2
 800225a:	b21b      	sxth	r3, r3
 800225c:	ee07 3a90 	vmov	s15, r3
 8002260:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002264:	4b25      	ldr	r3, [pc, #148]	; (80022fc <HAL_I2C_MasterRxCpltCallback+0x4d4>)
 8002266:	edc3 7a00 	vstr	s15, [r3]

		Gx = Gyro_X_RAW/131.0 + offset_gyroX;
 800226a:	4b22      	ldr	r3, [pc, #136]	; (80022f4 <HAL_I2C_MasterRxCpltCallback+0x4cc>)
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	4618      	mov	r0, r3
 8002270:	f7fe f96a 	bl	8000548 <__aeabi_f2d>
 8002274:	a312      	add	r3, pc, #72	; (adr r3, 80022c0 <HAL_I2C_MasterRxCpltCallback+0x498>)
 8002276:	e9d3 2300 	ldrd	r2, r3, [r3]
 800227a:	f7fe fae7 	bl	800084c <__aeabi_ddiv>
 800227e:	4602      	mov	r2, r0
 8002280:	460b      	mov	r3, r1
 8002282:	4614      	mov	r4, r2
 8002284:	461d      	mov	r5, r3
 8002286:	4b1e      	ldr	r3, [pc, #120]	; (8002300 <HAL_I2C_MasterRxCpltCallback+0x4d8>)
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	4618      	mov	r0, r3
 800228c:	f7fe f95c 	bl	8000548 <__aeabi_f2d>
 8002290:	4602      	mov	r2, r0
 8002292:	460b      	mov	r3, r1
 8002294:	4620      	mov	r0, r4
 8002296:	4629      	mov	r1, r5
 8002298:	f7fd fff8 	bl	800028c <__adddf3>
 800229c:	4602      	mov	r2, r0
 800229e:	460b      	mov	r3, r1
 80022a0:	4610      	mov	r0, r2
 80022a2:	4619      	mov	r1, r3
 80022a4:	f7fe fc80 	bl	8000ba8 <__aeabi_d2f>
 80022a8:	4603      	mov	r3, r0
 80022aa:	4a16      	ldr	r2, [pc, #88]	; (8002304 <HAL_I2C_MasterRxCpltCallback+0x4dc>)
 80022ac:	6013      	str	r3, [r2, #0]
		Gy = Gyro_Y_RAW/131.0 + offset_gyroY;
 80022ae:	4b12      	ldr	r3, [pc, #72]	; (80022f8 <HAL_I2C_MasterRxCpltCallback+0x4d0>)
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	e029      	b.n	8002308 <HAL_I2C_MasterRxCpltCallback+0x4e0>
 80022b4:	f3af 8000 	nop.w
 80022b8:	00000000 	.word	0x00000000
 80022bc:	40000000 	.word	0x40000000
 80022c0:	00000000 	.word	0x00000000
 80022c4:	40606000 	.word	0x40606000
 80022c8:	2000044c 	.word	0x2000044c
 80022cc:	2000023c 	.word	0x2000023c
 80022d0:	20000344 	.word	0x20000344
 80022d4:	20000394 	.word	0x20000394
 80022d8:	40d00000 	.word	0x40d00000
 80022dc:	2000000c 	.word	0x2000000c
 80022e0:	2000084c 	.word	0x2000084c
 80022e4:	20000010 	.word	0x20000010
 80022e8:	20000390 	.word	0x20000390
 80022ec:	20000014 	.word	0x20000014
 80022f0:	200008b0 	.word	0x200008b0
 80022f4:	20000320 	.word	0x20000320
 80022f8:	20000940 	.word	0x20000940
 80022fc:	20000220 	.word	0x20000220
 8002300:	20000000 	.word	0x20000000
 8002304:	20000238 	.word	0x20000238
 8002308:	4618      	mov	r0, r3
 800230a:	f7fe f91d 	bl	8000548 <__aeabi_f2d>
 800230e:	a36c      	add	r3, pc, #432	; (adr r3, 80024c0 <HAL_I2C_MasterRxCpltCallback+0x698>)
 8002310:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002314:	f7fe fa9a 	bl	800084c <__aeabi_ddiv>
 8002318:	4602      	mov	r2, r0
 800231a:	460b      	mov	r3, r1
 800231c:	4614      	mov	r4, r2
 800231e:	461d      	mov	r5, r3
 8002320:	4b6b      	ldr	r3, [pc, #428]	; (80024d0 <HAL_I2C_MasterRxCpltCallback+0x6a8>)
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	4618      	mov	r0, r3
 8002326:	f7fe f90f 	bl	8000548 <__aeabi_f2d>
 800232a:	4602      	mov	r2, r0
 800232c:	460b      	mov	r3, r1
 800232e:	4620      	mov	r0, r4
 8002330:	4629      	mov	r1, r5
 8002332:	f7fd ffab 	bl	800028c <__adddf3>
 8002336:	4602      	mov	r2, r0
 8002338:	460b      	mov	r3, r1
 800233a:	4610      	mov	r0, r2
 800233c:	4619      	mov	r1, r3
 800233e:	f7fe fc33 	bl	8000ba8 <__aeabi_d2f>
 8002342:	4603      	mov	r3, r0
 8002344:	4a63      	ldr	r2, [pc, #396]	; (80024d4 <HAL_I2C_MasterRxCpltCallback+0x6ac>)
 8002346:	6013      	str	r3, [r2, #0]
		Gz = Gyro_Z_RAW/131.0 + offset_gyroZ;
 8002348:	4b63      	ldr	r3, [pc, #396]	; (80024d8 <HAL_I2C_MasterRxCpltCallback+0x6b0>)
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	4618      	mov	r0, r3
 800234e:	f7fe f8fb 	bl	8000548 <__aeabi_f2d>
 8002352:	a35b      	add	r3, pc, #364	; (adr r3, 80024c0 <HAL_I2C_MasterRxCpltCallback+0x698>)
 8002354:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002358:	f7fe fa78 	bl	800084c <__aeabi_ddiv>
 800235c:	4602      	mov	r2, r0
 800235e:	460b      	mov	r3, r1
 8002360:	4614      	mov	r4, r2
 8002362:	461d      	mov	r5, r3
 8002364:	4b5d      	ldr	r3, [pc, #372]	; (80024dc <HAL_I2C_MasterRxCpltCallback+0x6b4>)
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	4618      	mov	r0, r3
 800236a:	f7fe f8ed 	bl	8000548 <__aeabi_f2d>
 800236e:	4602      	mov	r2, r0
 8002370:	460b      	mov	r3, r1
 8002372:	4620      	mov	r0, r4
 8002374:	4629      	mov	r1, r5
 8002376:	f7fd ff89 	bl	800028c <__adddf3>
 800237a:	4602      	mov	r2, r0
 800237c:	460b      	mov	r3, r1
 800237e:	4610      	mov	r0, r2
 8002380:	4619      	mov	r1, r3
 8002382:	f7fe fc11 	bl	8000ba8 <__aeabi_d2f>
 8002386:	4603      	mov	r3, r0
 8002388:	4a55      	ldr	r2, [pc, #340]	; (80024e0 <HAL_I2C_MasterRxCpltCallback+0x6b8>)
 800238a:	6013      	str	r3, [r2, #0]

		float gyro_vector = sqrt(pow(Gx, 2)+pow(Gy, 2)+pow(Gz, 2));
 800238c:	4b55      	ldr	r3, [pc, #340]	; (80024e4 <HAL_I2C_MasterRxCpltCallback+0x6bc>)
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	4618      	mov	r0, r3
 8002392:	f7fe f8d9 	bl	8000548 <__aeabi_f2d>
 8002396:	4602      	mov	r2, r0
 8002398:	460b      	mov	r3, r1
 800239a:	ed9f 1b4b 	vldr	d1, [pc, #300]	; 80024c8 <HAL_I2C_MasterRxCpltCallback+0x6a0>
 800239e:	ec43 2b10 	vmov	d0, r2, r3
 80023a2:	f009 fe9f 	bl	800c0e4 <pow>
 80023a6:	ec55 4b10 	vmov	r4, r5, d0
 80023aa:	4b4a      	ldr	r3, [pc, #296]	; (80024d4 <HAL_I2C_MasterRxCpltCallback+0x6ac>)
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	4618      	mov	r0, r3
 80023b0:	f7fe f8ca 	bl	8000548 <__aeabi_f2d>
 80023b4:	4602      	mov	r2, r0
 80023b6:	460b      	mov	r3, r1
 80023b8:	ed9f 1b43 	vldr	d1, [pc, #268]	; 80024c8 <HAL_I2C_MasterRxCpltCallback+0x6a0>
 80023bc:	ec43 2b10 	vmov	d0, r2, r3
 80023c0:	f009 fe90 	bl	800c0e4 <pow>
 80023c4:	ec53 2b10 	vmov	r2, r3, d0
 80023c8:	4620      	mov	r0, r4
 80023ca:	4629      	mov	r1, r5
 80023cc:	f7fd ff5e 	bl	800028c <__adddf3>
 80023d0:	4602      	mov	r2, r0
 80023d2:	460b      	mov	r3, r1
 80023d4:	4614      	mov	r4, r2
 80023d6:	461d      	mov	r5, r3
 80023d8:	4b41      	ldr	r3, [pc, #260]	; (80024e0 <HAL_I2C_MasterRxCpltCallback+0x6b8>)
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	4618      	mov	r0, r3
 80023de:	f7fe f8b3 	bl	8000548 <__aeabi_f2d>
 80023e2:	4602      	mov	r2, r0
 80023e4:	460b      	mov	r3, r1
 80023e6:	ed9f 1b38 	vldr	d1, [pc, #224]	; 80024c8 <HAL_I2C_MasterRxCpltCallback+0x6a0>
 80023ea:	ec43 2b10 	vmov	d0, r2, r3
 80023ee:	f009 fe79 	bl	800c0e4 <pow>
 80023f2:	ec53 2b10 	vmov	r2, r3, d0
 80023f6:	4620      	mov	r0, r4
 80023f8:	4629      	mov	r1, r5
 80023fa:	f7fd ff47 	bl	800028c <__adddf3>
 80023fe:	4602      	mov	r2, r0
 8002400:	460b      	mov	r3, r1
 8002402:	ec43 2b17 	vmov	d7, r2, r3
 8002406:	eeb0 0a47 	vmov.f32	s0, s14
 800240a:	eef0 0a67 	vmov.f32	s1, s15
 800240e:	f009 ff17 	bl	800c240 <sqrt>
 8002412:	ec53 2b10 	vmov	r2, r3, d0
 8002416:	4610      	mov	r0, r2
 8002418:	4619      	mov	r1, r3
 800241a:	f7fe fbc5 	bl	8000ba8 <__aeabi_d2f>
 800241e:	4603      	mov	r3, r0
 8002420:	663b      	str	r3, [r7, #96]	; 0x60
		gyro_vectors[gyro_vector_index++] = gyro_vector;
 8002422:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8002426:	1c5a      	adds	r2, r3, #1
 8002428:	f8a7 2096 	strh.w	r2, [r7, #150]	; 0x96
 800242c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800242e:	009b      	lsls	r3, r3, #2
 8002430:	4413      	add	r3, r2
 8002432:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002434:	601a      	str	r2, [r3, #0]
	for(int i=0; i<mpu_index; i+=12){
 8002436:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800243a:	330c      	adds	r3, #12
 800243c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002440:	4b29      	ldr	r3, [pc, #164]	; (80024e8 <HAL_I2C_MasterRxCpltCallback+0x6c0>)
 8002442:	881b      	ldrh	r3, [r3, #0]
 8002444:	461a      	mov	r2, r3
 8002446:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800244a:	4293      	cmp	r3, r2
 800244c:	f6ff ada8 	blt.w	8001fa0 <HAL_I2C_MasterRxCpltCallback+0x178>

		//DEBUG_PRINT(("burst #%d: Accelerazione lineare asse x: %f g, y: %f g, z: %f g\r\n", i/12, Ax, Ay, Az));
		//DEBUG_PRINT(("Gyro asse x: %f °/s, y: %f °/s, z: %f °/s \tgyro_vector: %f\r\n", Gx, Gy, Gz, gyro_vector));
	}

	for(int i=0; i<SLIDING_WINDOWS; i++){
 8002450:	2300      	movs	r3, #0
 8002452:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8002456:	e026      	b.n	80024a6 <HAL_I2C_MasterRxCpltCallback+0x67e>
		means[i]=(temp_sums[i]+temp_sums[i+1])/20;
 8002458:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800245c:	009b      	lsls	r3, r3, #2
 800245e:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8002462:	4413      	add	r3, r2
 8002464:	3ba0      	subs	r3, #160	; 0xa0
 8002466:	ed93 7a00 	vldr	s14, [r3]
 800246a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800246e:	3301      	adds	r3, #1
 8002470:	009b      	lsls	r3, r3, #2
 8002472:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8002476:	4413      	add	r3, r2
 8002478:	3ba0      	subs	r3, #160	; 0xa0
 800247a:	edd3 7a00 	vldr	s15, [r3]
 800247e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002482:	eef3 6a04 	vmov.f32	s13, #52	; 0x41a00000  20.0
 8002486:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800248a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800248e:	009b      	lsls	r3, r3, #2
 8002490:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8002494:	4413      	add	r3, r2
 8002496:	3b68      	subs	r3, #104	; 0x68
 8002498:	edc3 7a00 	vstr	s15, [r3]
	for(int i=0; i<SLIDING_WINDOWS; i++){
 800249c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80024a0:	3301      	adds	r3, #1
 80024a2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80024a6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80024aa:	2b06      	cmp	r3, #6
 80024ac:	ddd4      	ble.n	8002458 <HAL_I2C_MasterRxCpltCallback+0x630>
	}

	for (int i = 0; i < 7; ++i) {
 80024ae:	2300      	movs	r3, #0
 80024b0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80024b4:	e0d6      	b.n	8002664 <HAL_I2C_MasterRxCpltCallback+0x83c>
		for(int j=0; j<20; j++){
 80024b6:	2300      	movs	r3, #0
 80024b8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80024bc:	e0c8      	b.n	8002650 <HAL_I2C_MasterRxCpltCallback+0x828>
 80024be:	bf00      	nop
 80024c0:	00000000 	.word	0x00000000
 80024c4:	40606000 	.word	0x40606000
 80024c8:	00000000 	.word	0x00000000
 80024cc:	40000000 	.word	0x40000000
 80024d0:	20000004 	.word	0x20000004
 80024d4:	20000398 	.word	0x20000398
 80024d8:	20000220 	.word	0x20000220
 80024dc:	20000008 	.word	0x20000008
 80024e0:	2000021c 	.word	0x2000021c
 80024e4:	20000238 	.word	0x20000238
 80024e8:	20000224 	.word	0x20000224
			if(j<10 && i<6){
 80024ec:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80024f0:	2b09      	cmp	r3, #9
 80024f2:	dc16      	bgt.n	8002522 <HAL_I2C_MasterRxCpltCallback+0x6fa>
 80024f4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80024f8:	2b05      	cmp	r3, #5
 80024fa:	dc12      	bgt.n	8002522 <HAL_I2C_MasterRxCpltCallback+0x6fa>
				fall_counter_increment(gyro_vectors[10*i+j]);
 80024fc:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8002500:	4613      	mov	r3, r2
 8002502:	009b      	lsls	r3, r3, #2
 8002504:	4413      	add	r3, r2
 8002506:	005b      	lsls	r3, r3, #1
 8002508:	461a      	mov	r2, r3
 800250a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800250e:	4413      	add	r3, r2
 8002510:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8002512:	009b      	lsls	r3, r3, #2
 8002514:	4413      	add	r3, r2
 8002516:	edd3 7a00 	vldr	s15, [r3]
 800251a:	eeb0 0a67 	vmov.f32	s0, s15
 800251e:	f7ff fc53 	bl	8001dc8 <fall_counter_increment>
			}
			if(i==6){
 8002522:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002526:	2b06      	cmp	r3, #6
 8002528:	d112      	bne.n	8002550 <HAL_I2C_MasterRxCpltCallback+0x728>
				fall_counter_increment(gyro_vectors[10*i+j]);
 800252a:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800252e:	4613      	mov	r3, r2
 8002530:	009b      	lsls	r3, r3, #2
 8002532:	4413      	add	r3, r2
 8002534:	005b      	lsls	r3, r3, #1
 8002536:	461a      	mov	r2, r3
 8002538:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800253c:	4413      	add	r3, r2
 800253e:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8002540:	009b      	lsls	r3, r3, #2
 8002542:	4413      	add	r3, r2
 8002544:	edd3 7a00 	vldr	s15, [r3]
 8002548:	eeb0 0a67 	vmov.f32	s0, s15
 800254c:	f7ff fc3c 	bl	8001dc8 <fall_counter_increment>
			}
			if(check_fall_counter > 60) {
 8002550:	4b69      	ldr	r3, [pc, #420]	; (80026f8 <HAL_I2C_MasterRxCpltCallback+0x8d0>)
 8002552:	781b      	ldrb	r3, [r3, #0]
 8002554:	2b3c      	cmp	r3, #60	; 0x3c
 8002556:	d909      	bls.n	800256c <HAL_I2C_MasterRxCpltCallback+0x744>
				fall_detected=1;
 8002558:	4b68      	ldr	r3, [pc, #416]	; (80026fc <HAL_I2C_MasterRxCpltCallback+0x8d4>)
 800255a:	2201      	movs	r2, #1
 800255c:	701a      	strb	r2, [r3, #0]
				check_fall_counter=check_fall=0;
 800255e:	4b68      	ldr	r3, [pc, #416]	; (8002700 <HAL_I2C_MasterRxCpltCallback+0x8d8>)
 8002560:	2200      	movs	r2, #0
 8002562:	701a      	strb	r2, [r3, #0]
 8002564:	4b66      	ldr	r3, [pc, #408]	; (8002700 <HAL_I2C_MasterRxCpltCallback+0x8d8>)
 8002566:	781a      	ldrb	r2, [r3, #0]
 8002568:	4b63      	ldr	r3, [pc, #396]	; (80026f8 <HAL_I2C_MasterRxCpltCallback+0x8d0>)
 800256a:	701a      	strb	r2, [r3, #0]
			}
			float threshold = BASE_THRESHOLD - gyro_vectors[10*i+j]/250.0;
 800256c:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8002570:	4613      	mov	r3, r2
 8002572:	009b      	lsls	r3, r3, #2
 8002574:	4413      	add	r3, r2
 8002576:	005b      	lsls	r3, r3, #1
 8002578:	461a      	mov	r2, r3
 800257a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800257e:	4413      	add	r3, r2
 8002580:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8002582:	009b      	lsls	r3, r3, #2
 8002584:	4413      	add	r3, r2
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	4618      	mov	r0, r3
 800258a:	f7fd ffdd 	bl	8000548 <__aeabi_f2d>
 800258e:	f04f 0200 	mov.w	r2, #0
 8002592:	4b5c      	ldr	r3, [pc, #368]	; (8002704 <HAL_I2C_MasterRxCpltCallback+0x8dc>)
 8002594:	f7fe f95a 	bl	800084c <__aeabi_ddiv>
 8002598:	4602      	mov	r2, r0
 800259a:	460b      	mov	r3, r1
 800259c:	f04f 0000 	mov.w	r0, #0
 80025a0:	4959      	ldr	r1, [pc, #356]	; (8002708 <HAL_I2C_MasterRxCpltCallback+0x8e0>)
 80025a2:	f7fd fe71 	bl	8000288 <__aeabi_dsub>
 80025a6:	4602      	mov	r2, r0
 80025a8:	460b      	mov	r3, r1
 80025aa:	4610      	mov	r0, r2
 80025ac:	4619      	mov	r1, r3
 80025ae:	f7fe fafb 	bl	8000ba8 <__aeabi_d2f>
 80025b2:	4603      	mov	r3, r0
 80025b4:	66fb      	str	r3, [r7, #108]	; 0x6c
			float difference = abs(accel_vectors[10*i+j] - means[i]);
 80025b6:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 80025ba:	4613      	mov	r3, r2
 80025bc:	009b      	lsls	r3, r3, #2
 80025be:	4413      	add	r3, r2
 80025c0:	005b      	lsls	r3, r3, #1
 80025c2:	461a      	mov	r2, r3
 80025c4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80025c8:	4413      	add	r3, r2
 80025ca:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80025ce:	009b      	lsls	r3, r3, #2
 80025d0:	4413      	add	r3, r2
 80025d2:	ed93 7a00 	vldr	s14, [r3]
 80025d6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80025da:	009b      	lsls	r3, r3, #2
 80025dc:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 80025e0:	4413      	add	r3, r2
 80025e2:	3b68      	subs	r3, #104	; 0x68
 80025e4:	edd3 7a00 	vldr	s15, [r3]
 80025e8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80025ec:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80025f0:	ee17 3a90 	vmov	r3, s15
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	bfb8      	it	lt
 80025f8:	425b      	neglt	r3, r3
 80025fa:	ee07 3a90 	vmov	s15, r3
 80025fe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002602:	edc7 7a1a 	vstr	s15, [r7, #104]	; 0x68
			if(difference > threshold) {
 8002606:	ed97 7a1a 	vldr	s14, [r7, #104]	; 0x68
 800260a:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 800260e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002612:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002616:	dd16      	ble.n	8002646 <HAL_I2C_MasterRxCpltCallback+0x81e>
				DEBUG_PRINT(("punto brutto alla misurazione nr. %d\r\n", 10*i+j));
 8002618:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800261c:	4613      	mov	r3, r2
 800261e:	009b      	lsls	r3, r3, #2
 8002620:	4413      	add	r3, r2
 8002622:	005b      	lsls	r3, r3, #1
 8002624:	461a      	mov	r2, r3
 8002626:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800262a:	4413      	add	r3, r2
 800262c:	4619      	mov	r1, r3
 800262e:	4837      	ldr	r0, [pc, #220]	; (800270c <HAL_I2C_MasterRxCpltCallback+0x8e4>)
 8002630:	f007 f9c4 	bl	80099bc <iprintf>
				bad_quality_road_counter++;
 8002634:	4b36      	ldr	r3, [pc, #216]	; (8002710 <HAL_I2C_MasterRxCpltCallback+0x8e8>)
 8002636:	881b      	ldrh	r3, [r3, #0]
 8002638:	3301      	adds	r3, #1
 800263a:	b29a      	uxth	r2, r3
 800263c:	4b34      	ldr	r3, [pc, #208]	; (8002710 <HAL_I2C_MasterRxCpltCallback+0x8e8>)
 800263e:	801a      	strh	r2, [r3, #0]
				check_fall=1;
 8002640:	4b2f      	ldr	r3, [pc, #188]	; (8002700 <HAL_I2C_MasterRxCpltCallback+0x8d8>)
 8002642:	2201      	movs	r2, #1
 8002644:	701a      	strb	r2, [r3, #0]
		for(int j=0; j<20; j++){
 8002646:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800264a:	3301      	adds	r3, #1
 800264c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8002650:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002654:	2b13      	cmp	r3, #19
 8002656:	f77f af49 	ble.w	80024ec <HAL_I2C_MasterRxCpltCallback+0x6c4>
	for (int i = 0; i < 7; ++i) {
 800265a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800265e:	3301      	adds	r3, #1
 8002660:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002664:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002668:	2b06      	cmp	r3, #6
 800266a:	f77f af24 	ble.w	80024b6 <HAL_I2C_MasterRxCpltCallback+0x68e>
			}
		}
	}
	cycles = DWT->CYCCNT;
 800266e:	4b29      	ldr	r3, [pc, #164]	; (8002714 <HAL_I2C_MasterRxCpltCallback+0x8ec>)
 8002670:	685b      	ldr	r3, [r3, #4]
 8002672:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	cycles--;
 8002676:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800267a:	3b01      	subs	r3, #1
 800267c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

	timeCallback = ((double)cycles/HAL_RCC_GetHCLKFreq())*10e+3;
 8002680:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 8002684:	f7fd ff3e 	bl	8000504 <__aeabi_ui2d>
 8002688:	4604      	mov	r4, r0
 800268a:	460d      	mov	r5, r1
 800268c:	f005 fcc6 	bl	800801c <HAL_RCC_GetHCLKFreq>
 8002690:	4603      	mov	r3, r0
 8002692:	4618      	mov	r0, r3
 8002694:	f7fd ff36 	bl	8000504 <__aeabi_ui2d>
 8002698:	4602      	mov	r2, r0
 800269a:	460b      	mov	r3, r1
 800269c:	4620      	mov	r0, r4
 800269e:	4629      	mov	r1, r5
 80026a0:	f7fe f8d4 	bl	800084c <__aeabi_ddiv>
 80026a4:	4602      	mov	r2, r0
 80026a6:	460b      	mov	r3, r1
 80026a8:	4610      	mov	r0, r2
 80026aa:	4619      	mov	r1, r3
 80026ac:	a310      	add	r3, pc, #64	; (adr r3, 80026f0 <HAL_I2C_MasterRxCpltCallback+0x8c8>)
 80026ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026b2:	f7fd ffa1 	bl	80005f8 <__aeabi_dmul>
 80026b6:	4602      	mov	r2, r0
 80026b8:	460b      	mov	r3, r1
 80026ba:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70

	printf("TIME (HAL_I2C_MasterRxCpltCallback) =  %.2lf ms\n\r", timeCallback);
 80026be:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80026c2:	4815      	ldr	r0, [pc, #84]	; (8002718 <HAL_I2C_MasterRxCpltCallback+0x8f0>)
 80026c4:	f007 f97a 	bl	80099bc <iprintf>
	DEBUG_PRINT(("calcolati  %d   punti brutti\n\r", bad_quality_road_counter));
 80026c8:	4b11      	ldr	r3, [pc, #68]	; (8002710 <HAL_I2C_MasterRxCpltCallback+0x8e8>)
 80026ca:	881b      	ldrh	r3, [r3, #0]
 80026cc:	4619      	mov	r1, r3
 80026ce:	4813      	ldr	r0, [pc, #76]	; (800271c <HAL_I2C_MasterRxCpltCallback+0x8f4>)
 80026d0:	f007 f974 	bl	80099bc <iprintf>
	DEBUG_PRINT(("fall_detected: %d\r\n", fall_detected));
 80026d4:	4b09      	ldr	r3, [pc, #36]	; (80026fc <HAL_I2C_MasterRxCpltCallback+0x8d4>)
 80026d6:	781b      	ldrb	r3, [r3, #0]
 80026d8:	4619      	mov	r1, r3
 80026da:	4811      	ldr	r0, [pc, #68]	; (8002720 <HAL_I2C_MasterRxCpltCallback+0x8f8>)
 80026dc:	f007 f96e 	bl	80099bc <iprintf>
 80026e0:	46b5      	mov	sp, r6

}
 80026e2:	bf00      	nop
 80026e4:	37ac      	adds	r7, #172	; 0xac
 80026e6:	46bd      	mov	sp, r7
 80026e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80026ea:	bf00      	nop
 80026ec:	f3af 8000 	nop.w
 80026f0:	00000000 	.word	0x00000000
 80026f4:	40c38800 	.word	0x40c38800
 80026f8:	20000228 	.word	0x20000228
 80026fc:	20000226 	.word	0x20000226
 8002700:	20000227 	.word	0x20000227
 8002704:	406f4000 	.word	0x406f4000
 8002708:	3ff00000 	.word	0x3ff00000
 800270c:	0800d24c 	.word	0x0800d24c
 8002710:	2000022a 	.word	0x2000022a
 8002714:	e0001000 	.word	0xe0001000
 8002718:	0800d274 	.word	0x0800d274
 800271c:	0800d2a8 	.word	0x0800d2a8
 8002720:	0800d2c8 	.word	0x0800d2c8

08002724 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002724:	b480      	push	{r7}
 8002726:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002728:	b672      	cpsid	i
}
 800272a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800272c:	e7fe      	b.n	800272c <Error_Handler+0x8>
	...

08002730 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002730:	b580      	push	{r7, lr}
 8002732:	b082      	sub	sp, #8
 8002734:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002736:	2300      	movs	r3, #0
 8002738:	607b      	str	r3, [r7, #4]
 800273a:	4b10      	ldr	r3, [pc, #64]	; (800277c <HAL_MspInit+0x4c>)
 800273c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800273e:	4a0f      	ldr	r2, [pc, #60]	; (800277c <HAL_MspInit+0x4c>)
 8002740:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002744:	6453      	str	r3, [r2, #68]	; 0x44
 8002746:	4b0d      	ldr	r3, [pc, #52]	; (800277c <HAL_MspInit+0x4c>)
 8002748:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800274a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800274e:	607b      	str	r3, [r7, #4]
 8002750:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002752:	2300      	movs	r3, #0
 8002754:	603b      	str	r3, [r7, #0]
 8002756:	4b09      	ldr	r3, [pc, #36]	; (800277c <HAL_MspInit+0x4c>)
 8002758:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800275a:	4a08      	ldr	r2, [pc, #32]	; (800277c <HAL_MspInit+0x4c>)
 800275c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002760:	6413      	str	r3, [r2, #64]	; 0x40
 8002762:	4b06      	ldr	r3, [pc, #24]	; (800277c <HAL_MspInit+0x4c>)
 8002764:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002766:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800276a:	603b      	str	r3, [r7, #0]
 800276c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_2);
 800276e:	2005      	movs	r0, #5
 8002770:	f001 f9c8 	bl	8003b04 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002774:	bf00      	nop
 8002776:	3708      	adds	r7, #8
 8002778:	46bd      	mov	sp, r7
 800277a:	bd80      	pop	{r7, pc}
 800277c:	40023800 	.word	0x40023800

08002780 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002780:	b580      	push	{r7, lr}
 8002782:	b08a      	sub	sp, #40	; 0x28
 8002784:	af00      	add	r7, sp, #0
 8002786:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002788:	f107 0314 	add.w	r3, r7, #20
 800278c:	2200      	movs	r2, #0
 800278e:	601a      	str	r2, [r3, #0]
 8002790:	605a      	str	r2, [r3, #4]
 8002792:	609a      	str	r2, [r3, #8]
 8002794:	60da      	str	r2, [r3, #12]
 8002796:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	4a1b      	ldr	r2, [pc, #108]	; (800280c <HAL_ADC_MspInit+0x8c>)
 800279e:	4293      	cmp	r3, r2
 80027a0:	d12f      	bne.n	8002802 <HAL_ADC_MspInit+0x82>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80027a2:	2300      	movs	r3, #0
 80027a4:	613b      	str	r3, [r7, #16]
 80027a6:	4b1a      	ldr	r3, [pc, #104]	; (8002810 <HAL_ADC_MspInit+0x90>)
 80027a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027aa:	4a19      	ldr	r2, [pc, #100]	; (8002810 <HAL_ADC_MspInit+0x90>)
 80027ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027b0:	6453      	str	r3, [r2, #68]	; 0x44
 80027b2:	4b17      	ldr	r3, [pc, #92]	; (8002810 <HAL_ADC_MspInit+0x90>)
 80027b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027ba:	613b      	str	r3, [r7, #16]
 80027bc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80027be:	2300      	movs	r3, #0
 80027c0:	60fb      	str	r3, [r7, #12]
 80027c2:	4b13      	ldr	r3, [pc, #76]	; (8002810 <HAL_ADC_MspInit+0x90>)
 80027c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027c6:	4a12      	ldr	r2, [pc, #72]	; (8002810 <HAL_ADC_MspInit+0x90>)
 80027c8:	f043 0301 	orr.w	r3, r3, #1
 80027cc:	6313      	str	r3, [r2, #48]	; 0x30
 80027ce:	4b10      	ldr	r3, [pc, #64]	; (8002810 <HAL_ADC_MspInit+0x90>)
 80027d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027d2:	f003 0301 	and.w	r3, r3, #1
 80027d6:	60fb      	str	r3, [r7, #12]
 80027d8:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80027da:	2301      	movs	r3, #1
 80027dc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80027de:	2303      	movs	r3, #3
 80027e0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027e2:	2300      	movs	r3, #0
 80027e4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027e6:	f107 0314 	add.w	r3, r7, #20
 80027ea:	4619      	mov	r1, r3
 80027ec:	4809      	ldr	r0, [pc, #36]	; (8002814 <HAL_ADC_MspInit+0x94>)
 80027ee:	f001 fd93 	bl	8004318 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 1, 0);
 80027f2:	2200      	movs	r2, #0
 80027f4:	2101      	movs	r1, #1
 80027f6:	2012      	movs	r0, #18
 80027f8:	f001 f98f 	bl	8003b1a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 80027fc:	2012      	movs	r0, #18
 80027fe:	f001 f9a8 	bl	8003b52 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002802:	bf00      	nop
 8002804:	3728      	adds	r7, #40	; 0x28
 8002806:	46bd      	mov	sp, r7
 8002808:	bd80      	pop	{r7, pc}
 800280a:	bf00      	nop
 800280c:	40012000 	.word	0x40012000
 8002810:	40023800 	.word	0x40023800
 8002814:	40020000 	.word	0x40020000

08002818 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002818:	b580      	push	{r7, lr}
 800281a:	b08a      	sub	sp, #40	; 0x28
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002820:	f107 0314 	add.w	r3, r7, #20
 8002824:	2200      	movs	r2, #0
 8002826:	601a      	str	r2, [r3, #0]
 8002828:	605a      	str	r2, [r3, #4]
 800282a:	609a      	str	r2, [r3, #8]
 800282c:	60da      	str	r2, [r3, #12]
 800282e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	4a38      	ldr	r2, [pc, #224]	; (8002918 <HAL_I2C_MspInit+0x100>)
 8002836:	4293      	cmp	r3, r2
 8002838:	d169      	bne.n	800290e <HAL_I2C_MspInit+0xf6>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800283a:	2300      	movs	r3, #0
 800283c:	613b      	str	r3, [r7, #16]
 800283e:	4b37      	ldr	r3, [pc, #220]	; (800291c <HAL_I2C_MspInit+0x104>)
 8002840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002842:	4a36      	ldr	r2, [pc, #216]	; (800291c <HAL_I2C_MspInit+0x104>)
 8002844:	f043 0302 	orr.w	r3, r3, #2
 8002848:	6313      	str	r3, [r2, #48]	; 0x30
 800284a:	4b34      	ldr	r3, [pc, #208]	; (800291c <HAL_I2C_MspInit+0x104>)
 800284c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800284e:	f003 0302 	and.w	r3, r3, #2
 8002852:	613b      	str	r3, [r7, #16]
 8002854:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = MPU6050_I2C1_SCL_Pin|MPU6050_I2C1_SDA_Pin;
 8002856:	23c0      	movs	r3, #192	; 0xc0
 8002858:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800285a:	2312      	movs	r3, #18
 800285c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800285e:	2300      	movs	r3, #0
 8002860:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002862:	2303      	movs	r3, #3
 8002864:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002866:	2304      	movs	r3, #4
 8002868:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800286a:	f107 0314 	add.w	r3, r7, #20
 800286e:	4619      	mov	r1, r3
 8002870:	482b      	ldr	r0, [pc, #172]	; (8002920 <HAL_I2C_MspInit+0x108>)
 8002872:	f001 fd51 	bl	8004318 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002876:	2300      	movs	r3, #0
 8002878:	60fb      	str	r3, [r7, #12]
 800287a:	4b28      	ldr	r3, [pc, #160]	; (800291c <HAL_I2C_MspInit+0x104>)
 800287c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800287e:	4a27      	ldr	r2, [pc, #156]	; (800291c <HAL_I2C_MspInit+0x104>)
 8002880:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002884:	6413      	str	r3, [r2, #64]	; 0x40
 8002886:	4b25      	ldr	r3, [pc, #148]	; (800291c <HAL_I2C_MspInit+0x104>)
 8002888:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800288a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800288e:	60fb      	str	r3, [r7, #12]
 8002890:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream0;
 8002892:	4b24      	ldr	r3, [pc, #144]	; (8002924 <HAL_I2C_MspInit+0x10c>)
 8002894:	4a24      	ldr	r2, [pc, #144]	; (8002928 <HAL_I2C_MspInit+0x110>)
 8002896:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 8002898:	4b22      	ldr	r3, [pc, #136]	; (8002924 <HAL_I2C_MspInit+0x10c>)
 800289a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800289e:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80028a0:	4b20      	ldr	r3, [pc, #128]	; (8002924 <HAL_I2C_MspInit+0x10c>)
 80028a2:	2200      	movs	r2, #0
 80028a4:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80028a6:	4b1f      	ldr	r3, [pc, #124]	; (8002924 <HAL_I2C_MspInit+0x10c>)
 80028a8:	2200      	movs	r2, #0
 80028aa:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80028ac:	4b1d      	ldr	r3, [pc, #116]	; (8002924 <HAL_I2C_MspInit+0x10c>)
 80028ae:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80028b2:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80028b4:	4b1b      	ldr	r3, [pc, #108]	; (8002924 <HAL_I2C_MspInit+0x10c>)
 80028b6:	2200      	movs	r2, #0
 80028b8:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80028ba:	4b1a      	ldr	r3, [pc, #104]	; (8002924 <HAL_I2C_MspInit+0x10c>)
 80028bc:	2200      	movs	r2, #0
 80028be:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 80028c0:	4b18      	ldr	r3, [pc, #96]	; (8002924 <HAL_I2C_MspInit+0x10c>)
 80028c2:	2200      	movs	r2, #0
 80028c4:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80028c6:	4b17      	ldr	r3, [pc, #92]	; (8002924 <HAL_I2C_MspInit+0x10c>)
 80028c8:	2200      	movs	r2, #0
 80028ca:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80028cc:	4b15      	ldr	r3, [pc, #84]	; (8002924 <HAL_I2C_MspInit+0x10c>)
 80028ce:	2200      	movs	r2, #0
 80028d0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 80028d2:	4814      	ldr	r0, [pc, #80]	; (8002924 <HAL_I2C_MspInit+0x10c>)
 80028d4:	f001 f974 	bl	8003bc0 <HAL_DMA_Init>
 80028d8:	4603      	mov	r3, r0
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d001      	beq.n	80028e2 <HAL_I2C_MspInit+0xca>
    {
      Error_Handler();
 80028de:	f7ff ff21 	bl	8002724 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	4a0f      	ldr	r2, [pc, #60]	; (8002924 <HAL_I2C_MspInit+0x10c>)
 80028e6:	639a      	str	r2, [r3, #56]	; 0x38
 80028e8:	4a0e      	ldr	r2, [pc, #56]	; (8002924 <HAL_I2C_MspInit+0x10c>)
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 1, 0);
 80028ee:	2200      	movs	r2, #0
 80028f0:	2101      	movs	r1, #1
 80028f2:	201f      	movs	r0, #31
 80028f4:	f001 f911 	bl	8003b1a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80028f8:	201f      	movs	r0, #31
 80028fa:	f001 f92a 	bl	8003b52 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 1, 0);
 80028fe:	2200      	movs	r2, #0
 8002900:	2101      	movs	r1, #1
 8002902:	2020      	movs	r0, #32
 8002904:	f001 f909 	bl	8003b1a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8002908:	2020      	movs	r0, #32
 800290a:	f001 f922 	bl	8003b52 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800290e:	bf00      	nop
 8002910:	3728      	adds	r7, #40	; 0x28
 8002912:	46bd      	mov	sp, r7
 8002914:	bd80      	pop	{r7, pc}
 8002916:	bf00      	nop
 8002918:	40005400 	.word	0x40005400
 800291c:	40023800 	.word	0x40023800
 8002920:	40020400 	.word	0x40020400
 8002924:	20000850 	.word	0x20000850
 8002928:	40026010 	.word	0x40026010

0800292c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800292c:	b580      	push	{r7, lr}
 800292e:	b086      	sub	sp, #24
 8002930:	af00      	add	r7, sp, #0
 8002932:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800293c:	d116      	bne.n	800296c <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800293e:	2300      	movs	r3, #0
 8002940:	617b      	str	r3, [r7, #20]
 8002942:	4b24      	ldr	r3, [pc, #144]	; (80029d4 <HAL_TIM_Base_MspInit+0xa8>)
 8002944:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002946:	4a23      	ldr	r2, [pc, #140]	; (80029d4 <HAL_TIM_Base_MspInit+0xa8>)
 8002948:	f043 0301 	orr.w	r3, r3, #1
 800294c:	6413      	str	r3, [r2, #64]	; 0x40
 800294e:	4b21      	ldr	r3, [pc, #132]	; (80029d4 <HAL_TIM_Base_MspInit+0xa8>)
 8002950:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002952:	f003 0301 	and.w	r3, r3, #1
 8002956:	617b      	str	r3, [r7, #20]
 8002958:	697b      	ldr	r3, [r7, #20]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 1, 1);
 800295a:	2201      	movs	r2, #1
 800295c:	2101      	movs	r1, #1
 800295e:	201c      	movs	r0, #28
 8002960:	f001 f8db 	bl	8003b1a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002964:	201c      	movs	r0, #28
 8002966:	f001 f8f4 	bl	8003b52 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800296a:	e02e      	b.n	80029ca <HAL_TIM_Base_MspInit+0x9e>
  else if(htim_base->Instance==TIM3)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	4a19      	ldr	r2, [pc, #100]	; (80029d8 <HAL_TIM_Base_MspInit+0xac>)
 8002972:	4293      	cmp	r3, r2
 8002974:	d10e      	bne.n	8002994 <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002976:	2300      	movs	r3, #0
 8002978:	613b      	str	r3, [r7, #16]
 800297a:	4b16      	ldr	r3, [pc, #88]	; (80029d4 <HAL_TIM_Base_MspInit+0xa8>)
 800297c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800297e:	4a15      	ldr	r2, [pc, #84]	; (80029d4 <HAL_TIM_Base_MspInit+0xa8>)
 8002980:	f043 0302 	orr.w	r3, r3, #2
 8002984:	6413      	str	r3, [r2, #64]	; 0x40
 8002986:	4b13      	ldr	r3, [pc, #76]	; (80029d4 <HAL_TIM_Base_MspInit+0xa8>)
 8002988:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800298a:	f003 0302 	and.w	r3, r3, #2
 800298e:	613b      	str	r3, [r7, #16]
 8002990:	693b      	ldr	r3, [r7, #16]
}
 8002992:	e01a      	b.n	80029ca <HAL_TIM_Base_MspInit+0x9e>
  else if(htim_base->Instance==TIM4)
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	4a10      	ldr	r2, [pc, #64]	; (80029dc <HAL_TIM_Base_MspInit+0xb0>)
 800299a:	4293      	cmp	r3, r2
 800299c:	d115      	bne.n	80029ca <HAL_TIM_Base_MspInit+0x9e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800299e:	2300      	movs	r3, #0
 80029a0:	60fb      	str	r3, [r7, #12]
 80029a2:	4b0c      	ldr	r3, [pc, #48]	; (80029d4 <HAL_TIM_Base_MspInit+0xa8>)
 80029a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029a6:	4a0b      	ldr	r2, [pc, #44]	; (80029d4 <HAL_TIM_Base_MspInit+0xa8>)
 80029a8:	f043 0304 	orr.w	r3, r3, #4
 80029ac:	6413      	str	r3, [r2, #64]	; 0x40
 80029ae:	4b09      	ldr	r3, [pc, #36]	; (80029d4 <HAL_TIM_Base_MspInit+0xa8>)
 80029b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029b2:	f003 0304 	and.w	r3, r3, #4
 80029b6:	60fb      	str	r3, [r7, #12]
 80029b8:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM4_IRQn, 2, 0);
 80029ba:	2200      	movs	r2, #0
 80029bc:	2102      	movs	r1, #2
 80029be:	201e      	movs	r0, #30
 80029c0:	f001 f8ab 	bl	8003b1a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80029c4:	201e      	movs	r0, #30
 80029c6:	f001 f8c4 	bl	8003b52 <HAL_NVIC_EnableIRQ>
}
 80029ca:	bf00      	nop
 80029cc:	3718      	adds	r7, #24
 80029ce:	46bd      	mov	sp, r7
 80029d0:	bd80      	pop	{r7, pc}
 80029d2:	bf00      	nop
 80029d4:	40023800 	.word	0x40023800
 80029d8:	40000400 	.word	0x40000400
 80029dc:	40000800 	.word	0x40000800

080029e0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80029e0:	b580      	push	{r7, lr}
 80029e2:	b08c      	sub	sp, #48	; 0x30
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029e8:	f107 031c 	add.w	r3, r7, #28
 80029ec:	2200      	movs	r2, #0
 80029ee:	601a      	str	r2, [r3, #0]
 80029f0:	605a      	str	r2, [r3, #4]
 80029f2:	609a      	str	r2, [r3, #8]
 80029f4:	60da      	str	r2, [r3, #12]
 80029f6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	4a32      	ldr	r2, [pc, #200]	; (8002ac8 <HAL_UART_MspInit+0xe8>)
 80029fe:	4293      	cmp	r3, r2
 8002a00:	d12c      	bne.n	8002a5c <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002a02:	2300      	movs	r3, #0
 8002a04:	61bb      	str	r3, [r7, #24]
 8002a06:	4b31      	ldr	r3, [pc, #196]	; (8002acc <HAL_UART_MspInit+0xec>)
 8002a08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a0a:	4a30      	ldr	r2, [pc, #192]	; (8002acc <HAL_UART_MspInit+0xec>)
 8002a0c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a10:	6413      	str	r3, [r2, #64]	; 0x40
 8002a12:	4b2e      	ldr	r3, [pc, #184]	; (8002acc <HAL_UART_MspInit+0xec>)
 8002a14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a1a:	61bb      	str	r3, [r7, #24]
 8002a1c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a1e:	2300      	movs	r3, #0
 8002a20:	617b      	str	r3, [r7, #20]
 8002a22:	4b2a      	ldr	r3, [pc, #168]	; (8002acc <HAL_UART_MspInit+0xec>)
 8002a24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a26:	4a29      	ldr	r2, [pc, #164]	; (8002acc <HAL_UART_MspInit+0xec>)
 8002a28:	f043 0301 	orr.w	r3, r3, #1
 8002a2c:	6313      	str	r3, [r2, #48]	; 0x30
 8002a2e:	4b27      	ldr	r3, [pc, #156]	; (8002acc <HAL_UART_MspInit+0xec>)
 8002a30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a32:	f003 0301 	and.w	r3, r3, #1
 8002a36:	617b      	str	r3, [r7, #20]
 8002a38:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART2_ESP_TX_Pin|USART2_ESP_RX_Pin;
 8002a3a:	230c      	movs	r3, #12
 8002a3c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a3e:	2302      	movs	r3, #2
 8002a40:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a42:	2300      	movs	r3, #0
 8002a44:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a46:	2303      	movs	r3, #3
 8002a48:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002a4a:	2307      	movs	r3, #7
 8002a4c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a4e:	f107 031c 	add.w	r3, r7, #28
 8002a52:	4619      	mov	r1, r3
 8002a54:	481e      	ldr	r0, [pc, #120]	; (8002ad0 <HAL_UART_MspInit+0xf0>)
 8002a56:	f001 fc5f 	bl	8004318 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002a5a:	e031      	b.n	8002ac0 <HAL_UART_MspInit+0xe0>
  else if(huart->Instance==USART3)
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	4a1c      	ldr	r2, [pc, #112]	; (8002ad4 <HAL_UART_MspInit+0xf4>)
 8002a62:	4293      	cmp	r3, r2
 8002a64:	d12c      	bne.n	8002ac0 <HAL_UART_MspInit+0xe0>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002a66:	2300      	movs	r3, #0
 8002a68:	613b      	str	r3, [r7, #16]
 8002a6a:	4b18      	ldr	r3, [pc, #96]	; (8002acc <HAL_UART_MspInit+0xec>)
 8002a6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a6e:	4a17      	ldr	r2, [pc, #92]	; (8002acc <HAL_UART_MspInit+0xec>)
 8002a70:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002a74:	6413      	str	r3, [r2, #64]	; 0x40
 8002a76:	4b15      	ldr	r3, [pc, #84]	; (8002acc <HAL_UART_MspInit+0xec>)
 8002a78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a7a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002a7e:	613b      	str	r3, [r7, #16]
 8002a80:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a82:	2300      	movs	r3, #0
 8002a84:	60fb      	str	r3, [r7, #12]
 8002a86:	4b11      	ldr	r3, [pc, #68]	; (8002acc <HAL_UART_MspInit+0xec>)
 8002a88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a8a:	4a10      	ldr	r2, [pc, #64]	; (8002acc <HAL_UART_MspInit+0xec>)
 8002a8c:	f043 0302 	orr.w	r3, r3, #2
 8002a90:	6313      	str	r3, [r2, #48]	; 0x30
 8002a92:	4b0e      	ldr	r3, [pc, #56]	; (8002acc <HAL_UART_MspInit+0xec>)
 8002a94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a96:	f003 0302 	and.w	r3, r3, #2
 8002a9a:	60fb      	str	r3, [r7, #12]
 8002a9c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART3_DEBUG_TX_Pin|USART3_DEBUG_RX_Pin;
 8002a9e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002aa2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002aa4:	2302      	movs	r3, #2
 8002aa6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002aa8:	2300      	movs	r3, #0
 8002aaa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002aac:	2303      	movs	r3, #3
 8002aae:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002ab0:	2307      	movs	r3, #7
 8002ab2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ab4:	f107 031c 	add.w	r3, r7, #28
 8002ab8:	4619      	mov	r1, r3
 8002aba:	4807      	ldr	r0, [pc, #28]	; (8002ad8 <HAL_UART_MspInit+0xf8>)
 8002abc:	f001 fc2c 	bl	8004318 <HAL_GPIO_Init>
}
 8002ac0:	bf00      	nop
 8002ac2:	3730      	adds	r7, #48	; 0x30
 8002ac4:	46bd      	mov	sp, r7
 8002ac6:	bd80      	pop	{r7, pc}
 8002ac8:	40004400 	.word	0x40004400
 8002acc:	40023800 	.word	0x40023800
 8002ad0:	40020000 	.word	0x40020000
 8002ad4:	40004800 	.word	0x40004800
 8002ad8:	40020400 	.word	0x40020400

08002adc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002adc:	b480      	push	{r7}
 8002ade:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002ae0:	e7fe      	b.n	8002ae0 <NMI_Handler+0x4>

08002ae2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002ae2:	b480      	push	{r7}
 8002ae4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002ae6:	e7fe      	b.n	8002ae6 <HardFault_Handler+0x4>

08002ae8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002ae8:	b480      	push	{r7}
 8002aea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002aec:	e7fe      	b.n	8002aec <MemManage_Handler+0x4>

08002aee <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002aee:	b480      	push	{r7}
 8002af0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002af2:	e7fe      	b.n	8002af2 <BusFault_Handler+0x4>

08002af4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002af4:	b480      	push	{r7}
 8002af6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002af8:	e7fe      	b.n	8002af8 <UsageFault_Handler+0x4>

08002afa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002afa:	b480      	push	{r7}
 8002afc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002afe:	bf00      	nop
 8002b00:	46bd      	mov	sp, r7
 8002b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b06:	4770      	bx	lr

08002b08 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002b08:	b480      	push	{r7}
 8002b0a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002b0c:	bf00      	nop
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b14:	4770      	bx	lr

08002b16 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002b16:	b480      	push	{r7}
 8002b18:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002b1a:	bf00      	nop
 8002b1c:	46bd      	mov	sp, r7
 8002b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b22:	4770      	bx	lr

08002b24 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002b24:	b580      	push	{r7, lr}
 8002b26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002b28:	f000 f9ca 	bl	8002ec0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002b2c:	bf00      	nop
 8002b2e:	bd80      	pop	{r7, pc}

08002b30 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8002b30:	b580      	push	{r7, lr}
 8002b32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8002b34:	2002      	movs	r0, #2
 8002b36:	f001 fda5 	bl	8004684 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8002b3a:	bf00      	nop
 8002b3c:	bd80      	pop	{r7, pc}
	...

08002b40 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8002b40:	b580      	push	{r7, lr}
 8002b42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8002b44:	4802      	ldr	r0, [pc, #8]	; (8002b50 <DMA1_Stream0_IRQHandler+0x10>)
 8002b46:	f001 f963 	bl	8003e10 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8002b4a:	bf00      	nop
 8002b4c:	bd80      	pop	{r7, pc}
 8002b4e:	bf00      	nop
 8002b50:	20000850 	.word	0x20000850

08002b54 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8002b54:	b580      	push	{r7, lr}
 8002b56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8002b58:	4802      	ldr	r0, [pc, #8]	; (8002b64 <ADC_IRQHandler+0x10>)
 8002b5a:	f000 fb37 	bl	80031cc <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8002b5e:	bf00      	nop
 8002b60:	bd80      	pop	{r7, pc}
 8002b62:	bf00      	nop
 8002b64:	2000039c 	.word	0x2000039c

08002b68 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002b6c:	4802      	ldr	r0, [pc, #8]	; (8002b78 <TIM2_IRQHandler+0x10>)
 8002b6e:	f005 fbb1 	bl	80082d4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002b72:	bf00      	nop
 8002b74:	bd80      	pop	{r7, pc}
 8002b76:	bf00      	nop
 8002b78:	200008b4 	.word	0x200008b4

08002b7c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8002b80:	4802      	ldr	r0, [pc, #8]	; (8002b8c <TIM4_IRQHandler+0x10>)
 8002b82:	f005 fba7 	bl	80082d4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8002b86:	bf00      	nop
 8002b88:	bd80      	pop	{r7, pc}
 8002b8a:	bf00      	nop
 8002b8c:	20000240 	.word	0x20000240

08002b90 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8002b90:	b580      	push	{r7, lr}
 8002b92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8002b94:	4802      	ldr	r0, [pc, #8]	; (8002ba0 <I2C1_EV_IRQHandler+0x10>)
 8002b96:	f002 fc1f 	bl	80053d8 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8002b9a:	bf00      	nop
 8002b9c:	bd80      	pop	{r7, pc}
 8002b9e:	bf00      	nop
 8002ba0:	200002cc 	.word	0x200002cc

08002ba4 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8002ba4:	b580      	push	{r7, lr}
 8002ba6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8002ba8:	4802      	ldr	r0, [pc, #8]	; (8002bb4 <I2C1_ER_IRQHandler+0x10>)
 8002baa:	f002 fd86 	bl	80056ba <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8002bae:	bf00      	nop
 8002bb0:	bd80      	pop	{r7, pc}
 8002bb2:	bf00      	nop
 8002bb4:	200002cc 	.word	0x200002cc

08002bb8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 8002bbc:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8002bc0:	f001 fd60 	bl	8004684 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002bc4:	bf00      	nop
 8002bc6:	bd80      	pop	{r7, pc}

08002bc8 <RetargetInit>:
/* Functions */


UART_HandleTypeDef* gHuart;

void  RetargetInit(UART_HandleTypeDef *huart){
 8002bc8:	b580      	push	{r7, lr}
 8002bca:	b082      	sub	sp, #8
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	6078      	str	r0, [r7, #4]
	gHuart=huart;
 8002bd0:	4a07      	ldr	r2, [pc, #28]	; (8002bf0 <RetargetInit+0x28>)
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	6013      	str	r3, [r2, #0]

	/* Disabilito il buffer I/O per lo STDOUT per
	  far visualizzare immediatamente i caratteri
	  sul terminale*/
	setvbuf(stdout, NULL, _IONBF, 0);
 8002bd6:	4b07      	ldr	r3, [pc, #28]	; (8002bf4 <RetargetInit+0x2c>)
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	6898      	ldr	r0, [r3, #8]
 8002bdc:	2300      	movs	r3, #0
 8002bde:	2202      	movs	r2, #2
 8002be0:	2100      	movs	r1, #0
 8002be2:	f006 ff79 	bl	8009ad8 <setvbuf>
}
 8002be6:	bf00      	nop
 8002be8:	3708      	adds	r7, #8
 8002bea:	46bd      	mov	sp, r7
 8002bec:	bd80      	pop	{r7, pc}
 8002bee:	bf00      	nop
 8002bf0:	20000944 	.word	0x20000944
 8002bf4:	20000024 	.word	0x20000024

08002bf8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002bf8:	b480      	push	{r7}
 8002bfa:	af00      	add	r7, sp, #0
	return 1;
 8002bfc:	2301      	movs	r3, #1
}
 8002bfe:	4618      	mov	r0, r3
 8002c00:	46bd      	mov	sp, r7
 8002c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c06:	4770      	bx	lr

08002c08 <_kill>:

int _kill(int pid, int sig)
{
 8002c08:	b580      	push	{r7, lr}
 8002c0a:	b082      	sub	sp, #8
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	6078      	str	r0, [r7, #4]
 8002c10:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002c12:	f006 fa37 	bl	8009084 <__errno>
 8002c16:	4603      	mov	r3, r0
 8002c18:	2216      	movs	r2, #22
 8002c1a:	601a      	str	r2, [r3, #0]
	return -1;
 8002c1c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002c20:	4618      	mov	r0, r3
 8002c22:	3708      	adds	r7, #8
 8002c24:	46bd      	mov	sp, r7
 8002c26:	bd80      	pop	{r7, pc}

08002c28 <_exit>:

void _exit (int status)
{
 8002c28:	b580      	push	{r7, lr}
 8002c2a:	b082      	sub	sp, #8
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002c30:	f04f 31ff 	mov.w	r1, #4294967295
 8002c34:	6878      	ldr	r0, [r7, #4]
 8002c36:	f7ff ffe7 	bl	8002c08 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002c3a:	e7fe      	b.n	8002c3a <_exit+0x12>

08002c3c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	b086      	sub	sp, #24
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	60f8      	str	r0, [r7, #12]
 8002c44:	60b9      	str	r1, [r7, #8]
 8002c46:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c48:	2300      	movs	r3, #0
 8002c4a:	617b      	str	r3, [r7, #20]
 8002c4c:	e00a      	b.n	8002c64 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002c4e:	f3af 8000 	nop.w
 8002c52:	4601      	mov	r1, r0
 8002c54:	68bb      	ldr	r3, [r7, #8]
 8002c56:	1c5a      	adds	r2, r3, #1
 8002c58:	60ba      	str	r2, [r7, #8]
 8002c5a:	b2ca      	uxtb	r2, r1
 8002c5c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c5e:	697b      	ldr	r3, [r7, #20]
 8002c60:	3301      	adds	r3, #1
 8002c62:	617b      	str	r3, [r7, #20]
 8002c64:	697a      	ldr	r2, [r7, #20]
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	429a      	cmp	r2, r3
 8002c6a:	dbf0      	blt.n	8002c4e <_read+0x12>
	}

return len;
 8002c6c:	687b      	ldr	r3, [r7, #4]
}
 8002c6e:	4618      	mov	r0, r3
 8002c70:	3718      	adds	r7, #24
 8002c72:	46bd      	mov	sp, r7
 8002c74:	bd80      	pop	{r7, pc}
	...

08002c78 <_write>:
	}
	return len;
}*/

//Ridefinisco la funzione _write per far stampare i caratteri tramite l'interfaccia UART
__attribute__((weak)) int _write(int fd, char *ptr, int len){
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	b086      	sub	sp, #24
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	60f8      	str	r0, [r7, #12]
 8002c80:	60b9      	str	r1, [r7, #8]
 8002c82:	607a      	str	r2, [r7, #4]
	HAL_StatusTypeDef hstatus;

		if (fd == STDOUT_FILENO || fd == STDERR_FILENO) {
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	2b01      	cmp	r3, #1
 8002c88:	d002      	beq.n	8002c90 <_write+0x18>
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	2b02      	cmp	r3, #2
 8002c8e:	d111      	bne.n	8002cb4 <_write+0x3c>
			hstatus = HAL_UART_Transmit(gHuart, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 8002c90:	4b0e      	ldr	r3, [pc, #56]	; (8002ccc <_write+0x54>)
 8002c92:	6818      	ldr	r0, [r3, #0]
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	b29a      	uxth	r2, r3
 8002c98:	f04f 33ff 	mov.w	r3, #4294967295
 8002c9c:	68b9      	ldr	r1, [r7, #8]
 8002c9e:	f005 ff28 	bl	8008af2 <HAL_UART_Transmit>
 8002ca2:	4603      	mov	r3, r0
 8002ca4:	75fb      	strb	r3, [r7, #23]
			if (hstatus == HAL_OK)
 8002ca6:	7dfb      	ldrb	r3, [r7, #23]
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d101      	bne.n	8002cb0 <_write+0x38>
				return len;
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	e008      	b.n	8002cc2 <_write+0x4a>
			else
				return EIO;
 8002cb0:	2305      	movs	r3, #5
 8002cb2:	e006      	b.n	8002cc2 <_write+0x4a>
		}
		errno = EBADF;
 8002cb4:	f006 f9e6 	bl	8009084 <__errno>
 8002cb8:	4603      	mov	r3, r0
 8002cba:	2209      	movs	r2, #9
 8002cbc:	601a      	str	r2, [r3, #0]
		return -1;
 8002cbe:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002cc2:	4618      	mov	r0, r3
 8002cc4:	3718      	adds	r7, #24
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	bd80      	pop	{r7, pc}
 8002cca:	bf00      	nop
 8002ccc:	20000944 	.word	0x20000944

08002cd0 <_close>:


int _close(int file)
{
 8002cd0:	b480      	push	{r7}
 8002cd2:	b083      	sub	sp, #12
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	6078      	str	r0, [r7, #4]
	return -1;
 8002cd8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002cdc:	4618      	mov	r0, r3
 8002cde:	370c      	adds	r7, #12
 8002ce0:	46bd      	mov	sp, r7
 8002ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce6:	4770      	bx	lr

08002ce8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002ce8:	b480      	push	{r7}
 8002cea:	b083      	sub	sp, #12
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	6078      	str	r0, [r7, #4]
 8002cf0:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002cf2:	683b      	ldr	r3, [r7, #0]
 8002cf4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002cf8:	605a      	str	r2, [r3, #4]
	return 0;
 8002cfa:	2300      	movs	r3, #0
}
 8002cfc:	4618      	mov	r0, r3
 8002cfe:	370c      	adds	r7, #12
 8002d00:	46bd      	mov	sp, r7
 8002d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d06:	4770      	bx	lr

08002d08 <_isatty>:

int _isatty(int file)
{
 8002d08:	b480      	push	{r7}
 8002d0a:	b083      	sub	sp, #12
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]
	return 1;
 8002d10:	2301      	movs	r3, #1
}
 8002d12:	4618      	mov	r0, r3
 8002d14:	370c      	adds	r7, #12
 8002d16:	46bd      	mov	sp, r7
 8002d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1c:	4770      	bx	lr

08002d1e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002d1e:	b480      	push	{r7}
 8002d20:	b085      	sub	sp, #20
 8002d22:	af00      	add	r7, sp, #0
 8002d24:	60f8      	str	r0, [r7, #12]
 8002d26:	60b9      	str	r1, [r7, #8]
 8002d28:	607a      	str	r2, [r7, #4]
	return 0;
 8002d2a:	2300      	movs	r3, #0
}
 8002d2c:	4618      	mov	r0, r3
 8002d2e:	3714      	adds	r7, #20
 8002d30:	46bd      	mov	sp, r7
 8002d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d36:	4770      	bx	lr

08002d38 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	b086      	sub	sp, #24
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002d40:	4a14      	ldr	r2, [pc, #80]	; (8002d94 <_sbrk+0x5c>)
 8002d42:	4b15      	ldr	r3, [pc, #84]	; (8002d98 <_sbrk+0x60>)
 8002d44:	1ad3      	subs	r3, r2, r3
 8002d46:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002d48:	697b      	ldr	r3, [r7, #20]
 8002d4a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002d4c:	4b13      	ldr	r3, [pc, #76]	; (8002d9c <_sbrk+0x64>)
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d102      	bne.n	8002d5a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002d54:	4b11      	ldr	r3, [pc, #68]	; (8002d9c <_sbrk+0x64>)
 8002d56:	4a12      	ldr	r2, [pc, #72]	; (8002da0 <_sbrk+0x68>)
 8002d58:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002d5a:	4b10      	ldr	r3, [pc, #64]	; (8002d9c <_sbrk+0x64>)
 8002d5c:	681a      	ldr	r2, [r3, #0]
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	4413      	add	r3, r2
 8002d62:	693a      	ldr	r2, [r7, #16]
 8002d64:	429a      	cmp	r2, r3
 8002d66:	d207      	bcs.n	8002d78 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002d68:	f006 f98c 	bl	8009084 <__errno>
 8002d6c:	4603      	mov	r3, r0
 8002d6e:	220c      	movs	r2, #12
 8002d70:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002d72:	f04f 33ff 	mov.w	r3, #4294967295
 8002d76:	e009      	b.n	8002d8c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002d78:	4b08      	ldr	r3, [pc, #32]	; (8002d9c <_sbrk+0x64>)
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002d7e:	4b07      	ldr	r3, [pc, #28]	; (8002d9c <_sbrk+0x64>)
 8002d80:	681a      	ldr	r2, [r3, #0]
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	4413      	add	r3, r2
 8002d86:	4a05      	ldr	r2, [pc, #20]	; (8002d9c <_sbrk+0x64>)
 8002d88:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002d8a:	68fb      	ldr	r3, [r7, #12]
}
 8002d8c:	4618      	mov	r0, r3
 8002d8e:	3718      	adds	r7, #24
 8002d90:	46bd      	mov	sp, r7
 8002d92:	bd80      	pop	{r7, pc}
 8002d94:	20020000 	.word	0x20020000
 8002d98:	00000400 	.word	0x00000400
 8002d9c:	2000022c 	.word	0x2000022c
 8002da0:	20000960 	.word	0x20000960

08002da4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002da4:	b480      	push	{r7}
 8002da6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002da8:	4b06      	ldr	r3, [pc, #24]	; (8002dc4 <SystemInit+0x20>)
 8002daa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002dae:	4a05      	ldr	r2, [pc, #20]	; (8002dc4 <SystemInit+0x20>)
 8002db0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002db4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002db8:	bf00      	nop
 8002dba:	46bd      	mov	sp, r7
 8002dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc0:	4770      	bx	lr
 8002dc2:	bf00      	nop
 8002dc4:	e000ed00 	.word	0xe000ed00

08002dc8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002dc8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002e00 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002dcc:	480d      	ldr	r0, [pc, #52]	; (8002e04 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002dce:	490e      	ldr	r1, [pc, #56]	; (8002e08 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002dd0:	4a0e      	ldr	r2, [pc, #56]	; (8002e0c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002dd2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002dd4:	e002      	b.n	8002ddc <LoopCopyDataInit>

08002dd6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002dd6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002dd8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002dda:	3304      	adds	r3, #4

08002ddc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002ddc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002dde:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002de0:	d3f9      	bcc.n	8002dd6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002de2:	4a0b      	ldr	r2, [pc, #44]	; (8002e10 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002de4:	4c0b      	ldr	r4, [pc, #44]	; (8002e14 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002de6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002de8:	e001      	b.n	8002dee <LoopFillZerobss>

08002dea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002dea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002dec:	3204      	adds	r2, #4

08002dee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002dee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002df0:	d3fb      	bcc.n	8002dea <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002df2:	f7ff ffd7 	bl	8002da4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002df6:	f006 f94b 	bl	8009090 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002dfa:	f7fe fa1f 	bl	800123c <main>
  bx  lr    
 8002dfe:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002e00:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002e04:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002e08:	200001f8 	.word	0x200001f8
  ldr r2, =_sidata
 8002e0c:	0800d730 	.word	0x0800d730
  ldr r2, =_sbss
 8002e10:	200001f8 	.word	0x200001f8
  ldr r4, =_ebss
 8002e14:	2000095c 	.word	0x2000095c

08002e18 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002e18:	e7fe      	b.n	8002e18 <CAN1_RX0_IRQHandler>
	...

08002e1c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002e20:	4b0e      	ldr	r3, [pc, #56]	; (8002e5c <HAL_Init+0x40>)
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	4a0d      	ldr	r2, [pc, #52]	; (8002e5c <HAL_Init+0x40>)
 8002e26:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002e2a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002e2c:	4b0b      	ldr	r3, [pc, #44]	; (8002e5c <HAL_Init+0x40>)
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	4a0a      	ldr	r2, [pc, #40]	; (8002e5c <HAL_Init+0x40>)
 8002e32:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002e36:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002e38:	4b08      	ldr	r3, [pc, #32]	; (8002e5c <HAL_Init+0x40>)
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	4a07      	ldr	r2, [pc, #28]	; (8002e5c <HAL_Init+0x40>)
 8002e3e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e42:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002e44:	2003      	movs	r0, #3
 8002e46:	f000 fe5d 	bl	8003b04 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002e4a:	2000      	movs	r0, #0
 8002e4c:	f000 f808 	bl	8002e60 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002e50:	f7ff fc6e 	bl	8002730 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002e54:	2300      	movs	r3, #0
}
 8002e56:	4618      	mov	r0, r3
 8002e58:	bd80      	pop	{r7, pc}
 8002e5a:	bf00      	nop
 8002e5c:	40023c00 	.word	0x40023c00

08002e60 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002e60:	b580      	push	{r7, lr}
 8002e62:	b082      	sub	sp, #8
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002e68:	4b12      	ldr	r3, [pc, #72]	; (8002eb4 <HAL_InitTick+0x54>)
 8002e6a:	681a      	ldr	r2, [r3, #0]
 8002e6c:	4b12      	ldr	r3, [pc, #72]	; (8002eb8 <HAL_InitTick+0x58>)
 8002e6e:	781b      	ldrb	r3, [r3, #0]
 8002e70:	4619      	mov	r1, r3
 8002e72:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002e76:	fbb3 f3f1 	udiv	r3, r3, r1
 8002e7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e7e:	4618      	mov	r0, r3
 8002e80:	f000 fe83 	bl	8003b8a <HAL_SYSTICK_Config>
 8002e84:	4603      	mov	r3, r0
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d001      	beq.n	8002e8e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002e8a:	2301      	movs	r3, #1
 8002e8c:	e00e      	b.n	8002eac <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	2b0f      	cmp	r3, #15
 8002e92:	d80a      	bhi.n	8002eaa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002e94:	2200      	movs	r2, #0
 8002e96:	6879      	ldr	r1, [r7, #4]
 8002e98:	f04f 30ff 	mov.w	r0, #4294967295
 8002e9c:	f000 fe3d 	bl	8003b1a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002ea0:	4a06      	ldr	r2, [pc, #24]	; (8002ebc <HAL_InitTick+0x5c>)
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002ea6:	2300      	movs	r3, #0
 8002ea8:	e000      	b.n	8002eac <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002eaa:	2301      	movs	r3, #1
}
 8002eac:	4618      	mov	r0, r3
 8002eae:	3708      	adds	r7, #8
 8002eb0:	46bd      	mov	sp, r7
 8002eb2:	bd80      	pop	{r7, pc}
 8002eb4:	20000018 	.word	0x20000018
 8002eb8:	20000020 	.word	0x20000020
 8002ebc:	2000001c 	.word	0x2000001c

08002ec0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002ec0:	b480      	push	{r7}
 8002ec2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002ec4:	4b06      	ldr	r3, [pc, #24]	; (8002ee0 <HAL_IncTick+0x20>)
 8002ec6:	781b      	ldrb	r3, [r3, #0]
 8002ec8:	461a      	mov	r2, r3
 8002eca:	4b06      	ldr	r3, [pc, #24]	; (8002ee4 <HAL_IncTick+0x24>)
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	4413      	add	r3, r2
 8002ed0:	4a04      	ldr	r2, [pc, #16]	; (8002ee4 <HAL_IncTick+0x24>)
 8002ed2:	6013      	str	r3, [r2, #0]
}
 8002ed4:	bf00      	nop
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002edc:	4770      	bx	lr
 8002ede:	bf00      	nop
 8002ee0:	20000020 	.word	0x20000020
 8002ee4:	20000948 	.word	0x20000948

08002ee8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002ee8:	b480      	push	{r7}
 8002eea:	af00      	add	r7, sp, #0
  return uwTick;
 8002eec:	4b03      	ldr	r3, [pc, #12]	; (8002efc <HAL_GetTick+0x14>)
 8002eee:	681b      	ldr	r3, [r3, #0]
}
 8002ef0:	4618      	mov	r0, r3
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef8:	4770      	bx	lr
 8002efa:	bf00      	nop
 8002efc:	20000948 	.word	0x20000948

08002f00 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002f00:	b580      	push	{r7, lr}
 8002f02:	b084      	sub	sp, #16
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002f08:	f7ff ffee 	bl	8002ee8 <HAL_GetTick>
 8002f0c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f18:	d005      	beq.n	8002f26 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002f1a:	4b0a      	ldr	r3, [pc, #40]	; (8002f44 <HAL_Delay+0x44>)
 8002f1c:	781b      	ldrb	r3, [r3, #0]
 8002f1e:	461a      	mov	r2, r3
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	4413      	add	r3, r2
 8002f24:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002f26:	bf00      	nop
 8002f28:	f7ff ffde 	bl	8002ee8 <HAL_GetTick>
 8002f2c:	4602      	mov	r2, r0
 8002f2e:	68bb      	ldr	r3, [r7, #8]
 8002f30:	1ad3      	subs	r3, r2, r3
 8002f32:	68fa      	ldr	r2, [r7, #12]
 8002f34:	429a      	cmp	r2, r3
 8002f36:	d8f7      	bhi.n	8002f28 <HAL_Delay+0x28>
  {
  }
}
 8002f38:	bf00      	nop
 8002f3a:	bf00      	nop
 8002f3c:	3710      	adds	r7, #16
 8002f3e:	46bd      	mov	sp, r7
 8002f40:	bd80      	pop	{r7, pc}
 8002f42:	bf00      	nop
 8002f44:	20000020 	.word	0x20000020

08002f48 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 8002f48:	b480      	push	{r7}
 8002f4a:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
 8002f4c:	4b05      	ldr	r3, [pc, #20]	; (8002f64 <HAL_SuspendTick+0x1c>)
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	4a04      	ldr	r2, [pc, #16]	; (8002f64 <HAL_SuspendTick+0x1c>)
 8002f52:	f023 0302 	bic.w	r3, r3, #2
 8002f56:	6013      	str	r3, [r2, #0]
}
 8002f58:	bf00      	nop
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f60:	4770      	bx	lr
 8002f62:	bf00      	nop
 8002f64:	e000e010 	.word	0xe000e010

08002f68 <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 8002f68:	b480      	push	{r7}
 8002f6a:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SysTick->CTRL  |= SysTick_CTRL_TICKINT_Msk;
 8002f6c:	4b05      	ldr	r3, [pc, #20]	; (8002f84 <HAL_ResumeTick+0x1c>)
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	4a04      	ldr	r2, [pc, #16]	; (8002f84 <HAL_ResumeTick+0x1c>)
 8002f72:	f043 0302 	orr.w	r3, r3, #2
 8002f76:	6013      	str	r3, [r2, #0]
}
 8002f78:	bf00      	nop
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f80:	4770      	bx	lr
 8002f82:	bf00      	nop
 8002f84:	e000e010 	.word	0xe000e010

08002f88 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002f88:	b580      	push	{r7, lr}
 8002f8a:	b084      	sub	sp, #16
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002f90:	2300      	movs	r3, #0
 8002f92:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d101      	bne.n	8002f9e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002f9a:	2301      	movs	r3, #1
 8002f9c:	e033      	b.n	8003006 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d109      	bne.n	8002fba <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002fa6:	6878      	ldr	r0, [r7, #4]
 8002fa8:	f7ff fbea 	bl	8002780 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	2200      	movs	r2, #0
 8002fb0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	2200      	movs	r2, #0
 8002fb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fbe:	f003 0310 	and.w	r3, r3, #16
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d118      	bne.n	8002ff8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fca:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002fce:	f023 0302 	bic.w	r3, r3, #2
 8002fd2:	f043 0202 	orr.w	r2, r3, #2
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002fda:	6878      	ldr	r0, [r7, #4]
 8002fdc:	f000 fb7a 	bl	80036d4 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	2200      	movs	r2, #0
 8002fe4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fea:	f023 0303 	bic.w	r3, r3, #3
 8002fee:	f043 0201 	orr.w	r2, r3, #1
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	641a      	str	r2, [r3, #64]	; 0x40
 8002ff6:	e001      	b.n	8002ffc <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002ff8:	2301      	movs	r3, #1
 8002ffa:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	2200      	movs	r2, #0
 8003000:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003004:	7bfb      	ldrb	r3, [r7, #15]
}
 8003006:	4618      	mov	r0, r3
 8003008:	3710      	adds	r7, #16
 800300a:	46bd      	mov	sp, r7
 800300c:	bd80      	pop	{r7, pc}
	...

08003010 <HAL_ADC_Start_IT>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 8003010:	b480      	push	{r7}
 8003012:	b085      	sub	sp, #20
 8003014:	af00      	add	r7, sp, #0
 8003016:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8003018:	2300      	movs	r3, #0
 800301a:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003022:	2b01      	cmp	r3, #1
 8003024:	d101      	bne.n	800302a <HAL_ADC_Start_IT+0x1a>
 8003026:	2302      	movs	r3, #2
 8003028:	e0bd      	b.n	80031a6 <HAL_ADC_Start_IT+0x196>
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	2201      	movs	r2, #1
 800302e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	689b      	ldr	r3, [r3, #8]
 8003038:	f003 0301 	and.w	r3, r3, #1
 800303c:	2b01      	cmp	r3, #1
 800303e:	d018      	beq.n	8003072 <HAL_ADC_Start_IT+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	689a      	ldr	r2, [r3, #8]
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f042 0201 	orr.w	r2, r2, #1
 800304e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003050:	4b58      	ldr	r3, [pc, #352]	; (80031b4 <HAL_ADC_Start_IT+0x1a4>)
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	4a58      	ldr	r2, [pc, #352]	; (80031b8 <HAL_ADC_Start_IT+0x1a8>)
 8003056:	fba2 2303 	umull	r2, r3, r2, r3
 800305a:	0c9a      	lsrs	r2, r3, #18
 800305c:	4613      	mov	r3, r2
 800305e:	005b      	lsls	r3, r3, #1
 8003060:	4413      	add	r3, r2
 8003062:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8003064:	e002      	b.n	800306c <HAL_ADC_Start_IT+0x5c>
    {
      counter--;
 8003066:	68bb      	ldr	r3, [r7, #8]
 8003068:	3b01      	subs	r3, #1
 800306a:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 800306c:	68bb      	ldr	r3, [r7, #8]
 800306e:	2b00      	cmp	r3, #0
 8003070:	d1f9      	bne.n	8003066 <HAL_ADC_Start_IT+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	689b      	ldr	r3, [r3, #8]
 8003078:	f003 0301 	and.w	r3, r3, #1
 800307c:	2b01      	cmp	r3, #1
 800307e:	f040 8085 	bne.w	800318c <HAL_ADC_Start_IT+0x17c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003086:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800308a:	f023 0301 	bic.w	r3, r3, #1
 800308e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	685b      	ldr	r3, [r3, #4]
 800309c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d007      	beq.n	80030b4 <HAL_ADC_Start_IT+0xa4>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030a8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80030ac:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030b8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80030bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80030c0:	d106      	bne.n	80030d0 <HAL_ADC_Start_IT+0xc0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030c6:	f023 0206 	bic.w	r2, r3, #6
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	645a      	str	r2, [r3, #68]	; 0x44
 80030ce:	e002      	b.n	80030d6 <HAL_ADC_Start_IT+0xc6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	2200      	movs	r2, #0
 80030d4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	2200      	movs	r2, #0
 80030da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80030de:	4b37      	ldr	r3, [pc, #220]	; (80031bc <HAL_ADC_Start_IT+0x1ac>)
 80030e0:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80030ea:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	685b      	ldr	r3, [r3, #4]
 80030f2:	687a      	ldr	r2, [r7, #4]
 80030f4:	6812      	ldr	r2, [r2, #0]
 80030f6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80030fa:	f043 0320 	orr.w	r3, r3, #32
 80030fe:	6053      	str	r3, [r2, #4]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	685b      	ldr	r3, [r3, #4]
 8003104:	f003 031f 	and.w	r3, r3, #31
 8003108:	2b00      	cmp	r3, #0
 800310a:	d12a      	bne.n	8003162 <HAL_ADC_Start_IT+0x152>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	4a2b      	ldr	r2, [pc, #172]	; (80031c0 <HAL_ADC_Start_IT+0x1b0>)
 8003112:	4293      	cmp	r3, r2
 8003114:	d015      	beq.n	8003142 <HAL_ADC_Start_IT+0x132>
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	4a2a      	ldr	r2, [pc, #168]	; (80031c4 <HAL_ADC_Start_IT+0x1b4>)
 800311c:	4293      	cmp	r3, r2
 800311e:	d105      	bne.n	800312c <HAL_ADC_Start_IT+0x11c>
 8003120:	4b26      	ldr	r3, [pc, #152]	; (80031bc <HAL_ADC_Start_IT+0x1ac>)
 8003122:	685b      	ldr	r3, [r3, #4]
 8003124:	f003 031f 	and.w	r3, r3, #31
 8003128:	2b00      	cmp	r3, #0
 800312a:	d00a      	beq.n	8003142 <HAL_ADC_Start_IT+0x132>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	4a25      	ldr	r2, [pc, #148]	; (80031c8 <HAL_ADC_Start_IT+0x1b8>)
 8003132:	4293      	cmp	r3, r2
 8003134:	d136      	bne.n	80031a4 <HAL_ADC_Start_IT+0x194>
 8003136:	4b21      	ldr	r3, [pc, #132]	; (80031bc <HAL_ADC_Start_IT+0x1ac>)
 8003138:	685b      	ldr	r3, [r3, #4]
 800313a:	f003 0310 	and.w	r3, r3, #16
 800313e:	2b00      	cmp	r3, #0
 8003140:	d130      	bne.n	80031a4 <HAL_ADC_Start_IT+0x194>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	689b      	ldr	r3, [r3, #8]
 8003148:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800314c:	2b00      	cmp	r3, #0
 800314e:	d129      	bne.n	80031a4 <HAL_ADC_Start_IT+0x194>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	689a      	ldr	r2, [r3, #8]
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800315e:	609a      	str	r2, [r3, #8]
 8003160:	e020      	b.n	80031a4 <HAL_ADC_Start_IT+0x194>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	4a16      	ldr	r2, [pc, #88]	; (80031c0 <HAL_ADC_Start_IT+0x1b0>)
 8003168:	4293      	cmp	r3, r2
 800316a:	d11b      	bne.n	80031a4 <HAL_ADC_Start_IT+0x194>
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	689b      	ldr	r3, [r3, #8]
 8003172:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003176:	2b00      	cmp	r3, #0
 8003178:	d114      	bne.n	80031a4 <HAL_ADC_Start_IT+0x194>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	689a      	ldr	r2, [r3, #8]
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003188:	609a      	str	r2, [r3, #8]
 800318a:	e00b      	b.n	80031a4 <HAL_ADC_Start_IT+0x194>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003190:	f043 0210 	orr.w	r2, r3, #16
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800319c:	f043 0201 	orr.w	r2, r3, #1
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80031a4:	2300      	movs	r3, #0
}
 80031a6:	4618      	mov	r0, r3
 80031a8:	3714      	adds	r7, #20
 80031aa:	46bd      	mov	sp, r7
 80031ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b0:	4770      	bx	lr
 80031b2:	bf00      	nop
 80031b4:	20000018 	.word	0x20000018
 80031b8:	431bde83 	.word	0x431bde83
 80031bc:	40012300 	.word	0x40012300
 80031c0:	40012000 	.word	0x40012000
 80031c4:	40012100 	.word	0x40012100
 80031c8:	40012200 	.word	0x40012200

080031cc <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 80031cc:	b580      	push	{r7, lr}
 80031ce:	b084      	sub	sp, #16
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 80031d4:	2300      	movs	r3, #0
 80031d6:	60fb      	str	r3, [r7, #12]
 80031d8:	2300      	movs	r3, #0
 80031da:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f003 0302 	and.w	r3, r3, #2
 80031e6:	2b02      	cmp	r3, #2
 80031e8:	bf0c      	ite	eq
 80031ea:	2301      	moveq	r3, #1
 80031ec:	2300      	movne	r3, #0
 80031ee:	b2db      	uxtb	r3, r3
 80031f0:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	685b      	ldr	r3, [r3, #4]
 80031f8:	f003 0320 	and.w	r3, r3, #32
 80031fc:	2b20      	cmp	r3, #32
 80031fe:	bf0c      	ite	eq
 8003200:	2301      	moveq	r3, #1
 8003202:	2300      	movne	r3, #0
 8003204:	b2db      	uxtb	r3, r3
 8003206:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	2b00      	cmp	r3, #0
 800320c:	d049      	beq.n	80032a2 <HAL_ADC_IRQHandler+0xd6>
 800320e:	68bb      	ldr	r3, [r7, #8]
 8003210:	2b00      	cmp	r3, #0
 8003212:	d046      	beq.n	80032a2 <HAL_ADC_IRQHandler+0xd6>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003218:	f003 0310 	and.w	r3, r3, #16
 800321c:	2b00      	cmp	r3, #0
 800321e:	d105      	bne.n	800322c <HAL_ADC_IRQHandler+0x60>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003224:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	689b      	ldr	r3, [r3, #8]
 8003232:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003236:	2b00      	cmp	r3, #0
 8003238:	d12b      	bne.n	8003292 <HAL_ADC_IRQHandler+0xc6>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800323e:	2b00      	cmp	r3, #0
 8003240:	d127      	bne.n	8003292 <HAL_ADC_IRQHandler+0xc6>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003248:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800324c:	2b00      	cmp	r3, #0
 800324e:	d006      	beq.n	800325e <HAL_ADC_IRQHandler+0x92>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	689b      	ldr	r3, [r3, #8]
 8003256:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800325a:	2b00      	cmp	r3, #0
 800325c:	d119      	bne.n	8003292 <HAL_ADC_IRQHandler+0xc6>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	685a      	ldr	r2, [r3, #4]
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f022 0220 	bic.w	r2, r2, #32
 800326c:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003272:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800327e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003282:	2b00      	cmp	r3, #0
 8003284:	d105      	bne.n	8003292 <HAL_ADC_IRQHandler+0xc6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800328a:	f043 0201 	orr.w	r2, r3, #1
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003292:	6878      	ldr	r0, [r7, #4]
 8003294:	f7fe fcf0 	bl	8001c78 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f06f 0212 	mvn.w	r2, #18
 80032a0:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f003 0304 	and.w	r3, r3, #4
 80032ac:	2b04      	cmp	r3, #4
 80032ae:	bf0c      	ite	eq
 80032b0:	2301      	moveq	r3, #1
 80032b2:	2300      	movne	r3, #0
 80032b4:	b2db      	uxtb	r3, r3
 80032b6:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	685b      	ldr	r3, [r3, #4]
 80032be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032c2:	2b80      	cmp	r3, #128	; 0x80
 80032c4:	bf0c      	ite	eq
 80032c6:	2301      	moveq	r3, #1
 80032c8:	2300      	movne	r3, #0
 80032ca:	b2db      	uxtb	r3, r3
 80032cc:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d057      	beq.n	8003384 <HAL_ADC_IRQHandler+0x1b8>
 80032d4:	68bb      	ldr	r3, [r7, #8]
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d054      	beq.n	8003384 <HAL_ADC_IRQHandler+0x1b8>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032de:	f003 0310 	and.w	r3, r3, #16
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d105      	bne.n	80032f2 <HAL_ADC_IRQHandler+0x126>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032ea:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	689b      	ldr	r3, [r3, #8]
 80032f8:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d139      	bne.n	8003374 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003306:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800330a:	2b00      	cmp	r3, #0
 800330c:	d006      	beq.n	800331c <HAL_ADC_IRQHandler+0x150>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	689b      	ldr	r3, [r3, #8]
 8003314:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8003318:	2b00      	cmp	r3, #0
 800331a:	d12b      	bne.n	8003374 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	685b      	ldr	r3, [r3, #4]
 8003322:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8003326:	2b00      	cmp	r3, #0
 8003328:	d124      	bne.n	8003374 <HAL_ADC_IRQHandler+0x1a8>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	689b      	ldr	r3, [r3, #8]
 8003330:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8003334:	2b00      	cmp	r3, #0
 8003336:	d11d      	bne.n	8003374 <HAL_ADC_IRQHandler+0x1a8>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 800333c:	2b00      	cmp	r3, #0
 800333e:	d119      	bne.n	8003374 <HAL_ADC_IRQHandler+0x1a8>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	685a      	ldr	r2, [r3, #4]
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800334e:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003354:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003360:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003364:	2b00      	cmp	r3, #0
 8003366:	d105      	bne.n	8003374 <HAL_ADC_IRQHandler+0x1a8>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800336c:	f043 0201 	orr.w	r2, r3, #1
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8003374:	6878      	ldr	r0, [r7, #4]
 8003376:	f000 faa9 	bl	80038cc <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f06f 020c 	mvn.w	r2, #12
 8003382:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f003 0301 	and.w	r3, r3, #1
 800338e:	2b01      	cmp	r3, #1
 8003390:	bf0c      	ite	eq
 8003392:	2301      	moveq	r3, #1
 8003394:	2300      	movne	r3, #0
 8003396:	b2db      	uxtb	r3, r3
 8003398:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	685b      	ldr	r3, [r3, #4]
 80033a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033a4:	2b40      	cmp	r3, #64	; 0x40
 80033a6:	bf0c      	ite	eq
 80033a8:	2301      	moveq	r3, #1
 80033aa:	2300      	movne	r3, #0
 80033ac:	b2db      	uxtb	r3, r3
 80033ae:	60bb      	str	r3, [r7, #8]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d017      	beq.n	80033e6 <HAL_ADC_IRQHandler+0x21a>
 80033b6:	68bb      	ldr	r3, [r7, #8]
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d014      	beq.n	80033e6 <HAL_ADC_IRQHandler+0x21a>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f003 0301 	and.w	r3, r3, #1
 80033c6:	2b01      	cmp	r3, #1
 80033c8:	d10d      	bne.n	80033e6 <HAL_ADC_IRQHandler+0x21a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033ce:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80033d6:	6878      	ldr	r0, [r7, #4]
 80033d8:	f000 f846 	bl	8003468 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f06f 0201 	mvn.w	r2, #1
 80033e4:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f003 0320 	and.w	r3, r3, #32
 80033f0:	2b20      	cmp	r3, #32
 80033f2:	bf0c      	ite	eq
 80033f4:	2301      	moveq	r3, #1
 80033f6:	2300      	movne	r3, #0
 80033f8:	b2db      	uxtb	r3, r3
 80033fa:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	685b      	ldr	r3, [r3, #4]
 8003402:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003406:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800340a:	bf0c      	ite	eq
 800340c:	2301      	moveq	r3, #1
 800340e:	2300      	movne	r3, #0
 8003410:	b2db      	uxtb	r3, r3
 8003412:	60bb      	str	r3, [r7, #8]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	2b00      	cmp	r3, #0
 8003418:	d015      	beq.n	8003446 <HAL_ADC_IRQHandler+0x27a>
 800341a:	68bb      	ldr	r3, [r7, #8]
 800341c:	2b00      	cmp	r3, #0
 800341e:	d012      	beq.n	8003446 <HAL_ADC_IRQHandler+0x27a>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003424:	f043 0202 	orr.w	r2, r3, #2
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f06f 0220 	mvn.w	r2, #32
 8003434:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8003436:	6878      	ldr	r0, [r7, #4]
 8003438:	f000 f820 	bl	800347c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f06f 0220 	mvn.w	r2, #32
 8003444:	601a      	str	r2, [r3, #0]
  }
}
 8003446:	bf00      	nop
 8003448:	3710      	adds	r7, #16
 800344a:	46bd      	mov	sp, r7
 800344c:	bd80      	pop	{r7, pc}

0800344e <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 800344e:	b480      	push	{r7}
 8003450:	b083      	sub	sp, #12
 8003452:	af00      	add	r7, sp, #0
 8003454:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 800345c:	4618      	mov	r0, r3
 800345e:	370c      	adds	r7, #12
 8003460:	46bd      	mov	sp, r7
 8003462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003466:	4770      	bx	lr

08003468 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8003468:	b480      	push	{r7}
 800346a:	b083      	sub	sp, #12
 800346c:	af00      	add	r7, sp, #0
 800346e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8003470:	bf00      	nop
 8003472:	370c      	adds	r7, #12
 8003474:	46bd      	mov	sp, r7
 8003476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800347a:	4770      	bx	lr

0800347c <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800347c:	b480      	push	{r7}
 800347e:	b083      	sub	sp, #12
 8003480:	af00      	add	r7, sp, #0
 8003482:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8003484:	bf00      	nop
 8003486:	370c      	adds	r7, #12
 8003488:	46bd      	mov	sp, r7
 800348a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800348e:	4770      	bx	lr

08003490 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003490:	b480      	push	{r7}
 8003492:	b085      	sub	sp, #20
 8003494:	af00      	add	r7, sp, #0
 8003496:	6078      	str	r0, [r7, #4]
 8003498:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800349a:	2300      	movs	r3, #0
 800349c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80034a4:	2b01      	cmp	r3, #1
 80034a6:	d101      	bne.n	80034ac <HAL_ADC_ConfigChannel+0x1c>
 80034a8:	2302      	movs	r3, #2
 80034aa:	e105      	b.n	80036b8 <HAL_ADC_ConfigChannel+0x228>
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	2201      	movs	r2, #1
 80034b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80034b4:	683b      	ldr	r3, [r7, #0]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	2b09      	cmp	r3, #9
 80034ba:	d925      	bls.n	8003508 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	68d9      	ldr	r1, [r3, #12]
 80034c2:	683b      	ldr	r3, [r7, #0]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	b29b      	uxth	r3, r3
 80034c8:	461a      	mov	r2, r3
 80034ca:	4613      	mov	r3, r2
 80034cc:	005b      	lsls	r3, r3, #1
 80034ce:	4413      	add	r3, r2
 80034d0:	3b1e      	subs	r3, #30
 80034d2:	2207      	movs	r2, #7
 80034d4:	fa02 f303 	lsl.w	r3, r2, r3
 80034d8:	43da      	mvns	r2, r3
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	400a      	ands	r2, r1
 80034e0:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	68d9      	ldr	r1, [r3, #12]
 80034e8:	683b      	ldr	r3, [r7, #0]
 80034ea:	689a      	ldr	r2, [r3, #8]
 80034ec:	683b      	ldr	r3, [r7, #0]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	b29b      	uxth	r3, r3
 80034f2:	4618      	mov	r0, r3
 80034f4:	4603      	mov	r3, r0
 80034f6:	005b      	lsls	r3, r3, #1
 80034f8:	4403      	add	r3, r0
 80034fa:	3b1e      	subs	r3, #30
 80034fc:	409a      	lsls	r2, r3
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	430a      	orrs	r2, r1
 8003504:	60da      	str	r2, [r3, #12]
 8003506:	e022      	b.n	800354e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	6919      	ldr	r1, [r3, #16]
 800350e:	683b      	ldr	r3, [r7, #0]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	b29b      	uxth	r3, r3
 8003514:	461a      	mov	r2, r3
 8003516:	4613      	mov	r3, r2
 8003518:	005b      	lsls	r3, r3, #1
 800351a:	4413      	add	r3, r2
 800351c:	2207      	movs	r2, #7
 800351e:	fa02 f303 	lsl.w	r3, r2, r3
 8003522:	43da      	mvns	r2, r3
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	400a      	ands	r2, r1
 800352a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	6919      	ldr	r1, [r3, #16]
 8003532:	683b      	ldr	r3, [r7, #0]
 8003534:	689a      	ldr	r2, [r3, #8]
 8003536:	683b      	ldr	r3, [r7, #0]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	b29b      	uxth	r3, r3
 800353c:	4618      	mov	r0, r3
 800353e:	4603      	mov	r3, r0
 8003540:	005b      	lsls	r3, r3, #1
 8003542:	4403      	add	r3, r0
 8003544:	409a      	lsls	r2, r3
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	430a      	orrs	r2, r1
 800354c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800354e:	683b      	ldr	r3, [r7, #0]
 8003550:	685b      	ldr	r3, [r3, #4]
 8003552:	2b06      	cmp	r3, #6
 8003554:	d824      	bhi.n	80035a0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800355c:	683b      	ldr	r3, [r7, #0]
 800355e:	685a      	ldr	r2, [r3, #4]
 8003560:	4613      	mov	r3, r2
 8003562:	009b      	lsls	r3, r3, #2
 8003564:	4413      	add	r3, r2
 8003566:	3b05      	subs	r3, #5
 8003568:	221f      	movs	r2, #31
 800356a:	fa02 f303 	lsl.w	r3, r2, r3
 800356e:	43da      	mvns	r2, r3
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	400a      	ands	r2, r1
 8003576:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800357e:	683b      	ldr	r3, [r7, #0]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	b29b      	uxth	r3, r3
 8003584:	4618      	mov	r0, r3
 8003586:	683b      	ldr	r3, [r7, #0]
 8003588:	685a      	ldr	r2, [r3, #4]
 800358a:	4613      	mov	r3, r2
 800358c:	009b      	lsls	r3, r3, #2
 800358e:	4413      	add	r3, r2
 8003590:	3b05      	subs	r3, #5
 8003592:	fa00 f203 	lsl.w	r2, r0, r3
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	430a      	orrs	r2, r1
 800359c:	635a      	str	r2, [r3, #52]	; 0x34
 800359e:	e04c      	b.n	800363a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80035a0:	683b      	ldr	r3, [r7, #0]
 80035a2:	685b      	ldr	r3, [r3, #4]
 80035a4:	2b0c      	cmp	r3, #12
 80035a6:	d824      	bhi.n	80035f2 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80035ae:	683b      	ldr	r3, [r7, #0]
 80035b0:	685a      	ldr	r2, [r3, #4]
 80035b2:	4613      	mov	r3, r2
 80035b4:	009b      	lsls	r3, r3, #2
 80035b6:	4413      	add	r3, r2
 80035b8:	3b23      	subs	r3, #35	; 0x23
 80035ba:	221f      	movs	r2, #31
 80035bc:	fa02 f303 	lsl.w	r3, r2, r3
 80035c0:	43da      	mvns	r2, r3
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	400a      	ands	r2, r1
 80035c8:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80035d0:	683b      	ldr	r3, [r7, #0]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	b29b      	uxth	r3, r3
 80035d6:	4618      	mov	r0, r3
 80035d8:	683b      	ldr	r3, [r7, #0]
 80035da:	685a      	ldr	r2, [r3, #4]
 80035dc:	4613      	mov	r3, r2
 80035de:	009b      	lsls	r3, r3, #2
 80035e0:	4413      	add	r3, r2
 80035e2:	3b23      	subs	r3, #35	; 0x23
 80035e4:	fa00 f203 	lsl.w	r2, r0, r3
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	430a      	orrs	r2, r1
 80035ee:	631a      	str	r2, [r3, #48]	; 0x30
 80035f0:	e023      	b.n	800363a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80035f8:	683b      	ldr	r3, [r7, #0]
 80035fa:	685a      	ldr	r2, [r3, #4]
 80035fc:	4613      	mov	r3, r2
 80035fe:	009b      	lsls	r3, r3, #2
 8003600:	4413      	add	r3, r2
 8003602:	3b41      	subs	r3, #65	; 0x41
 8003604:	221f      	movs	r2, #31
 8003606:	fa02 f303 	lsl.w	r3, r2, r3
 800360a:	43da      	mvns	r2, r3
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	400a      	ands	r2, r1
 8003612:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800361a:	683b      	ldr	r3, [r7, #0]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	b29b      	uxth	r3, r3
 8003620:	4618      	mov	r0, r3
 8003622:	683b      	ldr	r3, [r7, #0]
 8003624:	685a      	ldr	r2, [r3, #4]
 8003626:	4613      	mov	r3, r2
 8003628:	009b      	lsls	r3, r3, #2
 800362a:	4413      	add	r3, r2
 800362c:	3b41      	subs	r3, #65	; 0x41
 800362e:	fa00 f203 	lsl.w	r2, r0, r3
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	430a      	orrs	r2, r1
 8003638:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800363a:	4b22      	ldr	r3, [pc, #136]	; (80036c4 <HAL_ADC_ConfigChannel+0x234>)
 800363c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	4a21      	ldr	r2, [pc, #132]	; (80036c8 <HAL_ADC_ConfigChannel+0x238>)
 8003644:	4293      	cmp	r3, r2
 8003646:	d109      	bne.n	800365c <HAL_ADC_ConfigChannel+0x1cc>
 8003648:	683b      	ldr	r3, [r7, #0]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	2b12      	cmp	r3, #18
 800364e:	d105      	bne.n	800365c <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	685b      	ldr	r3, [r3, #4]
 8003654:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	4a19      	ldr	r2, [pc, #100]	; (80036c8 <HAL_ADC_ConfigChannel+0x238>)
 8003662:	4293      	cmp	r3, r2
 8003664:	d123      	bne.n	80036ae <HAL_ADC_ConfigChannel+0x21e>
 8003666:	683b      	ldr	r3, [r7, #0]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	2b10      	cmp	r3, #16
 800366c:	d003      	beq.n	8003676 <HAL_ADC_ConfigChannel+0x1e6>
 800366e:	683b      	ldr	r3, [r7, #0]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	2b11      	cmp	r3, #17
 8003674:	d11b      	bne.n	80036ae <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	685b      	ldr	r3, [r3, #4]
 800367a:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003682:	683b      	ldr	r3, [r7, #0]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	2b10      	cmp	r3, #16
 8003688:	d111      	bne.n	80036ae <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800368a:	4b10      	ldr	r3, [pc, #64]	; (80036cc <HAL_ADC_ConfigChannel+0x23c>)
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	4a10      	ldr	r2, [pc, #64]	; (80036d0 <HAL_ADC_ConfigChannel+0x240>)
 8003690:	fba2 2303 	umull	r2, r3, r2, r3
 8003694:	0c9a      	lsrs	r2, r3, #18
 8003696:	4613      	mov	r3, r2
 8003698:	009b      	lsls	r3, r3, #2
 800369a:	4413      	add	r3, r2
 800369c:	005b      	lsls	r3, r3, #1
 800369e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80036a0:	e002      	b.n	80036a8 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80036a2:	68bb      	ldr	r3, [r7, #8]
 80036a4:	3b01      	subs	r3, #1
 80036a6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80036a8:	68bb      	ldr	r3, [r7, #8]
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d1f9      	bne.n	80036a2 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	2200      	movs	r2, #0
 80036b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80036b6:	2300      	movs	r3, #0
}
 80036b8:	4618      	mov	r0, r3
 80036ba:	3714      	adds	r7, #20
 80036bc:	46bd      	mov	sp, r7
 80036be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c2:	4770      	bx	lr
 80036c4:	40012300 	.word	0x40012300
 80036c8:	40012000 	.word	0x40012000
 80036cc:	20000018 	.word	0x20000018
 80036d0:	431bde83 	.word	0x431bde83

080036d4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80036d4:	b480      	push	{r7}
 80036d6:	b085      	sub	sp, #20
 80036d8:	af00      	add	r7, sp, #0
 80036da:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80036dc:	4b79      	ldr	r3, [pc, #484]	; (80038c4 <ADC_Init+0x1f0>)
 80036de:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	685b      	ldr	r3, [r3, #4]
 80036e4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	685a      	ldr	r2, [r3, #4]
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	685b      	ldr	r3, [r3, #4]
 80036f4:	431a      	orrs	r2, r3
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	685a      	ldr	r2, [r3, #4]
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003708:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	6859      	ldr	r1, [r3, #4]
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	691b      	ldr	r3, [r3, #16]
 8003714:	021a      	lsls	r2, r3, #8
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	430a      	orrs	r2, r1
 800371c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	685a      	ldr	r2, [r3, #4]
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800372c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	6859      	ldr	r1, [r3, #4]
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	689a      	ldr	r2, [r3, #8]
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	430a      	orrs	r2, r1
 800373e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	689a      	ldr	r2, [r3, #8]
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800374e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	6899      	ldr	r1, [r3, #8]
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	68da      	ldr	r2, [r3, #12]
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	430a      	orrs	r2, r1
 8003760:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003766:	4a58      	ldr	r2, [pc, #352]	; (80038c8 <ADC_Init+0x1f4>)
 8003768:	4293      	cmp	r3, r2
 800376a:	d022      	beq.n	80037b2 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	689a      	ldr	r2, [r3, #8]
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800377a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	6899      	ldr	r1, [r3, #8]
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	430a      	orrs	r2, r1
 800378c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	689a      	ldr	r2, [r3, #8]
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800379c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	6899      	ldr	r1, [r3, #8]
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	430a      	orrs	r2, r1
 80037ae:	609a      	str	r2, [r3, #8]
 80037b0:	e00f      	b.n	80037d2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	689a      	ldr	r2, [r3, #8]
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80037c0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	689a      	ldr	r2, [r3, #8]
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80037d0:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	689a      	ldr	r2, [r3, #8]
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f022 0202 	bic.w	r2, r2, #2
 80037e0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	6899      	ldr	r1, [r3, #8]
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	7e1b      	ldrb	r3, [r3, #24]
 80037ec:	005a      	lsls	r2, r3, #1
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	430a      	orrs	r2, r1
 80037f4:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d01b      	beq.n	8003838 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	685a      	ldr	r2, [r3, #4]
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800380e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	685a      	ldr	r2, [r3, #4]
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800381e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	6859      	ldr	r1, [r3, #4]
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800382a:	3b01      	subs	r3, #1
 800382c:	035a      	lsls	r2, r3, #13
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	430a      	orrs	r2, r1
 8003834:	605a      	str	r2, [r3, #4]
 8003836:	e007      	b.n	8003848 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	685a      	ldr	r2, [r3, #4]
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003846:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003856:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	69db      	ldr	r3, [r3, #28]
 8003862:	3b01      	subs	r3, #1
 8003864:	051a      	lsls	r2, r3, #20
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	430a      	orrs	r2, r1
 800386c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	689a      	ldr	r2, [r3, #8]
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800387c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	6899      	ldr	r1, [r3, #8]
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800388a:	025a      	lsls	r2, r3, #9
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	430a      	orrs	r2, r1
 8003892:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	689a      	ldr	r2, [r3, #8]
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80038a2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	6899      	ldr	r1, [r3, #8]
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	695b      	ldr	r3, [r3, #20]
 80038ae:	029a      	lsls	r2, r3, #10
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	430a      	orrs	r2, r1
 80038b6:	609a      	str	r2, [r3, #8]
}
 80038b8:	bf00      	nop
 80038ba:	3714      	adds	r7, #20
 80038bc:	46bd      	mov	sp, r7
 80038be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c2:	4770      	bx	lr
 80038c4:	40012300 	.word	0x40012300
 80038c8:	0f000001 	.word	0x0f000001

080038cc <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80038cc:	b480      	push	{r7}
 80038ce:	b083      	sub	sp, #12
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 80038d4:	bf00      	nop
 80038d6:	370c      	adds	r7, #12
 80038d8:	46bd      	mov	sp, r7
 80038da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038de:	4770      	bx	lr

080038e0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80038e0:	b480      	push	{r7}
 80038e2:	b085      	sub	sp, #20
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	f003 0307 	and.w	r3, r3, #7
 80038ee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80038f0:	4b0c      	ldr	r3, [pc, #48]	; (8003924 <__NVIC_SetPriorityGrouping+0x44>)
 80038f2:	68db      	ldr	r3, [r3, #12]
 80038f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80038f6:	68ba      	ldr	r2, [r7, #8]
 80038f8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80038fc:	4013      	ands	r3, r2
 80038fe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003904:	68bb      	ldr	r3, [r7, #8]
 8003906:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003908:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800390c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003910:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003912:	4a04      	ldr	r2, [pc, #16]	; (8003924 <__NVIC_SetPriorityGrouping+0x44>)
 8003914:	68bb      	ldr	r3, [r7, #8]
 8003916:	60d3      	str	r3, [r2, #12]
}
 8003918:	bf00      	nop
 800391a:	3714      	adds	r7, #20
 800391c:	46bd      	mov	sp, r7
 800391e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003922:	4770      	bx	lr
 8003924:	e000ed00 	.word	0xe000ed00

08003928 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003928:	b480      	push	{r7}
 800392a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800392c:	4b04      	ldr	r3, [pc, #16]	; (8003940 <__NVIC_GetPriorityGrouping+0x18>)
 800392e:	68db      	ldr	r3, [r3, #12]
 8003930:	0a1b      	lsrs	r3, r3, #8
 8003932:	f003 0307 	and.w	r3, r3, #7
}
 8003936:	4618      	mov	r0, r3
 8003938:	46bd      	mov	sp, r7
 800393a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800393e:	4770      	bx	lr
 8003940:	e000ed00 	.word	0xe000ed00

08003944 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003944:	b480      	push	{r7}
 8003946:	b083      	sub	sp, #12
 8003948:	af00      	add	r7, sp, #0
 800394a:	4603      	mov	r3, r0
 800394c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800394e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003952:	2b00      	cmp	r3, #0
 8003954:	db0b      	blt.n	800396e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003956:	79fb      	ldrb	r3, [r7, #7]
 8003958:	f003 021f 	and.w	r2, r3, #31
 800395c:	4907      	ldr	r1, [pc, #28]	; (800397c <__NVIC_EnableIRQ+0x38>)
 800395e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003962:	095b      	lsrs	r3, r3, #5
 8003964:	2001      	movs	r0, #1
 8003966:	fa00 f202 	lsl.w	r2, r0, r2
 800396a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800396e:	bf00      	nop
 8003970:	370c      	adds	r7, #12
 8003972:	46bd      	mov	sp, r7
 8003974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003978:	4770      	bx	lr
 800397a:	bf00      	nop
 800397c:	e000e100 	.word	0xe000e100

08003980 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003980:	b480      	push	{r7}
 8003982:	b083      	sub	sp, #12
 8003984:	af00      	add	r7, sp, #0
 8003986:	4603      	mov	r3, r0
 8003988:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800398a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800398e:	2b00      	cmp	r3, #0
 8003990:	db12      	blt.n	80039b8 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003992:	79fb      	ldrb	r3, [r7, #7]
 8003994:	f003 021f 	and.w	r2, r3, #31
 8003998:	490a      	ldr	r1, [pc, #40]	; (80039c4 <__NVIC_DisableIRQ+0x44>)
 800399a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800399e:	095b      	lsrs	r3, r3, #5
 80039a0:	2001      	movs	r0, #1
 80039a2:	fa00 f202 	lsl.w	r2, r0, r2
 80039a6:	3320      	adds	r3, #32
 80039a8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80039ac:	f3bf 8f4f 	dsb	sy
}
 80039b0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80039b2:	f3bf 8f6f 	isb	sy
}
 80039b6:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 80039b8:	bf00      	nop
 80039ba:	370c      	adds	r7, #12
 80039bc:	46bd      	mov	sp, r7
 80039be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c2:	4770      	bx	lr
 80039c4:	e000e100 	.word	0xe000e100

080039c8 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 80039c8:	b480      	push	{r7}
 80039ca:	b083      	sub	sp, #12
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	4603      	mov	r3, r0
 80039d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80039d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	db0c      	blt.n	80039f4 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80039da:	79fb      	ldrb	r3, [r7, #7]
 80039dc:	f003 021f 	and.w	r2, r3, #31
 80039e0:	4907      	ldr	r1, [pc, #28]	; (8003a00 <__NVIC_ClearPendingIRQ+0x38>)
 80039e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039e6:	095b      	lsrs	r3, r3, #5
 80039e8:	2001      	movs	r0, #1
 80039ea:	fa00 f202 	lsl.w	r2, r0, r2
 80039ee:	3360      	adds	r3, #96	; 0x60
 80039f0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80039f4:	bf00      	nop
 80039f6:	370c      	adds	r7, #12
 80039f8:	46bd      	mov	sp, r7
 80039fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039fe:	4770      	bx	lr
 8003a00:	e000e100 	.word	0xe000e100

08003a04 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003a04:	b480      	push	{r7}
 8003a06:	b083      	sub	sp, #12
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	4603      	mov	r3, r0
 8003a0c:	6039      	str	r1, [r7, #0]
 8003a0e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003a10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	db0a      	blt.n	8003a2e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a18:	683b      	ldr	r3, [r7, #0]
 8003a1a:	b2da      	uxtb	r2, r3
 8003a1c:	490c      	ldr	r1, [pc, #48]	; (8003a50 <__NVIC_SetPriority+0x4c>)
 8003a1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a22:	0112      	lsls	r2, r2, #4
 8003a24:	b2d2      	uxtb	r2, r2
 8003a26:	440b      	add	r3, r1
 8003a28:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003a2c:	e00a      	b.n	8003a44 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a2e:	683b      	ldr	r3, [r7, #0]
 8003a30:	b2da      	uxtb	r2, r3
 8003a32:	4908      	ldr	r1, [pc, #32]	; (8003a54 <__NVIC_SetPriority+0x50>)
 8003a34:	79fb      	ldrb	r3, [r7, #7]
 8003a36:	f003 030f 	and.w	r3, r3, #15
 8003a3a:	3b04      	subs	r3, #4
 8003a3c:	0112      	lsls	r2, r2, #4
 8003a3e:	b2d2      	uxtb	r2, r2
 8003a40:	440b      	add	r3, r1
 8003a42:	761a      	strb	r2, [r3, #24]
}
 8003a44:	bf00      	nop
 8003a46:	370c      	adds	r7, #12
 8003a48:	46bd      	mov	sp, r7
 8003a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a4e:	4770      	bx	lr
 8003a50:	e000e100 	.word	0xe000e100
 8003a54:	e000ed00 	.word	0xe000ed00

08003a58 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003a58:	b480      	push	{r7}
 8003a5a:	b089      	sub	sp, #36	; 0x24
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	60f8      	str	r0, [r7, #12]
 8003a60:	60b9      	str	r1, [r7, #8]
 8003a62:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	f003 0307 	and.w	r3, r3, #7
 8003a6a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003a6c:	69fb      	ldr	r3, [r7, #28]
 8003a6e:	f1c3 0307 	rsb	r3, r3, #7
 8003a72:	2b04      	cmp	r3, #4
 8003a74:	bf28      	it	cs
 8003a76:	2304      	movcs	r3, #4
 8003a78:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003a7a:	69fb      	ldr	r3, [r7, #28]
 8003a7c:	3304      	adds	r3, #4
 8003a7e:	2b06      	cmp	r3, #6
 8003a80:	d902      	bls.n	8003a88 <NVIC_EncodePriority+0x30>
 8003a82:	69fb      	ldr	r3, [r7, #28]
 8003a84:	3b03      	subs	r3, #3
 8003a86:	e000      	b.n	8003a8a <NVIC_EncodePriority+0x32>
 8003a88:	2300      	movs	r3, #0
 8003a8a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003a8c:	f04f 32ff 	mov.w	r2, #4294967295
 8003a90:	69bb      	ldr	r3, [r7, #24]
 8003a92:	fa02 f303 	lsl.w	r3, r2, r3
 8003a96:	43da      	mvns	r2, r3
 8003a98:	68bb      	ldr	r3, [r7, #8]
 8003a9a:	401a      	ands	r2, r3
 8003a9c:	697b      	ldr	r3, [r7, #20]
 8003a9e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003aa0:	f04f 31ff 	mov.w	r1, #4294967295
 8003aa4:	697b      	ldr	r3, [r7, #20]
 8003aa6:	fa01 f303 	lsl.w	r3, r1, r3
 8003aaa:	43d9      	mvns	r1, r3
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003ab0:	4313      	orrs	r3, r2
         );
}
 8003ab2:	4618      	mov	r0, r3
 8003ab4:	3724      	adds	r7, #36	; 0x24
 8003ab6:	46bd      	mov	sp, r7
 8003ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003abc:	4770      	bx	lr
	...

08003ac0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003ac0:	b580      	push	{r7, lr}
 8003ac2:	b082      	sub	sp, #8
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	3b01      	subs	r3, #1
 8003acc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003ad0:	d301      	bcc.n	8003ad6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003ad2:	2301      	movs	r3, #1
 8003ad4:	e00f      	b.n	8003af6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003ad6:	4a0a      	ldr	r2, [pc, #40]	; (8003b00 <SysTick_Config+0x40>)
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	3b01      	subs	r3, #1
 8003adc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003ade:	210f      	movs	r1, #15
 8003ae0:	f04f 30ff 	mov.w	r0, #4294967295
 8003ae4:	f7ff ff8e 	bl	8003a04 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003ae8:	4b05      	ldr	r3, [pc, #20]	; (8003b00 <SysTick_Config+0x40>)
 8003aea:	2200      	movs	r2, #0
 8003aec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003aee:	4b04      	ldr	r3, [pc, #16]	; (8003b00 <SysTick_Config+0x40>)
 8003af0:	2207      	movs	r2, #7
 8003af2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003af4:	2300      	movs	r3, #0
}
 8003af6:	4618      	mov	r0, r3
 8003af8:	3708      	adds	r7, #8
 8003afa:	46bd      	mov	sp, r7
 8003afc:	bd80      	pop	{r7, pc}
 8003afe:	bf00      	nop
 8003b00:	e000e010 	.word	0xe000e010

08003b04 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003b04:	b580      	push	{r7, lr}
 8003b06:	b082      	sub	sp, #8
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003b0c:	6878      	ldr	r0, [r7, #4]
 8003b0e:	f7ff fee7 	bl	80038e0 <__NVIC_SetPriorityGrouping>
}
 8003b12:	bf00      	nop
 8003b14:	3708      	adds	r7, #8
 8003b16:	46bd      	mov	sp, r7
 8003b18:	bd80      	pop	{r7, pc}

08003b1a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003b1a:	b580      	push	{r7, lr}
 8003b1c:	b086      	sub	sp, #24
 8003b1e:	af00      	add	r7, sp, #0
 8003b20:	4603      	mov	r3, r0
 8003b22:	60b9      	str	r1, [r7, #8]
 8003b24:	607a      	str	r2, [r7, #4]
 8003b26:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003b28:	2300      	movs	r3, #0
 8003b2a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003b2c:	f7ff fefc 	bl	8003928 <__NVIC_GetPriorityGrouping>
 8003b30:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003b32:	687a      	ldr	r2, [r7, #4]
 8003b34:	68b9      	ldr	r1, [r7, #8]
 8003b36:	6978      	ldr	r0, [r7, #20]
 8003b38:	f7ff ff8e 	bl	8003a58 <NVIC_EncodePriority>
 8003b3c:	4602      	mov	r2, r0
 8003b3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003b42:	4611      	mov	r1, r2
 8003b44:	4618      	mov	r0, r3
 8003b46:	f7ff ff5d 	bl	8003a04 <__NVIC_SetPriority>
}
 8003b4a:	bf00      	nop
 8003b4c:	3718      	adds	r7, #24
 8003b4e:	46bd      	mov	sp, r7
 8003b50:	bd80      	pop	{r7, pc}

08003b52 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003b52:	b580      	push	{r7, lr}
 8003b54:	b082      	sub	sp, #8
 8003b56:	af00      	add	r7, sp, #0
 8003b58:	4603      	mov	r3, r0
 8003b5a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003b5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b60:	4618      	mov	r0, r3
 8003b62:	f7ff feef 	bl	8003944 <__NVIC_EnableIRQ>
}
 8003b66:	bf00      	nop
 8003b68:	3708      	adds	r7, #8
 8003b6a:	46bd      	mov	sp, r7
 8003b6c:	bd80      	pop	{r7, pc}

08003b6e <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003b6e:	b580      	push	{r7, lr}
 8003b70:	b082      	sub	sp, #8
 8003b72:	af00      	add	r7, sp, #0
 8003b74:	4603      	mov	r3, r0
 8003b76:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8003b78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b7c:	4618      	mov	r0, r3
 8003b7e:	f7ff feff 	bl	8003980 <__NVIC_DisableIRQ>
}
 8003b82:	bf00      	nop
 8003b84:	3708      	adds	r7, #8
 8003b86:	46bd      	mov	sp, r7
 8003b88:	bd80      	pop	{r7, pc}

08003b8a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003b8a:	b580      	push	{r7, lr}
 8003b8c:	b082      	sub	sp, #8
 8003b8e:	af00      	add	r7, sp, #0
 8003b90:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003b92:	6878      	ldr	r0, [r7, #4]
 8003b94:	f7ff ff94 	bl	8003ac0 <SysTick_Config>
 8003b98:	4603      	mov	r3, r0
}
 8003b9a:	4618      	mov	r0, r3
 8003b9c:	3708      	adds	r7, #8
 8003b9e:	46bd      	mov	sp, r7
 8003ba0:	bd80      	pop	{r7, pc}

08003ba2 <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8003ba2:	b580      	push	{r7, lr}
 8003ba4:	b082      	sub	sp, #8
 8003ba6:	af00      	add	r7, sp, #0
 8003ba8:	4603      	mov	r3, r0
 8003baa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 8003bac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003bb0:	4618      	mov	r0, r3
 8003bb2:	f7ff ff09 	bl	80039c8 <__NVIC_ClearPendingIRQ>
}
 8003bb6:	bf00      	nop
 8003bb8:	3708      	adds	r7, #8
 8003bba:	46bd      	mov	sp, r7
 8003bbc:	bd80      	pop	{r7, pc}
	...

08003bc0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003bc0:	b580      	push	{r7, lr}
 8003bc2:	b086      	sub	sp, #24
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003bc8:	2300      	movs	r3, #0
 8003bca:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003bcc:	f7ff f98c 	bl	8002ee8 <HAL_GetTick>
 8003bd0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d101      	bne.n	8003bdc <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003bd8:	2301      	movs	r3, #1
 8003bda:	e099      	b.n	8003d10 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	2202      	movs	r2, #2
 8003be0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	2200      	movs	r2, #0
 8003be8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	681a      	ldr	r2, [r3, #0]
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	f022 0201 	bic.w	r2, r2, #1
 8003bfa:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003bfc:	e00f      	b.n	8003c1e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003bfe:	f7ff f973 	bl	8002ee8 <HAL_GetTick>
 8003c02:	4602      	mov	r2, r0
 8003c04:	693b      	ldr	r3, [r7, #16]
 8003c06:	1ad3      	subs	r3, r2, r3
 8003c08:	2b05      	cmp	r3, #5
 8003c0a:	d908      	bls.n	8003c1e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	2220      	movs	r2, #32
 8003c10:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	2203      	movs	r2, #3
 8003c16:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003c1a:	2303      	movs	r3, #3
 8003c1c:	e078      	b.n	8003d10 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	f003 0301 	and.w	r3, r3, #1
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d1e8      	bne.n	8003bfe <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003c34:	697a      	ldr	r2, [r7, #20]
 8003c36:	4b38      	ldr	r3, [pc, #224]	; (8003d18 <HAL_DMA_Init+0x158>)
 8003c38:	4013      	ands	r3, r2
 8003c3a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	685a      	ldr	r2, [r3, #4]
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	689b      	ldr	r3, [r3, #8]
 8003c44:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003c4a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	691b      	ldr	r3, [r3, #16]
 8003c50:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003c56:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	699b      	ldr	r3, [r3, #24]
 8003c5c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003c62:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	6a1b      	ldr	r3, [r3, #32]
 8003c68:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003c6a:	697a      	ldr	r2, [r7, #20]
 8003c6c:	4313      	orrs	r3, r2
 8003c6e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c74:	2b04      	cmp	r3, #4
 8003c76:	d107      	bne.n	8003c88 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c80:	4313      	orrs	r3, r2
 8003c82:	697a      	ldr	r2, [r7, #20]
 8003c84:	4313      	orrs	r3, r2
 8003c86:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	697a      	ldr	r2, [r7, #20]
 8003c8e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	695b      	ldr	r3, [r3, #20]
 8003c96:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003c98:	697b      	ldr	r3, [r7, #20]
 8003c9a:	f023 0307 	bic.w	r3, r3, #7
 8003c9e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ca4:	697a      	ldr	r2, [r7, #20]
 8003ca6:	4313      	orrs	r3, r2
 8003ca8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cae:	2b04      	cmp	r3, #4
 8003cb0:	d117      	bne.n	8003ce2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cb6:	697a      	ldr	r2, [r7, #20]
 8003cb8:	4313      	orrs	r3, r2
 8003cba:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d00e      	beq.n	8003ce2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003cc4:	6878      	ldr	r0, [r7, #4]
 8003cc6:	f000 faab 	bl	8004220 <DMA_CheckFifoParam>
 8003cca:	4603      	mov	r3, r0
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d008      	beq.n	8003ce2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	2240      	movs	r2, #64	; 0x40
 8003cd4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	2201      	movs	r2, #1
 8003cda:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003cde:	2301      	movs	r3, #1
 8003ce0:	e016      	b.n	8003d10 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	697a      	ldr	r2, [r7, #20]
 8003ce8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003cea:	6878      	ldr	r0, [r7, #4]
 8003cec:	f000 fa62 	bl	80041b4 <DMA_CalcBaseAndBitshift>
 8003cf0:	4603      	mov	r3, r0
 8003cf2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003cf8:	223f      	movs	r2, #63	; 0x3f
 8003cfa:	409a      	lsls	r2, r3
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	2200      	movs	r2, #0
 8003d04:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	2201      	movs	r2, #1
 8003d0a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003d0e:	2300      	movs	r3, #0
}
 8003d10:	4618      	mov	r0, r3
 8003d12:	3718      	adds	r7, #24
 8003d14:	46bd      	mov	sp, r7
 8003d16:	bd80      	pop	{r7, pc}
 8003d18:	f010803f 	.word	0xf010803f

08003d1c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003d1c:	b580      	push	{r7, lr}
 8003d1e:	b086      	sub	sp, #24
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	60f8      	str	r0, [r7, #12]
 8003d24:	60b9      	str	r1, [r7, #8]
 8003d26:	607a      	str	r2, [r7, #4]
 8003d28:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003d2a:	2300      	movs	r3, #0
 8003d2c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d32:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003d3a:	2b01      	cmp	r3, #1
 8003d3c:	d101      	bne.n	8003d42 <HAL_DMA_Start_IT+0x26>
 8003d3e:	2302      	movs	r3, #2
 8003d40:	e040      	b.n	8003dc4 <HAL_DMA_Start_IT+0xa8>
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	2201      	movs	r2, #1
 8003d46:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003d50:	b2db      	uxtb	r3, r3
 8003d52:	2b01      	cmp	r3, #1
 8003d54:	d12f      	bne.n	8003db6 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	2202      	movs	r2, #2
 8003d5a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	2200      	movs	r2, #0
 8003d62:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003d64:	683b      	ldr	r3, [r7, #0]
 8003d66:	687a      	ldr	r2, [r7, #4]
 8003d68:	68b9      	ldr	r1, [r7, #8]
 8003d6a:	68f8      	ldr	r0, [r7, #12]
 8003d6c:	f000 f9f4 	bl	8004158 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d74:	223f      	movs	r2, #63	; 0x3f
 8003d76:	409a      	lsls	r2, r3
 8003d78:	693b      	ldr	r3, [r7, #16]
 8003d7a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	681a      	ldr	r2, [r3, #0]
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f042 0216 	orr.w	r2, r2, #22
 8003d8a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d007      	beq.n	8003da4 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	681a      	ldr	r2, [r3, #0]
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	f042 0208 	orr.w	r2, r2, #8
 8003da2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	681a      	ldr	r2, [r3, #0]
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	f042 0201 	orr.w	r2, r2, #1
 8003db2:	601a      	str	r2, [r3, #0]
 8003db4:	e005      	b.n	8003dc2 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	2200      	movs	r2, #0
 8003dba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003dbe:	2302      	movs	r3, #2
 8003dc0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003dc2:	7dfb      	ldrb	r3, [r7, #23]
}
 8003dc4:	4618      	mov	r0, r3
 8003dc6:	3718      	adds	r7, #24
 8003dc8:	46bd      	mov	sp, r7
 8003dca:	bd80      	pop	{r7, pc}

08003dcc <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003dcc:	b480      	push	{r7}
 8003dce:	b083      	sub	sp, #12
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003dda:	b2db      	uxtb	r3, r3
 8003ddc:	2b02      	cmp	r3, #2
 8003dde:	d004      	beq.n	8003dea <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	2280      	movs	r2, #128	; 0x80
 8003de4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003de6:	2301      	movs	r3, #1
 8003de8:	e00c      	b.n	8003e04 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	2205      	movs	r2, #5
 8003dee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	681a      	ldr	r2, [r3, #0]
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	f022 0201 	bic.w	r2, r2, #1
 8003e00:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003e02:	2300      	movs	r3, #0
}
 8003e04:	4618      	mov	r0, r3
 8003e06:	370c      	adds	r7, #12
 8003e08:	46bd      	mov	sp, r7
 8003e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e0e:	4770      	bx	lr

08003e10 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003e10:	b580      	push	{r7, lr}
 8003e12:	b086      	sub	sp, #24
 8003e14:	af00      	add	r7, sp, #0
 8003e16:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003e18:	2300      	movs	r3, #0
 8003e1a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003e1c:	4b92      	ldr	r3, [pc, #584]	; (8004068 <HAL_DMA_IRQHandler+0x258>)
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	4a92      	ldr	r2, [pc, #584]	; (800406c <HAL_DMA_IRQHandler+0x25c>)
 8003e22:	fba2 2303 	umull	r2, r3, r2, r3
 8003e26:	0a9b      	lsrs	r3, r3, #10
 8003e28:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e2e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003e30:	693b      	ldr	r3, [r7, #16]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e3a:	2208      	movs	r2, #8
 8003e3c:	409a      	lsls	r2, r3
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	4013      	ands	r3, r2
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d01a      	beq.n	8003e7c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f003 0304 	and.w	r3, r3, #4
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d013      	beq.n	8003e7c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	681a      	ldr	r2, [r3, #0]
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	f022 0204 	bic.w	r2, r2, #4
 8003e62:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e68:	2208      	movs	r2, #8
 8003e6a:	409a      	lsls	r2, r3
 8003e6c:	693b      	ldr	r3, [r7, #16]
 8003e6e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e74:	f043 0201 	orr.w	r2, r3, #1
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e80:	2201      	movs	r2, #1
 8003e82:	409a      	lsls	r2, r3
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	4013      	ands	r3, r2
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d012      	beq.n	8003eb2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	695b      	ldr	r3, [r3, #20]
 8003e92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d00b      	beq.n	8003eb2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e9e:	2201      	movs	r2, #1
 8003ea0:	409a      	lsls	r2, r3
 8003ea2:	693b      	ldr	r3, [r7, #16]
 8003ea4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003eaa:	f043 0202 	orr.w	r2, r3, #2
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003eb6:	2204      	movs	r2, #4
 8003eb8:	409a      	lsls	r2, r3
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	4013      	ands	r3, r2
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d012      	beq.n	8003ee8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	f003 0302 	and.w	r3, r3, #2
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d00b      	beq.n	8003ee8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ed4:	2204      	movs	r2, #4
 8003ed6:	409a      	lsls	r2, r3
 8003ed8:	693b      	ldr	r3, [r7, #16]
 8003eda:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ee0:	f043 0204 	orr.w	r2, r3, #4
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003eec:	2210      	movs	r2, #16
 8003eee:	409a      	lsls	r2, r3
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	4013      	ands	r3, r2
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d043      	beq.n	8003f80 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	f003 0308 	and.w	r3, r3, #8
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d03c      	beq.n	8003f80 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f0a:	2210      	movs	r2, #16
 8003f0c:	409a      	lsls	r2, r3
 8003f0e:	693b      	ldr	r3, [r7, #16]
 8003f10:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d018      	beq.n	8003f52 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d108      	bne.n	8003f40 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d024      	beq.n	8003f80 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f3a:	6878      	ldr	r0, [r7, #4]
 8003f3c:	4798      	blx	r3
 8003f3e:	e01f      	b.n	8003f80 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d01b      	beq.n	8003f80 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f4c:	6878      	ldr	r0, [r7, #4]
 8003f4e:	4798      	blx	r3
 8003f50:	e016      	b.n	8003f80 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d107      	bne.n	8003f70 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	681a      	ldr	r2, [r3, #0]
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f022 0208 	bic.w	r2, r2, #8
 8003f6e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d003      	beq.n	8003f80 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f7c:	6878      	ldr	r0, [r7, #4]
 8003f7e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f84:	2220      	movs	r2, #32
 8003f86:	409a      	lsls	r2, r3
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	4013      	ands	r3, r2
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	f000 808e 	beq.w	80040ae <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	f003 0310 	and.w	r3, r3, #16
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	f000 8086 	beq.w	80040ae <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003fa6:	2220      	movs	r2, #32
 8003fa8:	409a      	lsls	r2, r3
 8003faa:	693b      	ldr	r3, [r7, #16]
 8003fac:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003fb4:	b2db      	uxtb	r3, r3
 8003fb6:	2b05      	cmp	r3, #5
 8003fb8:	d136      	bne.n	8004028 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	681a      	ldr	r2, [r3, #0]
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	f022 0216 	bic.w	r2, r2, #22
 8003fc8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	695a      	ldr	r2, [r3, #20]
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003fd8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d103      	bne.n	8003fea <HAL_DMA_IRQHandler+0x1da>
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d007      	beq.n	8003ffa <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	681a      	ldr	r2, [r3, #0]
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	f022 0208 	bic.w	r2, r2, #8
 8003ff8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ffe:	223f      	movs	r2, #63	; 0x3f
 8004000:	409a      	lsls	r2, r3
 8004002:	693b      	ldr	r3, [r7, #16]
 8004004:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	2201      	movs	r2, #1
 800400a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	2200      	movs	r2, #0
 8004012:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800401a:	2b00      	cmp	r3, #0
 800401c:	d07d      	beq.n	800411a <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004022:	6878      	ldr	r0, [r7, #4]
 8004024:	4798      	blx	r3
        }
        return;
 8004026:	e078      	b.n	800411a <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004032:	2b00      	cmp	r3, #0
 8004034:	d01c      	beq.n	8004070 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004040:	2b00      	cmp	r3, #0
 8004042:	d108      	bne.n	8004056 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004048:	2b00      	cmp	r3, #0
 800404a:	d030      	beq.n	80040ae <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004050:	6878      	ldr	r0, [r7, #4]
 8004052:	4798      	blx	r3
 8004054:	e02b      	b.n	80040ae <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800405a:	2b00      	cmp	r3, #0
 800405c:	d027      	beq.n	80040ae <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004062:	6878      	ldr	r0, [r7, #4]
 8004064:	4798      	blx	r3
 8004066:	e022      	b.n	80040ae <HAL_DMA_IRQHandler+0x29e>
 8004068:	20000018 	.word	0x20000018
 800406c:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800407a:	2b00      	cmp	r3, #0
 800407c:	d10f      	bne.n	800409e <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	681a      	ldr	r2, [r3, #0]
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	f022 0210 	bic.w	r2, r2, #16
 800408c:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	2201      	movs	r2, #1
 8004092:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	2200      	movs	r2, #0
 800409a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d003      	beq.n	80040ae <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040aa:	6878      	ldr	r0, [r7, #4]
 80040ac:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d032      	beq.n	800411c <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040ba:	f003 0301 	and.w	r3, r3, #1
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d022      	beq.n	8004108 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	2205      	movs	r2, #5
 80040c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	681a      	ldr	r2, [r3, #0]
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	f022 0201 	bic.w	r2, r2, #1
 80040d8:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80040da:	68bb      	ldr	r3, [r7, #8]
 80040dc:	3301      	adds	r3, #1
 80040de:	60bb      	str	r3, [r7, #8]
 80040e0:	697a      	ldr	r2, [r7, #20]
 80040e2:	429a      	cmp	r2, r3
 80040e4:	d307      	bcc.n	80040f6 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	f003 0301 	and.w	r3, r3, #1
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d1f2      	bne.n	80040da <HAL_DMA_IRQHandler+0x2ca>
 80040f4:	e000      	b.n	80040f8 <HAL_DMA_IRQHandler+0x2e8>
          break;
 80040f6:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	2201      	movs	r2, #1
 80040fc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	2200      	movs	r2, #0
 8004104:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800410c:	2b00      	cmp	r3, #0
 800410e:	d005      	beq.n	800411c <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004114:	6878      	ldr	r0, [r7, #4]
 8004116:	4798      	blx	r3
 8004118:	e000      	b.n	800411c <HAL_DMA_IRQHandler+0x30c>
        return;
 800411a:	bf00      	nop
    }
  }
}
 800411c:	3718      	adds	r7, #24
 800411e:	46bd      	mov	sp, r7
 8004120:	bd80      	pop	{r7, pc}
 8004122:	bf00      	nop

08004124 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8004124:	b480      	push	{r7}
 8004126:	b083      	sub	sp, #12
 8004128:	af00      	add	r7, sp, #0
 800412a:	6078      	str	r0, [r7, #4]
  return hdma->State;
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004132:	b2db      	uxtb	r3, r3
}
 8004134:	4618      	mov	r0, r3
 8004136:	370c      	adds	r7, #12
 8004138:	46bd      	mov	sp, r7
 800413a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800413e:	4770      	bx	lr

08004140 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8004140:	b480      	push	{r7}
 8004142:	b083      	sub	sp, #12
 8004144:	af00      	add	r7, sp, #0
 8004146:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 800414c:	4618      	mov	r0, r3
 800414e:	370c      	adds	r7, #12
 8004150:	46bd      	mov	sp, r7
 8004152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004156:	4770      	bx	lr

08004158 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004158:	b480      	push	{r7}
 800415a:	b085      	sub	sp, #20
 800415c:	af00      	add	r7, sp, #0
 800415e:	60f8      	str	r0, [r7, #12]
 8004160:	60b9      	str	r1, [r7, #8]
 8004162:	607a      	str	r2, [r7, #4]
 8004164:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	681a      	ldr	r2, [r3, #0]
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004174:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	683a      	ldr	r2, [r7, #0]
 800417c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	689b      	ldr	r3, [r3, #8]
 8004182:	2b40      	cmp	r3, #64	; 0x40
 8004184:	d108      	bne.n	8004198 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	687a      	ldr	r2, [r7, #4]
 800418c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	68ba      	ldr	r2, [r7, #8]
 8004194:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004196:	e007      	b.n	80041a8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	68ba      	ldr	r2, [r7, #8]
 800419e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	687a      	ldr	r2, [r7, #4]
 80041a6:	60da      	str	r2, [r3, #12]
}
 80041a8:	bf00      	nop
 80041aa:	3714      	adds	r7, #20
 80041ac:	46bd      	mov	sp, r7
 80041ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b2:	4770      	bx	lr

080041b4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80041b4:	b480      	push	{r7}
 80041b6:	b085      	sub	sp, #20
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	b2db      	uxtb	r3, r3
 80041c2:	3b10      	subs	r3, #16
 80041c4:	4a14      	ldr	r2, [pc, #80]	; (8004218 <DMA_CalcBaseAndBitshift+0x64>)
 80041c6:	fba2 2303 	umull	r2, r3, r2, r3
 80041ca:	091b      	lsrs	r3, r3, #4
 80041cc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80041ce:	4a13      	ldr	r2, [pc, #76]	; (800421c <DMA_CalcBaseAndBitshift+0x68>)
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	4413      	add	r3, r2
 80041d4:	781b      	ldrb	r3, [r3, #0]
 80041d6:	461a      	mov	r2, r3
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	2b03      	cmp	r3, #3
 80041e0:	d909      	bls.n	80041f6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80041ea:	f023 0303 	bic.w	r3, r3, #3
 80041ee:	1d1a      	adds	r2, r3, #4
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	659a      	str	r2, [r3, #88]	; 0x58
 80041f4:	e007      	b.n	8004206 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80041fe:	f023 0303 	bic.w	r3, r3, #3
 8004202:	687a      	ldr	r2, [r7, #4]
 8004204:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800420a:	4618      	mov	r0, r3
 800420c:	3714      	adds	r7, #20
 800420e:	46bd      	mov	sp, r7
 8004210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004214:	4770      	bx	lr
 8004216:	bf00      	nop
 8004218:	aaaaaaab 	.word	0xaaaaaaab
 800421c:	0800d2f4 	.word	0x0800d2f4

08004220 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004220:	b480      	push	{r7}
 8004222:	b085      	sub	sp, #20
 8004224:	af00      	add	r7, sp, #0
 8004226:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004228:	2300      	movs	r3, #0
 800422a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004230:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	699b      	ldr	r3, [r3, #24]
 8004236:	2b00      	cmp	r3, #0
 8004238:	d11f      	bne.n	800427a <DMA_CheckFifoParam+0x5a>
 800423a:	68bb      	ldr	r3, [r7, #8]
 800423c:	2b03      	cmp	r3, #3
 800423e:	d856      	bhi.n	80042ee <DMA_CheckFifoParam+0xce>
 8004240:	a201      	add	r2, pc, #4	; (adr r2, 8004248 <DMA_CheckFifoParam+0x28>)
 8004242:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004246:	bf00      	nop
 8004248:	08004259 	.word	0x08004259
 800424c:	0800426b 	.word	0x0800426b
 8004250:	08004259 	.word	0x08004259
 8004254:	080042ef 	.word	0x080042ef
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800425c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004260:	2b00      	cmp	r3, #0
 8004262:	d046      	beq.n	80042f2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004264:	2301      	movs	r3, #1
 8004266:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004268:	e043      	b.n	80042f2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800426e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004272:	d140      	bne.n	80042f6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004274:	2301      	movs	r3, #1
 8004276:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004278:	e03d      	b.n	80042f6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	699b      	ldr	r3, [r3, #24]
 800427e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004282:	d121      	bne.n	80042c8 <DMA_CheckFifoParam+0xa8>
 8004284:	68bb      	ldr	r3, [r7, #8]
 8004286:	2b03      	cmp	r3, #3
 8004288:	d837      	bhi.n	80042fa <DMA_CheckFifoParam+0xda>
 800428a:	a201      	add	r2, pc, #4	; (adr r2, 8004290 <DMA_CheckFifoParam+0x70>)
 800428c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004290:	080042a1 	.word	0x080042a1
 8004294:	080042a7 	.word	0x080042a7
 8004298:	080042a1 	.word	0x080042a1
 800429c:	080042b9 	.word	0x080042b9
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80042a0:	2301      	movs	r3, #1
 80042a2:	73fb      	strb	r3, [r7, #15]
      break;
 80042a4:	e030      	b.n	8004308 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042aa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d025      	beq.n	80042fe <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80042b2:	2301      	movs	r3, #1
 80042b4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80042b6:	e022      	b.n	80042fe <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042bc:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80042c0:	d11f      	bne.n	8004302 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80042c2:	2301      	movs	r3, #1
 80042c4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80042c6:	e01c      	b.n	8004302 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80042c8:	68bb      	ldr	r3, [r7, #8]
 80042ca:	2b02      	cmp	r3, #2
 80042cc:	d903      	bls.n	80042d6 <DMA_CheckFifoParam+0xb6>
 80042ce:	68bb      	ldr	r3, [r7, #8]
 80042d0:	2b03      	cmp	r3, #3
 80042d2:	d003      	beq.n	80042dc <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80042d4:	e018      	b.n	8004308 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80042d6:	2301      	movs	r3, #1
 80042d8:	73fb      	strb	r3, [r7, #15]
      break;
 80042da:	e015      	b.n	8004308 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042e0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d00e      	beq.n	8004306 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80042e8:	2301      	movs	r3, #1
 80042ea:	73fb      	strb	r3, [r7, #15]
      break;
 80042ec:	e00b      	b.n	8004306 <DMA_CheckFifoParam+0xe6>
      break;
 80042ee:	bf00      	nop
 80042f0:	e00a      	b.n	8004308 <DMA_CheckFifoParam+0xe8>
      break;
 80042f2:	bf00      	nop
 80042f4:	e008      	b.n	8004308 <DMA_CheckFifoParam+0xe8>
      break;
 80042f6:	bf00      	nop
 80042f8:	e006      	b.n	8004308 <DMA_CheckFifoParam+0xe8>
      break;
 80042fa:	bf00      	nop
 80042fc:	e004      	b.n	8004308 <DMA_CheckFifoParam+0xe8>
      break;
 80042fe:	bf00      	nop
 8004300:	e002      	b.n	8004308 <DMA_CheckFifoParam+0xe8>
      break;   
 8004302:	bf00      	nop
 8004304:	e000      	b.n	8004308 <DMA_CheckFifoParam+0xe8>
      break;
 8004306:	bf00      	nop
    }
  } 
  
  return status; 
 8004308:	7bfb      	ldrb	r3, [r7, #15]
}
 800430a:	4618      	mov	r0, r3
 800430c:	3714      	adds	r7, #20
 800430e:	46bd      	mov	sp, r7
 8004310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004314:	4770      	bx	lr
 8004316:	bf00      	nop

08004318 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004318:	b480      	push	{r7}
 800431a:	b089      	sub	sp, #36	; 0x24
 800431c:	af00      	add	r7, sp, #0
 800431e:	6078      	str	r0, [r7, #4]
 8004320:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004322:	2300      	movs	r3, #0
 8004324:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004326:	2300      	movs	r3, #0
 8004328:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800432a:	2300      	movs	r3, #0
 800432c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800432e:	2300      	movs	r3, #0
 8004330:	61fb      	str	r3, [r7, #28]
 8004332:	e16b      	b.n	800460c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004334:	2201      	movs	r2, #1
 8004336:	69fb      	ldr	r3, [r7, #28]
 8004338:	fa02 f303 	lsl.w	r3, r2, r3
 800433c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800433e:	683b      	ldr	r3, [r7, #0]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	697a      	ldr	r2, [r7, #20]
 8004344:	4013      	ands	r3, r2
 8004346:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004348:	693a      	ldr	r2, [r7, #16]
 800434a:	697b      	ldr	r3, [r7, #20]
 800434c:	429a      	cmp	r2, r3
 800434e:	f040 815a 	bne.w	8004606 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004352:	683b      	ldr	r3, [r7, #0]
 8004354:	685b      	ldr	r3, [r3, #4]
 8004356:	f003 0303 	and.w	r3, r3, #3
 800435a:	2b01      	cmp	r3, #1
 800435c:	d005      	beq.n	800436a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800435e:	683b      	ldr	r3, [r7, #0]
 8004360:	685b      	ldr	r3, [r3, #4]
 8004362:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004366:	2b02      	cmp	r3, #2
 8004368:	d130      	bne.n	80043cc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	689b      	ldr	r3, [r3, #8]
 800436e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004370:	69fb      	ldr	r3, [r7, #28]
 8004372:	005b      	lsls	r3, r3, #1
 8004374:	2203      	movs	r2, #3
 8004376:	fa02 f303 	lsl.w	r3, r2, r3
 800437a:	43db      	mvns	r3, r3
 800437c:	69ba      	ldr	r2, [r7, #24]
 800437e:	4013      	ands	r3, r2
 8004380:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004382:	683b      	ldr	r3, [r7, #0]
 8004384:	68da      	ldr	r2, [r3, #12]
 8004386:	69fb      	ldr	r3, [r7, #28]
 8004388:	005b      	lsls	r3, r3, #1
 800438a:	fa02 f303 	lsl.w	r3, r2, r3
 800438e:	69ba      	ldr	r2, [r7, #24]
 8004390:	4313      	orrs	r3, r2
 8004392:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	69ba      	ldr	r2, [r7, #24]
 8004398:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	685b      	ldr	r3, [r3, #4]
 800439e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80043a0:	2201      	movs	r2, #1
 80043a2:	69fb      	ldr	r3, [r7, #28]
 80043a4:	fa02 f303 	lsl.w	r3, r2, r3
 80043a8:	43db      	mvns	r3, r3
 80043aa:	69ba      	ldr	r2, [r7, #24]
 80043ac:	4013      	ands	r3, r2
 80043ae:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80043b0:	683b      	ldr	r3, [r7, #0]
 80043b2:	685b      	ldr	r3, [r3, #4]
 80043b4:	091b      	lsrs	r3, r3, #4
 80043b6:	f003 0201 	and.w	r2, r3, #1
 80043ba:	69fb      	ldr	r3, [r7, #28]
 80043bc:	fa02 f303 	lsl.w	r3, r2, r3
 80043c0:	69ba      	ldr	r2, [r7, #24]
 80043c2:	4313      	orrs	r3, r2
 80043c4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	69ba      	ldr	r2, [r7, #24]
 80043ca:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80043cc:	683b      	ldr	r3, [r7, #0]
 80043ce:	685b      	ldr	r3, [r3, #4]
 80043d0:	f003 0303 	and.w	r3, r3, #3
 80043d4:	2b03      	cmp	r3, #3
 80043d6:	d017      	beq.n	8004408 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	68db      	ldr	r3, [r3, #12]
 80043dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80043de:	69fb      	ldr	r3, [r7, #28]
 80043e0:	005b      	lsls	r3, r3, #1
 80043e2:	2203      	movs	r2, #3
 80043e4:	fa02 f303 	lsl.w	r3, r2, r3
 80043e8:	43db      	mvns	r3, r3
 80043ea:	69ba      	ldr	r2, [r7, #24]
 80043ec:	4013      	ands	r3, r2
 80043ee:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80043f0:	683b      	ldr	r3, [r7, #0]
 80043f2:	689a      	ldr	r2, [r3, #8]
 80043f4:	69fb      	ldr	r3, [r7, #28]
 80043f6:	005b      	lsls	r3, r3, #1
 80043f8:	fa02 f303 	lsl.w	r3, r2, r3
 80043fc:	69ba      	ldr	r2, [r7, #24]
 80043fe:	4313      	orrs	r3, r2
 8004400:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	69ba      	ldr	r2, [r7, #24]
 8004406:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004408:	683b      	ldr	r3, [r7, #0]
 800440a:	685b      	ldr	r3, [r3, #4]
 800440c:	f003 0303 	and.w	r3, r3, #3
 8004410:	2b02      	cmp	r3, #2
 8004412:	d123      	bne.n	800445c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004414:	69fb      	ldr	r3, [r7, #28]
 8004416:	08da      	lsrs	r2, r3, #3
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	3208      	adds	r2, #8
 800441c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004420:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004422:	69fb      	ldr	r3, [r7, #28]
 8004424:	f003 0307 	and.w	r3, r3, #7
 8004428:	009b      	lsls	r3, r3, #2
 800442a:	220f      	movs	r2, #15
 800442c:	fa02 f303 	lsl.w	r3, r2, r3
 8004430:	43db      	mvns	r3, r3
 8004432:	69ba      	ldr	r2, [r7, #24]
 8004434:	4013      	ands	r3, r2
 8004436:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004438:	683b      	ldr	r3, [r7, #0]
 800443a:	691a      	ldr	r2, [r3, #16]
 800443c:	69fb      	ldr	r3, [r7, #28]
 800443e:	f003 0307 	and.w	r3, r3, #7
 8004442:	009b      	lsls	r3, r3, #2
 8004444:	fa02 f303 	lsl.w	r3, r2, r3
 8004448:	69ba      	ldr	r2, [r7, #24]
 800444a:	4313      	orrs	r3, r2
 800444c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800444e:	69fb      	ldr	r3, [r7, #28]
 8004450:	08da      	lsrs	r2, r3, #3
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	3208      	adds	r2, #8
 8004456:	69b9      	ldr	r1, [r7, #24]
 8004458:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004462:	69fb      	ldr	r3, [r7, #28]
 8004464:	005b      	lsls	r3, r3, #1
 8004466:	2203      	movs	r2, #3
 8004468:	fa02 f303 	lsl.w	r3, r2, r3
 800446c:	43db      	mvns	r3, r3
 800446e:	69ba      	ldr	r2, [r7, #24]
 8004470:	4013      	ands	r3, r2
 8004472:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004474:	683b      	ldr	r3, [r7, #0]
 8004476:	685b      	ldr	r3, [r3, #4]
 8004478:	f003 0203 	and.w	r2, r3, #3
 800447c:	69fb      	ldr	r3, [r7, #28]
 800447e:	005b      	lsls	r3, r3, #1
 8004480:	fa02 f303 	lsl.w	r3, r2, r3
 8004484:	69ba      	ldr	r2, [r7, #24]
 8004486:	4313      	orrs	r3, r2
 8004488:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	69ba      	ldr	r2, [r7, #24]
 800448e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004490:	683b      	ldr	r3, [r7, #0]
 8004492:	685b      	ldr	r3, [r3, #4]
 8004494:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004498:	2b00      	cmp	r3, #0
 800449a:	f000 80b4 	beq.w	8004606 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800449e:	2300      	movs	r3, #0
 80044a0:	60fb      	str	r3, [r7, #12]
 80044a2:	4b60      	ldr	r3, [pc, #384]	; (8004624 <HAL_GPIO_Init+0x30c>)
 80044a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044a6:	4a5f      	ldr	r2, [pc, #380]	; (8004624 <HAL_GPIO_Init+0x30c>)
 80044a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80044ac:	6453      	str	r3, [r2, #68]	; 0x44
 80044ae:	4b5d      	ldr	r3, [pc, #372]	; (8004624 <HAL_GPIO_Init+0x30c>)
 80044b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80044b6:	60fb      	str	r3, [r7, #12]
 80044b8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80044ba:	4a5b      	ldr	r2, [pc, #364]	; (8004628 <HAL_GPIO_Init+0x310>)
 80044bc:	69fb      	ldr	r3, [r7, #28]
 80044be:	089b      	lsrs	r3, r3, #2
 80044c0:	3302      	adds	r3, #2
 80044c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80044c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80044c8:	69fb      	ldr	r3, [r7, #28]
 80044ca:	f003 0303 	and.w	r3, r3, #3
 80044ce:	009b      	lsls	r3, r3, #2
 80044d0:	220f      	movs	r2, #15
 80044d2:	fa02 f303 	lsl.w	r3, r2, r3
 80044d6:	43db      	mvns	r3, r3
 80044d8:	69ba      	ldr	r2, [r7, #24]
 80044da:	4013      	ands	r3, r2
 80044dc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	4a52      	ldr	r2, [pc, #328]	; (800462c <HAL_GPIO_Init+0x314>)
 80044e2:	4293      	cmp	r3, r2
 80044e4:	d02b      	beq.n	800453e <HAL_GPIO_Init+0x226>
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	4a51      	ldr	r2, [pc, #324]	; (8004630 <HAL_GPIO_Init+0x318>)
 80044ea:	4293      	cmp	r3, r2
 80044ec:	d025      	beq.n	800453a <HAL_GPIO_Init+0x222>
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	4a50      	ldr	r2, [pc, #320]	; (8004634 <HAL_GPIO_Init+0x31c>)
 80044f2:	4293      	cmp	r3, r2
 80044f4:	d01f      	beq.n	8004536 <HAL_GPIO_Init+0x21e>
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	4a4f      	ldr	r2, [pc, #316]	; (8004638 <HAL_GPIO_Init+0x320>)
 80044fa:	4293      	cmp	r3, r2
 80044fc:	d019      	beq.n	8004532 <HAL_GPIO_Init+0x21a>
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	4a4e      	ldr	r2, [pc, #312]	; (800463c <HAL_GPIO_Init+0x324>)
 8004502:	4293      	cmp	r3, r2
 8004504:	d013      	beq.n	800452e <HAL_GPIO_Init+0x216>
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	4a4d      	ldr	r2, [pc, #308]	; (8004640 <HAL_GPIO_Init+0x328>)
 800450a:	4293      	cmp	r3, r2
 800450c:	d00d      	beq.n	800452a <HAL_GPIO_Init+0x212>
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	4a4c      	ldr	r2, [pc, #304]	; (8004644 <HAL_GPIO_Init+0x32c>)
 8004512:	4293      	cmp	r3, r2
 8004514:	d007      	beq.n	8004526 <HAL_GPIO_Init+0x20e>
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	4a4b      	ldr	r2, [pc, #300]	; (8004648 <HAL_GPIO_Init+0x330>)
 800451a:	4293      	cmp	r3, r2
 800451c:	d101      	bne.n	8004522 <HAL_GPIO_Init+0x20a>
 800451e:	2307      	movs	r3, #7
 8004520:	e00e      	b.n	8004540 <HAL_GPIO_Init+0x228>
 8004522:	2308      	movs	r3, #8
 8004524:	e00c      	b.n	8004540 <HAL_GPIO_Init+0x228>
 8004526:	2306      	movs	r3, #6
 8004528:	e00a      	b.n	8004540 <HAL_GPIO_Init+0x228>
 800452a:	2305      	movs	r3, #5
 800452c:	e008      	b.n	8004540 <HAL_GPIO_Init+0x228>
 800452e:	2304      	movs	r3, #4
 8004530:	e006      	b.n	8004540 <HAL_GPIO_Init+0x228>
 8004532:	2303      	movs	r3, #3
 8004534:	e004      	b.n	8004540 <HAL_GPIO_Init+0x228>
 8004536:	2302      	movs	r3, #2
 8004538:	e002      	b.n	8004540 <HAL_GPIO_Init+0x228>
 800453a:	2301      	movs	r3, #1
 800453c:	e000      	b.n	8004540 <HAL_GPIO_Init+0x228>
 800453e:	2300      	movs	r3, #0
 8004540:	69fa      	ldr	r2, [r7, #28]
 8004542:	f002 0203 	and.w	r2, r2, #3
 8004546:	0092      	lsls	r2, r2, #2
 8004548:	4093      	lsls	r3, r2
 800454a:	69ba      	ldr	r2, [r7, #24]
 800454c:	4313      	orrs	r3, r2
 800454e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004550:	4935      	ldr	r1, [pc, #212]	; (8004628 <HAL_GPIO_Init+0x310>)
 8004552:	69fb      	ldr	r3, [r7, #28]
 8004554:	089b      	lsrs	r3, r3, #2
 8004556:	3302      	adds	r3, #2
 8004558:	69ba      	ldr	r2, [r7, #24]
 800455a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800455e:	4b3b      	ldr	r3, [pc, #236]	; (800464c <HAL_GPIO_Init+0x334>)
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004564:	693b      	ldr	r3, [r7, #16]
 8004566:	43db      	mvns	r3, r3
 8004568:	69ba      	ldr	r2, [r7, #24]
 800456a:	4013      	ands	r3, r2
 800456c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800456e:	683b      	ldr	r3, [r7, #0]
 8004570:	685b      	ldr	r3, [r3, #4]
 8004572:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004576:	2b00      	cmp	r3, #0
 8004578:	d003      	beq.n	8004582 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800457a:	69ba      	ldr	r2, [r7, #24]
 800457c:	693b      	ldr	r3, [r7, #16]
 800457e:	4313      	orrs	r3, r2
 8004580:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004582:	4a32      	ldr	r2, [pc, #200]	; (800464c <HAL_GPIO_Init+0x334>)
 8004584:	69bb      	ldr	r3, [r7, #24]
 8004586:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8004588:	4b30      	ldr	r3, [pc, #192]	; (800464c <HAL_GPIO_Init+0x334>)
 800458a:	685b      	ldr	r3, [r3, #4]
 800458c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800458e:	693b      	ldr	r3, [r7, #16]
 8004590:	43db      	mvns	r3, r3
 8004592:	69ba      	ldr	r2, [r7, #24]
 8004594:	4013      	ands	r3, r2
 8004596:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004598:	683b      	ldr	r3, [r7, #0]
 800459a:	685b      	ldr	r3, [r3, #4]
 800459c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d003      	beq.n	80045ac <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80045a4:	69ba      	ldr	r2, [r7, #24]
 80045a6:	693b      	ldr	r3, [r7, #16]
 80045a8:	4313      	orrs	r3, r2
 80045aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80045ac:	4a27      	ldr	r2, [pc, #156]	; (800464c <HAL_GPIO_Init+0x334>)
 80045ae:	69bb      	ldr	r3, [r7, #24]
 80045b0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80045b2:	4b26      	ldr	r3, [pc, #152]	; (800464c <HAL_GPIO_Init+0x334>)
 80045b4:	689b      	ldr	r3, [r3, #8]
 80045b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80045b8:	693b      	ldr	r3, [r7, #16]
 80045ba:	43db      	mvns	r3, r3
 80045bc:	69ba      	ldr	r2, [r7, #24]
 80045be:	4013      	ands	r3, r2
 80045c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80045c2:	683b      	ldr	r3, [r7, #0]
 80045c4:	685b      	ldr	r3, [r3, #4]
 80045c6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d003      	beq.n	80045d6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80045ce:	69ba      	ldr	r2, [r7, #24]
 80045d0:	693b      	ldr	r3, [r7, #16]
 80045d2:	4313      	orrs	r3, r2
 80045d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80045d6:	4a1d      	ldr	r2, [pc, #116]	; (800464c <HAL_GPIO_Init+0x334>)
 80045d8:	69bb      	ldr	r3, [r7, #24]
 80045da:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80045dc:	4b1b      	ldr	r3, [pc, #108]	; (800464c <HAL_GPIO_Init+0x334>)
 80045de:	68db      	ldr	r3, [r3, #12]
 80045e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80045e2:	693b      	ldr	r3, [r7, #16]
 80045e4:	43db      	mvns	r3, r3
 80045e6:	69ba      	ldr	r2, [r7, #24]
 80045e8:	4013      	ands	r3, r2
 80045ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80045ec:	683b      	ldr	r3, [r7, #0]
 80045ee:	685b      	ldr	r3, [r3, #4]
 80045f0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d003      	beq.n	8004600 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80045f8:	69ba      	ldr	r2, [r7, #24]
 80045fa:	693b      	ldr	r3, [r7, #16]
 80045fc:	4313      	orrs	r3, r2
 80045fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004600:	4a12      	ldr	r2, [pc, #72]	; (800464c <HAL_GPIO_Init+0x334>)
 8004602:	69bb      	ldr	r3, [r7, #24]
 8004604:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004606:	69fb      	ldr	r3, [r7, #28]
 8004608:	3301      	adds	r3, #1
 800460a:	61fb      	str	r3, [r7, #28]
 800460c:	69fb      	ldr	r3, [r7, #28]
 800460e:	2b0f      	cmp	r3, #15
 8004610:	f67f ae90 	bls.w	8004334 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004614:	bf00      	nop
 8004616:	bf00      	nop
 8004618:	3724      	adds	r7, #36	; 0x24
 800461a:	46bd      	mov	sp, r7
 800461c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004620:	4770      	bx	lr
 8004622:	bf00      	nop
 8004624:	40023800 	.word	0x40023800
 8004628:	40013800 	.word	0x40013800
 800462c:	40020000 	.word	0x40020000
 8004630:	40020400 	.word	0x40020400
 8004634:	40020800 	.word	0x40020800
 8004638:	40020c00 	.word	0x40020c00
 800463c:	40021000 	.word	0x40021000
 8004640:	40021400 	.word	0x40021400
 8004644:	40021800 	.word	0x40021800
 8004648:	40021c00 	.word	0x40021c00
 800464c:	40013c00 	.word	0x40013c00

08004650 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004650:	b480      	push	{r7}
 8004652:	b083      	sub	sp, #12
 8004654:	af00      	add	r7, sp, #0
 8004656:	6078      	str	r0, [r7, #4]
 8004658:	460b      	mov	r3, r1
 800465a:	807b      	strh	r3, [r7, #2]
 800465c:	4613      	mov	r3, r2
 800465e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004660:	787b      	ldrb	r3, [r7, #1]
 8004662:	2b00      	cmp	r3, #0
 8004664:	d003      	beq.n	800466e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004666:	887a      	ldrh	r2, [r7, #2]
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800466c:	e003      	b.n	8004676 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800466e:	887b      	ldrh	r3, [r7, #2]
 8004670:	041a      	lsls	r2, r3, #16
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	619a      	str	r2, [r3, #24]
}
 8004676:	bf00      	nop
 8004678:	370c      	adds	r7, #12
 800467a:	46bd      	mov	sp, r7
 800467c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004680:	4770      	bx	lr
	...

08004684 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004684:	b580      	push	{r7, lr}
 8004686:	b082      	sub	sp, #8
 8004688:	af00      	add	r7, sp, #0
 800468a:	4603      	mov	r3, r0
 800468c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800468e:	4b08      	ldr	r3, [pc, #32]	; (80046b0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004690:	695a      	ldr	r2, [r3, #20]
 8004692:	88fb      	ldrh	r3, [r7, #6]
 8004694:	4013      	ands	r3, r2
 8004696:	2b00      	cmp	r3, #0
 8004698:	d006      	beq.n	80046a8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800469a:	4a05      	ldr	r2, [pc, #20]	; (80046b0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800469c:	88fb      	ldrh	r3, [r7, #6]
 800469e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80046a0:	88fb      	ldrh	r3, [r7, #6]
 80046a2:	4618      	mov	r0, r3
 80046a4:	f7fd f9bc 	bl	8001a20 <HAL_GPIO_EXTI_Callback>
  }
}
 80046a8:	bf00      	nop
 80046aa:	3708      	adds	r7, #8
 80046ac:	46bd      	mov	sp, r7
 80046ae:	bd80      	pop	{r7, pc}
 80046b0:	40013c00 	.word	0x40013c00

080046b4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80046b4:	b580      	push	{r7, lr}
 80046b6:	b084      	sub	sp, #16
 80046b8:	af00      	add	r7, sp, #0
 80046ba:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d101      	bne.n	80046c6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80046c2:	2301      	movs	r3, #1
 80046c4:	e12b      	b.n	800491e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046cc:	b2db      	uxtb	r3, r3
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d106      	bne.n	80046e0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	2200      	movs	r2, #0
 80046d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80046da:	6878      	ldr	r0, [r7, #4]
 80046dc:	f7fe f89c 	bl	8002818 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	2224      	movs	r2, #36	; 0x24
 80046e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	681a      	ldr	r2, [r3, #0]
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	f022 0201 	bic.w	r2, r2, #1
 80046f6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	681a      	ldr	r2, [r3, #0]
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004706:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	681a      	ldr	r2, [r3, #0]
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004716:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004718:	f003 fc8c 	bl	8008034 <HAL_RCC_GetPCLK1Freq>
 800471c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	685b      	ldr	r3, [r3, #4]
 8004722:	4a81      	ldr	r2, [pc, #516]	; (8004928 <HAL_I2C_Init+0x274>)
 8004724:	4293      	cmp	r3, r2
 8004726:	d807      	bhi.n	8004738 <HAL_I2C_Init+0x84>
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	4a80      	ldr	r2, [pc, #512]	; (800492c <HAL_I2C_Init+0x278>)
 800472c:	4293      	cmp	r3, r2
 800472e:	bf94      	ite	ls
 8004730:	2301      	movls	r3, #1
 8004732:	2300      	movhi	r3, #0
 8004734:	b2db      	uxtb	r3, r3
 8004736:	e006      	b.n	8004746 <HAL_I2C_Init+0x92>
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	4a7d      	ldr	r2, [pc, #500]	; (8004930 <HAL_I2C_Init+0x27c>)
 800473c:	4293      	cmp	r3, r2
 800473e:	bf94      	ite	ls
 8004740:	2301      	movls	r3, #1
 8004742:	2300      	movhi	r3, #0
 8004744:	b2db      	uxtb	r3, r3
 8004746:	2b00      	cmp	r3, #0
 8004748:	d001      	beq.n	800474e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800474a:	2301      	movs	r3, #1
 800474c:	e0e7      	b.n	800491e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	4a78      	ldr	r2, [pc, #480]	; (8004934 <HAL_I2C_Init+0x280>)
 8004752:	fba2 2303 	umull	r2, r3, r2, r3
 8004756:	0c9b      	lsrs	r3, r3, #18
 8004758:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	685b      	ldr	r3, [r3, #4]
 8004760:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	68ba      	ldr	r2, [r7, #8]
 800476a:	430a      	orrs	r2, r1
 800476c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	6a1b      	ldr	r3, [r3, #32]
 8004774:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	685b      	ldr	r3, [r3, #4]
 800477c:	4a6a      	ldr	r2, [pc, #424]	; (8004928 <HAL_I2C_Init+0x274>)
 800477e:	4293      	cmp	r3, r2
 8004780:	d802      	bhi.n	8004788 <HAL_I2C_Init+0xd4>
 8004782:	68bb      	ldr	r3, [r7, #8]
 8004784:	3301      	adds	r3, #1
 8004786:	e009      	b.n	800479c <HAL_I2C_Init+0xe8>
 8004788:	68bb      	ldr	r3, [r7, #8]
 800478a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800478e:	fb02 f303 	mul.w	r3, r2, r3
 8004792:	4a69      	ldr	r2, [pc, #420]	; (8004938 <HAL_I2C_Init+0x284>)
 8004794:	fba2 2303 	umull	r2, r3, r2, r3
 8004798:	099b      	lsrs	r3, r3, #6
 800479a:	3301      	adds	r3, #1
 800479c:	687a      	ldr	r2, [r7, #4]
 800479e:	6812      	ldr	r2, [r2, #0]
 80047a0:	430b      	orrs	r3, r1
 80047a2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	69db      	ldr	r3, [r3, #28]
 80047aa:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80047ae:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	685b      	ldr	r3, [r3, #4]
 80047b6:	495c      	ldr	r1, [pc, #368]	; (8004928 <HAL_I2C_Init+0x274>)
 80047b8:	428b      	cmp	r3, r1
 80047ba:	d819      	bhi.n	80047f0 <HAL_I2C_Init+0x13c>
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	1e59      	subs	r1, r3, #1
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	685b      	ldr	r3, [r3, #4]
 80047c4:	005b      	lsls	r3, r3, #1
 80047c6:	fbb1 f3f3 	udiv	r3, r1, r3
 80047ca:	1c59      	adds	r1, r3, #1
 80047cc:	f640 73fc 	movw	r3, #4092	; 0xffc
 80047d0:	400b      	ands	r3, r1
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d00a      	beq.n	80047ec <HAL_I2C_Init+0x138>
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	1e59      	subs	r1, r3, #1
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	685b      	ldr	r3, [r3, #4]
 80047de:	005b      	lsls	r3, r3, #1
 80047e0:	fbb1 f3f3 	udiv	r3, r1, r3
 80047e4:	3301      	adds	r3, #1
 80047e6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80047ea:	e051      	b.n	8004890 <HAL_I2C_Init+0x1dc>
 80047ec:	2304      	movs	r3, #4
 80047ee:	e04f      	b.n	8004890 <HAL_I2C_Init+0x1dc>
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	689b      	ldr	r3, [r3, #8]
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d111      	bne.n	800481c <HAL_I2C_Init+0x168>
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	1e58      	subs	r0, r3, #1
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	6859      	ldr	r1, [r3, #4]
 8004800:	460b      	mov	r3, r1
 8004802:	005b      	lsls	r3, r3, #1
 8004804:	440b      	add	r3, r1
 8004806:	fbb0 f3f3 	udiv	r3, r0, r3
 800480a:	3301      	adds	r3, #1
 800480c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004810:	2b00      	cmp	r3, #0
 8004812:	bf0c      	ite	eq
 8004814:	2301      	moveq	r3, #1
 8004816:	2300      	movne	r3, #0
 8004818:	b2db      	uxtb	r3, r3
 800481a:	e012      	b.n	8004842 <HAL_I2C_Init+0x18e>
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	1e58      	subs	r0, r3, #1
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	6859      	ldr	r1, [r3, #4]
 8004824:	460b      	mov	r3, r1
 8004826:	009b      	lsls	r3, r3, #2
 8004828:	440b      	add	r3, r1
 800482a:	0099      	lsls	r1, r3, #2
 800482c:	440b      	add	r3, r1
 800482e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004832:	3301      	adds	r3, #1
 8004834:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004838:	2b00      	cmp	r3, #0
 800483a:	bf0c      	ite	eq
 800483c:	2301      	moveq	r3, #1
 800483e:	2300      	movne	r3, #0
 8004840:	b2db      	uxtb	r3, r3
 8004842:	2b00      	cmp	r3, #0
 8004844:	d001      	beq.n	800484a <HAL_I2C_Init+0x196>
 8004846:	2301      	movs	r3, #1
 8004848:	e022      	b.n	8004890 <HAL_I2C_Init+0x1dc>
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	689b      	ldr	r3, [r3, #8]
 800484e:	2b00      	cmp	r3, #0
 8004850:	d10e      	bne.n	8004870 <HAL_I2C_Init+0x1bc>
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	1e58      	subs	r0, r3, #1
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	6859      	ldr	r1, [r3, #4]
 800485a:	460b      	mov	r3, r1
 800485c:	005b      	lsls	r3, r3, #1
 800485e:	440b      	add	r3, r1
 8004860:	fbb0 f3f3 	udiv	r3, r0, r3
 8004864:	3301      	adds	r3, #1
 8004866:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800486a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800486e:	e00f      	b.n	8004890 <HAL_I2C_Init+0x1dc>
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	1e58      	subs	r0, r3, #1
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	6859      	ldr	r1, [r3, #4]
 8004878:	460b      	mov	r3, r1
 800487a:	009b      	lsls	r3, r3, #2
 800487c:	440b      	add	r3, r1
 800487e:	0099      	lsls	r1, r3, #2
 8004880:	440b      	add	r3, r1
 8004882:	fbb0 f3f3 	udiv	r3, r0, r3
 8004886:	3301      	adds	r3, #1
 8004888:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800488c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004890:	6879      	ldr	r1, [r7, #4]
 8004892:	6809      	ldr	r1, [r1, #0]
 8004894:	4313      	orrs	r3, r2
 8004896:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	69da      	ldr	r2, [r3, #28]
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	6a1b      	ldr	r3, [r3, #32]
 80048aa:	431a      	orrs	r2, r3
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	430a      	orrs	r2, r1
 80048b2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	689b      	ldr	r3, [r3, #8]
 80048ba:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80048be:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80048c2:	687a      	ldr	r2, [r7, #4]
 80048c4:	6911      	ldr	r1, [r2, #16]
 80048c6:	687a      	ldr	r2, [r7, #4]
 80048c8:	68d2      	ldr	r2, [r2, #12]
 80048ca:	4311      	orrs	r1, r2
 80048cc:	687a      	ldr	r2, [r7, #4]
 80048ce:	6812      	ldr	r2, [r2, #0]
 80048d0:	430b      	orrs	r3, r1
 80048d2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	68db      	ldr	r3, [r3, #12]
 80048da:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	695a      	ldr	r2, [r3, #20]
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	699b      	ldr	r3, [r3, #24]
 80048e6:	431a      	orrs	r2, r3
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	430a      	orrs	r2, r1
 80048ee:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	681a      	ldr	r2, [r3, #0]
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	f042 0201 	orr.w	r2, r2, #1
 80048fe:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	2200      	movs	r2, #0
 8004904:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	2220      	movs	r2, #32
 800490a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	2200      	movs	r2, #0
 8004912:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	2200      	movs	r2, #0
 8004918:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800491c:	2300      	movs	r3, #0
}
 800491e:	4618      	mov	r0, r3
 8004920:	3710      	adds	r7, #16
 8004922:	46bd      	mov	sp, r7
 8004924:	bd80      	pop	{r7, pc}
 8004926:	bf00      	nop
 8004928:	000186a0 	.word	0x000186a0
 800492c:	001e847f 	.word	0x001e847f
 8004930:	003d08ff 	.word	0x003d08ff
 8004934:	431bde83 	.word	0x431bde83
 8004938:	10624dd3 	.word	0x10624dd3

0800493c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800493c:	b580      	push	{r7, lr}
 800493e:	b088      	sub	sp, #32
 8004940:	af02      	add	r7, sp, #8
 8004942:	60f8      	str	r0, [r7, #12]
 8004944:	607a      	str	r2, [r7, #4]
 8004946:	461a      	mov	r2, r3
 8004948:	460b      	mov	r3, r1
 800494a:	817b      	strh	r3, [r7, #10]
 800494c:	4613      	mov	r3, r2
 800494e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004950:	f7fe faca 	bl	8002ee8 <HAL_GetTick>
 8004954:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800495c:	b2db      	uxtb	r3, r3
 800495e:	2b20      	cmp	r3, #32
 8004960:	f040 80e0 	bne.w	8004b24 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004964:	697b      	ldr	r3, [r7, #20]
 8004966:	9300      	str	r3, [sp, #0]
 8004968:	2319      	movs	r3, #25
 800496a:	2201      	movs	r2, #1
 800496c:	4970      	ldr	r1, [pc, #448]	; (8004b30 <HAL_I2C_Master_Transmit+0x1f4>)
 800496e:	68f8      	ldr	r0, [r7, #12]
 8004970:	f002 fcbe 	bl	80072f0 <I2C_WaitOnFlagUntilTimeout>
 8004974:	4603      	mov	r3, r0
 8004976:	2b00      	cmp	r3, #0
 8004978:	d001      	beq.n	800497e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800497a:	2302      	movs	r3, #2
 800497c:	e0d3      	b.n	8004b26 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004984:	2b01      	cmp	r3, #1
 8004986:	d101      	bne.n	800498c <HAL_I2C_Master_Transmit+0x50>
 8004988:	2302      	movs	r3, #2
 800498a:	e0cc      	b.n	8004b26 <HAL_I2C_Master_Transmit+0x1ea>
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	2201      	movs	r2, #1
 8004990:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	f003 0301 	and.w	r3, r3, #1
 800499e:	2b01      	cmp	r3, #1
 80049a0:	d007      	beq.n	80049b2 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	681a      	ldr	r2, [r3, #0]
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	f042 0201 	orr.w	r2, r2, #1
 80049b0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	681a      	ldr	r2, [r3, #0]
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80049c0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	2221      	movs	r2, #33	; 0x21
 80049c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	2210      	movs	r2, #16
 80049ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	2200      	movs	r2, #0
 80049d6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	687a      	ldr	r2, [r7, #4]
 80049dc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	893a      	ldrh	r2, [r7, #8]
 80049e2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049e8:	b29a      	uxth	r2, r3
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	4a50      	ldr	r2, [pc, #320]	; (8004b34 <HAL_I2C_Master_Transmit+0x1f8>)
 80049f2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80049f4:	8979      	ldrh	r1, [r7, #10]
 80049f6:	697b      	ldr	r3, [r7, #20]
 80049f8:	6a3a      	ldr	r2, [r7, #32]
 80049fa:	68f8      	ldr	r0, [r7, #12]
 80049fc:	f002 f8be 	bl	8006b7c <I2C_MasterRequestWrite>
 8004a00:	4603      	mov	r3, r0
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d001      	beq.n	8004a0a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8004a06:	2301      	movs	r3, #1
 8004a08:	e08d      	b.n	8004b26 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004a0a:	2300      	movs	r3, #0
 8004a0c:	613b      	str	r3, [r7, #16]
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	695b      	ldr	r3, [r3, #20]
 8004a14:	613b      	str	r3, [r7, #16]
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	699b      	ldr	r3, [r3, #24]
 8004a1c:	613b      	str	r3, [r7, #16]
 8004a1e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8004a20:	e066      	b.n	8004af0 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004a22:	697a      	ldr	r2, [r7, #20]
 8004a24:	6a39      	ldr	r1, [r7, #32]
 8004a26:	68f8      	ldr	r0, [r7, #12]
 8004a28:	f002 fd38 	bl	800749c <I2C_WaitOnTXEFlagUntilTimeout>
 8004a2c:	4603      	mov	r3, r0
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d00d      	beq.n	8004a4e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a36:	2b04      	cmp	r3, #4
 8004a38:	d107      	bne.n	8004a4a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	681a      	ldr	r2, [r3, #0]
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004a48:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004a4a:	2301      	movs	r3, #1
 8004a4c:	e06b      	b.n	8004b26 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a52:	781a      	ldrb	r2, [r3, #0]
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a5e:	1c5a      	adds	r2, r3, #1
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a68:	b29b      	uxth	r3, r3
 8004a6a:	3b01      	subs	r3, #1
 8004a6c:	b29a      	uxth	r2, r3
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a76:	3b01      	subs	r3, #1
 8004a78:	b29a      	uxth	r2, r3
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	695b      	ldr	r3, [r3, #20]
 8004a84:	f003 0304 	and.w	r3, r3, #4
 8004a88:	2b04      	cmp	r3, #4
 8004a8a:	d11b      	bne.n	8004ac4 <HAL_I2C_Master_Transmit+0x188>
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d017      	beq.n	8004ac4 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a98:	781a      	ldrb	r2, [r3, #0]
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aa4:	1c5a      	adds	r2, r3, #1
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004aae:	b29b      	uxth	r3, r3
 8004ab0:	3b01      	subs	r3, #1
 8004ab2:	b29a      	uxth	r2, r3
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004abc:	3b01      	subs	r3, #1
 8004abe:	b29a      	uxth	r2, r3
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004ac4:	697a      	ldr	r2, [r7, #20]
 8004ac6:	6a39      	ldr	r1, [r7, #32]
 8004ac8:	68f8      	ldr	r0, [r7, #12]
 8004aca:	f002 fd28 	bl	800751e <I2C_WaitOnBTFFlagUntilTimeout>
 8004ace:	4603      	mov	r3, r0
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d00d      	beq.n	8004af0 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ad8:	2b04      	cmp	r3, #4
 8004ada:	d107      	bne.n	8004aec <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	681a      	ldr	r2, [r3, #0]
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004aea:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004aec:	2301      	movs	r3, #1
 8004aee:	e01a      	b.n	8004b26 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d194      	bne.n	8004a22 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	681a      	ldr	r2, [r3, #0]
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004b06:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	2220      	movs	r2, #32
 8004b0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	2200      	movs	r2, #0
 8004b14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	2200      	movs	r2, #0
 8004b1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004b20:	2300      	movs	r3, #0
 8004b22:	e000      	b.n	8004b26 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8004b24:	2302      	movs	r3, #2
  }
}
 8004b26:	4618      	mov	r0, r3
 8004b28:	3718      	adds	r7, #24
 8004b2a:	46bd      	mov	sp, r7
 8004b2c:	bd80      	pop	{r7, pc}
 8004b2e:	bf00      	nop
 8004b30:	00100002 	.word	0x00100002
 8004b34:	ffff0000 	.word	0xffff0000

08004b38 <HAL_I2C_Master_Receive_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size)
{
 8004b38:	b580      	push	{r7, lr}
 8004b3a:	b086      	sub	sp, #24
 8004b3c:	af00      	add	r7, sp, #0
 8004b3e:	60f8      	str	r0, [r7, #12]
 8004b40:	607a      	str	r2, [r7, #4]
 8004b42:	461a      	mov	r2, r3
 8004b44:	460b      	mov	r3, r1
 8004b46:	817b      	strh	r3, [r7, #10]
 8004b48:	4613      	mov	r3, r2
 8004b4a:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8004b4c:	2300      	movs	r3, #0
 8004b4e:	613b      	str	r3, [r7, #16]
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b56:	b2db      	uxtb	r3, r3
 8004b58:	2b20      	cmp	r3, #32
 8004b5a:	f040 810d 	bne.w	8004d78 <HAL_I2C_Master_Receive_DMA+0x240>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8004b5e:	4b89      	ldr	r3, [pc, #548]	; (8004d84 <HAL_I2C_Master_Receive_DMA+0x24c>)
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	08db      	lsrs	r3, r3, #3
 8004b64:	4a88      	ldr	r2, [pc, #544]	; (8004d88 <HAL_I2C_Master_Receive_DMA+0x250>)
 8004b66:	fba2 2303 	umull	r2, r3, r2, r3
 8004b6a:	0a1a      	lsrs	r2, r3, #8
 8004b6c:	4613      	mov	r3, r2
 8004b6e:	009b      	lsls	r3, r3, #2
 8004b70:	4413      	add	r3, r2
 8004b72:	009a      	lsls	r2, r3, #2
 8004b74:	4413      	add	r3, r2
 8004b76:	613b      	str	r3, [r7, #16]
    do
    {
      count--;
 8004b78:	693b      	ldr	r3, [r7, #16]
 8004b7a:	3b01      	subs	r3, #1
 8004b7c:	613b      	str	r3, [r7, #16]
      if (count == 0U)
 8004b7e:	693b      	ldr	r3, [r7, #16]
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d116      	bne.n	8004bb2 <HAL_I2C_Master_Receive_DMA+0x7a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	2200      	movs	r2, #0
 8004b88:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	2220      	movs	r2, #32
 8004b8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	2200      	movs	r2, #0
 8004b96:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b9e:	f043 0220 	orr.w	r2, r3, #32
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	2200      	movs	r2, #0
 8004baa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004bae:	2301      	movs	r3, #1
 8004bb0:	e0e3      	b.n	8004d7a <HAL_I2C_Master_Receive_DMA+0x242>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	699b      	ldr	r3, [r3, #24]
 8004bb8:	f003 0302 	and.w	r3, r3, #2
 8004bbc:	2b02      	cmp	r3, #2
 8004bbe:	d0db      	beq.n	8004b78 <HAL_I2C_Master_Receive_DMA+0x40>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004bc6:	2b01      	cmp	r3, #1
 8004bc8:	d101      	bne.n	8004bce <HAL_I2C_Master_Receive_DMA+0x96>
 8004bca:	2302      	movs	r3, #2
 8004bcc:	e0d5      	b.n	8004d7a <HAL_I2C_Master_Receive_DMA+0x242>
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	2201      	movs	r2, #1
 8004bd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	f003 0301 	and.w	r3, r3, #1
 8004be0:	2b01      	cmp	r3, #1
 8004be2:	d007      	beq.n	8004bf4 <HAL_I2C_Master_Receive_DMA+0xbc>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	681a      	ldr	r2, [r3, #0]
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	f042 0201 	orr.w	r2, r2, #1
 8004bf2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	681a      	ldr	r2, [r3, #0]
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004c02:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	2222      	movs	r2, #34	; 0x22
 8004c08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	2210      	movs	r2, #16
 8004c10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	2200      	movs	r2, #0
 8004c18:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	687a      	ldr	r2, [r7, #4]
 8004c1e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	893a      	ldrh	r2, [r7, #8]
 8004c24:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c2a:	b29a      	uxth	r2, r3
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	4a56      	ldr	r2, [pc, #344]	; (8004d8c <HAL_I2C_Master_Receive_DMA+0x254>)
 8004c34:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 8004c36:	897a      	ldrh	r2, [r7, #10]
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	645a      	str	r2, [r3, #68]	; 0x44

    if (hi2c->XferSize > 0U)
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d07b      	beq.n	8004d3c <HAL_I2C_Master_Receive_DMA+0x204>
    {
      if (hi2c->hdmarx != NULL)
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d02a      	beq.n	8004ca2 <HAL_I2C_Master_Receive_DMA+0x16a>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAXferCplt;
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c50:	4a4f      	ldr	r2, [pc, #316]	; (8004d90 <HAL_I2C_Master_Receive_DMA+0x258>)
 8004c52:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c58:	4a4e      	ldr	r2, [pc, #312]	; (8004d94 <HAL_I2C_Master_Receive_DMA+0x25c>)
 8004c5a:	64da      	str	r2, [r3, #76]	; 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c60:	2200      	movs	r2, #0
 8004c62:	641a      	str	r2, [r3, #64]	; 0x40
        hi2c->hdmarx->XferM1CpltCallback = NULL;
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c68:	2200      	movs	r2, #0
 8004c6a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->hdmarx->XferM1HalfCpltCallback = NULL;
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c70:	2200      	movs	r2, #0
 8004c72:	649a      	str	r2, [r3, #72]	; 0x48
        hi2c->hdmarx->XferAbortCallback = NULL;
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c78:	2200      	movs	r2, #0
 8004c7a:	651a      	str	r2, [r3, #80]	; 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->DR, (uint32_t)hi2c->pBuffPtr, hi2c->XferSize);
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	3310      	adds	r3, #16
 8004c86:	4619      	mov	r1, r3
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c8c:	461a      	mov	r2, r3
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c92:	f7ff f843 	bl	8003d1c <HAL_DMA_Start_IT>
 8004c96:	4603      	mov	r3, r0
 8004c98:	75fb      	strb	r3, [r7, #23]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8004c9a:	7dfb      	ldrb	r3, [r7, #23]
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d139      	bne.n	8004d14 <HAL_I2C_Master_Receive_DMA+0x1dc>
 8004ca0:	e013      	b.n	8004cca <HAL_I2C_Master_Receive_DMA+0x192>
        hi2c->State     = HAL_I2C_STATE_READY;
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	2220      	movs	r2, #32
 8004ca6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	2200      	movs	r2, #0
 8004cae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cb6:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	641a      	str	r2, [r3, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	2200      	movs	r2, #0
 8004cc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_ERROR;
 8004cc6:	2301      	movs	r3, #1
 8004cc8:	e057      	b.n	8004d7a <HAL_I2C_Master_Receive_DMA+0x242>
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	681a      	ldr	r2, [r3, #0]
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004cd8:	601a      	str	r2, [r3, #0]

        /* Generate Start */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	681a      	ldr	r2, [r3, #0]
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004ce8:	601a      	str	r2, [r3, #0]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	2200      	movs	r2, #0
 8004cee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */

        /* Enable EVT and ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	685a      	ldr	r2, [r3, #4]
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8004d00:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	685a      	ldr	r2, [r3, #4]
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004d10:	605a      	str	r2, [r3, #4]
 8004d12:	e02f      	b.n	8004d74 <HAL_I2C_Master_Receive_DMA+0x23c>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	2220      	movs	r2, #32
 8004d18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	2200      	movs	r2, #0
 8004d20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d28:	f043 0210 	orr.w	r2, r3, #16
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	2200      	movs	r2, #0
 8004d34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004d38:	2301      	movs	r3, #1
 8004d3a:	e01e      	b.n	8004d7a <HAL_I2C_Master_Receive_DMA+0x242>
      }
    }
    else
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	2200      	movs	r2, #0
 8004d40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      /* Note : The I2C interrupts must be enabled after unlocking current process
      to avoid the risk of I2C interrupt handle execution before current
      process unlock */

      /* Enable EVT, BUF and ERR interrupt */
      __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	685a      	ldr	r2, [r3, #4]
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 8004d52:	605a      	str	r2, [r3, #4]

      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	681a      	ldr	r2, [r3, #0]
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004d62:	601a      	str	r2, [r3, #0]

      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	681a      	ldr	r2, [r3, #0]
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004d72:	601a      	str	r2, [r3, #0]
    }

    return HAL_OK;
 8004d74:	2300      	movs	r3, #0
 8004d76:	e000      	b.n	8004d7a <HAL_I2C_Master_Receive_DMA+0x242>
  }
  else
  {
    return HAL_BUSY;
 8004d78:	2302      	movs	r3, #2
  }
}
 8004d7a:	4618      	mov	r0, r3
 8004d7c:	3718      	adds	r7, #24
 8004d7e:	46bd      	mov	sp, r7
 8004d80:	bd80      	pop	{r7, pc}
 8004d82:	bf00      	nop
 8004d84:	20000018 	.word	0x20000018
 8004d88:	14f8b589 	.word	0x14f8b589
 8004d8c:	ffff0000 	.word	0xffff0000
 8004d90:	08006f7d 	.word	0x08006f7d
 8004d94:	08007127 	.word	0x08007127

08004d98 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004d98:	b580      	push	{r7, lr}
 8004d9a:	b088      	sub	sp, #32
 8004d9c:	af02      	add	r7, sp, #8
 8004d9e:	60f8      	str	r0, [r7, #12]
 8004da0:	4608      	mov	r0, r1
 8004da2:	4611      	mov	r1, r2
 8004da4:	461a      	mov	r2, r3
 8004da6:	4603      	mov	r3, r0
 8004da8:	817b      	strh	r3, [r7, #10]
 8004daa:	460b      	mov	r3, r1
 8004dac:	813b      	strh	r3, [r7, #8]
 8004dae:	4613      	mov	r3, r2
 8004db0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004db2:	f7fe f899 	bl	8002ee8 <HAL_GetTick>
 8004db6:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004dbe:	b2db      	uxtb	r3, r3
 8004dc0:	2b20      	cmp	r3, #32
 8004dc2:	f040 80d9 	bne.w	8004f78 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004dc6:	697b      	ldr	r3, [r7, #20]
 8004dc8:	9300      	str	r3, [sp, #0]
 8004dca:	2319      	movs	r3, #25
 8004dcc:	2201      	movs	r2, #1
 8004dce:	496d      	ldr	r1, [pc, #436]	; (8004f84 <HAL_I2C_Mem_Write+0x1ec>)
 8004dd0:	68f8      	ldr	r0, [r7, #12]
 8004dd2:	f002 fa8d 	bl	80072f0 <I2C_WaitOnFlagUntilTimeout>
 8004dd6:	4603      	mov	r3, r0
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d001      	beq.n	8004de0 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8004ddc:	2302      	movs	r3, #2
 8004dde:	e0cc      	b.n	8004f7a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004de6:	2b01      	cmp	r3, #1
 8004de8:	d101      	bne.n	8004dee <HAL_I2C_Mem_Write+0x56>
 8004dea:	2302      	movs	r3, #2
 8004dec:	e0c5      	b.n	8004f7a <HAL_I2C_Mem_Write+0x1e2>
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	2201      	movs	r2, #1
 8004df2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	f003 0301 	and.w	r3, r3, #1
 8004e00:	2b01      	cmp	r3, #1
 8004e02:	d007      	beq.n	8004e14 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	681a      	ldr	r2, [r3, #0]
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	f042 0201 	orr.w	r2, r2, #1
 8004e12:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	681a      	ldr	r2, [r3, #0]
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004e22:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	2221      	movs	r2, #33	; 0x21
 8004e28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	2240      	movs	r2, #64	; 0x40
 8004e30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	2200      	movs	r2, #0
 8004e38:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	6a3a      	ldr	r2, [r7, #32]
 8004e3e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004e44:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e4a:	b29a      	uxth	r2, r3
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	4a4d      	ldr	r2, [pc, #308]	; (8004f88 <HAL_I2C_Mem_Write+0x1f0>)
 8004e54:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004e56:	88f8      	ldrh	r0, [r7, #6]
 8004e58:	893a      	ldrh	r2, [r7, #8]
 8004e5a:	8979      	ldrh	r1, [r7, #10]
 8004e5c:	697b      	ldr	r3, [r7, #20]
 8004e5e:	9301      	str	r3, [sp, #4]
 8004e60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e62:	9300      	str	r3, [sp, #0]
 8004e64:	4603      	mov	r3, r0
 8004e66:	68f8      	ldr	r0, [r7, #12]
 8004e68:	f001 ff0a 	bl	8006c80 <I2C_RequestMemoryWrite>
 8004e6c:	4603      	mov	r3, r0
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d052      	beq.n	8004f18 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8004e72:	2301      	movs	r3, #1
 8004e74:	e081      	b.n	8004f7a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004e76:	697a      	ldr	r2, [r7, #20]
 8004e78:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004e7a:	68f8      	ldr	r0, [r7, #12]
 8004e7c:	f002 fb0e 	bl	800749c <I2C_WaitOnTXEFlagUntilTimeout>
 8004e80:	4603      	mov	r3, r0
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d00d      	beq.n	8004ea2 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e8a:	2b04      	cmp	r3, #4
 8004e8c:	d107      	bne.n	8004e9e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	681a      	ldr	r2, [r3, #0]
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004e9c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004e9e:	2301      	movs	r3, #1
 8004ea0:	e06b      	b.n	8004f7a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ea6:	781a      	ldrb	r2, [r3, #0]
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eb2:	1c5a      	adds	r2, r3, #1
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ebc:	3b01      	subs	r3, #1
 8004ebe:	b29a      	uxth	r2, r3
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ec8:	b29b      	uxth	r3, r3
 8004eca:	3b01      	subs	r3, #1
 8004ecc:	b29a      	uxth	r2, r3
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	695b      	ldr	r3, [r3, #20]
 8004ed8:	f003 0304 	and.w	r3, r3, #4
 8004edc:	2b04      	cmp	r3, #4
 8004ede:	d11b      	bne.n	8004f18 <HAL_I2C_Mem_Write+0x180>
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d017      	beq.n	8004f18 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eec:	781a      	ldrb	r2, [r3, #0]
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ef8:	1c5a      	adds	r2, r3, #1
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f02:	3b01      	subs	r3, #1
 8004f04:	b29a      	uxth	r2, r3
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f0e:	b29b      	uxth	r3, r3
 8004f10:	3b01      	subs	r3, #1
 8004f12:	b29a      	uxth	r2, r3
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d1aa      	bne.n	8004e76 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004f20:	697a      	ldr	r2, [r7, #20]
 8004f22:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004f24:	68f8      	ldr	r0, [r7, #12]
 8004f26:	f002 fafa 	bl	800751e <I2C_WaitOnBTFFlagUntilTimeout>
 8004f2a:	4603      	mov	r3, r0
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d00d      	beq.n	8004f4c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f34:	2b04      	cmp	r3, #4
 8004f36:	d107      	bne.n	8004f48 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	681a      	ldr	r2, [r3, #0]
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004f46:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004f48:	2301      	movs	r3, #1
 8004f4a:	e016      	b.n	8004f7a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	681a      	ldr	r2, [r3, #0]
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004f5a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	2220      	movs	r2, #32
 8004f60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	2200      	movs	r2, #0
 8004f68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	2200      	movs	r2, #0
 8004f70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004f74:	2300      	movs	r3, #0
 8004f76:	e000      	b.n	8004f7a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8004f78:	2302      	movs	r3, #2
  }
}
 8004f7a:	4618      	mov	r0, r3
 8004f7c:	3718      	adds	r7, #24
 8004f7e:	46bd      	mov	sp, r7
 8004f80:	bd80      	pop	{r7, pc}
 8004f82:	bf00      	nop
 8004f84:	00100002 	.word	0x00100002
 8004f88:	ffff0000 	.word	0xffff0000

08004f8c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004f8c:	b580      	push	{r7, lr}
 8004f8e:	b08c      	sub	sp, #48	; 0x30
 8004f90:	af02      	add	r7, sp, #8
 8004f92:	60f8      	str	r0, [r7, #12]
 8004f94:	4608      	mov	r0, r1
 8004f96:	4611      	mov	r1, r2
 8004f98:	461a      	mov	r2, r3
 8004f9a:	4603      	mov	r3, r0
 8004f9c:	817b      	strh	r3, [r7, #10]
 8004f9e:	460b      	mov	r3, r1
 8004fa0:	813b      	strh	r3, [r7, #8]
 8004fa2:	4613      	mov	r3, r2
 8004fa4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004fa6:	f7fd ff9f 	bl	8002ee8 <HAL_GetTick>
 8004faa:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004fb2:	b2db      	uxtb	r3, r3
 8004fb4:	2b20      	cmp	r3, #32
 8004fb6:	f040 8208 	bne.w	80053ca <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004fba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fbc:	9300      	str	r3, [sp, #0]
 8004fbe:	2319      	movs	r3, #25
 8004fc0:	2201      	movs	r2, #1
 8004fc2:	497b      	ldr	r1, [pc, #492]	; (80051b0 <HAL_I2C_Mem_Read+0x224>)
 8004fc4:	68f8      	ldr	r0, [r7, #12]
 8004fc6:	f002 f993 	bl	80072f0 <I2C_WaitOnFlagUntilTimeout>
 8004fca:	4603      	mov	r3, r0
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d001      	beq.n	8004fd4 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8004fd0:	2302      	movs	r3, #2
 8004fd2:	e1fb      	b.n	80053cc <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004fda:	2b01      	cmp	r3, #1
 8004fdc:	d101      	bne.n	8004fe2 <HAL_I2C_Mem_Read+0x56>
 8004fde:	2302      	movs	r3, #2
 8004fe0:	e1f4      	b.n	80053cc <HAL_I2C_Mem_Read+0x440>
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	2201      	movs	r2, #1
 8004fe6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	f003 0301 	and.w	r3, r3, #1
 8004ff4:	2b01      	cmp	r3, #1
 8004ff6:	d007      	beq.n	8005008 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	681a      	ldr	r2, [r3, #0]
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	f042 0201 	orr.w	r2, r2, #1
 8005006:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	681a      	ldr	r2, [r3, #0]
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005016:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	2222      	movs	r2, #34	; 0x22
 800501c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	2240      	movs	r2, #64	; 0x40
 8005024:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	2200      	movs	r2, #0
 800502c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005032:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8005038:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800503e:	b29a      	uxth	r2, r3
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	4a5b      	ldr	r2, [pc, #364]	; (80051b4 <HAL_I2C_Mem_Read+0x228>)
 8005048:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800504a:	88f8      	ldrh	r0, [r7, #6]
 800504c:	893a      	ldrh	r2, [r7, #8]
 800504e:	8979      	ldrh	r1, [r7, #10]
 8005050:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005052:	9301      	str	r3, [sp, #4]
 8005054:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005056:	9300      	str	r3, [sp, #0]
 8005058:	4603      	mov	r3, r0
 800505a:	68f8      	ldr	r0, [r7, #12]
 800505c:	f001 fea6 	bl	8006dac <I2C_RequestMemoryRead>
 8005060:	4603      	mov	r3, r0
 8005062:	2b00      	cmp	r3, #0
 8005064:	d001      	beq.n	800506a <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8005066:	2301      	movs	r3, #1
 8005068:	e1b0      	b.n	80053cc <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800506e:	2b00      	cmp	r3, #0
 8005070:	d113      	bne.n	800509a <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005072:	2300      	movs	r3, #0
 8005074:	623b      	str	r3, [r7, #32]
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	695b      	ldr	r3, [r3, #20]
 800507c:	623b      	str	r3, [r7, #32]
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	699b      	ldr	r3, [r3, #24]
 8005084:	623b      	str	r3, [r7, #32]
 8005086:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	681a      	ldr	r2, [r3, #0]
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005096:	601a      	str	r2, [r3, #0]
 8005098:	e184      	b.n	80053a4 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800509e:	2b01      	cmp	r3, #1
 80050a0:	d11b      	bne.n	80050da <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	681a      	ldr	r2, [r3, #0]
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80050b0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80050b2:	2300      	movs	r3, #0
 80050b4:	61fb      	str	r3, [r7, #28]
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	695b      	ldr	r3, [r3, #20]
 80050bc:	61fb      	str	r3, [r7, #28]
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	699b      	ldr	r3, [r3, #24]
 80050c4:	61fb      	str	r3, [r7, #28]
 80050c6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	681a      	ldr	r2, [r3, #0]
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80050d6:	601a      	str	r2, [r3, #0]
 80050d8:	e164      	b.n	80053a4 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80050de:	2b02      	cmp	r3, #2
 80050e0:	d11b      	bne.n	800511a <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	681a      	ldr	r2, [r3, #0]
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80050f0:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	681a      	ldr	r2, [r3, #0]
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005100:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005102:	2300      	movs	r3, #0
 8005104:	61bb      	str	r3, [r7, #24]
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	695b      	ldr	r3, [r3, #20]
 800510c:	61bb      	str	r3, [r7, #24]
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	699b      	ldr	r3, [r3, #24]
 8005114:	61bb      	str	r3, [r7, #24]
 8005116:	69bb      	ldr	r3, [r7, #24]
 8005118:	e144      	b.n	80053a4 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800511a:	2300      	movs	r3, #0
 800511c:	617b      	str	r3, [r7, #20]
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	695b      	ldr	r3, [r3, #20]
 8005124:	617b      	str	r3, [r7, #20]
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	699b      	ldr	r3, [r3, #24]
 800512c:	617b      	str	r3, [r7, #20]
 800512e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8005130:	e138      	b.n	80053a4 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005136:	2b03      	cmp	r3, #3
 8005138:	f200 80f1 	bhi.w	800531e <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005140:	2b01      	cmp	r3, #1
 8005142:	d123      	bne.n	800518c <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005144:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005146:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005148:	68f8      	ldr	r0, [r7, #12]
 800514a:	f002 fa5b 	bl	8007604 <I2C_WaitOnRXNEFlagUntilTimeout>
 800514e:	4603      	mov	r3, r0
 8005150:	2b00      	cmp	r3, #0
 8005152:	d001      	beq.n	8005158 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8005154:	2301      	movs	r3, #1
 8005156:	e139      	b.n	80053cc <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	691a      	ldr	r2, [r3, #16]
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005162:	b2d2      	uxtb	r2, r2
 8005164:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800516a:	1c5a      	adds	r2, r3, #1
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005174:	3b01      	subs	r3, #1
 8005176:	b29a      	uxth	r2, r3
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005180:	b29b      	uxth	r3, r3
 8005182:	3b01      	subs	r3, #1
 8005184:	b29a      	uxth	r2, r3
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	855a      	strh	r2, [r3, #42]	; 0x2a
 800518a:	e10b      	b.n	80053a4 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005190:	2b02      	cmp	r3, #2
 8005192:	d14e      	bne.n	8005232 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005194:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005196:	9300      	str	r3, [sp, #0]
 8005198:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800519a:	2200      	movs	r2, #0
 800519c:	4906      	ldr	r1, [pc, #24]	; (80051b8 <HAL_I2C_Mem_Read+0x22c>)
 800519e:	68f8      	ldr	r0, [r7, #12]
 80051a0:	f002 f8a6 	bl	80072f0 <I2C_WaitOnFlagUntilTimeout>
 80051a4:	4603      	mov	r3, r0
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d008      	beq.n	80051bc <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80051aa:	2301      	movs	r3, #1
 80051ac:	e10e      	b.n	80053cc <HAL_I2C_Mem_Read+0x440>
 80051ae:	bf00      	nop
 80051b0:	00100002 	.word	0x00100002
 80051b4:	ffff0000 	.word	0xffff0000
 80051b8:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	681a      	ldr	r2, [r3, #0]
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80051ca:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	691a      	ldr	r2, [r3, #16]
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051d6:	b2d2      	uxtb	r2, r2
 80051d8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051de:	1c5a      	adds	r2, r3, #1
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80051e8:	3b01      	subs	r3, #1
 80051ea:	b29a      	uxth	r2, r3
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051f4:	b29b      	uxth	r3, r3
 80051f6:	3b01      	subs	r3, #1
 80051f8:	b29a      	uxth	r2, r3
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	691a      	ldr	r2, [r3, #16]
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005208:	b2d2      	uxtb	r2, r2
 800520a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005210:	1c5a      	adds	r2, r3, #1
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800521a:	3b01      	subs	r3, #1
 800521c:	b29a      	uxth	r2, r3
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005226:	b29b      	uxth	r3, r3
 8005228:	3b01      	subs	r3, #1
 800522a:	b29a      	uxth	r2, r3
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005230:	e0b8      	b.n	80053a4 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005232:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005234:	9300      	str	r3, [sp, #0]
 8005236:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005238:	2200      	movs	r2, #0
 800523a:	4966      	ldr	r1, [pc, #408]	; (80053d4 <HAL_I2C_Mem_Read+0x448>)
 800523c:	68f8      	ldr	r0, [r7, #12]
 800523e:	f002 f857 	bl	80072f0 <I2C_WaitOnFlagUntilTimeout>
 8005242:	4603      	mov	r3, r0
 8005244:	2b00      	cmp	r3, #0
 8005246:	d001      	beq.n	800524c <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8005248:	2301      	movs	r3, #1
 800524a:	e0bf      	b.n	80053cc <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	681a      	ldr	r2, [r3, #0]
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800525a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	691a      	ldr	r2, [r3, #16]
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005266:	b2d2      	uxtb	r2, r2
 8005268:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800526e:	1c5a      	adds	r2, r3, #1
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005278:	3b01      	subs	r3, #1
 800527a:	b29a      	uxth	r2, r3
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005284:	b29b      	uxth	r3, r3
 8005286:	3b01      	subs	r3, #1
 8005288:	b29a      	uxth	r2, r3
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800528e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005290:	9300      	str	r3, [sp, #0]
 8005292:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005294:	2200      	movs	r2, #0
 8005296:	494f      	ldr	r1, [pc, #316]	; (80053d4 <HAL_I2C_Mem_Read+0x448>)
 8005298:	68f8      	ldr	r0, [r7, #12]
 800529a:	f002 f829 	bl	80072f0 <I2C_WaitOnFlagUntilTimeout>
 800529e:	4603      	mov	r3, r0
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d001      	beq.n	80052a8 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80052a4:	2301      	movs	r3, #1
 80052a6:	e091      	b.n	80053cc <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	681a      	ldr	r2, [r3, #0]
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80052b6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	691a      	ldr	r2, [r3, #16]
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052c2:	b2d2      	uxtb	r2, r2
 80052c4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052ca:	1c5a      	adds	r2, r3, #1
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80052d4:	3b01      	subs	r3, #1
 80052d6:	b29a      	uxth	r2, r3
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052e0:	b29b      	uxth	r3, r3
 80052e2:	3b01      	subs	r3, #1
 80052e4:	b29a      	uxth	r2, r3
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	691a      	ldr	r2, [r3, #16]
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052f4:	b2d2      	uxtb	r2, r2
 80052f6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052fc:	1c5a      	adds	r2, r3, #1
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005306:	3b01      	subs	r3, #1
 8005308:	b29a      	uxth	r2, r3
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005312:	b29b      	uxth	r3, r3
 8005314:	3b01      	subs	r3, #1
 8005316:	b29a      	uxth	r2, r3
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800531c:	e042      	b.n	80053a4 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800531e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005320:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005322:	68f8      	ldr	r0, [r7, #12]
 8005324:	f002 f96e 	bl	8007604 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005328:	4603      	mov	r3, r0
 800532a:	2b00      	cmp	r3, #0
 800532c:	d001      	beq.n	8005332 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800532e:	2301      	movs	r3, #1
 8005330:	e04c      	b.n	80053cc <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	691a      	ldr	r2, [r3, #16]
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800533c:	b2d2      	uxtb	r2, r2
 800533e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005344:	1c5a      	adds	r2, r3, #1
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800534e:	3b01      	subs	r3, #1
 8005350:	b29a      	uxth	r2, r3
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800535a:	b29b      	uxth	r3, r3
 800535c:	3b01      	subs	r3, #1
 800535e:	b29a      	uxth	r2, r3
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	695b      	ldr	r3, [r3, #20]
 800536a:	f003 0304 	and.w	r3, r3, #4
 800536e:	2b04      	cmp	r3, #4
 8005370:	d118      	bne.n	80053a4 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	691a      	ldr	r2, [r3, #16]
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800537c:	b2d2      	uxtb	r2, r2
 800537e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005384:	1c5a      	adds	r2, r3, #1
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800538e:	3b01      	subs	r3, #1
 8005390:	b29a      	uxth	r2, r3
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800539a:	b29b      	uxth	r3, r3
 800539c:	3b01      	subs	r3, #1
 800539e:	b29a      	uxth	r2, r3
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	f47f aec2 	bne.w	8005132 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	2220      	movs	r2, #32
 80053b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	2200      	movs	r2, #0
 80053ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	2200      	movs	r2, #0
 80053c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80053c6:	2300      	movs	r3, #0
 80053c8:	e000      	b.n	80053cc <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 80053ca:	2302      	movs	r3, #2
  }
}
 80053cc:	4618      	mov	r0, r3
 80053ce:	3728      	adds	r7, #40	; 0x28
 80053d0:	46bd      	mov	sp, r7
 80053d2:	bd80      	pop	{r7, pc}
 80053d4:	00010004 	.word	0x00010004

080053d8 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80053d8:	b580      	push	{r7, lr}
 80053da:	b088      	sub	sp, #32
 80053dc:	af00      	add	r7, sp, #0
 80053de:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 80053e0:	2300      	movs	r3, #0
 80053e2:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	685b      	ldr	r3, [r3, #4]
 80053ea:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053f0:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80053f8:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005400:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8005402:	7bfb      	ldrb	r3, [r7, #15]
 8005404:	2b10      	cmp	r3, #16
 8005406:	d003      	beq.n	8005410 <HAL_I2C_EV_IRQHandler+0x38>
 8005408:	7bfb      	ldrb	r3, [r7, #15]
 800540a:	2b40      	cmp	r3, #64	; 0x40
 800540c:	f040 80c1 	bne.w	8005592 <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	699b      	ldr	r3, [r3, #24]
 8005416:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	695b      	ldr	r3, [r3, #20]
 800541e:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8005420:	69fb      	ldr	r3, [r7, #28]
 8005422:	f003 0301 	and.w	r3, r3, #1
 8005426:	2b00      	cmp	r3, #0
 8005428:	d10d      	bne.n	8005446 <HAL_I2C_EV_IRQHandler+0x6e>
 800542a:	693b      	ldr	r3, [r7, #16]
 800542c:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8005430:	d003      	beq.n	800543a <HAL_I2C_EV_IRQHandler+0x62>
 8005432:	693b      	ldr	r3, [r7, #16]
 8005434:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8005438:	d101      	bne.n	800543e <HAL_I2C_EV_IRQHandler+0x66>
 800543a:	2301      	movs	r3, #1
 800543c:	e000      	b.n	8005440 <HAL_I2C_EV_IRQHandler+0x68>
 800543e:	2300      	movs	r3, #0
 8005440:	2b01      	cmp	r3, #1
 8005442:	f000 8132 	beq.w	80056aa <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005446:	69fb      	ldr	r3, [r7, #28]
 8005448:	f003 0301 	and.w	r3, r3, #1
 800544c:	2b00      	cmp	r3, #0
 800544e:	d00c      	beq.n	800546a <HAL_I2C_EV_IRQHandler+0x92>
 8005450:	697b      	ldr	r3, [r7, #20]
 8005452:	0a5b      	lsrs	r3, r3, #9
 8005454:	f003 0301 	and.w	r3, r3, #1
 8005458:	2b00      	cmp	r3, #0
 800545a:	d006      	beq.n	800546a <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 800545c:	6878      	ldr	r0, [r7, #4]
 800545e:	f002 f956 	bl	800770e <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8005462:	6878      	ldr	r0, [r7, #4]
 8005464:	f000 fd6f 	bl	8005f46 <I2C_Master_SB>
 8005468:	e092      	b.n	8005590 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800546a:	69fb      	ldr	r3, [r7, #28]
 800546c:	08db      	lsrs	r3, r3, #3
 800546e:	f003 0301 	and.w	r3, r3, #1
 8005472:	2b00      	cmp	r3, #0
 8005474:	d009      	beq.n	800548a <HAL_I2C_EV_IRQHandler+0xb2>
 8005476:	697b      	ldr	r3, [r7, #20]
 8005478:	0a5b      	lsrs	r3, r3, #9
 800547a:	f003 0301 	and.w	r3, r3, #1
 800547e:	2b00      	cmp	r3, #0
 8005480:	d003      	beq.n	800548a <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8005482:	6878      	ldr	r0, [r7, #4]
 8005484:	f000 fde5 	bl	8006052 <I2C_Master_ADD10>
 8005488:	e082      	b.n	8005590 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800548a:	69fb      	ldr	r3, [r7, #28]
 800548c:	085b      	lsrs	r3, r3, #1
 800548e:	f003 0301 	and.w	r3, r3, #1
 8005492:	2b00      	cmp	r3, #0
 8005494:	d009      	beq.n	80054aa <HAL_I2C_EV_IRQHandler+0xd2>
 8005496:	697b      	ldr	r3, [r7, #20]
 8005498:	0a5b      	lsrs	r3, r3, #9
 800549a:	f003 0301 	and.w	r3, r3, #1
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d003      	beq.n	80054aa <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 80054a2:	6878      	ldr	r0, [r7, #4]
 80054a4:	f000 fdff 	bl	80060a6 <I2C_Master_ADDR>
 80054a8:	e072      	b.n	8005590 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 80054aa:	69bb      	ldr	r3, [r7, #24]
 80054ac:	089b      	lsrs	r3, r3, #2
 80054ae:	f003 0301 	and.w	r3, r3, #1
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d03b      	beq.n	800552e <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	685b      	ldr	r3, [r3, #4]
 80054bc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80054c0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80054c4:	f000 80f3 	beq.w	80056ae <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80054c8:	69fb      	ldr	r3, [r7, #28]
 80054ca:	09db      	lsrs	r3, r3, #7
 80054cc:	f003 0301 	and.w	r3, r3, #1
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d00f      	beq.n	80054f4 <HAL_I2C_EV_IRQHandler+0x11c>
 80054d4:	697b      	ldr	r3, [r7, #20]
 80054d6:	0a9b      	lsrs	r3, r3, #10
 80054d8:	f003 0301 	and.w	r3, r3, #1
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d009      	beq.n	80054f4 <HAL_I2C_EV_IRQHandler+0x11c>
 80054e0:	69fb      	ldr	r3, [r7, #28]
 80054e2:	089b      	lsrs	r3, r3, #2
 80054e4:	f003 0301 	and.w	r3, r3, #1
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d103      	bne.n	80054f4 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 80054ec:	6878      	ldr	r0, [r7, #4]
 80054ee:	f000 f9e9 	bl	80058c4 <I2C_MasterTransmit_TXE>
 80054f2:	e04d      	b.n	8005590 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80054f4:	69fb      	ldr	r3, [r7, #28]
 80054f6:	089b      	lsrs	r3, r3, #2
 80054f8:	f003 0301 	and.w	r3, r3, #1
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	f000 80d6 	beq.w	80056ae <HAL_I2C_EV_IRQHandler+0x2d6>
 8005502:	697b      	ldr	r3, [r7, #20]
 8005504:	0a5b      	lsrs	r3, r3, #9
 8005506:	f003 0301 	and.w	r3, r3, #1
 800550a:	2b00      	cmp	r3, #0
 800550c:	f000 80cf 	beq.w	80056ae <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8005510:	7bbb      	ldrb	r3, [r7, #14]
 8005512:	2b21      	cmp	r3, #33	; 0x21
 8005514:	d103      	bne.n	800551e <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8005516:	6878      	ldr	r0, [r7, #4]
 8005518:	f000 fa70 	bl	80059fc <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800551c:	e0c7      	b.n	80056ae <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 800551e:	7bfb      	ldrb	r3, [r7, #15]
 8005520:	2b40      	cmp	r3, #64	; 0x40
 8005522:	f040 80c4 	bne.w	80056ae <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8005526:	6878      	ldr	r0, [r7, #4]
 8005528:	f000 fade 	bl	8005ae8 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800552c:	e0bf      	b.n	80056ae <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	685b      	ldr	r3, [r3, #4]
 8005534:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005538:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800553c:	f000 80b7 	beq.w	80056ae <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005540:	69fb      	ldr	r3, [r7, #28]
 8005542:	099b      	lsrs	r3, r3, #6
 8005544:	f003 0301 	and.w	r3, r3, #1
 8005548:	2b00      	cmp	r3, #0
 800554a:	d00f      	beq.n	800556c <HAL_I2C_EV_IRQHandler+0x194>
 800554c:	697b      	ldr	r3, [r7, #20]
 800554e:	0a9b      	lsrs	r3, r3, #10
 8005550:	f003 0301 	and.w	r3, r3, #1
 8005554:	2b00      	cmp	r3, #0
 8005556:	d009      	beq.n	800556c <HAL_I2C_EV_IRQHandler+0x194>
 8005558:	69fb      	ldr	r3, [r7, #28]
 800555a:	089b      	lsrs	r3, r3, #2
 800555c:	f003 0301 	and.w	r3, r3, #1
 8005560:	2b00      	cmp	r3, #0
 8005562:	d103      	bne.n	800556c <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8005564:	6878      	ldr	r0, [r7, #4]
 8005566:	f000 fb53 	bl	8005c10 <I2C_MasterReceive_RXNE>
 800556a:	e011      	b.n	8005590 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800556c:	69fb      	ldr	r3, [r7, #28]
 800556e:	089b      	lsrs	r3, r3, #2
 8005570:	f003 0301 	and.w	r3, r3, #1
 8005574:	2b00      	cmp	r3, #0
 8005576:	f000 809a 	beq.w	80056ae <HAL_I2C_EV_IRQHandler+0x2d6>
 800557a:	697b      	ldr	r3, [r7, #20]
 800557c:	0a5b      	lsrs	r3, r3, #9
 800557e:	f003 0301 	and.w	r3, r3, #1
 8005582:	2b00      	cmp	r3, #0
 8005584:	f000 8093 	beq.w	80056ae <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8005588:	6878      	ldr	r0, [r7, #4]
 800558a:	f000 fbf2 	bl	8005d72 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800558e:	e08e      	b.n	80056ae <HAL_I2C_EV_IRQHandler+0x2d6>
 8005590:	e08d      	b.n	80056ae <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005596:	2b00      	cmp	r3, #0
 8005598:	d004      	beq.n	80055a4 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	695b      	ldr	r3, [r3, #20]
 80055a0:	61fb      	str	r3, [r7, #28]
 80055a2:	e007      	b.n	80055b4 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	699b      	ldr	r3, [r3, #24]
 80055aa:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	695b      	ldr	r3, [r3, #20]
 80055b2:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80055b4:	69fb      	ldr	r3, [r7, #28]
 80055b6:	085b      	lsrs	r3, r3, #1
 80055b8:	f003 0301 	and.w	r3, r3, #1
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d012      	beq.n	80055e6 <HAL_I2C_EV_IRQHandler+0x20e>
 80055c0:	697b      	ldr	r3, [r7, #20]
 80055c2:	0a5b      	lsrs	r3, r3, #9
 80055c4:	f003 0301 	and.w	r3, r3, #1
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d00c      	beq.n	80055e6 <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d003      	beq.n	80055dc <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	699b      	ldr	r3, [r3, #24]
 80055da:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 80055dc:	69b9      	ldr	r1, [r7, #24]
 80055de:	6878      	ldr	r0, [r7, #4]
 80055e0:	f000 ffb0 	bl	8006544 <I2C_Slave_ADDR>
 80055e4:	e066      	b.n	80056b4 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80055e6:	69fb      	ldr	r3, [r7, #28]
 80055e8:	091b      	lsrs	r3, r3, #4
 80055ea:	f003 0301 	and.w	r3, r3, #1
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d009      	beq.n	8005606 <HAL_I2C_EV_IRQHandler+0x22e>
 80055f2:	697b      	ldr	r3, [r7, #20]
 80055f4:	0a5b      	lsrs	r3, r3, #9
 80055f6:	f003 0301 	and.w	r3, r3, #1
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d003      	beq.n	8005606 <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 80055fe:	6878      	ldr	r0, [r7, #4]
 8005600:	f000 ffea 	bl	80065d8 <I2C_Slave_STOPF>
 8005604:	e056      	b.n	80056b4 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8005606:	7bbb      	ldrb	r3, [r7, #14]
 8005608:	2b21      	cmp	r3, #33	; 0x21
 800560a:	d002      	beq.n	8005612 <HAL_I2C_EV_IRQHandler+0x23a>
 800560c:	7bbb      	ldrb	r3, [r7, #14]
 800560e:	2b29      	cmp	r3, #41	; 0x29
 8005610:	d125      	bne.n	800565e <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005612:	69fb      	ldr	r3, [r7, #28]
 8005614:	09db      	lsrs	r3, r3, #7
 8005616:	f003 0301 	and.w	r3, r3, #1
 800561a:	2b00      	cmp	r3, #0
 800561c:	d00f      	beq.n	800563e <HAL_I2C_EV_IRQHandler+0x266>
 800561e:	697b      	ldr	r3, [r7, #20]
 8005620:	0a9b      	lsrs	r3, r3, #10
 8005622:	f003 0301 	and.w	r3, r3, #1
 8005626:	2b00      	cmp	r3, #0
 8005628:	d009      	beq.n	800563e <HAL_I2C_EV_IRQHandler+0x266>
 800562a:	69fb      	ldr	r3, [r7, #28]
 800562c:	089b      	lsrs	r3, r3, #2
 800562e:	f003 0301 	and.w	r3, r3, #1
 8005632:	2b00      	cmp	r3, #0
 8005634:	d103      	bne.n	800563e <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8005636:	6878      	ldr	r0, [r7, #4]
 8005638:	f000 fec6 	bl	80063c8 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800563c:	e039      	b.n	80056b2 <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800563e:	69fb      	ldr	r3, [r7, #28]
 8005640:	089b      	lsrs	r3, r3, #2
 8005642:	f003 0301 	and.w	r3, r3, #1
 8005646:	2b00      	cmp	r3, #0
 8005648:	d033      	beq.n	80056b2 <HAL_I2C_EV_IRQHandler+0x2da>
 800564a:	697b      	ldr	r3, [r7, #20]
 800564c:	0a5b      	lsrs	r3, r3, #9
 800564e:	f003 0301 	and.w	r3, r3, #1
 8005652:	2b00      	cmp	r3, #0
 8005654:	d02d      	beq.n	80056b2 <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8005656:	6878      	ldr	r0, [r7, #4]
 8005658:	f000 fef3 	bl	8006442 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800565c:	e029      	b.n	80056b2 <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800565e:	69fb      	ldr	r3, [r7, #28]
 8005660:	099b      	lsrs	r3, r3, #6
 8005662:	f003 0301 	and.w	r3, r3, #1
 8005666:	2b00      	cmp	r3, #0
 8005668:	d00f      	beq.n	800568a <HAL_I2C_EV_IRQHandler+0x2b2>
 800566a:	697b      	ldr	r3, [r7, #20]
 800566c:	0a9b      	lsrs	r3, r3, #10
 800566e:	f003 0301 	and.w	r3, r3, #1
 8005672:	2b00      	cmp	r3, #0
 8005674:	d009      	beq.n	800568a <HAL_I2C_EV_IRQHandler+0x2b2>
 8005676:	69fb      	ldr	r3, [r7, #28]
 8005678:	089b      	lsrs	r3, r3, #2
 800567a:	f003 0301 	and.w	r3, r3, #1
 800567e:	2b00      	cmp	r3, #0
 8005680:	d103      	bne.n	800568a <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8005682:	6878      	ldr	r0, [r7, #4]
 8005684:	f000 fefe 	bl	8006484 <I2C_SlaveReceive_RXNE>
 8005688:	e014      	b.n	80056b4 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800568a:	69fb      	ldr	r3, [r7, #28]
 800568c:	089b      	lsrs	r3, r3, #2
 800568e:	f003 0301 	and.w	r3, r3, #1
 8005692:	2b00      	cmp	r3, #0
 8005694:	d00e      	beq.n	80056b4 <HAL_I2C_EV_IRQHandler+0x2dc>
 8005696:	697b      	ldr	r3, [r7, #20]
 8005698:	0a5b      	lsrs	r3, r3, #9
 800569a:	f003 0301 	and.w	r3, r3, #1
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d008      	beq.n	80056b4 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 80056a2:	6878      	ldr	r0, [r7, #4]
 80056a4:	f000 ff2c 	bl	8006500 <I2C_SlaveReceive_BTF>
 80056a8:	e004      	b.n	80056b4 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 80056aa:	bf00      	nop
 80056ac:	e002      	b.n	80056b4 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80056ae:	bf00      	nop
 80056b0:	e000      	b.n	80056b4 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80056b2:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 80056b4:	3720      	adds	r7, #32
 80056b6:	46bd      	mov	sp, r7
 80056b8:	bd80      	pop	{r7, pc}

080056ba <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80056ba:	b580      	push	{r7, lr}
 80056bc:	b08a      	sub	sp, #40	; 0x28
 80056be:	af00      	add	r7, sp, #0
 80056c0:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	695b      	ldr	r3, [r3, #20]
 80056c8:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	685b      	ldr	r3, [r3, #4]
 80056d0:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 80056d2:	2300      	movs	r3, #0
 80056d4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80056dc:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80056de:	6a3b      	ldr	r3, [r7, #32]
 80056e0:	0a1b      	lsrs	r3, r3, #8
 80056e2:	f003 0301 	and.w	r3, r3, #1
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d00e      	beq.n	8005708 <HAL_I2C_ER_IRQHandler+0x4e>
 80056ea:	69fb      	ldr	r3, [r7, #28]
 80056ec:	0a1b      	lsrs	r3, r3, #8
 80056ee:	f003 0301 	and.w	r3, r3, #1
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d008      	beq.n	8005708 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 80056f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056f8:	f043 0301 	orr.w	r3, r3, #1
 80056fc:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005706:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8005708:	6a3b      	ldr	r3, [r7, #32]
 800570a:	0a5b      	lsrs	r3, r3, #9
 800570c:	f003 0301 	and.w	r3, r3, #1
 8005710:	2b00      	cmp	r3, #0
 8005712:	d00e      	beq.n	8005732 <HAL_I2C_ER_IRQHandler+0x78>
 8005714:	69fb      	ldr	r3, [r7, #28]
 8005716:	0a1b      	lsrs	r3, r3, #8
 8005718:	f003 0301 	and.w	r3, r3, #1
 800571c:	2b00      	cmp	r3, #0
 800571e:	d008      	beq.n	8005732 <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8005720:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005722:	f043 0302 	orr.w	r3, r3, #2
 8005726:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8005730:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8005732:	6a3b      	ldr	r3, [r7, #32]
 8005734:	0a9b      	lsrs	r3, r3, #10
 8005736:	f003 0301 	and.w	r3, r3, #1
 800573a:	2b00      	cmp	r3, #0
 800573c:	d03f      	beq.n	80057be <HAL_I2C_ER_IRQHandler+0x104>
 800573e:	69fb      	ldr	r3, [r7, #28]
 8005740:	0a1b      	lsrs	r3, r3, #8
 8005742:	f003 0301 	and.w	r3, r3, #1
 8005746:	2b00      	cmp	r3, #0
 8005748:	d039      	beq.n	80057be <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 800574a:	7efb      	ldrb	r3, [r7, #27]
 800574c:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005752:	b29b      	uxth	r3, r3
 8005754:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800575c:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005762:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8005764:	7ebb      	ldrb	r3, [r7, #26]
 8005766:	2b20      	cmp	r3, #32
 8005768:	d112      	bne.n	8005790 <HAL_I2C_ER_IRQHandler+0xd6>
 800576a:	697b      	ldr	r3, [r7, #20]
 800576c:	2b00      	cmp	r3, #0
 800576e:	d10f      	bne.n	8005790 <HAL_I2C_ER_IRQHandler+0xd6>
 8005770:	7cfb      	ldrb	r3, [r7, #19]
 8005772:	2b21      	cmp	r3, #33	; 0x21
 8005774:	d008      	beq.n	8005788 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8005776:	7cfb      	ldrb	r3, [r7, #19]
 8005778:	2b29      	cmp	r3, #41	; 0x29
 800577a:	d005      	beq.n	8005788 <HAL_I2C_ER_IRQHandler+0xce>
 800577c:	7cfb      	ldrb	r3, [r7, #19]
 800577e:	2b28      	cmp	r3, #40	; 0x28
 8005780:	d106      	bne.n	8005790 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	2b21      	cmp	r3, #33	; 0x21
 8005786:	d103      	bne.n	8005790 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 8005788:	6878      	ldr	r0, [r7, #4]
 800578a:	f001 f855 	bl	8006838 <I2C_Slave_AF>
 800578e:	e016      	b.n	80057be <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005798:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 800579a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800579c:	f043 0304 	orr.w	r3, r3, #4
 80057a0:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80057a2:	7efb      	ldrb	r3, [r7, #27]
 80057a4:	2b10      	cmp	r3, #16
 80057a6:	d002      	beq.n	80057ae <HAL_I2C_ER_IRQHandler+0xf4>
 80057a8:	7efb      	ldrb	r3, [r7, #27]
 80057aa:	2b40      	cmp	r3, #64	; 0x40
 80057ac:	d107      	bne.n	80057be <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	681a      	ldr	r2, [r3, #0]
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80057bc:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80057be:	6a3b      	ldr	r3, [r7, #32]
 80057c0:	0adb      	lsrs	r3, r3, #11
 80057c2:	f003 0301 	and.w	r3, r3, #1
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d00e      	beq.n	80057e8 <HAL_I2C_ER_IRQHandler+0x12e>
 80057ca:	69fb      	ldr	r3, [r7, #28]
 80057cc:	0a1b      	lsrs	r3, r3, #8
 80057ce:	f003 0301 	and.w	r3, r3, #1
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d008      	beq.n	80057e8 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 80057d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057d8:	f043 0308 	orr.w	r3, r3, #8
 80057dc:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 80057e6:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 80057e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d008      	beq.n	8005800 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80057f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057f4:	431a      	orrs	r2, r3
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 80057fa:	6878      	ldr	r0, [r7, #4]
 80057fc:	f001 f88c 	bl	8006918 <I2C_ITError>
  }
}
 8005800:	bf00      	nop
 8005802:	3728      	adds	r7, #40	; 0x28
 8005804:	46bd      	mov	sp, r7
 8005806:	bd80      	pop	{r7, pc}

08005808 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005808:	b480      	push	{r7}
 800580a:	b083      	sub	sp, #12
 800580c:	af00      	add	r7, sp, #0
 800580e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8005810:	bf00      	nop
 8005812:	370c      	adds	r7, #12
 8005814:	46bd      	mov	sp, r7
 8005816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800581a:	4770      	bx	lr

0800581c <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800581c:	b480      	push	{r7}
 800581e:	b083      	sub	sp, #12
 8005820:	af00      	add	r7, sp, #0
 8005822:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8005824:	bf00      	nop
 8005826:	370c      	adds	r7, #12
 8005828:	46bd      	mov	sp, r7
 800582a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800582e:	4770      	bx	lr

08005830 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005830:	b480      	push	{r7}
 8005832:	b083      	sub	sp, #12
 8005834:	af00      	add	r7, sp, #0
 8005836:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8005838:	bf00      	nop
 800583a:	370c      	adds	r7, #12
 800583c:	46bd      	mov	sp, r7
 800583e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005842:	4770      	bx	lr

08005844 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8005844:	b480      	push	{r7}
 8005846:	b083      	sub	sp, #12
 8005848:	af00      	add	r7, sp, #0
 800584a:	6078      	str	r0, [r7, #4]
 800584c:	460b      	mov	r3, r1
 800584e:	70fb      	strb	r3, [r7, #3]
 8005850:	4613      	mov	r3, r2
 8005852:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8005854:	bf00      	nop
 8005856:	370c      	adds	r7, #12
 8005858:	46bd      	mov	sp, r7
 800585a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800585e:	4770      	bx	lr

08005860 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005860:	b480      	push	{r7}
 8005862:	b083      	sub	sp, #12
 8005864:	af00      	add	r7, sp, #0
 8005866:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8005868:	bf00      	nop
 800586a:	370c      	adds	r7, #12
 800586c:	46bd      	mov	sp, r7
 800586e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005872:	4770      	bx	lr

08005874 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005874:	b480      	push	{r7}
 8005876:	b083      	sub	sp, #12
 8005878:	af00      	add	r7, sp, #0
 800587a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 800587c:	bf00      	nop
 800587e:	370c      	adds	r7, #12
 8005880:	46bd      	mov	sp, r7
 8005882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005886:	4770      	bx	lr

08005888 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005888:	b480      	push	{r7}
 800588a:	b083      	sub	sp, #12
 800588c:	af00      	add	r7, sp, #0
 800588e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8005890:	bf00      	nop
 8005892:	370c      	adds	r7, #12
 8005894:	46bd      	mov	sp, r7
 8005896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800589a:	4770      	bx	lr

0800589c <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800589c:	b480      	push	{r7}
 800589e:	b083      	sub	sp, #12
 80058a0:	af00      	add	r7, sp, #0
 80058a2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80058a4:	bf00      	nop
 80058a6:	370c      	adds	r7, #12
 80058a8:	46bd      	mov	sp, r7
 80058aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ae:	4770      	bx	lr

080058b0 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80058b0:	b480      	push	{r7}
 80058b2:	b083      	sub	sp, #12
 80058b4:	af00      	add	r7, sp, #0
 80058b6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80058b8:	bf00      	nop
 80058ba:	370c      	adds	r7, #12
 80058bc:	46bd      	mov	sp, r7
 80058be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c2:	4770      	bx	lr

080058c4 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80058c4:	b580      	push	{r7, lr}
 80058c6:	b084      	sub	sp, #16
 80058c8:	af00      	add	r7, sp, #0
 80058ca:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80058d2:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80058da:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058e0:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d150      	bne.n	800598c <I2C_MasterTransmit_TXE+0xc8>
 80058ea:	7bfb      	ldrb	r3, [r7, #15]
 80058ec:	2b21      	cmp	r3, #33	; 0x21
 80058ee:	d14d      	bne.n	800598c <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80058f0:	68bb      	ldr	r3, [r7, #8]
 80058f2:	2b08      	cmp	r3, #8
 80058f4:	d01d      	beq.n	8005932 <I2C_MasterTransmit_TXE+0x6e>
 80058f6:	68bb      	ldr	r3, [r7, #8]
 80058f8:	2b20      	cmp	r3, #32
 80058fa:	d01a      	beq.n	8005932 <I2C_MasterTransmit_TXE+0x6e>
 80058fc:	68bb      	ldr	r3, [r7, #8]
 80058fe:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005902:	d016      	beq.n	8005932 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	685a      	ldr	r2, [r3, #4]
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005912:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	2211      	movs	r2, #17
 8005918:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	2200      	movs	r2, #0
 800591e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	2220      	movs	r2, #32
 8005926:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800592a:	6878      	ldr	r0, [r7, #4]
 800592c:	f7ff ff6c 	bl	8005808 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005930:	e060      	b.n	80059f4 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	685a      	ldr	r2, [r3, #4]
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005940:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	681a      	ldr	r2, [r3, #0]
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005950:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	2200      	movs	r2, #0
 8005956:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	2220      	movs	r2, #32
 800595c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005966:	b2db      	uxtb	r3, r3
 8005968:	2b40      	cmp	r3, #64	; 0x40
 800596a:	d107      	bne.n	800597c <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	2200      	movs	r2, #0
 8005970:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8005974:	6878      	ldr	r0, [r7, #4]
 8005976:	f7ff ff7d 	bl	8005874 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800597a:	e03b      	b.n	80059f4 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	2200      	movs	r2, #0
 8005980:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8005984:	6878      	ldr	r0, [r7, #4]
 8005986:	f7ff ff3f 	bl	8005808 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800598a:	e033      	b.n	80059f4 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 800598c:	7bfb      	ldrb	r3, [r7, #15]
 800598e:	2b21      	cmp	r3, #33	; 0x21
 8005990:	d005      	beq.n	800599e <I2C_MasterTransmit_TXE+0xda>
 8005992:	7bbb      	ldrb	r3, [r7, #14]
 8005994:	2b40      	cmp	r3, #64	; 0x40
 8005996:	d12d      	bne.n	80059f4 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8005998:	7bfb      	ldrb	r3, [r7, #15]
 800599a:	2b22      	cmp	r3, #34	; 0x22
 800599c:	d12a      	bne.n	80059f4 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80059a2:	b29b      	uxth	r3, r3
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d108      	bne.n	80059ba <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	685a      	ldr	r2, [r3, #4]
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80059b6:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 80059b8:	e01c      	b.n	80059f4 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80059c0:	b2db      	uxtb	r3, r3
 80059c2:	2b40      	cmp	r3, #64	; 0x40
 80059c4:	d103      	bne.n	80059ce <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 80059c6:	6878      	ldr	r0, [r7, #4]
 80059c8:	f000 f88e 	bl	8005ae8 <I2C_MemoryTransmit_TXE_BTF>
}
 80059cc:	e012      	b.n	80059f4 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059d2:	781a      	ldrb	r2, [r3, #0]
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059de:	1c5a      	adds	r2, r3, #1
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80059e8:	b29b      	uxth	r3, r3
 80059ea:	3b01      	subs	r3, #1
 80059ec:	b29a      	uxth	r2, r3
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80059f2:	e7ff      	b.n	80059f4 <I2C_MasterTransmit_TXE+0x130>
 80059f4:	bf00      	nop
 80059f6:	3710      	adds	r7, #16
 80059f8:	46bd      	mov	sp, r7
 80059fa:	bd80      	pop	{r7, pc}

080059fc <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80059fc:	b580      	push	{r7, lr}
 80059fe:	b084      	sub	sp, #16
 8005a00:	af00      	add	r7, sp, #0
 8005a02:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a08:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a10:	b2db      	uxtb	r3, r3
 8005a12:	2b21      	cmp	r3, #33	; 0x21
 8005a14:	d164      	bne.n	8005ae0 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a1a:	b29b      	uxth	r3, r3
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d012      	beq.n	8005a46 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a24:	781a      	ldrb	r2, [r3, #0]
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a30:	1c5a      	adds	r2, r3, #1
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a3a:	b29b      	uxth	r3, r3
 8005a3c:	3b01      	subs	r3, #1
 8005a3e:	b29a      	uxth	r2, r3
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8005a44:	e04c      	b.n	8005ae0 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	2b08      	cmp	r3, #8
 8005a4a:	d01d      	beq.n	8005a88 <I2C_MasterTransmit_BTF+0x8c>
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	2b20      	cmp	r3, #32
 8005a50:	d01a      	beq.n	8005a88 <I2C_MasterTransmit_BTF+0x8c>
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005a58:	d016      	beq.n	8005a88 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	685a      	ldr	r2, [r3, #4]
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005a68:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	2211      	movs	r2, #17
 8005a6e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	2200      	movs	r2, #0
 8005a74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	2220      	movs	r2, #32
 8005a7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8005a80:	6878      	ldr	r0, [r7, #4]
 8005a82:	f7ff fec1 	bl	8005808 <HAL_I2C_MasterTxCpltCallback>
}
 8005a86:	e02b      	b.n	8005ae0 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	685a      	ldr	r2, [r3, #4]
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005a96:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	681a      	ldr	r2, [r3, #0]
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005aa6:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	2200      	movs	r2, #0
 8005aac:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	2220      	movs	r2, #32
 8005ab2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005abc:	b2db      	uxtb	r3, r3
 8005abe:	2b40      	cmp	r3, #64	; 0x40
 8005ac0:	d107      	bne.n	8005ad2 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	2200      	movs	r2, #0
 8005ac6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8005aca:	6878      	ldr	r0, [r7, #4]
 8005acc:	f7ff fed2 	bl	8005874 <HAL_I2C_MemTxCpltCallback>
}
 8005ad0:	e006      	b.n	8005ae0 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	2200      	movs	r2, #0
 8005ad6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8005ada:	6878      	ldr	r0, [r7, #4]
 8005adc:	f7ff fe94 	bl	8005808 <HAL_I2C_MasterTxCpltCallback>
}
 8005ae0:	bf00      	nop
 8005ae2:	3710      	adds	r7, #16
 8005ae4:	46bd      	mov	sp, r7
 8005ae6:	bd80      	pop	{r7, pc}

08005ae8 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8005ae8:	b580      	push	{r7, lr}
 8005aea:	b084      	sub	sp, #16
 8005aec:	af00      	add	r7, sp, #0
 8005aee:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005af6:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d11d      	bne.n	8005b3c <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005b04:	2b01      	cmp	r3, #1
 8005b06:	d10b      	bne.n	8005b20 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005b0c:	b2da      	uxtb	r2, r3
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b18:	1c9a      	adds	r2, r3, #2
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8005b1e:	e073      	b.n	8005c08 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005b24:	b29b      	uxth	r3, r3
 8005b26:	121b      	asrs	r3, r3, #8
 8005b28:	b2da      	uxtb	r2, r3
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b34:	1c5a      	adds	r2, r3, #1
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	651a      	str	r2, [r3, #80]	; 0x50
}
 8005b3a:	e065      	b.n	8005c08 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b40:	2b01      	cmp	r3, #1
 8005b42:	d10b      	bne.n	8005b5c <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005b48:	b2da      	uxtb	r2, r3
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b54:	1c5a      	adds	r2, r3, #1
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	651a      	str	r2, [r3, #80]	; 0x50
}
 8005b5a:	e055      	b.n	8005c08 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b60:	2b02      	cmp	r3, #2
 8005b62:	d151      	bne.n	8005c08 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8005b64:	7bfb      	ldrb	r3, [r7, #15]
 8005b66:	2b22      	cmp	r3, #34	; 0x22
 8005b68:	d10d      	bne.n	8005b86 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	681a      	ldr	r2, [r3, #0]
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005b78:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b7e:	1c5a      	adds	r2, r3, #1
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	651a      	str	r2, [r3, #80]	; 0x50
}
 8005b84:	e040      	b.n	8005c08 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b8a:	b29b      	uxth	r3, r3
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d015      	beq.n	8005bbc <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8005b90:	7bfb      	ldrb	r3, [r7, #15]
 8005b92:	2b21      	cmp	r3, #33	; 0x21
 8005b94:	d112      	bne.n	8005bbc <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b9a:	781a      	ldrb	r2, [r3, #0]
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ba6:	1c5a      	adds	r2, r3, #1
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005bb0:	b29b      	uxth	r3, r3
 8005bb2:	3b01      	subs	r3, #1
 8005bb4:	b29a      	uxth	r2, r3
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8005bba:	e025      	b.n	8005c08 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005bc0:	b29b      	uxth	r3, r3
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d120      	bne.n	8005c08 <I2C_MemoryTransmit_TXE_BTF+0x120>
 8005bc6:	7bfb      	ldrb	r3, [r7, #15]
 8005bc8:	2b21      	cmp	r3, #33	; 0x21
 8005bca:	d11d      	bne.n	8005c08 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	685a      	ldr	r2, [r3, #4]
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005bda:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	681a      	ldr	r2, [r3, #0]
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005bea:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	2200      	movs	r2, #0
 8005bf0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	2220      	movs	r2, #32
 8005bf6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	2200      	movs	r2, #0
 8005bfe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8005c02:	6878      	ldr	r0, [r7, #4]
 8005c04:	f7ff fe36 	bl	8005874 <HAL_I2C_MemTxCpltCallback>
}
 8005c08:	bf00      	nop
 8005c0a:	3710      	adds	r7, #16
 8005c0c:	46bd      	mov	sp, r7
 8005c0e:	bd80      	pop	{r7, pc}

08005c10 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8005c10:	b580      	push	{r7, lr}
 8005c12:	b084      	sub	sp, #16
 8005c14:	af00      	add	r7, sp, #0
 8005c16:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c1e:	b2db      	uxtb	r3, r3
 8005c20:	2b22      	cmp	r3, #34	; 0x22
 8005c22:	f040 80a2 	bne.w	8005d6a <I2C_MasterReceive_RXNE+0x15a>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c2a:	b29b      	uxth	r3, r3
 8005c2c:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	2b03      	cmp	r3, #3
 8005c32:	d921      	bls.n	8005c78 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	691a      	ldr	r2, [r3, #16]
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c3e:	b2d2      	uxtb	r2, r2
 8005c40:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c46:	1c5a      	adds	r2, r3, #1
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c50:	b29b      	uxth	r3, r3
 8005c52:	3b01      	subs	r3, #1
 8005c54:	b29a      	uxth	r2, r3
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c5e:	b29b      	uxth	r3, r3
 8005c60:	2b03      	cmp	r3, #3
 8005c62:	f040 8082 	bne.w	8005d6a <I2C_MasterReceive_RXNE+0x15a>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	685a      	ldr	r2, [r3, #4]
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005c74:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 8005c76:	e078      	b.n	8005d6a <I2C_MasterReceive_RXNE+0x15a>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c7c:	2b02      	cmp	r3, #2
 8005c7e:	d074      	beq.n	8005d6a <I2C_MasterReceive_RXNE+0x15a>
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	2b01      	cmp	r3, #1
 8005c84:	d002      	beq.n	8005c8c <I2C_MasterReceive_RXNE+0x7c>
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d16e      	bne.n	8005d6a <I2C_MasterReceive_RXNE+0x15a>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8005c8c:	6878      	ldr	r0, [r7, #4]
 8005c8e:	f001 fc87 	bl	80075a0 <I2C_WaitOnSTOPRequestThroughIT>
 8005c92:	4603      	mov	r3, r0
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d142      	bne.n	8005d1e <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	681a      	ldr	r2, [r3, #0]
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005ca6:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	685a      	ldr	r2, [r3, #4]
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005cb6:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	691a      	ldr	r2, [r3, #16]
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cc2:	b2d2      	uxtb	r2, r2
 8005cc4:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cca:	1c5a      	adds	r2, r3, #1
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005cd4:	b29b      	uxth	r3, r3
 8005cd6:	3b01      	subs	r3, #1
 8005cd8:	b29a      	uxth	r2, r3
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	2220      	movs	r2, #32
 8005ce2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005cec:	b2db      	uxtb	r3, r3
 8005cee:	2b40      	cmp	r3, #64	; 0x40
 8005cf0:	d10a      	bne.n	8005d08 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	2200      	movs	r2, #0
 8005cf6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	2200      	movs	r2, #0
 8005cfe:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8005d00:	6878      	ldr	r0, [r7, #4]
 8005d02:	f7ff fdc1 	bl	8005888 <HAL_I2C_MemRxCpltCallback>
}
 8005d06:	e030      	b.n	8005d6a <I2C_MasterReceive_RXNE+0x15a>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	2200      	movs	r2, #0
 8005d0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	2212      	movs	r2, #18
 8005d14:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8005d16:	6878      	ldr	r0, [r7, #4]
 8005d18:	f7fc f886 	bl	8001e28 <HAL_I2C_MasterRxCpltCallback>
}
 8005d1c:	e025      	b.n	8005d6a <I2C_MasterReceive_RXNE+0x15a>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	685a      	ldr	r2, [r3, #4]
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005d2c:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	691a      	ldr	r2, [r3, #16]
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d38:	b2d2      	uxtb	r2, r2
 8005d3a:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d40:	1c5a      	adds	r2, r3, #1
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d4a:	b29b      	uxth	r3, r3
 8005d4c:	3b01      	subs	r3, #1
 8005d4e:	b29a      	uxth	r2, r3
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	2220      	movs	r2, #32
 8005d58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	2200      	movs	r2, #0
 8005d60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8005d64:	6878      	ldr	r0, [r7, #4]
 8005d66:	f7ff fd99 	bl	800589c <HAL_I2C_ErrorCallback>
}
 8005d6a:	bf00      	nop
 8005d6c:	3710      	adds	r7, #16
 8005d6e:	46bd      	mov	sp, r7
 8005d70:	bd80      	pop	{r7, pc}

08005d72 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8005d72:	b580      	push	{r7, lr}
 8005d74:	b084      	sub	sp, #16
 8005d76:	af00      	add	r7, sp, #0
 8005d78:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d7e:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d84:	b29b      	uxth	r3, r3
 8005d86:	2b04      	cmp	r3, #4
 8005d88:	d11b      	bne.n	8005dc2 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	685a      	ldr	r2, [r3, #4]
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005d98:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	691a      	ldr	r2, [r3, #16]
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005da4:	b2d2      	uxtb	r2, r2
 8005da6:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dac:	1c5a      	adds	r2, r3, #1
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005db6:	b29b      	uxth	r3, r3
 8005db8:	3b01      	subs	r3, #1
 8005dba:	b29a      	uxth	r2, r3
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8005dc0:	e0bd      	b.n	8005f3e <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005dc6:	b29b      	uxth	r3, r3
 8005dc8:	2b03      	cmp	r3, #3
 8005dca:	d129      	bne.n	8005e20 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	685a      	ldr	r2, [r3, #4]
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005dda:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	2b04      	cmp	r3, #4
 8005de0:	d00a      	beq.n	8005df8 <I2C_MasterReceive_BTF+0x86>
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	2b02      	cmp	r3, #2
 8005de6:	d007      	beq.n	8005df8 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	681a      	ldr	r2, [r3, #0]
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005df6:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	691a      	ldr	r2, [r3, #16]
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e02:	b2d2      	uxtb	r2, r2
 8005e04:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e0a:	1c5a      	adds	r2, r3, #1
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e14:	b29b      	uxth	r3, r3
 8005e16:	3b01      	subs	r3, #1
 8005e18:	b29a      	uxth	r2, r3
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8005e1e:	e08e      	b.n	8005f3e <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e24:	b29b      	uxth	r3, r3
 8005e26:	2b02      	cmp	r3, #2
 8005e28:	d176      	bne.n	8005f18 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	2b01      	cmp	r3, #1
 8005e2e:	d002      	beq.n	8005e36 <I2C_MasterReceive_BTF+0xc4>
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	2b10      	cmp	r3, #16
 8005e34:	d108      	bne.n	8005e48 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	681a      	ldr	r2, [r3, #0]
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005e44:	601a      	str	r2, [r3, #0]
 8005e46:	e019      	b.n	8005e7c <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	2b04      	cmp	r3, #4
 8005e4c:	d002      	beq.n	8005e54 <I2C_MasterReceive_BTF+0xe2>
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	2b02      	cmp	r3, #2
 8005e52:	d108      	bne.n	8005e66 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	681a      	ldr	r2, [r3, #0]
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005e62:	601a      	str	r2, [r3, #0]
 8005e64:	e00a      	b.n	8005e7c <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	2b10      	cmp	r3, #16
 8005e6a:	d007      	beq.n	8005e7c <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	681a      	ldr	r2, [r3, #0]
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005e7a:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	691a      	ldr	r2, [r3, #16]
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e86:	b2d2      	uxtb	r2, r2
 8005e88:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e8e:	1c5a      	adds	r2, r3, #1
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e98:	b29b      	uxth	r3, r3
 8005e9a:	3b01      	subs	r3, #1
 8005e9c:	b29a      	uxth	r2, r3
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	691a      	ldr	r2, [r3, #16]
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005eac:	b2d2      	uxtb	r2, r2
 8005eae:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005eb4:	1c5a      	adds	r2, r3, #1
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ebe:	b29b      	uxth	r3, r3
 8005ec0:	3b01      	subs	r3, #1
 8005ec2:	b29a      	uxth	r2, r3
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	685a      	ldr	r2, [r3, #4]
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8005ed6:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	2220      	movs	r2, #32
 8005edc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005ee6:	b2db      	uxtb	r3, r3
 8005ee8:	2b40      	cmp	r3, #64	; 0x40
 8005eea:	d10a      	bne.n	8005f02 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	2200      	movs	r2, #0
 8005ef0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	2200      	movs	r2, #0
 8005ef8:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8005efa:	6878      	ldr	r0, [r7, #4]
 8005efc:	f7ff fcc4 	bl	8005888 <HAL_I2C_MemRxCpltCallback>
}
 8005f00:	e01d      	b.n	8005f3e <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	2200      	movs	r2, #0
 8005f06:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	2212      	movs	r2, #18
 8005f0e:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8005f10:	6878      	ldr	r0, [r7, #4]
 8005f12:	f7fb ff89 	bl	8001e28 <HAL_I2C_MasterRxCpltCallback>
}
 8005f16:	e012      	b.n	8005f3e <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	691a      	ldr	r2, [r3, #16]
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f22:	b2d2      	uxtb	r2, r2
 8005f24:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f2a:	1c5a      	adds	r2, r3, #1
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f34:	b29b      	uxth	r3, r3
 8005f36:	3b01      	subs	r3, #1
 8005f38:	b29a      	uxth	r2, r3
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8005f3e:	bf00      	nop
 8005f40:	3710      	adds	r7, #16
 8005f42:	46bd      	mov	sp, r7
 8005f44:	bd80      	pop	{r7, pc}

08005f46 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8005f46:	b480      	push	{r7}
 8005f48:	b083      	sub	sp, #12
 8005f4a:	af00      	add	r7, sp, #0
 8005f4c:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005f54:	b2db      	uxtb	r3, r3
 8005f56:	2b40      	cmp	r3, #64	; 0x40
 8005f58:	d117      	bne.n	8005f8a <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d109      	bne.n	8005f76 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f66:	b2db      	uxtb	r3, r3
 8005f68:	461a      	mov	r2, r3
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005f72:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8005f74:	e067      	b.n	8006046 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f7a:	b2db      	uxtb	r3, r3
 8005f7c:	f043 0301 	orr.w	r3, r3, #1
 8005f80:	b2da      	uxtb	r2, r3
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	611a      	str	r2, [r3, #16]
}
 8005f88:	e05d      	b.n	8006046 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	691b      	ldr	r3, [r3, #16]
 8005f8e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005f92:	d133      	bne.n	8005ffc <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f9a:	b2db      	uxtb	r3, r3
 8005f9c:	2b21      	cmp	r3, #33	; 0x21
 8005f9e:	d109      	bne.n	8005fb4 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005fa4:	b2db      	uxtb	r3, r3
 8005fa6:	461a      	mov	r2, r3
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005fb0:	611a      	str	r2, [r3, #16]
 8005fb2:	e008      	b.n	8005fc6 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005fb8:	b2db      	uxtb	r3, r3
 8005fba:	f043 0301 	orr.w	r3, r3, #1
 8005fbe:	b2da      	uxtb	r2, r3
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d004      	beq.n	8005fd8 <I2C_Master_SB+0x92>
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005fd2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d108      	bne.n	8005fea <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d032      	beq.n	8006046 <I2C_Master_SB+0x100>
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fe4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d02d      	beq.n	8006046 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	685a      	ldr	r2, [r3, #4]
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005ff8:	605a      	str	r2, [r3, #4]
}
 8005ffa:	e024      	b.n	8006046 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006000:	2b00      	cmp	r3, #0
 8006002:	d10e      	bne.n	8006022 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006008:	b29b      	uxth	r3, r3
 800600a:	11db      	asrs	r3, r3, #7
 800600c:	b2db      	uxtb	r3, r3
 800600e:	f003 0306 	and.w	r3, r3, #6
 8006012:	b2db      	uxtb	r3, r3
 8006014:	f063 030f 	orn	r3, r3, #15
 8006018:	b2da      	uxtb	r2, r3
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	611a      	str	r2, [r3, #16]
}
 8006020:	e011      	b.n	8006046 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006026:	2b01      	cmp	r3, #1
 8006028:	d10d      	bne.n	8006046 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800602e:	b29b      	uxth	r3, r3
 8006030:	11db      	asrs	r3, r3, #7
 8006032:	b2db      	uxtb	r3, r3
 8006034:	f003 0306 	and.w	r3, r3, #6
 8006038:	b2db      	uxtb	r3, r3
 800603a:	f063 030e 	orn	r3, r3, #14
 800603e:	b2da      	uxtb	r2, r3
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	611a      	str	r2, [r3, #16]
}
 8006046:	bf00      	nop
 8006048:	370c      	adds	r7, #12
 800604a:	46bd      	mov	sp, r7
 800604c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006050:	4770      	bx	lr

08006052 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8006052:	b480      	push	{r7}
 8006054:	b083      	sub	sp, #12
 8006056:	af00      	add	r7, sp, #0
 8006058:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800605e:	b2da      	uxtb	r2, r3
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800606a:	2b00      	cmp	r3, #0
 800606c:	d004      	beq.n	8006078 <I2C_Master_ADD10+0x26>
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006072:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006074:	2b00      	cmp	r3, #0
 8006076:	d108      	bne.n	800608a <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800607c:	2b00      	cmp	r3, #0
 800607e:	d00c      	beq.n	800609a <I2C_Master_ADD10+0x48>
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006084:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006086:	2b00      	cmp	r3, #0
 8006088:	d007      	beq.n	800609a <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	685a      	ldr	r2, [r3, #4]
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006098:	605a      	str	r2, [r3, #4]
  }
}
 800609a:	bf00      	nop
 800609c:	370c      	adds	r7, #12
 800609e:	46bd      	mov	sp, r7
 80060a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a4:	4770      	bx	lr

080060a6 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 80060a6:	b480      	push	{r7}
 80060a8:	b091      	sub	sp, #68	; 0x44
 80060aa:	af00      	add	r7, sp, #0
 80060ac:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80060b4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060bc:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060c2:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80060ca:	b2db      	uxtb	r3, r3
 80060cc:	2b22      	cmp	r3, #34	; 0x22
 80060ce:	f040 8169 	bne.w	80063a4 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d10f      	bne.n	80060fa <I2C_Master_ADDR+0x54>
 80060da:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80060de:	2b40      	cmp	r3, #64	; 0x40
 80060e0:	d10b      	bne.n	80060fa <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80060e2:	2300      	movs	r3, #0
 80060e4:	633b      	str	r3, [r7, #48]	; 0x30
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	695b      	ldr	r3, [r3, #20]
 80060ec:	633b      	str	r3, [r7, #48]	; 0x30
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	699b      	ldr	r3, [r3, #24]
 80060f4:	633b      	str	r3, [r7, #48]	; 0x30
 80060f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060f8:	e160      	b.n	80063bc <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d11d      	bne.n	800613e <I2C_Master_ADDR+0x98>
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	691b      	ldr	r3, [r3, #16]
 8006106:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800610a:	d118      	bne.n	800613e <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800610c:	2300      	movs	r3, #0
 800610e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	695b      	ldr	r3, [r3, #20]
 8006116:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	699b      	ldr	r3, [r3, #24]
 800611e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006120:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	681a      	ldr	r2, [r3, #0]
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006130:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006136:	1c5a      	adds	r2, r3, #1
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	651a      	str	r2, [r3, #80]	; 0x50
 800613c:	e13e      	b.n	80063bc <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006142:	b29b      	uxth	r3, r3
 8006144:	2b00      	cmp	r3, #0
 8006146:	d113      	bne.n	8006170 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006148:	2300      	movs	r3, #0
 800614a:	62bb      	str	r3, [r7, #40]	; 0x28
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	695b      	ldr	r3, [r3, #20]
 8006152:	62bb      	str	r3, [r7, #40]	; 0x28
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	699b      	ldr	r3, [r3, #24]
 800615a:	62bb      	str	r3, [r7, #40]	; 0x28
 800615c:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	681a      	ldr	r2, [r3, #0]
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800616c:	601a      	str	r2, [r3, #0]
 800616e:	e115      	b.n	800639c <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006174:	b29b      	uxth	r3, r3
 8006176:	2b01      	cmp	r3, #1
 8006178:	f040 808a 	bne.w	8006290 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 800617c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800617e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006182:	d137      	bne.n	80061f4 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	681a      	ldr	r2, [r3, #0]
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006192:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	685b      	ldr	r3, [r3, #4]
 800619a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800619e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80061a2:	d113      	bne.n	80061cc <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	681a      	ldr	r2, [r3, #0]
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80061b2:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80061b4:	2300      	movs	r3, #0
 80061b6:	627b      	str	r3, [r7, #36]	; 0x24
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	695b      	ldr	r3, [r3, #20]
 80061be:	627b      	str	r3, [r7, #36]	; 0x24
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	699b      	ldr	r3, [r3, #24]
 80061c6:	627b      	str	r3, [r7, #36]	; 0x24
 80061c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061ca:	e0e7      	b.n	800639c <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80061cc:	2300      	movs	r3, #0
 80061ce:	623b      	str	r3, [r7, #32]
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	695b      	ldr	r3, [r3, #20]
 80061d6:	623b      	str	r3, [r7, #32]
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	699b      	ldr	r3, [r3, #24]
 80061de:	623b      	str	r3, [r7, #32]
 80061e0:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	681a      	ldr	r2, [r3, #0]
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80061f0:	601a      	str	r2, [r3, #0]
 80061f2:	e0d3      	b.n	800639c <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 80061f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061f6:	2b08      	cmp	r3, #8
 80061f8:	d02e      	beq.n	8006258 <I2C_Master_ADDR+0x1b2>
 80061fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061fc:	2b20      	cmp	r3, #32
 80061fe:	d02b      	beq.n	8006258 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8006200:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006202:	2b12      	cmp	r3, #18
 8006204:	d102      	bne.n	800620c <I2C_Master_ADDR+0x166>
 8006206:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006208:	2b01      	cmp	r3, #1
 800620a:	d125      	bne.n	8006258 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800620c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800620e:	2b04      	cmp	r3, #4
 8006210:	d00e      	beq.n	8006230 <I2C_Master_ADDR+0x18a>
 8006212:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006214:	2b02      	cmp	r3, #2
 8006216:	d00b      	beq.n	8006230 <I2C_Master_ADDR+0x18a>
 8006218:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800621a:	2b10      	cmp	r3, #16
 800621c:	d008      	beq.n	8006230 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	681a      	ldr	r2, [r3, #0]
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800622c:	601a      	str	r2, [r3, #0]
 800622e:	e007      	b.n	8006240 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	681a      	ldr	r2, [r3, #0]
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800623e:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006240:	2300      	movs	r3, #0
 8006242:	61fb      	str	r3, [r7, #28]
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	695b      	ldr	r3, [r3, #20]
 800624a:	61fb      	str	r3, [r7, #28]
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	699b      	ldr	r3, [r3, #24]
 8006252:	61fb      	str	r3, [r7, #28]
 8006254:	69fb      	ldr	r3, [r7, #28]
 8006256:	e0a1      	b.n	800639c <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	681a      	ldr	r2, [r3, #0]
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006266:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006268:	2300      	movs	r3, #0
 800626a:	61bb      	str	r3, [r7, #24]
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	695b      	ldr	r3, [r3, #20]
 8006272:	61bb      	str	r3, [r7, #24]
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	699b      	ldr	r3, [r3, #24]
 800627a:	61bb      	str	r3, [r7, #24]
 800627c:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	681a      	ldr	r2, [r3, #0]
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800628c:	601a      	str	r2, [r3, #0]
 800628e:	e085      	b.n	800639c <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006294:	b29b      	uxth	r3, r3
 8006296:	2b02      	cmp	r3, #2
 8006298:	d14d      	bne.n	8006336 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800629a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800629c:	2b04      	cmp	r3, #4
 800629e:	d016      	beq.n	80062ce <I2C_Master_ADDR+0x228>
 80062a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062a2:	2b02      	cmp	r3, #2
 80062a4:	d013      	beq.n	80062ce <I2C_Master_ADDR+0x228>
 80062a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062a8:	2b10      	cmp	r3, #16
 80062aa:	d010      	beq.n	80062ce <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	681a      	ldr	r2, [r3, #0]
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80062ba:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	681a      	ldr	r2, [r3, #0]
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80062ca:	601a      	str	r2, [r3, #0]
 80062cc:	e007      	b.n	80062de <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	681a      	ldr	r2, [r3, #0]
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80062dc:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	685b      	ldr	r3, [r3, #4]
 80062e4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80062e8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80062ec:	d117      	bne.n	800631e <I2C_Master_ADDR+0x278>
 80062ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062f0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80062f4:	d00b      	beq.n	800630e <I2C_Master_ADDR+0x268>
 80062f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062f8:	2b01      	cmp	r3, #1
 80062fa:	d008      	beq.n	800630e <I2C_Master_ADDR+0x268>
 80062fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062fe:	2b08      	cmp	r3, #8
 8006300:	d005      	beq.n	800630e <I2C_Master_ADDR+0x268>
 8006302:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006304:	2b10      	cmp	r3, #16
 8006306:	d002      	beq.n	800630e <I2C_Master_ADDR+0x268>
 8006308:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800630a:	2b20      	cmp	r3, #32
 800630c:	d107      	bne.n	800631e <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	685a      	ldr	r2, [r3, #4]
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800631c:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800631e:	2300      	movs	r3, #0
 8006320:	617b      	str	r3, [r7, #20]
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	695b      	ldr	r3, [r3, #20]
 8006328:	617b      	str	r3, [r7, #20]
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	699b      	ldr	r3, [r3, #24]
 8006330:	617b      	str	r3, [r7, #20]
 8006332:	697b      	ldr	r3, [r7, #20]
 8006334:	e032      	b.n	800639c <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	681a      	ldr	r2, [r3, #0]
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006344:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	685b      	ldr	r3, [r3, #4]
 800634c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006350:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006354:	d117      	bne.n	8006386 <I2C_Master_ADDR+0x2e0>
 8006356:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006358:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800635c:	d00b      	beq.n	8006376 <I2C_Master_ADDR+0x2d0>
 800635e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006360:	2b01      	cmp	r3, #1
 8006362:	d008      	beq.n	8006376 <I2C_Master_ADDR+0x2d0>
 8006364:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006366:	2b08      	cmp	r3, #8
 8006368:	d005      	beq.n	8006376 <I2C_Master_ADDR+0x2d0>
 800636a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800636c:	2b10      	cmp	r3, #16
 800636e:	d002      	beq.n	8006376 <I2C_Master_ADDR+0x2d0>
 8006370:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006372:	2b20      	cmp	r3, #32
 8006374:	d107      	bne.n	8006386 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	685a      	ldr	r2, [r3, #4]
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006384:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006386:	2300      	movs	r3, #0
 8006388:	613b      	str	r3, [r7, #16]
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	695b      	ldr	r3, [r3, #20]
 8006390:	613b      	str	r3, [r7, #16]
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	699b      	ldr	r3, [r3, #24]
 8006398:	613b      	str	r3, [r7, #16]
 800639a:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	2200      	movs	r2, #0
 80063a0:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 80063a2:	e00b      	b.n	80063bc <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80063a4:	2300      	movs	r3, #0
 80063a6:	60fb      	str	r3, [r7, #12]
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	695b      	ldr	r3, [r3, #20]
 80063ae:	60fb      	str	r3, [r7, #12]
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	699b      	ldr	r3, [r3, #24]
 80063b6:	60fb      	str	r3, [r7, #12]
 80063b8:	68fb      	ldr	r3, [r7, #12]
}
 80063ba:	e7ff      	b.n	80063bc <I2C_Master_ADDR+0x316>
 80063bc:	bf00      	nop
 80063be:	3744      	adds	r7, #68	; 0x44
 80063c0:	46bd      	mov	sp, r7
 80063c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c6:	4770      	bx	lr

080063c8 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80063c8:	b580      	push	{r7, lr}
 80063ca:	b084      	sub	sp, #16
 80063cc:	af00      	add	r7, sp, #0
 80063ce:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80063d6:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80063dc:	b29b      	uxth	r3, r3
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d02b      	beq.n	800643a <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063e6:	781a      	ldrb	r2, [r3, #0]
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063f2:	1c5a      	adds	r2, r3, #1
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80063fc:	b29b      	uxth	r3, r3
 80063fe:	3b01      	subs	r3, #1
 8006400:	b29a      	uxth	r2, r3
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800640a:	b29b      	uxth	r3, r3
 800640c:	2b00      	cmp	r3, #0
 800640e:	d114      	bne.n	800643a <I2C_SlaveTransmit_TXE+0x72>
 8006410:	7bfb      	ldrb	r3, [r7, #15]
 8006412:	2b29      	cmp	r3, #41	; 0x29
 8006414:	d111      	bne.n	800643a <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	685a      	ldr	r2, [r3, #4]
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006424:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	2221      	movs	r2, #33	; 0x21
 800642a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	2228      	movs	r2, #40	; 0x28
 8006430:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8006434:	6878      	ldr	r0, [r7, #4]
 8006436:	f7ff f9f1 	bl	800581c <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800643a:	bf00      	nop
 800643c:	3710      	adds	r7, #16
 800643e:	46bd      	mov	sp, r7
 8006440:	bd80      	pop	{r7, pc}

08006442 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8006442:	b480      	push	{r7}
 8006444:	b083      	sub	sp, #12
 8006446:	af00      	add	r7, sp, #0
 8006448:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800644e:	b29b      	uxth	r3, r3
 8006450:	2b00      	cmp	r3, #0
 8006452:	d011      	beq.n	8006478 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006458:	781a      	ldrb	r2, [r3, #0]
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006464:	1c5a      	adds	r2, r3, #1
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800646e:	b29b      	uxth	r3, r3
 8006470:	3b01      	subs	r3, #1
 8006472:	b29a      	uxth	r2, r3
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8006478:	bf00      	nop
 800647a:	370c      	adds	r7, #12
 800647c:	46bd      	mov	sp, r7
 800647e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006482:	4770      	bx	lr

08006484 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8006484:	b580      	push	{r7, lr}
 8006486:	b084      	sub	sp, #16
 8006488:	af00      	add	r7, sp, #0
 800648a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006492:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006498:	b29b      	uxth	r3, r3
 800649a:	2b00      	cmp	r3, #0
 800649c:	d02c      	beq.n	80064f8 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	691a      	ldr	r2, [r3, #16]
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064a8:	b2d2      	uxtb	r2, r2
 80064aa:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064b0:	1c5a      	adds	r2, r3, #1
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80064ba:	b29b      	uxth	r3, r3
 80064bc:	3b01      	subs	r3, #1
 80064be:	b29a      	uxth	r2, r3
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80064c8:	b29b      	uxth	r3, r3
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d114      	bne.n	80064f8 <I2C_SlaveReceive_RXNE+0x74>
 80064ce:	7bfb      	ldrb	r3, [r7, #15]
 80064d0:	2b2a      	cmp	r3, #42	; 0x2a
 80064d2:	d111      	bne.n	80064f8 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	685a      	ldr	r2, [r3, #4]
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80064e2:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	2222      	movs	r2, #34	; 0x22
 80064e8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	2228      	movs	r2, #40	; 0x28
 80064ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80064f2:	6878      	ldr	r0, [r7, #4]
 80064f4:	f7ff f99c 	bl	8005830 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80064f8:	bf00      	nop
 80064fa:	3710      	adds	r7, #16
 80064fc:	46bd      	mov	sp, r7
 80064fe:	bd80      	pop	{r7, pc}

08006500 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8006500:	b480      	push	{r7}
 8006502:	b083      	sub	sp, #12
 8006504:	af00      	add	r7, sp, #0
 8006506:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800650c:	b29b      	uxth	r3, r3
 800650e:	2b00      	cmp	r3, #0
 8006510:	d012      	beq.n	8006538 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	691a      	ldr	r2, [r3, #16]
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800651c:	b2d2      	uxtb	r2, r2
 800651e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006524:	1c5a      	adds	r2, r3, #1
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800652e:	b29b      	uxth	r3, r3
 8006530:	3b01      	subs	r3, #1
 8006532:	b29a      	uxth	r2, r3
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8006538:	bf00      	nop
 800653a:	370c      	adds	r7, #12
 800653c:	46bd      	mov	sp, r7
 800653e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006542:	4770      	bx	lr

08006544 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8006544:	b580      	push	{r7, lr}
 8006546:	b084      	sub	sp, #16
 8006548:	af00      	add	r7, sp, #0
 800654a:	6078      	str	r0, [r7, #4]
 800654c:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 800654e:	2300      	movs	r3, #0
 8006550:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006558:	b2db      	uxtb	r3, r3
 800655a:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800655e:	2b28      	cmp	r3, #40	; 0x28
 8006560:	d127      	bne.n	80065b2 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	685a      	ldr	r2, [r3, #4]
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006570:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8006572:	683b      	ldr	r3, [r7, #0]
 8006574:	089b      	lsrs	r3, r3, #2
 8006576:	f003 0301 	and.w	r3, r3, #1
 800657a:	2b00      	cmp	r3, #0
 800657c:	d101      	bne.n	8006582 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 800657e:	2301      	movs	r3, #1
 8006580:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8006582:	683b      	ldr	r3, [r7, #0]
 8006584:	09db      	lsrs	r3, r3, #7
 8006586:	f003 0301 	and.w	r3, r3, #1
 800658a:	2b00      	cmp	r3, #0
 800658c:	d103      	bne.n	8006596 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	68db      	ldr	r3, [r3, #12]
 8006592:	81bb      	strh	r3, [r7, #12]
 8006594:	e002      	b.n	800659c <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	699b      	ldr	r3, [r3, #24]
 800659a:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	2200      	movs	r2, #0
 80065a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 80065a4:	89ba      	ldrh	r2, [r7, #12]
 80065a6:	7bfb      	ldrb	r3, [r7, #15]
 80065a8:	4619      	mov	r1, r3
 80065aa:	6878      	ldr	r0, [r7, #4]
 80065ac:	f7ff f94a 	bl	8005844 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80065b0:	e00e      	b.n	80065d0 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80065b2:	2300      	movs	r3, #0
 80065b4:	60bb      	str	r3, [r7, #8]
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	695b      	ldr	r3, [r3, #20]
 80065bc:	60bb      	str	r3, [r7, #8]
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	699b      	ldr	r3, [r3, #24]
 80065c4:	60bb      	str	r3, [r7, #8]
 80065c6:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	2200      	movs	r2, #0
 80065cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 80065d0:	bf00      	nop
 80065d2:	3710      	adds	r7, #16
 80065d4:	46bd      	mov	sp, r7
 80065d6:	bd80      	pop	{r7, pc}

080065d8 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 80065d8:	b580      	push	{r7, lr}
 80065da:	b084      	sub	sp, #16
 80065dc:	af00      	add	r7, sp, #0
 80065de:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80065e6:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	685a      	ldr	r2, [r3, #4]
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80065f6:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 80065f8:	2300      	movs	r3, #0
 80065fa:	60bb      	str	r3, [r7, #8]
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	695b      	ldr	r3, [r3, #20]
 8006602:	60bb      	str	r3, [r7, #8]
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	681a      	ldr	r2, [r3, #0]
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	f042 0201 	orr.w	r2, r2, #1
 8006612:	601a      	str	r2, [r3, #0]
 8006614:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	681a      	ldr	r2, [r3, #0]
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006624:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	685b      	ldr	r3, [r3, #4]
 800662c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006630:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006634:	d172      	bne.n	800671c <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8006636:	7bfb      	ldrb	r3, [r7, #15]
 8006638:	2b22      	cmp	r3, #34	; 0x22
 800663a:	d002      	beq.n	8006642 <I2C_Slave_STOPF+0x6a>
 800663c:	7bfb      	ldrb	r3, [r7, #15]
 800663e:	2b2a      	cmp	r3, #42	; 0x2a
 8006640:	d135      	bne.n	80066ae <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	685b      	ldr	r3, [r3, #4]
 800664a:	b29a      	uxth	r2, r3
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006654:	b29b      	uxth	r3, r3
 8006656:	2b00      	cmp	r3, #0
 8006658:	d005      	beq.n	8006666 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800665e:	f043 0204 	orr.w	r2, r3, #4
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	685a      	ldr	r2, [r3, #4]
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006674:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800667a:	4618      	mov	r0, r3
 800667c:	f7fd fd52 	bl	8004124 <HAL_DMA_GetState>
 8006680:	4603      	mov	r3, r0
 8006682:	2b01      	cmp	r3, #1
 8006684:	d049      	beq.n	800671a <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800668a:	4a69      	ldr	r2, [pc, #420]	; (8006830 <I2C_Slave_STOPF+0x258>)
 800668c:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006692:	4618      	mov	r0, r3
 8006694:	f7fd fb9a 	bl	8003dcc <HAL_DMA_Abort_IT>
 8006698:	4603      	mov	r3, r0
 800669a:	2b00      	cmp	r3, #0
 800669c:	d03d      	beq.n	800671a <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80066a4:	687a      	ldr	r2, [r7, #4]
 80066a6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80066a8:	4610      	mov	r0, r2
 80066aa:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80066ac:	e035      	b.n	800671a <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	685b      	ldr	r3, [r3, #4]
 80066b6:	b29a      	uxth	r2, r3
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80066c0:	b29b      	uxth	r3, r3
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d005      	beq.n	80066d2 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066ca:	f043 0204 	orr.w	r2, r3, #4
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	685a      	ldr	r2, [r3, #4]
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80066e0:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80066e6:	4618      	mov	r0, r3
 80066e8:	f7fd fd1c 	bl	8004124 <HAL_DMA_GetState>
 80066ec:	4603      	mov	r3, r0
 80066ee:	2b01      	cmp	r3, #1
 80066f0:	d014      	beq.n	800671c <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80066f6:	4a4e      	ldr	r2, [pc, #312]	; (8006830 <I2C_Slave_STOPF+0x258>)
 80066f8:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80066fe:	4618      	mov	r0, r3
 8006700:	f7fd fb64 	bl	8003dcc <HAL_DMA_Abort_IT>
 8006704:	4603      	mov	r3, r0
 8006706:	2b00      	cmp	r3, #0
 8006708:	d008      	beq.n	800671c <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800670e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006710:	687a      	ldr	r2, [r7, #4]
 8006712:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8006714:	4610      	mov	r0, r2
 8006716:	4798      	blx	r3
 8006718:	e000      	b.n	800671c <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800671a:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006720:	b29b      	uxth	r3, r3
 8006722:	2b00      	cmp	r3, #0
 8006724:	d03e      	beq.n	80067a4 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	695b      	ldr	r3, [r3, #20]
 800672c:	f003 0304 	and.w	r3, r3, #4
 8006730:	2b04      	cmp	r3, #4
 8006732:	d112      	bne.n	800675a <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	691a      	ldr	r2, [r3, #16]
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800673e:	b2d2      	uxtb	r2, r2
 8006740:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006746:	1c5a      	adds	r2, r3, #1
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006750:	b29b      	uxth	r3, r3
 8006752:	3b01      	subs	r3, #1
 8006754:	b29a      	uxth	r2, r3
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	695b      	ldr	r3, [r3, #20]
 8006760:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006764:	2b40      	cmp	r3, #64	; 0x40
 8006766:	d112      	bne.n	800678e <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	691a      	ldr	r2, [r3, #16]
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006772:	b2d2      	uxtb	r2, r2
 8006774:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800677a:	1c5a      	adds	r2, r3, #1
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006784:	b29b      	uxth	r3, r3
 8006786:	3b01      	subs	r3, #1
 8006788:	b29a      	uxth	r2, r3
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006792:	b29b      	uxth	r3, r3
 8006794:	2b00      	cmp	r3, #0
 8006796:	d005      	beq.n	80067a4 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800679c:	f043 0204 	orr.w	r2, r3, #4
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d003      	beq.n	80067b4 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 80067ac:	6878      	ldr	r0, [r7, #4]
 80067ae:	f000 f8b3 	bl	8006918 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 80067b2:	e039      	b.n	8006828 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80067b4:	7bfb      	ldrb	r3, [r7, #15]
 80067b6:	2b2a      	cmp	r3, #42	; 0x2a
 80067b8:	d109      	bne.n	80067ce <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	2200      	movs	r2, #0
 80067be:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	2228      	movs	r2, #40	; 0x28
 80067c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80067c8:	6878      	ldr	r0, [r7, #4]
 80067ca:	f7ff f831 	bl	8005830 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80067d4:	b2db      	uxtb	r3, r3
 80067d6:	2b28      	cmp	r3, #40	; 0x28
 80067d8:	d111      	bne.n	80067fe <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	4a15      	ldr	r2, [pc, #84]	; (8006834 <I2C_Slave_STOPF+0x25c>)
 80067de:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	2200      	movs	r2, #0
 80067e4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	2220      	movs	r2, #32
 80067ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	2200      	movs	r2, #0
 80067f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 80067f6:	6878      	ldr	r0, [r7, #4]
 80067f8:	f7ff f832 	bl	8005860 <HAL_I2C_ListenCpltCallback>
}
 80067fc:	e014      	b.n	8006828 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006802:	2b22      	cmp	r3, #34	; 0x22
 8006804:	d002      	beq.n	800680c <I2C_Slave_STOPF+0x234>
 8006806:	7bfb      	ldrb	r3, [r7, #15]
 8006808:	2b22      	cmp	r3, #34	; 0x22
 800680a:	d10d      	bne.n	8006828 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	2200      	movs	r2, #0
 8006810:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	2220      	movs	r2, #32
 8006816:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	2200      	movs	r2, #0
 800681e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006822:	6878      	ldr	r0, [r7, #4]
 8006824:	f7ff f804 	bl	8005830 <HAL_I2C_SlaveRxCpltCallback>
}
 8006828:	bf00      	nop
 800682a:	3710      	adds	r7, #16
 800682c:	46bd      	mov	sp, r7
 800682e:	bd80      	pop	{r7, pc}
 8006830:	080071a1 	.word	0x080071a1
 8006834:	ffff0000 	.word	0xffff0000

08006838 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8006838:	b580      	push	{r7, lr}
 800683a:	b084      	sub	sp, #16
 800683c:	af00      	add	r7, sp, #0
 800683e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006846:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800684c:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 800684e:	68bb      	ldr	r3, [r7, #8]
 8006850:	2b08      	cmp	r3, #8
 8006852:	d002      	beq.n	800685a <I2C_Slave_AF+0x22>
 8006854:	68bb      	ldr	r3, [r7, #8]
 8006856:	2b20      	cmp	r3, #32
 8006858:	d129      	bne.n	80068ae <I2C_Slave_AF+0x76>
 800685a:	7bfb      	ldrb	r3, [r7, #15]
 800685c:	2b28      	cmp	r3, #40	; 0x28
 800685e:	d126      	bne.n	80068ae <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	4a2c      	ldr	r2, [pc, #176]	; (8006914 <I2C_Slave_AF+0xdc>)
 8006864:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	685a      	ldr	r2, [r3, #4]
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006874:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800687e:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	681a      	ldr	r2, [r3, #0]
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800688e:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	2200      	movs	r2, #0
 8006894:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	2220      	movs	r2, #32
 800689a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	2200      	movs	r2, #0
 80068a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80068a6:	6878      	ldr	r0, [r7, #4]
 80068a8:	f7fe ffda 	bl	8005860 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 80068ac:	e02e      	b.n	800690c <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80068ae:	7bfb      	ldrb	r3, [r7, #15]
 80068b0:	2b21      	cmp	r3, #33	; 0x21
 80068b2:	d126      	bne.n	8006902 <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	4a17      	ldr	r2, [pc, #92]	; (8006914 <I2C_Slave_AF+0xdc>)
 80068b8:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	2221      	movs	r2, #33	; 0x21
 80068be:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	2220      	movs	r2, #32
 80068c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	2200      	movs	r2, #0
 80068cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	685a      	ldr	r2, [r3, #4]
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80068de:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80068e8:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	681a      	ldr	r2, [r3, #0]
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80068f8:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80068fa:	6878      	ldr	r0, [r7, #4]
 80068fc:	f7fe ff8e 	bl	800581c <HAL_I2C_SlaveTxCpltCallback>
}
 8006900:	e004      	b.n	800690c <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800690a:	615a      	str	r2, [r3, #20]
}
 800690c:	bf00      	nop
 800690e:	3710      	adds	r7, #16
 8006910:	46bd      	mov	sp, r7
 8006912:	bd80      	pop	{r7, pc}
 8006914:	ffff0000 	.word	0xffff0000

08006918 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8006918:	b580      	push	{r7, lr}
 800691a:	b084      	sub	sp, #16
 800691c:	af00      	add	r7, sp, #0
 800691e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006926:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800692e:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8006930:	7bbb      	ldrb	r3, [r7, #14]
 8006932:	2b10      	cmp	r3, #16
 8006934:	d002      	beq.n	800693c <I2C_ITError+0x24>
 8006936:	7bbb      	ldrb	r3, [r7, #14]
 8006938:	2b40      	cmp	r3, #64	; 0x40
 800693a:	d10a      	bne.n	8006952 <I2C_ITError+0x3a>
 800693c:	7bfb      	ldrb	r3, [r7, #15]
 800693e:	2b22      	cmp	r3, #34	; 0x22
 8006940:	d107      	bne.n	8006952 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	681a      	ldr	r2, [r3, #0]
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006950:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8006952:	7bfb      	ldrb	r3, [r7, #15]
 8006954:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8006958:	2b28      	cmp	r3, #40	; 0x28
 800695a:	d107      	bne.n	800696c <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	2200      	movs	r2, #0
 8006960:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	2228      	movs	r2, #40	; 0x28
 8006966:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800696a:	e015      	b.n	8006998 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	685b      	ldr	r3, [r3, #4]
 8006972:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006976:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800697a:	d00a      	beq.n	8006992 <I2C_ITError+0x7a>
 800697c:	7bfb      	ldrb	r3, [r7, #15]
 800697e:	2b60      	cmp	r3, #96	; 0x60
 8006980:	d007      	beq.n	8006992 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	2220      	movs	r2, #32
 8006986:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	2200      	movs	r2, #0
 800698e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	2200      	movs	r2, #0
 8006996:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	685b      	ldr	r3, [r3, #4]
 800699e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80069a2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80069a6:	d162      	bne.n	8006a6e <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	685a      	ldr	r2, [r3, #4]
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80069b6:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80069bc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80069c0:	b2db      	uxtb	r3, r3
 80069c2:	2b01      	cmp	r3, #1
 80069c4:	d020      	beq.n	8006a08 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80069ca:	4a6a      	ldr	r2, [pc, #424]	; (8006b74 <I2C_ITError+0x25c>)
 80069cc:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80069d2:	4618      	mov	r0, r3
 80069d4:	f7fd f9fa 	bl	8003dcc <HAL_DMA_Abort_IT>
 80069d8:	4603      	mov	r3, r0
 80069da:	2b00      	cmp	r3, #0
 80069dc:	f000 8089 	beq.w	8006af2 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	681a      	ldr	r2, [r3, #0]
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	f022 0201 	bic.w	r2, r2, #1
 80069ee:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	2220      	movs	r2, #32
 80069f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80069fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80069fe:	687a      	ldr	r2, [r7, #4]
 8006a00:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8006a02:	4610      	mov	r0, r2
 8006a04:	4798      	blx	r3
 8006a06:	e074      	b.n	8006af2 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a0c:	4a59      	ldr	r2, [pc, #356]	; (8006b74 <I2C_ITError+0x25c>)
 8006a0e:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a14:	4618      	mov	r0, r3
 8006a16:	f7fd f9d9 	bl	8003dcc <HAL_DMA_Abort_IT>
 8006a1a:	4603      	mov	r3, r0
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d068      	beq.n	8006af2 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	695b      	ldr	r3, [r3, #20]
 8006a26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a2a:	2b40      	cmp	r3, #64	; 0x40
 8006a2c:	d10b      	bne.n	8006a46 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	691a      	ldr	r2, [r3, #16]
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a38:	b2d2      	uxtb	r2, r2
 8006a3a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a40:	1c5a      	adds	r2, r3, #1
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	681a      	ldr	r2, [r3, #0]
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	f022 0201 	bic.w	r2, r2, #1
 8006a54:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	2220      	movs	r2, #32
 8006a5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a62:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006a64:	687a      	ldr	r2, [r7, #4]
 8006a66:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006a68:	4610      	mov	r0, r2
 8006a6a:	4798      	blx	r3
 8006a6c:	e041      	b.n	8006af2 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006a74:	b2db      	uxtb	r3, r3
 8006a76:	2b60      	cmp	r3, #96	; 0x60
 8006a78:	d125      	bne.n	8006ac6 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	2220      	movs	r2, #32
 8006a7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	2200      	movs	r2, #0
 8006a86:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	695b      	ldr	r3, [r3, #20]
 8006a8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a92:	2b40      	cmp	r3, #64	; 0x40
 8006a94:	d10b      	bne.n	8006aae <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	691a      	ldr	r2, [r3, #16]
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006aa0:	b2d2      	uxtb	r2, r2
 8006aa2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006aa8:	1c5a      	adds	r2, r3, #1
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	681a      	ldr	r2, [r3, #0]
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	f022 0201 	bic.w	r2, r2, #1
 8006abc:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8006abe:	6878      	ldr	r0, [r7, #4]
 8006ac0:	f7fe fef6 	bl	80058b0 <HAL_I2C_AbortCpltCallback>
 8006ac4:	e015      	b.n	8006af2 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	695b      	ldr	r3, [r3, #20]
 8006acc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ad0:	2b40      	cmp	r3, #64	; 0x40
 8006ad2:	d10b      	bne.n	8006aec <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	691a      	ldr	r2, [r3, #16]
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ade:	b2d2      	uxtb	r2, r2
 8006ae0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ae6:	1c5a      	adds	r2, r3, #1
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8006aec:	6878      	ldr	r0, [r7, #4]
 8006aee:	f7fe fed5 	bl	800589c <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006af6:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8006af8:	68bb      	ldr	r3, [r7, #8]
 8006afa:	f003 0301 	and.w	r3, r3, #1
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d10e      	bne.n	8006b20 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8006b02:	68bb      	ldr	r3, [r7, #8]
 8006b04:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d109      	bne.n	8006b20 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8006b0c:	68bb      	ldr	r3, [r7, #8]
 8006b0e:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d104      	bne.n	8006b20 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8006b16:	68bb      	ldr	r3, [r7, #8]
 8006b18:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d007      	beq.n	8006b30 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	685a      	ldr	r2, [r3, #4]
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006b2e:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006b36:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b3c:	f003 0304 	and.w	r3, r3, #4
 8006b40:	2b04      	cmp	r3, #4
 8006b42:	d113      	bne.n	8006b6c <I2C_ITError+0x254>
 8006b44:	7bfb      	ldrb	r3, [r7, #15]
 8006b46:	2b28      	cmp	r3, #40	; 0x28
 8006b48:	d110      	bne.n	8006b6c <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	4a0a      	ldr	r2, [pc, #40]	; (8006b78 <I2C_ITError+0x260>)
 8006b4e:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	2200      	movs	r2, #0
 8006b54:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	2220      	movs	r2, #32
 8006b5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	2200      	movs	r2, #0
 8006b62:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8006b66:	6878      	ldr	r0, [r7, #4]
 8006b68:	f7fe fe7a 	bl	8005860 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8006b6c:	bf00      	nop
 8006b6e:	3710      	adds	r7, #16
 8006b70:	46bd      	mov	sp, r7
 8006b72:	bd80      	pop	{r7, pc}
 8006b74:	080071a1 	.word	0x080071a1
 8006b78:	ffff0000 	.word	0xffff0000

08006b7c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8006b7c:	b580      	push	{r7, lr}
 8006b7e:	b088      	sub	sp, #32
 8006b80:	af02      	add	r7, sp, #8
 8006b82:	60f8      	str	r0, [r7, #12]
 8006b84:	607a      	str	r2, [r7, #4]
 8006b86:	603b      	str	r3, [r7, #0]
 8006b88:	460b      	mov	r3, r1
 8006b8a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b90:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8006b92:	697b      	ldr	r3, [r7, #20]
 8006b94:	2b08      	cmp	r3, #8
 8006b96:	d006      	beq.n	8006ba6 <I2C_MasterRequestWrite+0x2a>
 8006b98:	697b      	ldr	r3, [r7, #20]
 8006b9a:	2b01      	cmp	r3, #1
 8006b9c:	d003      	beq.n	8006ba6 <I2C_MasterRequestWrite+0x2a>
 8006b9e:	697b      	ldr	r3, [r7, #20]
 8006ba0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006ba4:	d108      	bne.n	8006bb8 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	681a      	ldr	r2, [r3, #0]
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006bb4:	601a      	str	r2, [r3, #0]
 8006bb6:	e00b      	b.n	8006bd0 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bbc:	2b12      	cmp	r3, #18
 8006bbe:	d107      	bne.n	8006bd0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	681a      	ldr	r2, [r3, #0]
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006bce:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006bd0:	683b      	ldr	r3, [r7, #0]
 8006bd2:	9300      	str	r3, [sp, #0]
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	2200      	movs	r2, #0
 8006bd8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006bdc:	68f8      	ldr	r0, [r7, #12]
 8006bde:	f000 fb87 	bl	80072f0 <I2C_WaitOnFlagUntilTimeout>
 8006be2:	4603      	mov	r3, r0
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d00d      	beq.n	8006c04 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006bf2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006bf6:	d103      	bne.n	8006c00 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006bfe:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006c00:	2303      	movs	r3, #3
 8006c02:	e035      	b.n	8006c70 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	691b      	ldr	r3, [r3, #16]
 8006c08:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006c0c:	d108      	bne.n	8006c20 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006c0e:	897b      	ldrh	r3, [r7, #10]
 8006c10:	b2db      	uxtb	r3, r3
 8006c12:	461a      	mov	r2, r3
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006c1c:	611a      	str	r2, [r3, #16]
 8006c1e:	e01b      	b.n	8006c58 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8006c20:	897b      	ldrh	r3, [r7, #10]
 8006c22:	11db      	asrs	r3, r3, #7
 8006c24:	b2db      	uxtb	r3, r3
 8006c26:	f003 0306 	and.w	r3, r3, #6
 8006c2a:	b2db      	uxtb	r3, r3
 8006c2c:	f063 030f 	orn	r3, r3, #15
 8006c30:	b2da      	uxtb	r2, r3
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8006c38:	683b      	ldr	r3, [r7, #0]
 8006c3a:	687a      	ldr	r2, [r7, #4]
 8006c3c:	490e      	ldr	r1, [pc, #56]	; (8006c78 <I2C_MasterRequestWrite+0xfc>)
 8006c3e:	68f8      	ldr	r0, [r7, #12]
 8006c40:	f000 fbad 	bl	800739e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006c44:	4603      	mov	r3, r0
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d001      	beq.n	8006c4e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8006c4a:	2301      	movs	r3, #1
 8006c4c:	e010      	b.n	8006c70 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8006c4e:	897b      	ldrh	r3, [r7, #10]
 8006c50:	b2da      	uxtb	r2, r3
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006c58:	683b      	ldr	r3, [r7, #0]
 8006c5a:	687a      	ldr	r2, [r7, #4]
 8006c5c:	4907      	ldr	r1, [pc, #28]	; (8006c7c <I2C_MasterRequestWrite+0x100>)
 8006c5e:	68f8      	ldr	r0, [r7, #12]
 8006c60:	f000 fb9d 	bl	800739e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006c64:	4603      	mov	r3, r0
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d001      	beq.n	8006c6e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8006c6a:	2301      	movs	r3, #1
 8006c6c:	e000      	b.n	8006c70 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8006c6e:	2300      	movs	r3, #0
}
 8006c70:	4618      	mov	r0, r3
 8006c72:	3718      	adds	r7, #24
 8006c74:	46bd      	mov	sp, r7
 8006c76:	bd80      	pop	{r7, pc}
 8006c78:	00010008 	.word	0x00010008
 8006c7c:	00010002 	.word	0x00010002

08006c80 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006c80:	b580      	push	{r7, lr}
 8006c82:	b088      	sub	sp, #32
 8006c84:	af02      	add	r7, sp, #8
 8006c86:	60f8      	str	r0, [r7, #12]
 8006c88:	4608      	mov	r0, r1
 8006c8a:	4611      	mov	r1, r2
 8006c8c:	461a      	mov	r2, r3
 8006c8e:	4603      	mov	r3, r0
 8006c90:	817b      	strh	r3, [r7, #10]
 8006c92:	460b      	mov	r3, r1
 8006c94:	813b      	strh	r3, [r7, #8]
 8006c96:	4613      	mov	r3, r2
 8006c98:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	681a      	ldr	r2, [r3, #0]
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006ca8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006caa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cac:	9300      	str	r3, [sp, #0]
 8006cae:	6a3b      	ldr	r3, [r7, #32]
 8006cb0:	2200      	movs	r2, #0
 8006cb2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006cb6:	68f8      	ldr	r0, [r7, #12]
 8006cb8:	f000 fb1a 	bl	80072f0 <I2C_WaitOnFlagUntilTimeout>
 8006cbc:	4603      	mov	r3, r0
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d00d      	beq.n	8006cde <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ccc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006cd0:	d103      	bne.n	8006cda <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006cd8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006cda:	2303      	movs	r3, #3
 8006cdc:	e05f      	b.n	8006d9e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006cde:	897b      	ldrh	r3, [r7, #10]
 8006ce0:	b2db      	uxtb	r3, r3
 8006ce2:	461a      	mov	r2, r3
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006cec:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006cee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cf0:	6a3a      	ldr	r2, [r7, #32]
 8006cf2:	492d      	ldr	r1, [pc, #180]	; (8006da8 <I2C_RequestMemoryWrite+0x128>)
 8006cf4:	68f8      	ldr	r0, [r7, #12]
 8006cf6:	f000 fb52 	bl	800739e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006cfa:	4603      	mov	r3, r0
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d001      	beq.n	8006d04 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8006d00:	2301      	movs	r3, #1
 8006d02:	e04c      	b.n	8006d9e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006d04:	2300      	movs	r3, #0
 8006d06:	617b      	str	r3, [r7, #20]
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	695b      	ldr	r3, [r3, #20]
 8006d0e:	617b      	str	r3, [r7, #20]
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	699b      	ldr	r3, [r3, #24]
 8006d16:	617b      	str	r3, [r7, #20]
 8006d18:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006d1a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006d1c:	6a39      	ldr	r1, [r7, #32]
 8006d1e:	68f8      	ldr	r0, [r7, #12]
 8006d20:	f000 fbbc 	bl	800749c <I2C_WaitOnTXEFlagUntilTimeout>
 8006d24:	4603      	mov	r3, r0
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d00d      	beq.n	8006d46 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d2e:	2b04      	cmp	r3, #4
 8006d30:	d107      	bne.n	8006d42 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	681a      	ldr	r2, [r3, #0]
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006d40:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006d42:	2301      	movs	r3, #1
 8006d44:	e02b      	b.n	8006d9e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006d46:	88fb      	ldrh	r3, [r7, #6]
 8006d48:	2b01      	cmp	r3, #1
 8006d4a:	d105      	bne.n	8006d58 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006d4c:	893b      	ldrh	r3, [r7, #8]
 8006d4e:	b2da      	uxtb	r2, r3
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	611a      	str	r2, [r3, #16]
 8006d56:	e021      	b.n	8006d9c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006d58:	893b      	ldrh	r3, [r7, #8]
 8006d5a:	0a1b      	lsrs	r3, r3, #8
 8006d5c:	b29b      	uxth	r3, r3
 8006d5e:	b2da      	uxtb	r2, r3
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006d66:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006d68:	6a39      	ldr	r1, [r7, #32]
 8006d6a:	68f8      	ldr	r0, [r7, #12]
 8006d6c:	f000 fb96 	bl	800749c <I2C_WaitOnTXEFlagUntilTimeout>
 8006d70:	4603      	mov	r3, r0
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d00d      	beq.n	8006d92 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d7a:	2b04      	cmp	r3, #4
 8006d7c:	d107      	bne.n	8006d8e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	681a      	ldr	r2, [r3, #0]
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006d8c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006d8e:	2301      	movs	r3, #1
 8006d90:	e005      	b.n	8006d9e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006d92:	893b      	ldrh	r3, [r7, #8]
 8006d94:	b2da      	uxtb	r2, r3
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8006d9c:	2300      	movs	r3, #0
}
 8006d9e:	4618      	mov	r0, r3
 8006da0:	3718      	adds	r7, #24
 8006da2:	46bd      	mov	sp, r7
 8006da4:	bd80      	pop	{r7, pc}
 8006da6:	bf00      	nop
 8006da8:	00010002 	.word	0x00010002

08006dac <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006dac:	b580      	push	{r7, lr}
 8006dae:	b088      	sub	sp, #32
 8006db0:	af02      	add	r7, sp, #8
 8006db2:	60f8      	str	r0, [r7, #12]
 8006db4:	4608      	mov	r0, r1
 8006db6:	4611      	mov	r1, r2
 8006db8:	461a      	mov	r2, r3
 8006dba:	4603      	mov	r3, r0
 8006dbc:	817b      	strh	r3, [r7, #10]
 8006dbe:	460b      	mov	r3, r1
 8006dc0:	813b      	strh	r3, [r7, #8]
 8006dc2:	4613      	mov	r3, r2
 8006dc4:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	681a      	ldr	r2, [r3, #0]
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006dd4:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	681a      	ldr	r2, [r3, #0]
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006de4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006de6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006de8:	9300      	str	r3, [sp, #0]
 8006dea:	6a3b      	ldr	r3, [r7, #32]
 8006dec:	2200      	movs	r2, #0
 8006dee:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006df2:	68f8      	ldr	r0, [r7, #12]
 8006df4:	f000 fa7c 	bl	80072f0 <I2C_WaitOnFlagUntilTimeout>
 8006df8:	4603      	mov	r3, r0
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d00d      	beq.n	8006e1a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e08:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006e0c:	d103      	bne.n	8006e16 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006e14:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006e16:	2303      	movs	r3, #3
 8006e18:	e0aa      	b.n	8006f70 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006e1a:	897b      	ldrh	r3, [r7, #10]
 8006e1c:	b2db      	uxtb	r3, r3
 8006e1e:	461a      	mov	r2, r3
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006e28:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006e2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e2c:	6a3a      	ldr	r2, [r7, #32]
 8006e2e:	4952      	ldr	r1, [pc, #328]	; (8006f78 <I2C_RequestMemoryRead+0x1cc>)
 8006e30:	68f8      	ldr	r0, [r7, #12]
 8006e32:	f000 fab4 	bl	800739e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006e36:	4603      	mov	r3, r0
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d001      	beq.n	8006e40 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8006e3c:	2301      	movs	r3, #1
 8006e3e:	e097      	b.n	8006f70 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006e40:	2300      	movs	r3, #0
 8006e42:	617b      	str	r3, [r7, #20]
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	695b      	ldr	r3, [r3, #20]
 8006e4a:	617b      	str	r3, [r7, #20]
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	699b      	ldr	r3, [r3, #24]
 8006e52:	617b      	str	r3, [r7, #20]
 8006e54:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006e56:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006e58:	6a39      	ldr	r1, [r7, #32]
 8006e5a:	68f8      	ldr	r0, [r7, #12]
 8006e5c:	f000 fb1e 	bl	800749c <I2C_WaitOnTXEFlagUntilTimeout>
 8006e60:	4603      	mov	r3, r0
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d00d      	beq.n	8006e82 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e6a:	2b04      	cmp	r3, #4
 8006e6c:	d107      	bne.n	8006e7e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	681a      	ldr	r2, [r3, #0]
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006e7c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006e7e:	2301      	movs	r3, #1
 8006e80:	e076      	b.n	8006f70 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006e82:	88fb      	ldrh	r3, [r7, #6]
 8006e84:	2b01      	cmp	r3, #1
 8006e86:	d105      	bne.n	8006e94 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006e88:	893b      	ldrh	r3, [r7, #8]
 8006e8a:	b2da      	uxtb	r2, r3
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	611a      	str	r2, [r3, #16]
 8006e92:	e021      	b.n	8006ed8 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006e94:	893b      	ldrh	r3, [r7, #8]
 8006e96:	0a1b      	lsrs	r3, r3, #8
 8006e98:	b29b      	uxth	r3, r3
 8006e9a:	b2da      	uxtb	r2, r3
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006ea2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006ea4:	6a39      	ldr	r1, [r7, #32]
 8006ea6:	68f8      	ldr	r0, [r7, #12]
 8006ea8:	f000 faf8 	bl	800749c <I2C_WaitOnTXEFlagUntilTimeout>
 8006eac:	4603      	mov	r3, r0
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d00d      	beq.n	8006ece <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006eb6:	2b04      	cmp	r3, #4
 8006eb8:	d107      	bne.n	8006eca <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	681a      	ldr	r2, [r3, #0]
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006ec8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006eca:	2301      	movs	r3, #1
 8006ecc:	e050      	b.n	8006f70 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006ece:	893b      	ldrh	r3, [r7, #8]
 8006ed0:	b2da      	uxtb	r2, r3
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006ed8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006eda:	6a39      	ldr	r1, [r7, #32]
 8006edc:	68f8      	ldr	r0, [r7, #12]
 8006ede:	f000 fadd 	bl	800749c <I2C_WaitOnTXEFlagUntilTimeout>
 8006ee2:	4603      	mov	r3, r0
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d00d      	beq.n	8006f04 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006eec:	2b04      	cmp	r3, #4
 8006eee:	d107      	bne.n	8006f00 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	681a      	ldr	r2, [r3, #0]
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006efe:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006f00:	2301      	movs	r3, #1
 8006f02:	e035      	b.n	8006f70 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	681a      	ldr	r2, [r3, #0]
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006f12:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006f14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f16:	9300      	str	r3, [sp, #0]
 8006f18:	6a3b      	ldr	r3, [r7, #32]
 8006f1a:	2200      	movs	r2, #0
 8006f1c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006f20:	68f8      	ldr	r0, [r7, #12]
 8006f22:	f000 f9e5 	bl	80072f0 <I2C_WaitOnFlagUntilTimeout>
 8006f26:	4603      	mov	r3, r0
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d00d      	beq.n	8006f48 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f36:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006f3a:	d103      	bne.n	8006f44 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006f42:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006f44:	2303      	movs	r3, #3
 8006f46:	e013      	b.n	8006f70 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8006f48:	897b      	ldrh	r3, [r7, #10]
 8006f4a:	b2db      	uxtb	r3, r3
 8006f4c:	f043 0301 	orr.w	r3, r3, #1
 8006f50:	b2da      	uxtb	r2, r3
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006f58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f5a:	6a3a      	ldr	r2, [r7, #32]
 8006f5c:	4906      	ldr	r1, [pc, #24]	; (8006f78 <I2C_RequestMemoryRead+0x1cc>)
 8006f5e:	68f8      	ldr	r0, [r7, #12]
 8006f60:	f000 fa1d 	bl	800739e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006f64:	4603      	mov	r3, r0
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d001      	beq.n	8006f6e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8006f6a:	2301      	movs	r3, #1
 8006f6c:	e000      	b.n	8006f70 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8006f6e:	2300      	movs	r3, #0
}
 8006f70:	4618      	mov	r0, r3
 8006f72:	3718      	adds	r7, #24
 8006f74:	46bd      	mov	sp, r7
 8006f76:	bd80      	pop	{r7, pc}
 8006f78:	00010002 	.word	0x00010002

08006f7c <I2C_DMAXferCplt>:
  * @brief  DMA I2C process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 8006f7c:	b580      	push	{r7, lr}
 8006f7e:	b086      	sub	sp, #24
 8006f80:	af00      	add	r7, sp, #0
 8006f82:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f88:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006f8a:	697b      	ldr	r3, [r7, #20]
 8006f8c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006f90:	74fb      	strb	r3, [r7, #19]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8006f92:	697b      	ldr	r3, [r7, #20]
 8006f94:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006f98:	74bb      	strb	r3, [r7, #18]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8006f9a:	697b      	ldr	r3, [r7, #20]
 8006f9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f9e:	60fb      	str	r3, [r7, #12]

  /* Disable EVT and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8006fa0:	697b      	ldr	r3, [r7, #20]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	685a      	ldr	r2, [r3, #4]
 8006fa6:	697b      	ldr	r3, [r7, #20]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8006fae:	605a      	str	r2, [r3, #4]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8006fb0:	697b      	ldr	r3, [r7, #20]
 8006fb2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d003      	beq.n	8006fc0 <I2C_DMAXferCplt+0x44>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8006fb8:	697b      	ldr	r3, [r7, #20]
 8006fba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006fbc:	2200      	movs	r2, #0
 8006fbe:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8006fc0:	697b      	ldr	r3, [r7, #20]
 8006fc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d003      	beq.n	8006fd0 <I2C_DMAXferCplt+0x54>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8006fc8:	697b      	ldr	r3, [r7, #20]
 8006fca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fcc:	2200      	movs	r2, #0
 8006fce:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  if ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_TX) == (uint32_t)HAL_I2C_STATE_BUSY_TX) || ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_RX) == (uint32_t)HAL_I2C_STATE_BUSY_RX) && (CurrentMode == HAL_I2C_MODE_SLAVE)))
 8006fd0:	7cfb      	ldrb	r3, [r7, #19]
 8006fd2:	f003 0321 	and.w	r3, r3, #33	; 0x21
 8006fd6:	2b21      	cmp	r3, #33	; 0x21
 8006fd8:	d007      	beq.n	8006fea <I2C_DMAXferCplt+0x6e>
 8006fda:	7cfb      	ldrb	r3, [r7, #19]
 8006fdc:	f003 0322 	and.w	r3, r3, #34	; 0x22
 8006fe0:	2b22      	cmp	r3, #34	; 0x22
 8006fe2:	d131      	bne.n	8007048 <I2C_DMAXferCplt+0xcc>
 8006fe4:	7cbb      	ldrb	r3, [r7, #18]
 8006fe6:	2b20      	cmp	r3, #32
 8006fe8:	d12e      	bne.n	8007048 <I2C_DMAXferCplt+0xcc>
  {
    /* Disable DMA Request */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8006fea:	697b      	ldr	r3, [r7, #20]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	685a      	ldr	r2, [r3, #4]
 8006ff0:	697b      	ldr	r3, [r7, #20]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006ff8:	605a      	str	r2, [r3, #4]

    hi2c->XferCount = 0U;
 8006ffa:	697b      	ldr	r3, [r7, #20]
 8006ffc:	2200      	movs	r2, #0
 8006ffe:	855a      	strh	r2, [r3, #42]	; 0x2a

    if (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8007000:	7cfb      	ldrb	r3, [r7, #19]
 8007002:	2b29      	cmp	r3, #41	; 0x29
 8007004:	d10a      	bne.n	800701c <I2C_DMAXferCplt+0xa0>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8007006:	697b      	ldr	r3, [r7, #20]
 8007008:	2221      	movs	r2, #33	; 0x21
 800700a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800700c:	697b      	ldr	r3, [r7, #20]
 800700e:	2228      	movs	r2, #40	; 0x28
 8007010:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8007014:	6978      	ldr	r0, [r7, #20]
 8007016:	f7fe fc01 	bl	800581c <HAL_I2C_SlaveTxCpltCallback>
 800701a:	e00c      	b.n	8007036 <I2C_DMAXferCplt+0xba>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800701c:	7cfb      	ldrb	r3, [r7, #19]
 800701e:	2b2a      	cmp	r3, #42	; 0x2a
 8007020:	d109      	bne.n	8007036 <I2C_DMAXferCplt+0xba>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8007022:	697b      	ldr	r3, [r7, #20]
 8007024:	2222      	movs	r2, #34	; 0x22
 8007026:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8007028:	697b      	ldr	r3, [r7, #20]
 800702a:	2228      	movs	r2, #40	; 0x28
 800702c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8007030:	6978      	ldr	r0, [r7, #20]
 8007032:	f7fe fbfd 	bl	8005830 <HAL_I2C_SlaveRxCpltCallback>
    {
      /* Do nothing */
    }

    /* Enable EVT and ERR interrupt to treat end of transfer in IRQ handler */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8007036:	697b      	ldr	r3, [r7, #20]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	685a      	ldr	r2, [r3, #4]
 800703c:	697b      	ldr	r3, [r7, #20]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8007044:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8007046:	e06a      	b.n	800711e <I2C_DMAXferCplt+0x1a2>
  else if (hi2c->Mode != HAL_I2C_MODE_NONE)
 8007048:	697b      	ldr	r3, [r7, #20]
 800704a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800704e:	b2db      	uxtb	r3, r3
 8007050:	2b00      	cmp	r3, #0
 8007052:	d064      	beq.n	800711e <I2C_DMAXferCplt+0x1a2>
    if (hi2c->XferCount == (uint16_t)1)
 8007054:	697b      	ldr	r3, [r7, #20]
 8007056:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007058:	b29b      	uxth	r3, r3
 800705a:	2b01      	cmp	r3, #1
 800705c:	d107      	bne.n	800706e <I2C_DMAXferCplt+0xf2>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800705e:	697b      	ldr	r3, [r7, #20]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	681a      	ldr	r2, [r3, #0]
 8007064:	697b      	ldr	r3, [r7, #20]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800706c:	601a      	str	r2, [r3, #0]
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800706e:	697b      	ldr	r3, [r7, #20]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	685a      	ldr	r2, [r3, #4]
 8007074:	697b      	ldr	r3, [r7, #20]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800707c:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_OTHER_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007084:	d009      	beq.n	800709a <I2C_DMAXferCplt+0x11e>
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	2b08      	cmp	r3, #8
 800708a:	d006      	beq.n	800709a <I2C_DMAXferCplt+0x11e>
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8007092:	d002      	beq.n	800709a <I2C_DMAXferCplt+0x11e>
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	2b20      	cmp	r3, #32
 8007098:	d107      	bne.n	80070aa <I2C_DMAXferCplt+0x12e>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800709a:	697b      	ldr	r3, [r7, #20]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	681a      	ldr	r2, [r3, #0]
 80070a0:	697b      	ldr	r3, [r7, #20]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80070a8:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80070aa:	697b      	ldr	r3, [r7, #20]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	685a      	ldr	r2, [r3, #4]
 80070b0:	697b      	ldr	r3, [r7, #20]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80070b8:	605a      	str	r2, [r3, #4]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80070ba:	697b      	ldr	r3, [r7, #20]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	685a      	ldr	r2, [r3, #4]
 80070c0:	697b      	ldr	r3, [r7, #20]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80070c8:	605a      	str	r2, [r3, #4]
    hi2c->XferCount = 0U;
 80070ca:	697b      	ldr	r3, [r7, #20]
 80070cc:	2200      	movs	r2, #0
 80070ce:	855a      	strh	r2, [r3, #42]	; 0x2a
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80070d0:	697b      	ldr	r3, [r7, #20]
 80070d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d003      	beq.n	80070e0 <I2C_DMAXferCplt+0x164>
      HAL_I2C_ErrorCallback(hi2c);
 80070d8:	6978      	ldr	r0, [r7, #20]
 80070da:	f7fe fbdf 	bl	800589c <HAL_I2C_ErrorCallback>
}
 80070de:	e01e      	b.n	800711e <I2C_DMAXferCplt+0x1a2>
      hi2c->State = HAL_I2C_STATE_READY;
 80070e0:	697b      	ldr	r3, [r7, #20]
 80070e2:	2220      	movs	r2, #32
 80070e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80070e8:	697b      	ldr	r3, [r7, #20]
 80070ea:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80070ee:	b2db      	uxtb	r3, r3
 80070f0:	2b40      	cmp	r3, #64	; 0x40
 80070f2:	d10a      	bne.n	800710a <I2C_DMAXferCplt+0x18e>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80070f4:	697b      	ldr	r3, [r7, #20]
 80070f6:	2200      	movs	r2, #0
 80070f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 80070fc:	697b      	ldr	r3, [r7, #20]
 80070fe:	2200      	movs	r2, #0
 8007100:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 8007102:	6978      	ldr	r0, [r7, #20]
 8007104:	f7fe fbc0 	bl	8005888 <HAL_I2C_MemRxCpltCallback>
}
 8007108:	e009      	b.n	800711e <I2C_DMAXferCplt+0x1a2>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800710a:	697b      	ldr	r3, [r7, #20]
 800710c:	2200      	movs	r2, #0
 800710e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8007112:	697b      	ldr	r3, [r7, #20]
 8007114:	2212      	movs	r2, #18
 8007116:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 8007118:	6978      	ldr	r0, [r7, #20]
 800711a:	f7fa fe85 	bl	8001e28 <HAL_I2C_MasterRxCpltCallback>
}
 800711e:	bf00      	nop
 8007120:	3718      	adds	r7, #24
 8007122:	46bd      	mov	sp, r7
 8007124:	bd80      	pop	{r7, pc}

08007126 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 8007126:	b580      	push	{r7, lr}
 8007128:	b084      	sub	sp, #16
 800712a:	af00      	add	r7, sp, #0
 800712c:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007132:	60fb      	str	r3, [r7, #12]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007138:	2b00      	cmp	r3, #0
 800713a:	d003      	beq.n	8007144 <I2C_DMAError+0x1e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007140:	2200      	movs	r2, #0
 8007142:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007148:	2b00      	cmp	r3, #0
 800714a:	d003      	beq.n	8007154 <I2C_DMAError+0x2e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007150:	2200      	movs	r2, #0
 8007152:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Ignore DMA FIFO error */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8007154:	6878      	ldr	r0, [r7, #4]
 8007156:	f7fc fff3 	bl	8004140 <HAL_DMA_GetError>
 800715a:	4603      	mov	r3, r0
 800715c:	2b02      	cmp	r3, #2
 800715e:	d01b      	beq.n	8007198 <I2C_DMAError+0x72>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	681a      	ldr	r2, [r3, #0]
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800716e:	601a      	str	r2, [r3, #0]

    hi2c->XferCount = 0U;
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	2200      	movs	r2, #0
 8007174:	855a      	strh	r2, [r3, #42]	; 0x2a

    hi2c->State = HAL_I2C_STATE_READY;
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	2220      	movs	r2, #32
 800717a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	2200      	movs	r2, #0
 8007182:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800718a:	f043 0210 	orr.w	r2, r3, #16
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	641a      	str	r2, [r3, #64]	; 0x40

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8007192:	68f8      	ldr	r0, [r7, #12]
 8007194:	f7fe fb82 	bl	800589c <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8007198:	bf00      	nop
 800719a:	3710      	adds	r7, #16
 800719c:	46bd      	mov	sp, r7
 800719e:	bd80      	pop	{r7, pc}

080071a0 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80071a0:	b580      	push	{r7, lr}
 80071a2:	b086      	sub	sp, #24
 80071a4:	af00      	add	r7, sp, #0
 80071a6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80071a8:	2300      	movs	r3, #0
 80071aa:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071b0:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80071b2:	697b      	ldr	r3, [r7, #20]
 80071b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80071b8:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80071ba:	4b4b      	ldr	r3, [pc, #300]	; (80072e8 <I2C_DMAAbort+0x148>)
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	08db      	lsrs	r3, r3, #3
 80071c0:	4a4a      	ldr	r2, [pc, #296]	; (80072ec <I2C_DMAAbort+0x14c>)
 80071c2:	fba2 2303 	umull	r2, r3, r2, r3
 80071c6:	0a1a      	lsrs	r2, r3, #8
 80071c8:	4613      	mov	r3, r2
 80071ca:	009b      	lsls	r3, r3, #2
 80071cc:	4413      	add	r3, r2
 80071ce:	00da      	lsls	r2, r3, #3
 80071d0:	1ad3      	subs	r3, r2, r3
 80071d2:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d106      	bne.n	80071e8 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80071da:	697b      	ldr	r3, [r7, #20]
 80071dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071de:	f043 0220 	orr.w	r2, r3, #32
 80071e2:	697b      	ldr	r3, [r7, #20]
 80071e4:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 80071e6:	e00a      	b.n	80071fe <I2C_DMAAbort+0x5e>
    }
    count--;
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	3b01      	subs	r3, #1
 80071ec:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80071ee:	697b      	ldr	r3, [r7, #20]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80071f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80071fc:	d0ea      	beq.n	80071d4 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80071fe:	697b      	ldr	r3, [r7, #20]
 8007200:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007202:	2b00      	cmp	r3, #0
 8007204:	d003      	beq.n	800720e <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8007206:	697b      	ldr	r3, [r7, #20]
 8007208:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800720a:	2200      	movs	r2, #0
 800720c:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 800720e:	697b      	ldr	r3, [r7, #20]
 8007210:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007212:	2b00      	cmp	r3, #0
 8007214:	d003      	beq.n	800721e <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8007216:	697b      	ldr	r3, [r7, #20]
 8007218:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800721a:	2200      	movs	r2, #0
 800721c:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800721e:	697b      	ldr	r3, [r7, #20]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	681a      	ldr	r2, [r3, #0]
 8007224:	697b      	ldr	r3, [r7, #20]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800722c:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 800722e:	697b      	ldr	r3, [r7, #20]
 8007230:	2200      	movs	r2, #0
 8007232:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8007234:	697b      	ldr	r3, [r7, #20]
 8007236:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007238:	2b00      	cmp	r3, #0
 800723a:	d003      	beq.n	8007244 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800723c:	697b      	ldr	r3, [r7, #20]
 800723e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007240:	2200      	movs	r2, #0
 8007242:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8007244:	697b      	ldr	r3, [r7, #20]
 8007246:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007248:	2b00      	cmp	r3, #0
 800724a:	d003      	beq.n	8007254 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800724c:	697b      	ldr	r3, [r7, #20]
 800724e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007250:	2200      	movs	r2, #0
 8007252:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8007254:	697b      	ldr	r3, [r7, #20]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	681a      	ldr	r2, [r3, #0]
 800725a:	697b      	ldr	r3, [r7, #20]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	f022 0201 	bic.w	r2, r2, #1
 8007262:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8007264:	697b      	ldr	r3, [r7, #20]
 8007266:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800726a:	b2db      	uxtb	r3, r3
 800726c:	2b60      	cmp	r3, #96	; 0x60
 800726e:	d10e      	bne.n	800728e <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8007270:	697b      	ldr	r3, [r7, #20]
 8007272:	2220      	movs	r2, #32
 8007274:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8007278:	697b      	ldr	r3, [r7, #20]
 800727a:	2200      	movs	r2, #0
 800727c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8007280:	697b      	ldr	r3, [r7, #20]
 8007282:	2200      	movs	r2, #0
 8007284:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8007286:	6978      	ldr	r0, [r7, #20]
 8007288:	f7fe fb12 	bl	80058b0 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800728c:	e027      	b.n	80072de <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800728e:	7cfb      	ldrb	r3, [r7, #19]
 8007290:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8007294:	2b28      	cmp	r3, #40	; 0x28
 8007296:	d117      	bne.n	80072c8 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8007298:	697b      	ldr	r3, [r7, #20]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	681a      	ldr	r2, [r3, #0]
 800729e:	697b      	ldr	r3, [r7, #20]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	f042 0201 	orr.w	r2, r2, #1
 80072a6:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80072a8:	697b      	ldr	r3, [r7, #20]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	681a      	ldr	r2, [r3, #0]
 80072ae:	697b      	ldr	r3, [r7, #20]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80072b6:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80072b8:	697b      	ldr	r3, [r7, #20]
 80072ba:	2200      	movs	r2, #0
 80072bc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80072be:	697b      	ldr	r3, [r7, #20]
 80072c0:	2228      	movs	r2, #40	; 0x28
 80072c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80072c6:	e007      	b.n	80072d8 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 80072c8:	697b      	ldr	r3, [r7, #20]
 80072ca:	2220      	movs	r2, #32
 80072cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80072d0:	697b      	ldr	r3, [r7, #20]
 80072d2:	2200      	movs	r2, #0
 80072d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 80072d8:	6978      	ldr	r0, [r7, #20]
 80072da:	f7fe fadf 	bl	800589c <HAL_I2C_ErrorCallback>
}
 80072de:	bf00      	nop
 80072e0:	3718      	adds	r7, #24
 80072e2:	46bd      	mov	sp, r7
 80072e4:	bd80      	pop	{r7, pc}
 80072e6:	bf00      	nop
 80072e8:	20000018 	.word	0x20000018
 80072ec:	14f8b589 	.word	0x14f8b589

080072f0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80072f0:	b580      	push	{r7, lr}
 80072f2:	b084      	sub	sp, #16
 80072f4:	af00      	add	r7, sp, #0
 80072f6:	60f8      	str	r0, [r7, #12]
 80072f8:	60b9      	str	r1, [r7, #8]
 80072fa:	603b      	str	r3, [r7, #0]
 80072fc:	4613      	mov	r3, r2
 80072fe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007300:	e025      	b.n	800734e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007302:	683b      	ldr	r3, [r7, #0]
 8007304:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007308:	d021      	beq.n	800734e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800730a:	f7fb fded 	bl	8002ee8 <HAL_GetTick>
 800730e:	4602      	mov	r2, r0
 8007310:	69bb      	ldr	r3, [r7, #24]
 8007312:	1ad3      	subs	r3, r2, r3
 8007314:	683a      	ldr	r2, [r7, #0]
 8007316:	429a      	cmp	r2, r3
 8007318:	d302      	bcc.n	8007320 <I2C_WaitOnFlagUntilTimeout+0x30>
 800731a:	683b      	ldr	r3, [r7, #0]
 800731c:	2b00      	cmp	r3, #0
 800731e:	d116      	bne.n	800734e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	2200      	movs	r2, #0
 8007324:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	2220      	movs	r2, #32
 800732a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	2200      	movs	r2, #0
 8007332:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800733a:	f043 0220 	orr.w	r2, r3, #32
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	2200      	movs	r2, #0
 8007346:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800734a:	2301      	movs	r3, #1
 800734c:	e023      	b.n	8007396 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800734e:	68bb      	ldr	r3, [r7, #8]
 8007350:	0c1b      	lsrs	r3, r3, #16
 8007352:	b2db      	uxtb	r3, r3
 8007354:	2b01      	cmp	r3, #1
 8007356:	d10d      	bne.n	8007374 <I2C_WaitOnFlagUntilTimeout+0x84>
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	695b      	ldr	r3, [r3, #20]
 800735e:	43da      	mvns	r2, r3
 8007360:	68bb      	ldr	r3, [r7, #8]
 8007362:	4013      	ands	r3, r2
 8007364:	b29b      	uxth	r3, r3
 8007366:	2b00      	cmp	r3, #0
 8007368:	bf0c      	ite	eq
 800736a:	2301      	moveq	r3, #1
 800736c:	2300      	movne	r3, #0
 800736e:	b2db      	uxtb	r3, r3
 8007370:	461a      	mov	r2, r3
 8007372:	e00c      	b.n	800738e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	699b      	ldr	r3, [r3, #24]
 800737a:	43da      	mvns	r2, r3
 800737c:	68bb      	ldr	r3, [r7, #8]
 800737e:	4013      	ands	r3, r2
 8007380:	b29b      	uxth	r3, r3
 8007382:	2b00      	cmp	r3, #0
 8007384:	bf0c      	ite	eq
 8007386:	2301      	moveq	r3, #1
 8007388:	2300      	movne	r3, #0
 800738a:	b2db      	uxtb	r3, r3
 800738c:	461a      	mov	r2, r3
 800738e:	79fb      	ldrb	r3, [r7, #7]
 8007390:	429a      	cmp	r2, r3
 8007392:	d0b6      	beq.n	8007302 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007394:	2300      	movs	r3, #0
}
 8007396:	4618      	mov	r0, r3
 8007398:	3710      	adds	r7, #16
 800739a:	46bd      	mov	sp, r7
 800739c:	bd80      	pop	{r7, pc}

0800739e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800739e:	b580      	push	{r7, lr}
 80073a0:	b084      	sub	sp, #16
 80073a2:	af00      	add	r7, sp, #0
 80073a4:	60f8      	str	r0, [r7, #12]
 80073a6:	60b9      	str	r1, [r7, #8]
 80073a8:	607a      	str	r2, [r7, #4]
 80073aa:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80073ac:	e051      	b.n	8007452 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	695b      	ldr	r3, [r3, #20]
 80073b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80073b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80073bc:	d123      	bne.n	8007406 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	681a      	ldr	r2, [r3, #0]
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80073cc:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80073d6:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	2200      	movs	r2, #0
 80073dc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	2220      	movs	r2, #32
 80073e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	2200      	movs	r2, #0
 80073ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073f2:	f043 0204 	orr.w	r2, r3, #4
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	2200      	movs	r2, #0
 80073fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007402:	2301      	movs	r3, #1
 8007404:	e046      	b.n	8007494 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	f1b3 3fff 	cmp.w	r3, #4294967295
 800740c:	d021      	beq.n	8007452 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800740e:	f7fb fd6b 	bl	8002ee8 <HAL_GetTick>
 8007412:	4602      	mov	r2, r0
 8007414:	683b      	ldr	r3, [r7, #0]
 8007416:	1ad3      	subs	r3, r2, r3
 8007418:	687a      	ldr	r2, [r7, #4]
 800741a:	429a      	cmp	r2, r3
 800741c:	d302      	bcc.n	8007424 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	2b00      	cmp	r3, #0
 8007422:	d116      	bne.n	8007452 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	2200      	movs	r2, #0
 8007428:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	2220      	movs	r2, #32
 800742e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	2200      	movs	r2, #0
 8007436:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800743e:	f043 0220 	orr.w	r2, r3, #32
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	2200      	movs	r2, #0
 800744a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800744e:	2301      	movs	r3, #1
 8007450:	e020      	b.n	8007494 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8007452:	68bb      	ldr	r3, [r7, #8]
 8007454:	0c1b      	lsrs	r3, r3, #16
 8007456:	b2db      	uxtb	r3, r3
 8007458:	2b01      	cmp	r3, #1
 800745a:	d10c      	bne.n	8007476 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	695b      	ldr	r3, [r3, #20]
 8007462:	43da      	mvns	r2, r3
 8007464:	68bb      	ldr	r3, [r7, #8]
 8007466:	4013      	ands	r3, r2
 8007468:	b29b      	uxth	r3, r3
 800746a:	2b00      	cmp	r3, #0
 800746c:	bf14      	ite	ne
 800746e:	2301      	movne	r3, #1
 8007470:	2300      	moveq	r3, #0
 8007472:	b2db      	uxtb	r3, r3
 8007474:	e00b      	b.n	800748e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	699b      	ldr	r3, [r3, #24]
 800747c:	43da      	mvns	r2, r3
 800747e:	68bb      	ldr	r3, [r7, #8]
 8007480:	4013      	ands	r3, r2
 8007482:	b29b      	uxth	r3, r3
 8007484:	2b00      	cmp	r3, #0
 8007486:	bf14      	ite	ne
 8007488:	2301      	movne	r3, #1
 800748a:	2300      	moveq	r3, #0
 800748c:	b2db      	uxtb	r3, r3
 800748e:	2b00      	cmp	r3, #0
 8007490:	d18d      	bne.n	80073ae <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8007492:	2300      	movs	r3, #0
}
 8007494:	4618      	mov	r0, r3
 8007496:	3710      	adds	r7, #16
 8007498:	46bd      	mov	sp, r7
 800749a:	bd80      	pop	{r7, pc}

0800749c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800749c:	b580      	push	{r7, lr}
 800749e:	b084      	sub	sp, #16
 80074a0:	af00      	add	r7, sp, #0
 80074a2:	60f8      	str	r0, [r7, #12]
 80074a4:	60b9      	str	r1, [r7, #8]
 80074a6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80074a8:	e02d      	b.n	8007506 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80074aa:	68f8      	ldr	r0, [r7, #12]
 80074ac:	f000 f900 	bl	80076b0 <I2C_IsAcknowledgeFailed>
 80074b0:	4603      	mov	r3, r0
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	d001      	beq.n	80074ba <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80074b6:	2301      	movs	r3, #1
 80074b8:	e02d      	b.n	8007516 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80074ba:	68bb      	ldr	r3, [r7, #8]
 80074bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80074c0:	d021      	beq.n	8007506 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80074c2:	f7fb fd11 	bl	8002ee8 <HAL_GetTick>
 80074c6:	4602      	mov	r2, r0
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	1ad3      	subs	r3, r2, r3
 80074cc:	68ba      	ldr	r2, [r7, #8]
 80074ce:	429a      	cmp	r2, r3
 80074d0:	d302      	bcc.n	80074d8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80074d2:	68bb      	ldr	r3, [r7, #8]
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d116      	bne.n	8007506 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	2200      	movs	r2, #0
 80074dc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	2220      	movs	r2, #32
 80074e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	2200      	movs	r2, #0
 80074ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074f2:	f043 0220 	orr.w	r2, r3, #32
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	2200      	movs	r2, #0
 80074fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007502:	2301      	movs	r3, #1
 8007504:	e007      	b.n	8007516 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	695b      	ldr	r3, [r3, #20]
 800750c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007510:	2b80      	cmp	r3, #128	; 0x80
 8007512:	d1ca      	bne.n	80074aa <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007514:	2300      	movs	r3, #0
}
 8007516:	4618      	mov	r0, r3
 8007518:	3710      	adds	r7, #16
 800751a:	46bd      	mov	sp, r7
 800751c:	bd80      	pop	{r7, pc}

0800751e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800751e:	b580      	push	{r7, lr}
 8007520:	b084      	sub	sp, #16
 8007522:	af00      	add	r7, sp, #0
 8007524:	60f8      	str	r0, [r7, #12]
 8007526:	60b9      	str	r1, [r7, #8]
 8007528:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800752a:	e02d      	b.n	8007588 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800752c:	68f8      	ldr	r0, [r7, #12]
 800752e:	f000 f8bf 	bl	80076b0 <I2C_IsAcknowledgeFailed>
 8007532:	4603      	mov	r3, r0
 8007534:	2b00      	cmp	r3, #0
 8007536:	d001      	beq.n	800753c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8007538:	2301      	movs	r3, #1
 800753a:	e02d      	b.n	8007598 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800753c:	68bb      	ldr	r3, [r7, #8]
 800753e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007542:	d021      	beq.n	8007588 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007544:	f7fb fcd0 	bl	8002ee8 <HAL_GetTick>
 8007548:	4602      	mov	r2, r0
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	1ad3      	subs	r3, r2, r3
 800754e:	68ba      	ldr	r2, [r7, #8]
 8007550:	429a      	cmp	r2, r3
 8007552:	d302      	bcc.n	800755a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8007554:	68bb      	ldr	r3, [r7, #8]
 8007556:	2b00      	cmp	r3, #0
 8007558:	d116      	bne.n	8007588 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	2200      	movs	r2, #0
 800755e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	2220      	movs	r2, #32
 8007564:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	2200      	movs	r2, #0
 800756c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007574:	f043 0220 	orr.w	r2, r3, #32
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	2200      	movs	r2, #0
 8007580:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007584:	2301      	movs	r3, #1
 8007586:	e007      	b.n	8007598 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	695b      	ldr	r3, [r3, #20]
 800758e:	f003 0304 	and.w	r3, r3, #4
 8007592:	2b04      	cmp	r3, #4
 8007594:	d1ca      	bne.n	800752c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007596:	2300      	movs	r3, #0
}
 8007598:	4618      	mov	r0, r3
 800759a:	3710      	adds	r7, #16
 800759c:	46bd      	mov	sp, r7
 800759e:	bd80      	pop	{r7, pc}

080075a0 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 80075a0:	b480      	push	{r7}
 80075a2:	b085      	sub	sp, #20
 80075a4:	af00      	add	r7, sp, #0
 80075a6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80075a8:	2300      	movs	r3, #0
 80075aa:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 80075ac:	4b13      	ldr	r3, [pc, #76]	; (80075fc <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	08db      	lsrs	r3, r3, #3
 80075b2:	4a13      	ldr	r2, [pc, #76]	; (8007600 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 80075b4:	fba2 2303 	umull	r2, r3, r2, r3
 80075b8:	0a1a      	lsrs	r2, r3, #8
 80075ba:	4613      	mov	r3, r2
 80075bc:	009b      	lsls	r3, r3, #2
 80075be:	4413      	add	r3, r2
 80075c0:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	3b01      	subs	r3, #1
 80075c6:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d107      	bne.n	80075de <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075d2:	f043 0220 	orr.w	r2, r3, #32
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80075da:	2301      	movs	r3, #1
 80075dc:	e008      	b.n	80075f0 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80075e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80075ec:	d0e9      	beq.n	80075c2 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 80075ee:	2300      	movs	r3, #0
}
 80075f0:	4618      	mov	r0, r3
 80075f2:	3714      	adds	r7, #20
 80075f4:	46bd      	mov	sp, r7
 80075f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075fa:	4770      	bx	lr
 80075fc:	20000018 	.word	0x20000018
 8007600:	14f8b589 	.word	0x14f8b589

08007604 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007604:	b580      	push	{r7, lr}
 8007606:	b084      	sub	sp, #16
 8007608:	af00      	add	r7, sp, #0
 800760a:	60f8      	str	r0, [r7, #12]
 800760c:	60b9      	str	r1, [r7, #8]
 800760e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007610:	e042      	b.n	8007698 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	695b      	ldr	r3, [r3, #20]
 8007618:	f003 0310 	and.w	r3, r3, #16
 800761c:	2b10      	cmp	r3, #16
 800761e:	d119      	bne.n	8007654 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	f06f 0210 	mvn.w	r2, #16
 8007628:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	2200      	movs	r2, #0
 800762e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	2220      	movs	r2, #32
 8007634:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	2200      	movs	r2, #0
 800763c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	2200      	movs	r2, #0
 800764c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007650:	2301      	movs	r3, #1
 8007652:	e029      	b.n	80076a8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007654:	f7fb fc48 	bl	8002ee8 <HAL_GetTick>
 8007658:	4602      	mov	r2, r0
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	1ad3      	subs	r3, r2, r3
 800765e:	68ba      	ldr	r2, [r7, #8]
 8007660:	429a      	cmp	r2, r3
 8007662:	d302      	bcc.n	800766a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8007664:	68bb      	ldr	r3, [r7, #8]
 8007666:	2b00      	cmp	r3, #0
 8007668:	d116      	bne.n	8007698 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	2200      	movs	r2, #0
 800766e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	2220      	movs	r2, #32
 8007674:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	2200      	movs	r2, #0
 800767c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007684:	f043 0220 	orr.w	r2, r3, #32
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	2200      	movs	r2, #0
 8007690:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007694:	2301      	movs	r3, #1
 8007696:	e007      	b.n	80076a8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	695b      	ldr	r3, [r3, #20]
 800769e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80076a2:	2b40      	cmp	r3, #64	; 0x40
 80076a4:	d1b5      	bne.n	8007612 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80076a6:	2300      	movs	r3, #0
}
 80076a8:	4618      	mov	r0, r3
 80076aa:	3710      	adds	r7, #16
 80076ac:	46bd      	mov	sp, r7
 80076ae:	bd80      	pop	{r7, pc}

080076b0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80076b0:	b480      	push	{r7}
 80076b2:	b083      	sub	sp, #12
 80076b4:	af00      	add	r7, sp, #0
 80076b6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	695b      	ldr	r3, [r3, #20]
 80076be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80076c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80076c6:	d11b      	bne.n	8007700 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80076d0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	2200      	movs	r2, #0
 80076d6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	2220      	movs	r2, #32
 80076dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	2200      	movs	r2, #0
 80076e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076ec:	f043 0204 	orr.w	r2, r3, #4
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	2200      	movs	r2, #0
 80076f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80076fc:	2301      	movs	r3, #1
 80076fe:	e000      	b.n	8007702 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8007700:	2300      	movs	r3, #0
}
 8007702:	4618      	mov	r0, r3
 8007704:	370c      	adds	r7, #12
 8007706:	46bd      	mov	sp, r7
 8007708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800770c:	4770      	bx	lr

0800770e <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 800770e:	b480      	push	{r7}
 8007710:	b083      	sub	sp, #12
 8007712:	af00      	add	r7, sp, #0
 8007714:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800771a:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 800771e:	d103      	bne.n	8007728 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	2201      	movs	r2, #1
 8007724:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8007726:	e007      	b.n	8007738 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800772c:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8007730:	d102      	bne.n	8007738 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	2208      	movs	r2, #8
 8007736:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8007738:	bf00      	nop
 800773a:	370c      	adds	r7, #12
 800773c:	46bd      	mov	sp, r7
 800773e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007742:	4770      	bx	lr

08007744 <HAL_PWR_EnterSLEEPMode>:
  *            @arg PWR_SLEEPENTRY_WFI: enter SLEEP mode with WFI instruction
  *            @arg PWR_SLEEPENTRY_WFE: enter SLEEP mode with WFE instruction
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 8007744:	b480      	push	{r7}
 8007746:	b083      	sub	sp, #12
 8007748:	af00      	add	r7, sp, #0
 800774a:	6078      	str	r0, [r7, #4]
 800774c:	460b      	mov	r3, r1
 800774e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8007750:	4b09      	ldr	r3, [pc, #36]	; (8007778 <HAL_PWR_EnterSLEEPMode+0x34>)
 8007752:	691b      	ldr	r3, [r3, #16]
 8007754:	4a08      	ldr	r2, [pc, #32]	; (8007778 <HAL_PWR_EnterSLEEPMode+0x34>)
 8007756:	f023 0304 	bic.w	r3, r3, #4
 800775a:	6113      	str	r3, [r2, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if(SLEEPEntry == PWR_SLEEPENTRY_WFI)
 800775c:	78fb      	ldrb	r3, [r7, #3]
 800775e:	2b01      	cmp	r3, #1
 8007760:	d101      	bne.n	8007766 <HAL_PWR_EnterSLEEPMode+0x22>
  {   
    /* Request Wait For Interrupt */
    __WFI();
 8007762:	bf30      	wfi
    /* Request Wait For Event */
    __SEV();
    __WFE();
    __WFE();
  }
}
 8007764:	e002      	b.n	800776c <HAL_PWR_EnterSLEEPMode+0x28>
    __SEV();
 8007766:	bf40      	sev
    __WFE();
 8007768:	bf20      	wfe
    __WFE();
 800776a:	bf20      	wfe
}
 800776c:	bf00      	nop
 800776e:	370c      	adds	r7, #12
 8007770:	46bd      	mov	sp, r7
 8007772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007776:	4770      	bx	lr
 8007778:	e000ed00 	.word	0xe000ed00

0800777c <HAL_PWR_EnableSleepOnExit>:
  *       Setting this bit is useful when the processor is expected to run only on
  *       interruptions handling.         
  * @retval None
  */
void HAL_PWR_EnableSleepOnExit(void)
{
 800777c:	b480      	push	{r7}
 800777e:	af00      	add	r7, sp, #0
  /* Set SLEEPONEXIT bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPONEXIT_Msk));
 8007780:	4b05      	ldr	r3, [pc, #20]	; (8007798 <HAL_PWR_EnableSleepOnExit+0x1c>)
 8007782:	691b      	ldr	r3, [r3, #16]
 8007784:	4a04      	ldr	r2, [pc, #16]	; (8007798 <HAL_PWR_EnableSleepOnExit+0x1c>)
 8007786:	f043 0302 	orr.w	r3, r3, #2
 800778a:	6113      	str	r3, [r2, #16]
}
 800778c:	bf00      	nop
 800778e:	46bd      	mov	sp, r7
 8007790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007794:	4770      	bx	lr
 8007796:	bf00      	nop
 8007798:	e000ed00 	.word	0xe000ed00

0800779c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800779c:	b580      	push	{r7, lr}
 800779e:	b086      	sub	sp, #24
 80077a0:	af00      	add	r7, sp, #0
 80077a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d101      	bne.n	80077ae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80077aa:	2301      	movs	r3, #1
 80077ac:	e264      	b.n	8007c78 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	f003 0301 	and.w	r3, r3, #1
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d075      	beq.n	80078a6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80077ba:	4ba3      	ldr	r3, [pc, #652]	; (8007a48 <HAL_RCC_OscConfig+0x2ac>)
 80077bc:	689b      	ldr	r3, [r3, #8]
 80077be:	f003 030c 	and.w	r3, r3, #12
 80077c2:	2b04      	cmp	r3, #4
 80077c4:	d00c      	beq.n	80077e0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80077c6:	4ba0      	ldr	r3, [pc, #640]	; (8007a48 <HAL_RCC_OscConfig+0x2ac>)
 80077c8:	689b      	ldr	r3, [r3, #8]
 80077ca:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80077ce:	2b08      	cmp	r3, #8
 80077d0:	d112      	bne.n	80077f8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80077d2:	4b9d      	ldr	r3, [pc, #628]	; (8007a48 <HAL_RCC_OscConfig+0x2ac>)
 80077d4:	685b      	ldr	r3, [r3, #4]
 80077d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80077da:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80077de:	d10b      	bne.n	80077f8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80077e0:	4b99      	ldr	r3, [pc, #612]	; (8007a48 <HAL_RCC_OscConfig+0x2ac>)
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d05b      	beq.n	80078a4 <HAL_RCC_OscConfig+0x108>
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	685b      	ldr	r3, [r3, #4]
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	d157      	bne.n	80078a4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80077f4:	2301      	movs	r3, #1
 80077f6:	e23f      	b.n	8007c78 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	685b      	ldr	r3, [r3, #4]
 80077fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007800:	d106      	bne.n	8007810 <HAL_RCC_OscConfig+0x74>
 8007802:	4b91      	ldr	r3, [pc, #580]	; (8007a48 <HAL_RCC_OscConfig+0x2ac>)
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	4a90      	ldr	r2, [pc, #576]	; (8007a48 <HAL_RCC_OscConfig+0x2ac>)
 8007808:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800780c:	6013      	str	r3, [r2, #0]
 800780e:	e01d      	b.n	800784c <HAL_RCC_OscConfig+0xb0>
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	685b      	ldr	r3, [r3, #4]
 8007814:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007818:	d10c      	bne.n	8007834 <HAL_RCC_OscConfig+0x98>
 800781a:	4b8b      	ldr	r3, [pc, #556]	; (8007a48 <HAL_RCC_OscConfig+0x2ac>)
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	4a8a      	ldr	r2, [pc, #552]	; (8007a48 <HAL_RCC_OscConfig+0x2ac>)
 8007820:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007824:	6013      	str	r3, [r2, #0]
 8007826:	4b88      	ldr	r3, [pc, #544]	; (8007a48 <HAL_RCC_OscConfig+0x2ac>)
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	4a87      	ldr	r2, [pc, #540]	; (8007a48 <HAL_RCC_OscConfig+0x2ac>)
 800782c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007830:	6013      	str	r3, [r2, #0]
 8007832:	e00b      	b.n	800784c <HAL_RCC_OscConfig+0xb0>
 8007834:	4b84      	ldr	r3, [pc, #528]	; (8007a48 <HAL_RCC_OscConfig+0x2ac>)
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	4a83      	ldr	r2, [pc, #524]	; (8007a48 <HAL_RCC_OscConfig+0x2ac>)
 800783a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800783e:	6013      	str	r3, [r2, #0]
 8007840:	4b81      	ldr	r3, [pc, #516]	; (8007a48 <HAL_RCC_OscConfig+0x2ac>)
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	4a80      	ldr	r2, [pc, #512]	; (8007a48 <HAL_RCC_OscConfig+0x2ac>)
 8007846:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800784a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	685b      	ldr	r3, [r3, #4]
 8007850:	2b00      	cmp	r3, #0
 8007852:	d013      	beq.n	800787c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007854:	f7fb fb48 	bl	8002ee8 <HAL_GetTick>
 8007858:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800785a:	e008      	b.n	800786e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800785c:	f7fb fb44 	bl	8002ee8 <HAL_GetTick>
 8007860:	4602      	mov	r2, r0
 8007862:	693b      	ldr	r3, [r7, #16]
 8007864:	1ad3      	subs	r3, r2, r3
 8007866:	2b64      	cmp	r3, #100	; 0x64
 8007868:	d901      	bls.n	800786e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800786a:	2303      	movs	r3, #3
 800786c:	e204      	b.n	8007c78 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800786e:	4b76      	ldr	r3, [pc, #472]	; (8007a48 <HAL_RCC_OscConfig+0x2ac>)
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007876:	2b00      	cmp	r3, #0
 8007878:	d0f0      	beq.n	800785c <HAL_RCC_OscConfig+0xc0>
 800787a:	e014      	b.n	80078a6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800787c:	f7fb fb34 	bl	8002ee8 <HAL_GetTick>
 8007880:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007882:	e008      	b.n	8007896 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007884:	f7fb fb30 	bl	8002ee8 <HAL_GetTick>
 8007888:	4602      	mov	r2, r0
 800788a:	693b      	ldr	r3, [r7, #16]
 800788c:	1ad3      	subs	r3, r2, r3
 800788e:	2b64      	cmp	r3, #100	; 0x64
 8007890:	d901      	bls.n	8007896 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007892:	2303      	movs	r3, #3
 8007894:	e1f0      	b.n	8007c78 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007896:	4b6c      	ldr	r3, [pc, #432]	; (8007a48 <HAL_RCC_OscConfig+0x2ac>)
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d1f0      	bne.n	8007884 <HAL_RCC_OscConfig+0xe8>
 80078a2:	e000      	b.n	80078a6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80078a4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	f003 0302 	and.w	r3, r3, #2
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d063      	beq.n	800797a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80078b2:	4b65      	ldr	r3, [pc, #404]	; (8007a48 <HAL_RCC_OscConfig+0x2ac>)
 80078b4:	689b      	ldr	r3, [r3, #8]
 80078b6:	f003 030c 	and.w	r3, r3, #12
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d00b      	beq.n	80078d6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80078be:	4b62      	ldr	r3, [pc, #392]	; (8007a48 <HAL_RCC_OscConfig+0x2ac>)
 80078c0:	689b      	ldr	r3, [r3, #8]
 80078c2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80078c6:	2b08      	cmp	r3, #8
 80078c8:	d11c      	bne.n	8007904 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80078ca:	4b5f      	ldr	r3, [pc, #380]	; (8007a48 <HAL_RCC_OscConfig+0x2ac>)
 80078cc:	685b      	ldr	r3, [r3, #4]
 80078ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	d116      	bne.n	8007904 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80078d6:	4b5c      	ldr	r3, [pc, #368]	; (8007a48 <HAL_RCC_OscConfig+0x2ac>)
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	f003 0302 	and.w	r3, r3, #2
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d005      	beq.n	80078ee <HAL_RCC_OscConfig+0x152>
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	68db      	ldr	r3, [r3, #12]
 80078e6:	2b01      	cmp	r3, #1
 80078e8:	d001      	beq.n	80078ee <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80078ea:	2301      	movs	r3, #1
 80078ec:	e1c4      	b.n	8007c78 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80078ee:	4b56      	ldr	r3, [pc, #344]	; (8007a48 <HAL_RCC_OscConfig+0x2ac>)
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	691b      	ldr	r3, [r3, #16]
 80078fa:	00db      	lsls	r3, r3, #3
 80078fc:	4952      	ldr	r1, [pc, #328]	; (8007a48 <HAL_RCC_OscConfig+0x2ac>)
 80078fe:	4313      	orrs	r3, r2
 8007900:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007902:	e03a      	b.n	800797a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	68db      	ldr	r3, [r3, #12]
 8007908:	2b00      	cmp	r3, #0
 800790a:	d020      	beq.n	800794e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800790c:	4b4f      	ldr	r3, [pc, #316]	; (8007a4c <HAL_RCC_OscConfig+0x2b0>)
 800790e:	2201      	movs	r2, #1
 8007910:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007912:	f7fb fae9 	bl	8002ee8 <HAL_GetTick>
 8007916:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007918:	e008      	b.n	800792c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800791a:	f7fb fae5 	bl	8002ee8 <HAL_GetTick>
 800791e:	4602      	mov	r2, r0
 8007920:	693b      	ldr	r3, [r7, #16]
 8007922:	1ad3      	subs	r3, r2, r3
 8007924:	2b02      	cmp	r3, #2
 8007926:	d901      	bls.n	800792c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8007928:	2303      	movs	r3, #3
 800792a:	e1a5      	b.n	8007c78 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800792c:	4b46      	ldr	r3, [pc, #280]	; (8007a48 <HAL_RCC_OscConfig+0x2ac>)
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	f003 0302 	and.w	r3, r3, #2
 8007934:	2b00      	cmp	r3, #0
 8007936:	d0f0      	beq.n	800791a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007938:	4b43      	ldr	r3, [pc, #268]	; (8007a48 <HAL_RCC_OscConfig+0x2ac>)
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	691b      	ldr	r3, [r3, #16]
 8007944:	00db      	lsls	r3, r3, #3
 8007946:	4940      	ldr	r1, [pc, #256]	; (8007a48 <HAL_RCC_OscConfig+0x2ac>)
 8007948:	4313      	orrs	r3, r2
 800794a:	600b      	str	r3, [r1, #0]
 800794c:	e015      	b.n	800797a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800794e:	4b3f      	ldr	r3, [pc, #252]	; (8007a4c <HAL_RCC_OscConfig+0x2b0>)
 8007950:	2200      	movs	r2, #0
 8007952:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007954:	f7fb fac8 	bl	8002ee8 <HAL_GetTick>
 8007958:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800795a:	e008      	b.n	800796e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800795c:	f7fb fac4 	bl	8002ee8 <HAL_GetTick>
 8007960:	4602      	mov	r2, r0
 8007962:	693b      	ldr	r3, [r7, #16]
 8007964:	1ad3      	subs	r3, r2, r3
 8007966:	2b02      	cmp	r3, #2
 8007968:	d901      	bls.n	800796e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800796a:	2303      	movs	r3, #3
 800796c:	e184      	b.n	8007c78 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800796e:	4b36      	ldr	r3, [pc, #216]	; (8007a48 <HAL_RCC_OscConfig+0x2ac>)
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	f003 0302 	and.w	r3, r3, #2
 8007976:	2b00      	cmp	r3, #0
 8007978:	d1f0      	bne.n	800795c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	f003 0308 	and.w	r3, r3, #8
 8007982:	2b00      	cmp	r3, #0
 8007984:	d030      	beq.n	80079e8 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	695b      	ldr	r3, [r3, #20]
 800798a:	2b00      	cmp	r3, #0
 800798c:	d016      	beq.n	80079bc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800798e:	4b30      	ldr	r3, [pc, #192]	; (8007a50 <HAL_RCC_OscConfig+0x2b4>)
 8007990:	2201      	movs	r2, #1
 8007992:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007994:	f7fb faa8 	bl	8002ee8 <HAL_GetTick>
 8007998:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800799a:	e008      	b.n	80079ae <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800799c:	f7fb faa4 	bl	8002ee8 <HAL_GetTick>
 80079a0:	4602      	mov	r2, r0
 80079a2:	693b      	ldr	r3, [r7, #16]
 80079a4:	1ad3      	subs	r3, r2, r3
 80079a6:	2b02      	cmp	r3, #2
 80079a8:	d901      	bls.n	80079ae <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80079aa:	2303      	movs	r3, #3
 80079ac:	e164      	b.n	8007c78 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80079ae:	4b26      	ldr	r3, [pc, #152]	; (8007a48 <HAL_RCC_OscConfig+0x2ac>)
 80079b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80079b2:	f003 0302 	and.w	r3, r3, #2
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d0f0      	beq.n	800799c <HAL_RCC_OscConfig+0x200>
 80079ba:	e015      	b.n	80079e8 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80079bc:	4b24      	ldr	r3, [pc, #144]	; (8007a50 <HAL_RCC_OscConfig+0x2b4>)
 80079be:	2200      	movs	r2, #0
 80079c0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80079c2:	f7fb fa91 	bl	8002ee8 <HAL_GetTick>
 80079c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80079c8:	e008      	b.n	80079dc <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80079ca:	f7fb fa8d 	bl	8002ee8 <HAL_GetTick>
 80079ce:	4602      	mov	r2, r0
 80079d0:	693b      	ldr	r3, [r7, #16]
 80079d2:	1ad3      	subs	r3, r2, r3
 80079d4:	2b02      	cmp	r3, #2
 80079d6:	d901      	bls.n	80079dc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80079d8:	2303      	movs	r3, #3
 80079da:	e14d      	b.n	8007c78 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80079dc:	4b1a      	ldr	r3, [pc, #104]	; (8007a48 <HAL_RCC_OscConfig+0x2ac>)
 80079de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80079e0:	f003 0302 	and.w	r3, r3, #2
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	d1f0      	bne.n	80079ca <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	f003 0304 	and.w	r3, r3, #4
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	f000 80a0 	beq.w	8007b36 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80079f6:	2300      	movs	r3, #0
 80079f8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80079fa:	4b13      	ldr	r3, [pc, #76]	; (8007a48 <HAL_RCC_OscConfig+0x2ac>)
 80079fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d10f      	bne.n	8007a26 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007a06:	2300      	movs	r3, #0
 8007a08:	60bb      	str	r3, [r7, #8]
 8007a0a:	4b0f      	ldr	r3, [pc, #60]	; (8007a48 <HAL_RCC_OscConfig+0x2ac>)
 8007a0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a0e:	4a0e      	ldr	r2, [pc, #56]	; (8007a48 <HAL_RCC_OscConfig+0x2ac>)
 8007a10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007a14:	6413      	str	r3, [r2, #64]	; 0x40
 8007a16:	4b0c      	ldr	r3, [pc, #48]	; (8007a48 <HAL_RCC_OscConfig+0x2ac>)
 8007a18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007a1e:	60bb      	str	r3, [r7, #8]
 8007a20:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007a22:	2301      	movs	r3, #1
 8007a24:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007a26:	4b0b      	ldr	r3, [pc, #44]	; (8007a54 <HAL_RCC_OscConfig+0x2b8>)
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d121      	bne.n	8007a76 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007a32:	4b08      	ldr	r3, [pc, #32]	; (8007a54 <HAL_RCC_OscConfig+0x2b8>)
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	4a07      	ldr	r2, [pc, #28]	; (8007a54 <HAL_RCC_OscConfig+0x2b8>)
 8007a38:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007a3c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007a3e:	f7fb fa53 	bl	8002ee8 <HAL_GetTick>
 8007a42:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007a44:	e011      	b.n	8007a6a <HAL_RCC_OscConfig+0x2ce>
 8007a46:	bf00      	nop
 8007a48:	40023800 	.word	0x40023800
 8007a4c:	42470000 	.word	0x42470000
 8007a50:	42470e80 	.word	0x42470e80
 8007a54:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007a58:	f7fb fa46 	bl	8002ee8 <HAL_GetTick>
 8007a5c:	4602      	mov	r2, r0
 8007a5e:	693b      	ldr	r3, [r7, #16]
 8007a60:	1ad3      	subs	r3, r2, r3
 8007a62:	2b02      	cmp	r3, #2
 8007a64:	d901      	bls.n	8007a6a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8007a66:	2303      	movs	r3, #3
 8007a68:	e106      	b.n	8007c78 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007a6a:	4b85      	ldr	r3, [pc, #532]	; (8007c80 <HAL_RCC_OscConfig+0x4e4>)
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	d0f0      	beq.n	8007a58 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	689b      	ldr	r3, [r3, #8]
 8007a7a:	2b01      	cmp	r3, #1
 8007a7c:	d106      	bne.n	8007a8c <HAL_RCC_OscConfig+0x2f0>
 8007a7e:	4b81      	ldr	r3, [pc, #516]	; (8007c84 <HAL_RCC_OscConfig+0x4e8>)
 8007a80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a82:	4a80      	ldr	r2, [pc, #512]	; (8007c84 <HAL_RCC_OscConfig+0x4e8>)
 8007a84:	f043 0301 	orr.w	r3, r3, #1
 8007a88:	6713      	str	r3, [r2, #112]	; 0x70
 8007a8a:	e01c      	b.n	8007ac6 <HAL_RCC_OscConfig+0x32a>
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	689b      	ldr	r3, [r3, #8]
 8007a90:	2b05      	cmp	r3, #5
 8007a92:	d10c      	bne.n	8007aae <HAL_RCC_OscConfig+0x312>
 8007a94:	4b7b      	ldr	r3, [pc, #492]	; (8007c84 <HAL_RCC_OscConfig+0x4e8>)
 8007a96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a98:	4a7a      	ldr	r2, [pc, #488]	; (8007c84 <HAL_RCC_OscConfig+0x4e8>)
 8007a9a:	f043 0304 	orr.w	r3, r3, #4
 8007a9e:	6713      	str	r3, [r2, #112]	; 0x70
 8007aa0:	4b78      	ldr	r3, [pc, #480]	; (8007c84 <HAL_RCC_OscConfig+0x4e8>)
 8007aa2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007aa4:	4a77      	ldr	r2, [pc, #476]	; (8007c84 <HAL_RCC_OscConfig+0x4e8>)
 8007aa6:	f043 0301 	orr.w	r3, r3, #1
 8007aaa:	6713      	str	r3, [r2, #112]	; 0x70
 8007aac:	e00b      	b.n	8007ac6 <HAL_RCC_OscConfig+0x32a>
 8007aae:	4b75      	ldr	r3, [pc, #468]	; (8007c84 <HAL_RCC_OscConfig+0x4e8>)
 8007ab0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ab2:	4a74      	ldr	r2, [pc, #464]	; (8007c84 <HAL_RCC_OscConfig+0x4e8>)
 8007ab4:	f023 0301 	bic.w	r3, r3, #1
 8007ab8:	6713      	str	r3, [r2, #112]	; 0x70
 8007aba:	4b72      	ldr	r3, [pc, #456]	; (8007c84 <HAL_RCC_OscConfig+0x4e8>)
 8007abc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007abe:	4a71      	ldr	r2, [pc, #452]	; (8007c84 <HAL_RCC_OscConfig+0x4e8>)
 8007ac0:	f023 0304 	bic.w	r3, r3, #4
 8007ac4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	689b      	ldr	r3, [r3, #8]
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d015      	beq.n	8007afa <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007ace:	f7fb fa0b 	bl	8002ee8 <HAL_GetTick>
 8007ad2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007ad4:	e00a      	b.n	8007aec <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007ad6:	f7fb fa07 	bl	8002ee8 <HAL_GetTick>
 8007ada:	4602      	mov	r2, r0
 8007adc:	693b      	ldr	r3, [r7, #16]
 8007ade:	1ad3      	subs	r3, r2, r3
 8007ae0:	f241 3288 	movw	r2, #5000	; 0x1388
 8007ae4:	4293      	cmp	r3, r2
 8007ae6:	d901      	bls.n	8007aec <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8007ae8:	2303      	movs	r3, #3
 8007aea:	e0c5      	b.n	8007c78 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007aec:	4b65      	ldr	r3, [pc, #404]	; (8007c84 <HAL_RCC_OscConfig+0x4e8>)
 8007aee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007af0:	f003 0302 	and.w	r3, r3, #2
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	d0ee      	beq.n	8007ad6 <HAL_RCC_OscConfig+0x33a>
 8007af8:	e014      	b.n	8007b24 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007afa:	f7fb f9f5 	bl	8002ee8 <HAL_GetTick>
 8007afe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007b00:	e00a      	b.n	8007b18 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007b02:	f7fb f9f1 	bl	8002ee8 <HAL_GetTick>
 8007b06:	4602      	mov	r2, r0
 8007b08:	693b      	ldr	r3, [r7, #16]
 8007b0a:	1ad3      	subs	r3, r2, r3
 8007b0c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007b10:	4293      	cmp	r3, r2
 8007b12:	d901      	bls.n	8007b18 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8007b14:	2303      	movs	r3, #3
 8007b16:	e0af      	b.n	8007c78 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007b18:	4b5a      	ldr	r3, [pc, #360]	; (8007c84 <HAL_RCC_OscConfig+0x4e8>)
 8007b1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b1c:	f003 0302 	and.w	r3, r3, #2
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	d1ee      	bne.n	8007b02 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007b24:	7dfb      	ldrb	r3, [r7, #23]
 8007b26:	2b01      	cmp	r3, #1
 8007b28:	d105      	bne.n	8007b36 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007b2a:	4b56      	ldr	r3, [pc, #344]	; (8007c84 <HAL_RCC_OscConfig+0x4e8>)
 8007b2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b2e:	4a55      	ldr	r2, [pc, #340]	; (8007c84 <HAL_RCC_OscConfig+0x4e8>)
 8007b30:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007b34:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	699b      	ldr	r3, [r3, #24]
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	f000 809b 	beq.w	8007c76 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007b40:	4b50      	ldr	r3, [pc, #320]	; (8007c84 <HAL_RCC_OscConfig+0x4e8>)
 8007b42:	689b      	ldr	r3, [r3, #8]
 8007b44:	f003 030c 	and.w	r3, r3, #12
 8007b48:	2b08      	cmp	r3, #8
 8007b4a:	d05c      	beq.n	8007c06 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	699b      	ldr	r3, [r3, #24]
 8007b50:	2b02      	cmp	r3, #2
 8007b52:	d141      	bne.n	8007bd8 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007b54:	4b4c      	ldr	r3, [pc, #304]	; (8007c88 <HAL_RCC_OscConfig+0x4ec>)
 8007b56:	2200      	movs	r2, #0
 8007b58:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007b5a:	f7fb f9c5 	bl	8002ee8 <HAL_GetTick>
 8007b5e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007b60:	e008      	b.n	8007b74 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007b62:	f7fb f9c1 	bl	8002ee8 <HAL_GetTick>
 8007b66:	4602      	mov	r2, r0
 8007b68:	693b      	ldr	r3, [r7, #16]
 8007b6a:	1ad3      	subs	r3, r2, r3
 8007b6c:	2b02      	cmp	r3, #2
 8007b6e:	d901      	bls.n	8007b74 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8007b70:	2303      	movs	r3, #3
 8007b72:	e081      	b.n	8007c78 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007b74:	4b43      	ldr	r3, [pc, #268]	; (8007c84 <HAL_RCC_OscConfig+0x4e8>)
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	d1f0      	bne.n	8007b62 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	69da      	ldr	r2, [r3, #28]
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	6a1b      	ldr	r3, [r3, #32]
 8007b88:	431a      	orrs	r2, r3
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b8e:	019b      	lsls	r3, r3, #6
 8007b90:	431a      	orrs	r2, r3
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b96:	085b      	lsrs	r3, r3, #1
 8007b98:	3b01      	subs	r3, #1
 8007b9a:	041b      	lsls	r3, r3, #16
 8007b9c:	431a      	orrs	r2, r3
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ba2:	061b      	lsls	r3, r3, #24
 8007ba4:	4937      	ldr	r1, [pc, #220]	; (8007c84 <HAL_RCC_OscConfig+0x4e8>)
 8007ba6:	4313      	orrs	r3, r2
 8007ba8:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007baa:	4b37      	ldr	r3, [pc, #220]	; (8007c88 <HAL_RCC_OscConfig+0x4ec>)
 8007bac:	2201      	movs	r2, #1
 8007bae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007bb0:	f7fb f99a 	bl	8002ee8 <HAL_GetTick>
 8007bb4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007bb6:	e008      	b.n	8007bca <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007bb8:	f7fb f996 	bl	8002ee8 <HAL_GetTick>
 8007bbc:	4602      	mov	r2, r0
 8007bbe:	693b      	ldr	r3, [r7, #16]
 8007bc0:	1ad3      	subs	r3, r2, r3
 8007bc2:	2b02      	cmp	r3, #2
 8007bc4:	d901      	bls.n	8007bca <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8007bc6:	2303      	movs	r3, #3
 8007bc8:	e056      	b.n	8007c78 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007bca:	4b2e      	ldr	r3, [pc, #184]	; (8007c84 <HAL_RCC_OscConfig+0x4e8>)
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d0f0      	beq.n	8007bb8 <HAL_RCC_OscConfig+0x41c>
 8007bd6:	e04e      	b.n	8007c76 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007bd8:	4b2b      	ldr	r3, [pc, #172]	; (8007c88 <HAL_RCC_OscConfig+0x4ec>)
 8007bda:	2200      	movs	r2, #0
 8007bdc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007bde:	f7fb f983 	bl	8002ee8 <HAL_GetTick>
 8007be2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007be4:	e008      	b.n	8007bf8 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007be6:	f7fb f97f 	bl	8002ee8 <HAL_GetTick>
 8007bea:	4602      	mov	r2, r0
 8007bec:	693b      	ldr	r3, [r7, #16]
 8007bee:	1ad3      	subs	r3, r2, r3
 8007bf0:	2b02      	cmp	r3, #2
 8007bf2:	d901      	bls.n	8007bf8 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8007bf4:	2303      	movs	r3, #3
 8007bf6:	e03f      	b.n	8007c78 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007bf8:	4b22      	ldr	r3, [pc, #136]	; (8007c84 <HAL_RCC_OscConfig+0x4e8>)
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	d1f0      	bne.n	8007be6 <HAL_RCC_OscConfig+0x44a>
 8007c04:	e037      	b.n	8007c76 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	699b      	ldr	r3, [r3, #24]
 8007c0a:	2b01      	cmp	r3, #1
 8007c0c:	d101      	bne.n	8007c12 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8007c0e:	2301      	movs	r3, #1
 8007c10:	e032      	b.n	8007c78 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8007c12:	4b1c      	ldr	r3, [pc, #112]	; (8007c84 <HAL_RCC_OscConfig+0x4e8>)
 8007c14:	685b      	ldr	r3, [r3, #4]
 8007c16:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	699b      	ldr	r3, [r3, #24]
 8007c1c:	2b01      	cmp	r3, #1
 8007c1e:	d028      	beq.n	8007c72 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007c2a:	429a      	cmp	r2, r3
 8007c2c:	d121      	bne.n	8007c72 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007c38:	429a      	cmp	r2, r3
 8007c3a:	d11a      	bne.n	8007c72 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007c3c:	68fa      	ldr	r2, [r7, #12]
 8007c3e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8007c42:	4013      	ands	r3, r2
 8007c44:	687a      	ldr	r2, [r7, #4]
 8007c46:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8007c48:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007c4a:	4293      	cmp	r3, r2
 8007c4c:	d111      	bne.n	8007c72 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c58:	085b      	lsrs	r3, r3, #1
 8007c5a:	3b01      	subs	r3, #1
 8007c5c:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007c5e:	429a      	cmp	r2, r3
 8007c60:	d107      	bne.n	8007c72 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c6c:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007c6e:	429a      	cmp	r2, r3
 8007c70:	d001      	beq.n	8007c76 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8007c72:	2301      	movs	r3, #1
 8007c74:	e000      	b.n	8007c78 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8007c76:	2300      	movs	r3, #0
}
 8007c78:	4618      	mov	r0, r3
 8007c7a:	3718      	adds	r7, #24
 8007c7c:	46bd      	mov	sp, r7
 8007c7e:	bd80      	pop	{r7, pc}
 8007c80:	40007000 	.word	0x40007000
 8007c84:	40023800 	.word	0x40023800
 8007c88:	42470060 	.word	0x42470060

08007c8c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007c8c:	b580      	push	{r7, lr}
 8007c8e:	b084      	sub	sp, #16
 8007c90:	af00      	add	r7, sp, #0
 8007c92:	6078      	str	r0, [r7, #4]
 8007c94:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	d101      	bne.n	8007ca0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007c9c:	2301      	movs	r3, #1
 8007c9e:	e0cc      	b.n	8007e3a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007ca0:	4b68      	ldr	r3, [pc, #416]	; (8007e44 <HAL_RCC_ClockConfig+0x1b8>)
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	f003 0307 	and.w	r3, r3, #7
 8007ca8:	683a      	ldr	r2, [r7, #0]
 8007caa:	429a      	cmp	r2, r3
 8007cac:	d90c      	bls.n	8007cc8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007cae:	4b65      	ldr	r3, [pc, #404]	; (8007e44 <HAL_RCC_ClockConfig+0x1b8>)
 8007cb0:	683a      	ldr	r2, [r7, #0]
 8007cb2:	b2d2      	uxtb	r2, r2
 8007cb4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007cb6:	4b63      	ldr	r3, [pc, #396]	; (8007e44 <HAL_RCC_ClockConfig+0x1b8>)
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	f003 0307 	and.w	r3, r3, #7
 8007cbe:	683a      	ldr	r2, [r7, #0]
 8007cc0:	429a      	cmp	r2, r3
 8007cc2:	d001      	beq.n	8007cc8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8007cc4:	2301      	movs	r3, #1
 8007cc6:	e0b8      	b.n	8007e3a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	f003 0302 	and.w	r3, r3, #2
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	d020      	beq.n	8007d16 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	f003 0304 	and.w	r3, r3, #4
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	d005      	beq.n	8007cec <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007ce0:	4b59      	ldr	r3, [pc, #356]	; (8007e48 <HAL_RCC_ClockConfig+0x1bc>)
 8007ce2:	689b      	ldr	r3, [r3, #8]
 8007ce4:	4a58      	ldr	r2, [pc, #352]	; (8007e48 <HAL_RCC_ClockConfig+0x1bc>)
 8007ce6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8007cea:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	f003 0308 	and.w	r3, r3, #8
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	d005      	beq.n	8007d04 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007cf8:	4b53      	ldr	r3, [pc, #332]	; (8007e48 <HAL_RCC_ClockConfig+0x1bc>)
 8007cfa:	689b      	ldr	r3, [r3, #8]
 8007cfc:	4a52      	ldr	r2, [pc, #328]	; (8007e48 <HAL_RCC_ClockConfig+0x1bc>)
 8007cfe:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8007d02:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007d04:	4b50      	ldr	r3, [pc, #320]	; (8007e48 <HAL_RCC_ClockConfig+0x1bc>)
 8007d06:	689b      	ldr	r3, [r3, #8]
 8007d08:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	689b      	ldr	r3, [r3, #8]
 8007d10:	494d      	ldr	r1, [pc, #308]	; (8007e48 <HAL_RCC_ClockConfig+0x1bc>)
 8007d12:	4313      	orrs	r3, r2
 8007d14:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	f003 0301 	and.w	r3, r3, #1
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d044      	beq.n	8007dac <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	685b      	ldr	r3, [r3, #4]
 8007d26:	2b01      	cmp	r3, #1
 8007d28:	d107      	bne.n	8007d3a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007d2a:	4b47      	ldr	r3, [pc, #284]	; (8007e48 <HAL_RCC_ClockConfig+0x1bc>)
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	d119      	bne.n	8007d6a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007d36:	2301      	movs	r3, #1
 8007d38:	e07f      	b.n	8007e3a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	685b      	ldr	r3, [r3, #4]
 8007d3e:	2b02      	cmp	r3, #2
 8007d40:	d003      	beq.n	8007d4a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007d46:	2b03      	cmp	r3, #3
 8007d48:	d107      	bne.n	8007d5a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007d4a:	4b3f      	ldr	r3, [pc, #252]	; (8007e48 <HAL_RCC_ClockConfig+0x1bc>)
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	d109      	bne.n	8007d6a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007d56:	2301      	movs	r3, #1
 8007d58:	e06f      	b.n	8007e3a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007d5a:	4b3b      	ldr	r3, [pc, #236]	; (8007e48 <HAL_RCC_ClockConfig+0x1bc>)
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	f003 0302 	and.w	r3, r3, #2
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	d101      	bne.n	8007d6a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007d66:	2301      	movs	r3, #1
 8007d68:	e067      	b.n	8007e3a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007d6a:	4b37      	ldr	r3, [pc, #220]	; (8007e48 <HAL_RCC_ClockConfig+0x1bc>)
 8007d6c:	689b      	ldr	r3, [r3, #8]
 8007d6e:	f023 0203 	bic.w	r2, r3, #3
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	685b      	ldr	r3, [r3, #4]
 8007d76:	4934      	ldr	r1, [pc, #208]	; (8007e48 <HAL_RCC_ClockConfig+0x1bc>)
 8007d78:	4313      	orrs	r3, r2
 8007d7a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007d7c:	f7fb f8b4 	bl	8002ee8 <HAL_GetTick>
 8007d80:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007d82:	e00a      	b.n	8007d9a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007d84:	f7fb f8b0 	bl	8002ee8 <HAL_GetTick>
 8007d88:	4602      	mov	r2, r0
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	1ad3      	subs	r3, r2, r3
 8007d8e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007d92:	4293      	cmp	r3, r2
 8007d94:	d901      	bls.n	8007d9a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007d96:	2303      	movs	r3, #3
 8007d98:	e04f      	b.n	8007e3a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007d9a:	4b2b      	ldr	r3, [pc, #172]	; (8007e48 <HAL_RCC_ClockConfig+0x1bc>)
 8007d9c:	689b      	ldr	r3, [r3, #8]
 8007d9e:	f003 020c 	and.w	r2, r3, #12
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	685b      	ldr	r3, [r3, #4]
 8007da6:	009b      	lsls	r3, r3, #2
 8007da8:	429a      	cmp	r2, r3
 8007daa:	d1eb      	bne.n	8007d84 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007dac:	4b25      	ldr	r3, [pc, #148]	; (8007e44 <HAL_RCC_ClockConfig+0x1b8>)
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	f003 0307 	and.w	r3, r3, #7
 8007db4:	683a      	ldr	r2, [r7, #0]
 8007db6:	429a      	cmp	r2, r3
 8007db8:	d20c      	bcs.n	8007dd4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007dba:	4b22      	ldr	r3, [pc, #136]	; (8007e44 <HAL_RCC_ClockConfig+0x1b8>)
 8007dbc:	683a      	ldr	r2, [r7, #0]
 8007dbe:	b2d2      	uxtb	r2, r2
 8007dc0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007dc2:	4b20      	ldr	r3, [pc, #128]	; (8007e44 <HAL_RCC_ClockConfig+0x1b8>)
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	f003 0307 	and.w	r3, r3, #7
 8007dca:	683a      	ldr	r2, [r7, #0]
 8007dcc:	429a      	cmp	r2, r3
 8007dce:	d001      	beq.n	8007dd4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8007dd0:	2301      	movs	r3, #1
 8007dd2:	e032      	b.n	8007e3a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	f003 0304 	and.w	r3, r3, #4
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	d008      	beq.n	8007df2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007de0:	4b19      	ldr	r3, [pc, #100]	; (8007e48 <HAL_RCC_ClockConfig+0x1bc>)
 8007de2:	689b      	ldr	r3, [r3, #8]
 8007de4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	68db      	ldr	r3, [r3, #12]
 8007dec:	4916      	ldr	r1, [pc, #88]	; (8007e48 <HAL_RCC_ClockConfig+0x1bc>)
 8007dee:	4313      	orrs	r3, r2
 8007df0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	f003 0308 	and.w	r3, r3, #8
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d009      	beq.n	8007e12 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007dfe:	4b12      	ldr	r3, [pc, #72]	; (8007e48 <HAL_RCC_ClockConfig+0x1bc>)
 8007e00:	689b      	ldr	r3, [r3, #8]
 8007e02:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	691b      	ldr	r3, [r3, #16]
 8007e0a:	00db      	lsls	r3, r3, #3
 8007e0c:	490e      	ldr	r1, [pc, #56]	; (8007e48 <HAL_RCC_ClockConfig+0x1bc>)
 8007e0e:	4313      	orrs	r3, r2
 8007e10:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8007e12:	f000 f821 	bl	8007e58 <HAL_RCC_GetSysClockFreq>
 8007e16:	4602      	mov	r2, r0
 8007e18:	4b0b      	ldr	r3, [pc, #44]	; (8007e48 <HAL_RCC_ClockConfig+0x1bc>)
 8007e1a:	689b      	ldr	r3, [r3, #8]
 8007e1c:	091b      	lsrs	r3, r3, #4
 8007e1e:	f003 030f 	and.w	r3, r3, #15
 8007e22:	490a      	ldr	r1, [pc, #40]	; (8007e4c <HAL_RCC_ClockConfig+0x1c0>)
 8007e24:	5ccb      	ldrb	r3, [r1, r3]
 8007e26:	fa22 f303 	lsr.w	r3, r2, r3
 8007e2a:	4a09      	ldr	r2, [pc, #36]	; (8007e50 <HAL_RCC_ClockConfig+0x1c4>)
 8007e2c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8007e2e:	4b09      	ldr	r3, [pc, #36]	; (8007e54 <HAL_RCC_ClockConfig+0x1c8>)
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	4618      	mov	r0, r3
 8007e34:	f7fb f814 	bl	8002e60 <HAL_InitTick>

  return HAL_OK;
 8007e38:	2300      	movs	r3, #0
}
 8007e3a:	4618      	mov	r0, r3
 8007e3c:	3710      	adds	r7, #16
 8007e3e:	46bd      	mov	sp, r7
 8007e40:	bd80      	pop	{r7, pc}
 8007e42:	bf00      	nop
 8007e44:	40023c00 	.word	0x40023c00
 8007e48:	40023800 	.word	0x40023800
 8007e4c:	0800d2dc 	.word	0x0800d2dc
 8007e50:	20000018 	.word	0x20000018
 8007e54:	2000001c 	.word	0x2000001c

08007e58 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007e58:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8007e5c:	b084      	sub	sp, #16
 8007e5e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8007e60:	2300      	movs	r3, #0
 8007e62:	607b      	str	r3, [r7, #4]
 8007e64:	2300      	movs	r3, #0
 8007e66:	60fb      	str	r3, [r7, #12]
 8007e68:	2300      	movs	r3, #0
 8007e6a:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8007e6c:	2300      	movs	r3, #0
 8007e6e:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007e70:	4b67      	ldr	r3, [pc, #412]	; (8008010 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8007e72:	689b      	ldr	r3, [r3, #8]
 8007e74:	f003 030c 	and.w	r3, r3, #12
 8007e78:	2b08      	cmp	r3, #8
 8007e7a:	d00d      	beq.n	8007e98 <HAL_RCC_GetSysClockFreq+0x40>
 8007e7c:	2b08      	cmp	r3, #8
 8007e7e:	f200 80bd 	bhi.w	8007ffc <HAL_RCC_GetSysClockFreq+0x1a4>
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d002      	beq.n	8007e8c <HAL_RCC_GetSysClockFreq+0x34>
 8007e86:	2b04      	cmp	r3, #4
 8007e88:	d003      	beq.n	8007e92 <HAL_RCC_GetSysClockFreq+0x3a>
 8007e8a:	e0b7      	b.n	8007ffc <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007e8c:	4b61      	ldr	r3, [pc, #388]	; (8008014 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8007e8e:	60bb      	str	r3, [r7, #8]
       break;
 8007e90:	e0b7      	b.n	8008002 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007e92:	4b61      	ldr	r3, [pc, #388]	; (8008018 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8007e94:	60bb      	str	r3, [r7, #8]
      break;
 8007e96:	e0b4      	b.n	8008002 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007e98:	4b5d      	ldr	r3, [pc, #372]	; (8008010 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8007e9a:	685b      	ldr	r3, [r3, #4]
 8007e9c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007ea0:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007ea2:	4b5b      	ldr	r3, [pc, #364]	; (8008010 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8007ea4:	685b      	ldr	r3, [r3, #4]
 8007ea6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	d04d      	beq.n	8007f4a <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007eae:	4b58      	ldr	r3, [pc, #352]	; (8008010 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8007eb0:	685b      	ldr	r3, [r3, #4]
 8007eb2:	099b      	lsrs	r3, r3, #6
 8007eb4:	461a      	mov	r2, r3
 8007eb6:	f04f 0300 	mov.w	r3, #0
 8007eba:	f240 10ff 	movw	r0, #511	; 0x1ff
 8007ebe:	f04f 0100 	mov.w	r1, #0
 8007ec2:	ea02 0800 	and.w	r8, r2, r0
 8007ec6:	ea03 0901 	and.w	r9, r3, r1
 8007eca:	4640      	mov	r0, r8
 8007ecc:	4649      	mov	r1, r9
 8007ece:	f04f 0200 	mov.w	r2, #0
 8007ed2:	f04f 0300 	mov.w	r3, #0
 8007ed6:	014b      	lsls	r3, r1, #5
 8007ed8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8007edc:	0142      	lsls	r2, r0, #5
 8007ede:	4610      	mov	r0, r2
 8007ee0:	4619      	mov	r1, r3
 8007ee2:	ebb0 0008 	subs.w	r0, r0, r8
 8007ee6:	eb61 0109 	sbc.w	r1, r1, r9
 8007eea:	f04f 0200 	mov.w	r2, #0
 8007eee:	f04f 0300 	mov.w	r3, #0
 8007ef2:	018b      	lsls	r3, r1, #6
 8007ef4:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8007ef8:	0182      	lsls	r2, r0, #6
 8007efa:	1a12      	subs	r2, r2, r0
 8007efc:	eb63 0301 	sbc.w	r3, r3, r1
 8007f00:	f04f 0000 	mov.w	r0, #0
 8007f04:	f04f 0100 	mov.w	r1, #0
 8007f08:	00d9      	lsls	r1, r3, #3
 8007f0a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007f0e:	00d0      	lsls	r0, r2, #3
 8007f10:	4602      	mov	r2, r0
 8007f12:	460b      	mov	r3, r1
 8007f14:	eb12 0208 	adds.w	r2, r2, r8
 8007f18:	eb43 0309 	adc.w	r3, r3, r9
 8007f1c:	f04f 0000 	mov.w	r0, #0
 8007f20:	f04f 0100 	mov.w	r1, #0
 8007f24:	0259      	lsls	r1, r3, #9
 8007f26:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8007f2a:	0250      	lsls	r0, r2, #9
 8007f2c:	4602      	mov	r2, r0
 8007f2e:	460b      	mov	r3, r1
 8007f30:	4610      	mov	r0, r2
 8007f32:	4619      	mov	r1, r3
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	461a      	mov	r2, r3
 8007f38:	f04f 0300 	mov.w	r3, #0
 8007f3c:	f7f8 fe84 	bl	8000c48 <__aeabi_uldivmod>
 8007f40:	4602      	mov	r2, r0
 8007f42:	460b      	mov	r3, r1
 8007f44:	4613      	mov	r3, r2
 8007f46:	60fb      	str	r3, [r7, #12]
 8007f48:	e04a      	b.n	8007fe0 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007f4a:	4b31      	ldr	r3, [pc, #196]	; (8008010 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8007f4c:	685b      	ldr	r3, [r3, #4]
 8007f4e:	099b      	lsrs	r3, r3, #6
 8007f50:	461a      	mov	r2, r3
 8007f52:	f04f 0300 	mov.w	r3, #0
 8007f56:	f240 10ff 	movw	r0, #511	; 0x1ff
 8007f5a:	f04f 0100 	mov.w	r1, #0
 8007f5e:	ea02 0400 	and.w	r4, r2, r0
 8007f62:	ea03 0501 	and.w	r5, r3, r1
 8007f66:	4620      	mov	r0, r4
 8007f68:	4629      	mov	r1, r5
 8007f6a:	f04f 0200 	mov.w	r2, #0
 8007f6e:	f04f 0300 	mov.w	r3, #0
 8007f72:	014b      	lsls	r3, r1, #5
 8007f74:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8007f78:	0142      	lsls	r2, r0, #5
 8007f7a:	4610      	mov	r0, r2
 8007f7c:	4619      	mov	r1, r3
 8007f7e:	1b00      	subs	r0, r0, r4
 8007f80:	eb61 0105 	sbc.w	r1, r1, r5
 8007f84:	f04f 0200 	mov.w	r2, #0
 8007f88:	f04f 0300 	mov.w	r3, #0
 8007f8c:	018b      	lsls	r3, r1, #6
 8007f8e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8007f92:	0182      	lsls	r2, r0, #6
 8007f94:	1a12      	subs	r2, r2, r0
 8007f96:	eb63 0301 	sbc.w	r3, r3, r1
 8007f9a:	f04f 0000 	mov.w	r0, #0
 8007f9e:	f04f 0100 	mov.w	r1, #0
 8007fa2:	00d9      	lsls	r1, r3, #3
 8007fa4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007fa8:	00d0      	lsls	r0, r2, #3
 8007faa:	4602      	mov	r2, r0
 8007fac:	460b      	mov	r3, r1
 8007fae:	1912      	adds	r2, r2, r4
 8007fb0:	eb45 0303 	adc.w	r3, r5, r3
 8007fb4:	f04f 0000 	mov.w	r0, #0
 8007fb8:	f04f 0100 	mov.w	r1, #0
 8007fbc:	0299      	lsls	r1, r3, #10
 8007fbe:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8007fc2:	0290      	lsls	r0, r2, #10
 8007fc4:	4602      	mov	r2, r0
 8007fc6:	460b      	mov	r3, r1
 8007fc8:	4610      	mov	r0, r2
 8007fca:	4619      	mov	r1, r3
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	461a      	mov	r2, r3
 8007fd0:	f04f 0300 	mov.w	r3, #0
 8007fd4:	f7f8 fe38 	bl	8000c48 <__aeabi_uldivmod>
 8007fd8:	4602      	mov	r2, r0
 8007fda:	460b      	mov	r3, r1
 8007fdc:	4613      	mov	r3, r2
 8007fde:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8007fe0:	4b0b      	ldr	r3, [pc, #44]	; (8008010 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8007fe2:	685b      	ldr	r3, [r3, #4]
 8007fe4:	0c1b      	lsrs	r3, r3, #16
 8007fe6:	f003 0303 	and.w	r3, r3, #3
 8007fea:	3301      	adds	r3, #1
 8007fec:	005b      	lsls	r3, r3, #1
 8007fee:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8007ff0:	68fa      	ldr	r2, [r7, #12]
 8007ff2:	683b      	ldr	r3, [r7, #0]
 8007ff4:	fbb2 f3f3 	udiv	r3, r2, r3
 8007ff8:	60bb      	str	r3, [r7, #8]
      break;
 8007ffa:	e002      	b.n	8008002 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007ffc:	4b05      	ldr	r3, [pc, #20]	; (8008014 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8007ffe:	60bb      	str	r3, [r7, #8]
      break;
 8008000:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008002:	68bb      	ldr	r3, [r7, #8]
}
 8008004:	4618      	mov	r0, r3
 8008006:	3710      	adds	r7, #16
 8008008:	46bd      	mov	sp, r7
 800800a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800800e:	bf00      	nop
 8008010:	40023800 	.word	0x40023800
 8008014:	00f42400 	.word	0x00f42400
 8008018:	007a1200 	.word	0x007a1200

0800801c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800801c:	b480      	push	{r7}
 800801e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008020:	4b03      	ldr	r3, [pc, #12]	; (8008030 <HAL_RCC_GetHCLKFreq+0x14>)
 8008022:	681b      	ldr	r3, [r3, #0]
}
 8008024:	4618      	mov	r0, r3
 8008026:	46bd      	mov	sp, r7
 8008028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800802c:	4770      	bx	lr
 800802e:	bf00      	nop
 8008030:	20000018 	.word	0x20000018

08008034 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008034:	b580      	push	{r7, lr}
 8008036:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8008038:	f7ff fff0 	bl	800801c <HAL_RCC_GetHCLKFreq>
 800803c:	4602      	mov	r2, r0
 800803e:	4b05      	ldr	r3, [pc, #20]	; (8008054 <HAL_RCC_GetPCLK1Freq+0x20>)
 8008040:	689b      	ldr	r3, [r3, #8]
 8008042:	0a9b      	lsrs	r3, r3, #10
 8008044:	f003 0307 	and.w	r3, r3, #7
 8008048:	4903      	ldr	r1, [pc, #12]	; (8008058 <HAL_RCC_GetPCLK1Freq+0x24>)
 800804a:	5ccb      	ldrb	r3, [r1, r3]
 800804c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008050:	4618      	mov	r0, r3
 8008052:	bd80      	pop	{r7, pc}
 8008054:	40023800 	.word	0x40023800
 8008058:	0800d2ec 	.word	0x0800d2ec

0800805c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800805c:	b580      	push	{r7, lr}
 800805e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8008060:	f7ff ffdc 	bl	800801c <HAL_RCC_GetHCLKFreq>
 8008064:	4602      	mov	r2, r0
 8008066:	4b05      	ldr	r3, [pc, #20]	; (800807c <HAL_RCC_GetPCLK2Freq+0x20>)
 8008068:	689b      	ldr	r3, [r3, #8]
 800806a:	0b5b      	lsrs	r3, r3, #13
 800806c:	f003 0307 	and.w	r3, r3, #7
 8008070:	4903      	ldr	r1, [pc, #12]	; (8008080 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008072:	5ccb      	ldrb	r3, [r1, r3]
 8008074:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008078:	4618      	mov	r0, r3
 800807a:	bd80      	pop	{r7, pc}
 800807c:	40023800 	.word	0x40023800
 8008080:	0800d2ec 	.word	0x0800d2ec

08008084 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008084:	b580      	push	{r7, lr}
 8008086:	b082      	sub	sp, #8
 8008088:	af00      	add	r7, sp, #0
 800808a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	2b00      	cmp	r3, #0
 8008090:	d101      	bne.n	8008096 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008092:	2301      	movs	r3, #1
 8008094:	e041      	b.n	800811a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800809c:	b2db      	uxtb	r3, r3
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d106      	bne.n	80080b0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	2200      	movs	r2, #0
 80080a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80080aa:	6878      	ldr	r0, [r7, #4]
 80080ac:	f7fa fc3e 	bl	800292c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	2202      	movs	r2, #2
 80080b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	681a      	ldr	r2, [r3, #0]
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	3304      	adds	r3, #4
 80080c0:	4619      	mov	r1, r3
 80080c2:	4610      	mov	r0, r2
 80080c4:	f000 fafe 	bl	80086c4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	2201      	movs	r2, #1
 80080cc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	2201      	movs	r2, #1
 80080d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	2201      	movs	r2, #1
 80080dc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	2201      	movs	r2, #1
 80080e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	2201      	movs	r2, #1
 80080ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	2201      	movs	r2, #1
 80080f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	2201      	movs	r2, #1
 80080fc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	2201      	movs	r2, #1
 8008104:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	2201      	movs	r2, #1
 800810c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	2201      	movs	r2, #1
 8008114:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008118:	2300      	movs	r3, #0
}
 800811a:	4618      	mov	r0, r3
 800811c:	3708      	adds	r7, #8
 800811e:	46bd      	mov	sp, r7
 8008120:	bd80      	pop	{r7, pc}
	...

08008124 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8008124:	b480      	push	{r7}
 8008126:	b085      	sub	sp, #20
 8008128:	af00      	add	r7, sp, #0
 800812a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008132:	b2db      	uxtb	r3, r3
 8008134:	2b01      	cmp	r3, #1
 8008136:	d001      	beq.n	800813c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8008138:	2301      	movs	r3, #1
 800813a:	e046      	b.n	80081ca <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	2202      	movs	r2, #2
 8008140:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	4a23      	ldr	r2, [pc, #140]	; (80081d8 <HAL_TIM_Base_Start+0xb4>)
 800814a:	4293      	cmp	r3, r2
 800814c:	d022      	beq.n	8008194 <HAL_TIM_Base_Start+0x70>
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008156:	d01d      	beq.n	8008194 <HAL_TIM_Base_Start+0x70>
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	4a1f      	ldr	r2, [pc, #124]	; (80081dc <HAL_TIM_Base_Start+0xb8>)
 800815e:	4293      	cmp	r3, r2
 8008160:	d018      	beq.n	8008194 <HAL_TIM_Base_Start+0x70>
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	4a1e      	ldr	r2, [pc, #120]	; (80081e0 <HAL_TIM_Base_Start+0xbc>)
 8008168:	4293      	cmp	r3, r2
 800816a:	d013      	beq.n	8008194 <HAL_TIM_Base_Start+0x70>
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	4a1c      	ldr	r2, [pc, #112]	; (80081e4 <HAL_TIM_Base_Start+0xc0>)
 8008172:	4293      	cmp	r3, r2
 8008174:	d00e      	beq.n	8008194 <HAL_TIM_Base_Start+0x70>
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	4a1b      	ldr	r2, [pc, #108]	; (80081e8 <HAL_TIM_Base_Start+0xc4>)
 800817c:	4293      	cmp	r3, r2
 800817e:	d009      	beq.n	8008194 <HAL_TIM_Base_Start+0x70>
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	4a19      	ldr	r2, [pc, #100]	; (80081ec <HAL_TIM_Base_Start+0xc8>)
 8008186:	4293      	cmp	r3, r2
 8008188:	d004      	beq.n	8008194 <HAL_TIM_Base_Start+0x70>
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	4a18      	ldr	r2, [pc, #96]	; (80081f0 <HAL_TIM_Base_Start+0xcc>)
 8008190:	4293      	cmp	r3, r2
 8008192:	d111      	bne.n	80081b8 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	689b      	ldr	r3, [r3, #8]
 800819a:	f003 0307 	and.w	r3, r3, #7
 800819e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	2b06      	cmp	r3, #6
 80081a4:	d010      	beq.n	80081c8 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	681a      	ldr	r2, [r3, #0]
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	f042 0201 	orr.w	r2, r2, #1
 80081b4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80081b6:	e007      	b.n	80081c8 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	681a      	ldr	r2, [r3, #0]
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	f042 0201 	orr.w	r2, r2, #1
 80081c6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80081c8:	2300      	movs	r3, #0
}
 80081ca:	4618      	mov	r0, r3
 80081cc:	3714      	adds	r7, #20
 80081ce:	46bd      	mov	sp, r7
 80081d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081d4:	4770      	bx	lr
 80081d6:	bf00      	nop
 80081d8:	40010000 	.word	0x40010000
 80081dc:	40000400 	.word	0x40000400
 80081e0:	40000800 	.word	0x40000800
 80081e4:	40000c00 	.word	0x40000c00
 80081e8:	40010400 	.word	0x40010400
 80081ec:	40014000 	.word	0x40014000
 80081f0:	40001800 	.word	0x40001800

080081f4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80081f4:	b480      	push	{r7}
 80081f6:	b085      	sub	sp, #20
 80081f8:	af00      	add	r7, sp, #0
 80081fa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008202:	b2db      	uxtb	r3, r3
 8008204:	2b01      	cmp	r3, #1
 8008206:	d001      	beq.n	800820c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008208:	2301      	movs	r3, #1
 800820a:	e04e      	b.n	80082aa <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	2202      	movs	r2, #2
 8008210:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	68da      	ldr	r2, [r3, #12]
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	f042 0201 	orr.w	r2, r2, #1
 8008222:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	4a23      	ldr	r2, [pc, #140]	; (80082b8 <HAL_TIM_Base_Start_IT+0xc4>)
 800822a:	4293      	cmp	r3, r2
 800822c:	d022      	beq.n	8008274 <HAL_TIM_Base_Start_IT+0x80>
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008236:	d01d      	beq.n	8008274 <HAL_TIM_Base_Start_IT+0x80>
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	4a1f      	ldr	r2, [pc, #124]	; (80082bc <HAL_TIM_Base_Start_IT+0xc8>)
 800823e:	4293      	cmp	r3, r2
 8008240:	d018      	beq.n	8008274 <HAL_TIM_Base_Start_IT+0x80>
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	4a1e      	ldr	r2, [pc, #120]	; (80082c0 <HAL_TIM_Base_Start_IT+0xcc>)
 8008248:	4293      	cmp	r3, r2
 800824a:	d013      	beq.n	8008274 <HAL_TIM_Base_Start_IT+0x80>
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	4a1c      	ldr	r2, [pc, #112]	; (80082c4 <HAL_TIM_Base_Start_IT+0xd0>)
 8008252:	4293      	cmp	r3, r2
 8008254:	d00e      	beq.n	8008274 <HAL_TIM_Base_Start_IT+0x80>
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	4a1b      	ldr	r2, [pc, #108]	; (80082c8 <HAL_TIM_Base_Start_IT+0xd4>)
 800825c:	4293      	cmp	r3, r2
 800825e:	d009      	beq.n	8008274 <HAL_TIM_Base_Start_IT+0x80>
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	4a19      	ldr	r2, [pc, #100]	; (80082cc <HAL_TIM_Base_Start_IT+0xd8>)
 8008266:	4293      	cmp	r3, r2
 8008268:	d004      	beq.n	8008274 <HAL_TIM_Base_Start_IT+0x80>
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	4a18      	ldr	r2, [pc, #96]	; (80082d0 <HAL_TIM_Base_Start_IT+0xdc>)
 8008270:	4293      	cmp	r3, r2
 8008272:	d111      	bne.n	8008298 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	689b      	ldr	r3, [r3, #8]
 800827a:	f003 0307 	and.w	r3, r3, #7
 800827e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	2b06      	cmp	r3, #6
 8008284:	d010      	beq.n	80082a8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	681a      	ldr	r2, [r3, #0]
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	f042 0201 	orr.w	r2, r2, #1
 8008294:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008296:	e007      	b.n	80082a8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	681a      	ldr	r2, [r3, #0]
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	f042 0201 	orr.w	r2, r2, #1
 80082a6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80082a8:	2300      	movs	r3, #0
}
 80082aa:	4618      	mov	r0, r3
 80082ac:	3714      	adds	r7, #20
 80082ae:	46bd      	mov	sp, r7
 80082b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082b4:	4770      	bx	lr
 80082b6:	bf00      	nop
 80082b8:	40010000 	.word	0x40010000
 80082bc:	40000400 	.word	0x40000400
 80082c0:	40000800 	.word	0x40000800
 80082c4:	40000c00 	.word	0x40000c00
 80082c8:	40010400 	.word	0x40010400
 80082cc:	40014000 	.word	0x40014000
 80082d0:	40001800 	.word	0x40001800

080082d4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80082d4:	b580      	push	{r7, lr}
 80082d6:	b082      	sub	sp, #8
 80082d8:	af00      	add	r7, sp, #0
 80082da:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	691b      	ldr	r3, [r3, #16]
 80082e2:	f003 0302 	and.w	r3, r3, #2
 80082e6:	2b02      	cmp	r3, #2
 80082e8:	d122      	bne.n	8008330 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	68db      	ldr	r3, [r3, #12]
 80082f0:	f003 0302 	and.w	r3, r3, #2
 80082f4:	2b02      	cmp	r3, #2
 80082f6:	d11b      	bne.n	8008330 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	f06f 0202 	mvn.w	r2, #2
 8008300:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	2201      	movs	r2, #1
 8008306:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	699b      	ldr	r3, [r3, #24]
 800830e:	f003 0303 	and.w	r3, r3, #3
 8008312:	2b00      	cmp	r3, #0
 8008314:	d003      	beq.n	800831e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008316:	6878      	ldr	r0, [r7, #4]
 8008318:	f000 f9b5 	bl	8008686 <HAL_TIM_IC_CaptureCallback>
 800831c:	e005      	b.n	800832a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800831e:	6878      	ldr	r0, [r7, #4]
 8008320:	f000 f9a7 	bl	8008672 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008324:	6878      	ldr	r0, [r7, #4]
 8008326:	f000 f9b8 	bl	800869a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	2200      	movs	r2, #0
 800832e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	691b      	ldr	r3, [r3, #16]
 8008336:	f003 0304 	and.w	r3, r3, #4
 800833a:	2b04      	cmp	r3, #4
 800833c:	d122      	bne.n	8008384 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	68db      	ldr	r3, [r3, #12]
 8008344:	f003 0304 	and.w	r3, r3, #4
 8008348:	2b04      	cmp	r3, #4
 800834a:	d11b      	bne.n	8008384 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	f06f 0204 	mvn.w	r2, #4
 8008354:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	2202      	movs	r2, #2
 800835a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	699b      	ldr	r3, [r3, #24]
 8008362:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008366:	2b00      	cmp	r3, #0
 8008368:	d003      	beq.n	8008372 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800836a:	6878      	ldr	r0, [r7, #4]
 800836c:	f000 f98b 	bl	8008686 <HAL_TIM_IC_CaptureCallback>
 8008370:	e005      	b.n	800837e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008372:	6878      	ldr	r0, [r7, #4]
 8008374:	f000 f97d 	bl	8008672 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008378:	6878      	ldr	r0, [r7, #4]
 800837a:	f000 f98e 	bl	800869a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	2200      	movs	r2, #0
 8008382:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	691b      	ldr	r3, [r3, #16]
 800838a:	f003 0308 	and.w	r3, r3, #8
 800838e:	2b08      	cmp	r3, #8
 8008390:	d122      	bne.n	80083d8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	68db      	ldr	r3, [r3, #12]
 8008398:	f003 0308 	and.w	r3, r3, #8
 800839c:	2b08      	cmp	r3, #8
 800839e:	d11b      	bne.n	80083d8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	f06f 0208 	mvn.w	r2, #8
 80083a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	2204      	movs	r2, #4
 80083ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	69db      	ldr	r3, [r3, #28]
 80083b6:	f003 0303 	and.w	r3, r3, #3
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	d003      	beq.n	80083c6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80083be:	6878      	ldr	r0, [r7, #4]
 80083c0:	f000 f961 	bl	8008686 <HAL_TIM_IC_CaptureCallback>
 80083c4:	e005      	b.n	80083d2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80083c6:	6878      	ldr	r0, [r7, #4]
 80083c8:	f000 f953 	bl	8008672 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80083cc:	6878      	ldr	r0, [r7, #4]
 80083ce:	f000 f964 	bl	800869a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	2200      	movs	r2, #0
 80083d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	691b      	ldr	r3, [r3, #16]
 80083de:	f003 0310 	and.w	r3, r3, #16
 80083e2:	2b10      	cmp	r3, #16
 80083e4:	d122      	bne.n	800842c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	68db      	ldr	r3, [r3, #12]
 80083ec:	f003 0310 	and.w	r3, r3, #16
 80083f0:	2b10      	cmp	r3, #16
 80083f2:	d11b      	bne.n	800842c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	f06f 0210 	mvn.w	r2, #16
 80083fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	2208      	movs	r2, #8
 8008402:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	69db      	ldr	r3, [r3, #28]
 800840a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800840e:	2b00      	cmp	r3, #0
 8008410:	d003      	beq.n	800841a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008412:	6878      	ldr	r0, [r7, #4]
 8008414:	f000 f937 	bl	8008686 <HAL_TIM_IC_CaptureCallback>
 8008418:	e005      	b.n	8008426 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800841a:	6878      	ldr	r0, [r7, #4]
 800841c:	f000 f929 	bl	8008672 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008420:	6878      	ldr	r0, [r7, #4]
 8008422:	f000 f93a 	bl	800869a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	2200      	movs	r2, #0
 800842a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	691b      	ldr	r3, [r3, #16]
 8008432:	f003 0301 	and.w	r3, r3, #1
 8008436:	2b01      	cmp	r3, #1
 8008438:	d10e      	bne.n	8008458 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	68db      	ldr	r3, [r3, #12]
 8008440:	f003 0301 	and.w	r3, r3, #1
 8008444:	2b01      	cmp	r3, #1
 8008446:	d107      	bne.n	8008458 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	f06f 0201 	mvn.w	r2, #1
 8008450:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008452:	6878      	ldr	r0, [r7, #4]
 8008454:	f7f9 fa20 	bl	8001898 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	691b      	ldr	r3, [r3, #16]
 800845e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008462:	2b80      	cmp	r3, #128	; 0x80
 8008464:	d10e      	bne.n	8008484 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	68db      	ldr	r3, [r3, #12]
 800846c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008470:	2b80      	cmp	r3, #128	; 0x80
 8008472:	d107      	bne.n	8008484 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800847c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800847e:	6878      	ldr	r0, [r7, #4]
 8008480:	f000 fae0 	bl	8008a44 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	691b      	ldr	r3, [r3, #16]
 800848a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800848e:	2b40      	cmp	r3, #64	; 0x40
 8008490:	d10e      	bne.n	80084b0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	68db      	ldr	r3, [r3, #12]
 8008498:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800849c:	2b40      	cmp	r3, #64	; 0x40
 800849e:	d107      	bne.n	80084b0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80084a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80084aa:	6878      	ldr	r0, [r7, #4]
 80084ac:	f000 f8ff 	bl	80086ae <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	691b      	ldr	r3, [r3, #16]
 80084b6:	f003 0320 	and.w	r3, r3, #32
 80084ba:	2b20      	cmp	r3, #32
 80084bc:	d10e      	bne.n	80084dc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	68db      	ldr	r3, [r3, #12]
 80084c4:	f003 0320 	and.w	r3, r3, #32
 80084c8:	2b20      	cmp	r3, #32
 80084ca:	d107      	bne.n	80084dc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	f06f 0220 	mvn.w	r2, #32
 80084d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80084d6:	6878      	ldr	r0, [r7, #4]
 80084d8:	f000 faaa 	bl	8008a30 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80084dc:	bf00      	nop
 80084de:	3708      	adds	r7, #8
 80084e0:	46bd      	mov	sp, r7
 80084e2:	bd80      	pop	{r7, pc}

080084e4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80084e4:	b580      	push	{r7, lr}
 80084e6:	b084      	sub	sp, #16
 80084e8:	af00      	add	r7, sp, #0
 80084ea:	6078      	str	r0, [r7, #4]
 80084ec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80084ee:	2300      	movs	r3, #0
 80084f0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80084f8:	2b01      	cmp	r3, #1
 80084fa:	d101      	bne.n	8008500 <HAL_TIM_ConfigClockSource+0x1c>
 80084fc:	2302      	movs	r3, #2
 80084fe:	e0b4      	b.n	800866a <HAL_TIM_ConfigClockSource+0x186>
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	2201      	movs	r2, #1
 8008504:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	2202      	movs	r2, #2
 800850c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	689b      	ldr	r3, [r3, #8]
 8008516:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008518:	68bb      	ldr	r3, [r7, #8]
 800851a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800851e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008520:	68bb      	ldr	r3, [r7, #8]
 8008522:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008526:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	68ba      	ldr	r2, [r7, #8]
 800852e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008530:	683b      	ldr	r3, [r7, #0]
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008538:	d03e      	beq.n	80085b8 <HAL_TIM_ConfigClockSource+0xd4>
 800853a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800853e:	f200 8087 	bhi.w	8008650 <HAL_TIM_ConfigClockSource+0x16c>
 8008542:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008546:	f000 8086 	beq.w	8008656 <HAL_TIM_ConfigClockSource+0x172>
 800854a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800854e:	d87f      	bhi.n	8008650 <HAL_TIM_ConfigClockSource+0x16c>
 8008550:	2b70      	cmp	r3, #112	; 0x70
 8008552:	d01a      	beq.n	800858a <HAL_TIM_ConfigClockSource+0xa6>
 8008554:	2b70      	cmp	r3, #112	; 0x70
 8008556:	d87b      	bhi.n	8008650 <HAL_TIM_ConfigClockSource+0x16c>
 8008558:	2b60      	cmp	r3, #96	; 0x60
 800855a:	d050      	beq.n	80085fe <HAL_TIM_ConfigClockSource+0x11a>
 800855c:	2b60      	cmp	r3, #96	; 0x60
 800855e:	d877      	bhi.n	8008650 <HAL_TIM_ConfigClockSource+0x16c>
 8008560:	2b50      	cmp	r3, #80	; 0x50
 8008562:	d03c      	beq.n	80085de <HAL_TIM_ConfigClockSource+0xfa>
 8008564:	2b50      	cmp	r3, #80	; 0x50
 8008566:	d873      	bhi.n	8008650 <HAL_TIM_ConfigClockSource+0x16c>
 8008568:	2b40      	cmp	r3, #64	; 0x40
 800856a:	d058      	beq.n	800861e <HAL_TIM_ConfigClockSource+0x13a>
 800856c:	2b40      	cmp	r3, #64	; 0x40
 800856e:	d86f      	bhi.n	8008650 <HAL_TIM_ConfigClockSource+0x16c>
 8008570:	2b30      	cmp	r3, #48	; 0x30
 8008572:	d064      	beq.n	800863e <HAL_TIM_ConfigClockSource+0x15a>
 8008574:	2b30      	cmp	r3, #48	; 0x30
 8008576:	d86b      	bhi.n	8008650 <HAL_TIM_ConfigClockSource+0x16c>
 8008578:	2b20      	cmp	r3, #32
 800857a:	d060      	beq.n	800863e <HAL_TIM_ConfigClockSource+0x15a>
 800857c:	2b20      	cmp	r3, #32
 800857e:	d867      	bhi.n	8008650 <HAL_TIM_ConfigClockSource+0x16c>
 8008580:	2b00      	cmp	r3, #0
 8008582:	d05c      	beq.n	800863e <HAL_TIM_ConfigClockSource+0x15a>
 8008584:	2b10      	cmp	r3, #16
 8008586:	d05a      	beq.n	800863e <HAL_TIM_ConfigClockSource+0x15a>
 8008588:	e062      	b.n	8008650 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	6818      	ldr	r0, [r3, #0]
 800858e:	683b      	ldr	r3, [r7, #0]
 8008590:	6899      	ldr	r1, [r3, #8]
 8008592:	683b      	ldr	r3, [r7, #0]
 8008594:	685a      	ldr	r2, [r3, #4]
 8008596:	683b      	ldr	r3, [r7, #0]
 8008598:	68db      	ldr	r3, [r3, #12]
 800859a:	f000 f9ad 	bl	80088f8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	689b      	ldr	r3, [r3, #8]
 80085a4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80085a6:	68bb      	ldr	r3, [r7, #8]
 80085a8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80085ac:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	68ba      	ldr	r2, [r7, #8]
 80085b4:	609a      	str	r2, [r3, #8]
      break;
 80085b6:	e04f      	b.n	8008658 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	6818      	ldr	r0, [r3, #0]
 80085bc:	683b      	ldr	r3, [r7, #0]
 80085be:	6899      	ldr	r1, [r3, #8]
 80085c0:	683b      	ldr	r3, [r7, #0]
 80085c2:	685a      	ldr	r2, [r3, #4]
 80085c4:	683b      	ldr	r3, [r7, #0]
 80085c6:	68db      	ldr	r3, [r3, #12]
 80085c8:	f000 f996 	bl	80088f8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	689a      	ldr	r2, [r3, #8]
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80085da:	609a      	str	r2, [r3, #8]
      break;
 80085dc:	e03c      	b.n	8008658 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	6818      	ldr	r0, [r3, #0]
 80085e2:	683b      	ldr	r3, [r7, #0]
 80085e4:	6859      	ldr	r1, [r3, #4]
 80085e6:	683b      	ldr	r3, [r7, #0]
 80085e8:	68db      	ldr	r3, [r3, #12]
 80085ea:	461a      	mov	r2, r3
 80085ec:	f000 f90a 	bl	8008804 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	2150      	movs	r1, #80	; 0x50
 80085f6:	4618      	mov	r0, r3
 80085f8:	f000 f963 	bl	80088c2 <TIM_ITRx_SetConfig>
      break;
 80085fc:	e02c      	b.n	8008658 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	6818      	ldr	r0, [r3, #0]
 8008602:	683b      	ldr	r3, [r7, #0]
 8008604:	6859      	ldr	r1, [r3, #4]
 8008606:	683b      	ldr	r3, [r7, #0]
 8008608:	68db      	ldr	r3, [r3, #12]
 800860a:	461a      	mov	r2, r3
 800860c:	f000 f929 	bl	8008862 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	2160      	movs	r1, #96	; 0x60
 8008616:	4618      	mov	r0, r3
 8008618:	f000 f953 	bl	80088c2 <TIM_ITRx_SetConfig>
      break;
 800861c:	e01c      	b.n	8008658 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	6818      	ldr	r0, [r3, #0]
 8008622:	683b      	ldr	r3, [r7, #0]
 8008624:	6859      	ldr	r1, [r3, #4]
 8008626:	683b      	ldr	r3, [r7, #0]
 8008628:	68db      	ldr	r3, [r3, #12]
 800862a:	461a      	mov	r2, r3
 800862c:	f000 f8ea 	bl	8008804 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	2140      	movs	r1, #64	; 0x40
 8008636:	4618      	mov	r0, r3
 8008638:	f000 f943 	bl	80088c2 <TIM_ITRx_SetConfig>
      break;
 800863c:	e00c      	b.n	8008658 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	681a      	ldr	r2, [r3, #0]
 8008642:	683b      	ldr	r3, [r7, #0]
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	4619      	mov	r1, r3
 8008648:	4610      	mov	r0, r2
 800864a:	f000 f93a 	bl	80088c2 <TIM_ITRx_SetConfig>
      break;
 800864e:	e003      	b.n	8008658 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8008650:	2301      	movs	r3, #1
 8008652:	73fb      	strb	r3, [r7, #15]
      break;
 8008654:	e000      	b.n	8008658 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8008656:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	2201      	movs	r2, #1
 800865c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	2200      	movs	r2, #0
 8008664:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008668:	7bfb      	ldrb	r3, [r7, #15]
}
 800866a:	4618      	mov	r0, r3
 800866c:	3710      	adds	r7, #16
 800866e:	46bd      	mov	sp, r7
 8008670:	bd80      	pop	{r7, pc}

08008672 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008672:	b480      	push	{r7}
 8008674:	b083      	sub	sp, #12
 8008676:	af00      	add	r7, sp, #0
 8008678:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800867a:	bf00      	nop
 800867c:	370c      	adds	r7, #12
 800867e:	46bd      	mov	sp, r7
 8008680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008684:	4770      	bx	lr

08008686 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008686:	b480      	push	{r7}
 8008688:	b083      	sub	sp, #12
 800868a:	af00      	add	r7, sp, #0
 800868c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800868e:	bf00      	nop
 8008690:	370c      	adds	r7, #12
 8008692:	46bd      	mov	sp, r7
 8008694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008698:	4770      	bx	lr

0800869a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800869a:	b480      	push	{r7}
 800869c:	b083      	sub	sp, #12
 800869e:	af00      	add	r7, sp, #0
 80086a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80086a2:	bf00      	nop
 80086a4:	370c      	adds	r7, #12
 80086a6:	46bd      	mov	sp, r7
 80086a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ac:	4770      	bx	lr

080086ae <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80086ae:	b480      	push	{r7}
 80086b0:	b083      	sub	sp, #12
 80086b2:	af00      	add	r7, sp, #0
 80086b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80086b6:	bf00      	nop
 80086b8:	370c      	adds	r7, #12
 80086ba:	46bd      	mov	sp, r7
 80086bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086c0:	4770      	bx	lr
	...

080086c4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80086c4:	b480      	push	{r7}
 80086c6:	b085      	sub	sp, #20
 80086c8:	af00      	add	r7, sp, #0
 80086ca:	6078      	str	r0, [r7, #4]
 80086cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	4a40      	ldr	r2, [pc, #256]	; (80087d8 <TIM_Base_SetConfig+0x114>)
 80086d8:	4293      	cmp	r3, r2
 80086da:	d013      	beq.n	8008704 <TIM_Base_SetConfig+0x40>
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80086e2:	d00f      	beq.n	8008704 <TIM_Base_SetConfig+0x40>
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	4a3d      	ldr	r2, [pc, #244]	; (80087dc <TIM_Base_SetConfig+0x118>)
 80086e8:	4293      	cmp	r3, r2
 80086ea:	d00b      	beq.n	8008704 <TIM_Base_SetConfig+0x40>
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	4a3c      	ldr	r2, [pc, #240]	; (80087e0 <TIM_Base_SetConfig+0x11c>)
 80086f0:	4293      	cmp	r3, r2
 80086f2:	d007      	beq.n	8008704 <TIM_Base_SetConfig+0x40>
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	4a3b      	ldr	r2, [pc, #236]	; (80087e4 <TIM_Base_SetConfig+0x120>)
 80086f8:	4293      	cmp	r3, r2
 80086fa:	d003      	beq.n	8008704 <TIM_Base_SetConfig+0x40>
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	4a3a      	ldr	r2, [pc, #232]	; (80087e8 <TIM_Base_SetConfig+0x124>)
 8008700:	4293      	cmp	r3, r2
 8008702:	d108      	bne.n	8008716 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008704:	68fb      	ldr	r3, [r7, #12]
 8008706:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800870a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800870c:	683b      	ldr	r3, [r7, #0]
 800870e:	685b      	ldr	r3, [r3, #4]
 8008710:	68fa      	ldr	r2, [r7, #12]
 8008712:	4313      	orrs	r3, r2
 8008714:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	4a2f      	ldr	r2, [pc, #188]	; (80087d8 <TIM_Base_SetConfig+0x114>)
 800871a:	4293      	cmp	r3, r2
 800871c:	d02b      	beq.n	8008776 <TIM_Base_SetConfig+0xb2>
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008724:	d027      	beq.n	8008776 <TIM_Base_SetConfig+0xb2>
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	4a2c      	ldr	r2, [pc, #176]	; (80087dc <TIM_Base_SetConfig+0x118>)
 800872a:	4293      	cmp	r3, r2
 800872c:	d023      	beq.n	8008776 <TIM_Base_SetConfig+0xb2>
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	4a2b      	ldr	r2, [pc, #172]	; (80087e0 <TIM_Base_SetConfig+0x11c>)
 8008732:	4293      	cmp	r3, r2
 8008734:	d01f      	beq.n	8008776 <TIM_Base_SetConfig+0xb2>
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	4a2a      	ldr	r2, [pc, #168]	; (80087e4 <TIM_Base_SetConfig+0x120>)
 800873a:	4293      	cmp	r3, r2
 800873c:	d01b      	beq.n	8008776 <TIM_Base_SetConfig+0xb2>
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	4a29      	ldr	r2, [pc, #164]	; (80087e8 <TIM_Base_SetConfig+0x124>)
 8008742:	4293      	cmp	r3, r2
 8008744:	d017      	beq.n	8008776 <TIM_Base_SetConfig+0xb2>
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	4a28      	ldr	r2, [pc, #160]	; (80087ec <TIM_Base_SetConfig+0x128>)
 800874a:	4293      	cmp	r3, r2
 800874c:	d013      	beq.n	8008776 <TIM_Base_SetConfig+0xb2>
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	4a27      	ldr	r2, [pc, #156]	; (80087f0 <TIM_Base_SetConfig+0x12c>)
 8008752:	4293      	cmp	r3, r2
 8008754:	d00f      	beq.n	8008776 <TIM_Base_SetConfig+0xb2>
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	4a26      	ldr	r2, [pc, #152]	; (80087f4 <TIM_Base_SetConfig+0x130>)
 800875a:	4293      	cmp	r3, r2
 800875c:	d00b      	beq.n	8008776 <TIM_Base_SetConfig+0xb2>
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	4a25      	ldr	r2, [pc, #148]	; (80087f8 <TIM_Base_SetConfig+0x134>)
 8008762:	4293      	cmp	r3, r2
 8008764:	d007      	beq.n	8008776 <TIM_Base_SetConfig+0xb2>
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	4a24      	ldr	r2, [pc, #144]	; (80087fc <TIM_Base_SetConfig+0x138>)
 800876a:	4293      	cmp	r3, r2
 800876c:	d003      	beq.n	8008776 <TIM_Base_SetConfig+0xb2>
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	4a23      	ldr	r2, [pc, #140]	; (8008800 <TIM_Base_SetConfig+0x13c>)
 8008772:	4293      	cmp	r3, r2
 8008774:	d108      	bne.n	8008788 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008776:	68fb      	ldr	r3, [r7, #12]
 8008778:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800877c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800877e:	683b      	ldr	r3, [r7, #0]
 8008780:	68db      	ldr	r3, [r3, #12]
 8008782:	68fa      	ldr	r2, [r7, #12]
 8008784:	4313      	orrs	r3, r2
 8008786:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008788:	68fb      	ldr	r3, [r7, #12]
 800878a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800878e:	683b      	ldr	r3, [r7, #0]
 8008790:	695b      	ldr	r3, [r3, #20]
 8008792:	4313      	orrs	r3, r2
 8008794:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	68fa      	ldr	r2, [r7, #12]
 800879a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800879c:	683b      	ldr	r3, [r7, #0]
 800879e:	689a      	ldr	r2, [r3, #8]
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80087a4:	683b      	ldr	r3, [r7, #0]
 80087a6:	681a      	ldr	r2, [r3, #0]
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	4a0a      	ldr	r2, [pc, #40]	; (80087d8 <TIM_Base_SetConfig+0x114>)
 80087b0:	4293      	cmp	r3, r2
 80087b2:	d003      	beq.n	80087bc <TIM_Base_SetConfig+0xf8>
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	4a0c      	ldr	r2, [pc, #48]	; (80087e8 <TIM_Base_SetConfig+0x124>)
 80087b8:	4293      	cmp	r3, r2
 80087ba:	d103      	bne.n	80087c4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80087bc:	683b      	ldr	r3, [r7, #0]
 80087be:	691a      	ldr	r2, [r3, #16]
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	2201      	movs	r2, #1
 80087c8:	615a      	str	r2, [r3, #20]
}
 80087ca:	bf00      	nop
 80087cc:	3714      	adds	r7, #20
 80087ce:	46bd      	mov	sp, r7
 80087d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087d4:	4770      	bx	lr
 80087d6:	bf00      	nop
 80087d8:	40010000 	.word	0x40010000
 80087dc:	40000400 	.word	0x40000400
 80087e0:	40000800 	.word	0x40000800
 80087e4:	40000c00 	.word	0x40000c00
 80087e8:	40010400 	.word	0x40010400
 80087ec:	40014000 	.word	0x40014000
 80087f0:	40014400 	.word	0x40014400
 80087f4:	40014800 	.word	0x40014800
 80087f8:	40001800 	.word	0x40001800
 80087fc:	40001c00 	.word	0x40001c00
 8008800:	40002000 	.word	0x40002000

08008804 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008804:	b480      	push	{r7}
 8008806:	b087      	sub	sp, #28
 8008808:	af00      	add	r7, sp, #0
 800880a:	60f8      	str	r0, [r7, #12]
 800880c:	60b9      	str	r1, [r7, #8]
 800880e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008810:	68fb      	ldr	r3, [r7, #12]
 8008812:	6a1b      	ldr	r3, [r3, #32]
 8008814:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008816:	68fb      	ldr	r3, [r7, #12]
 8008818:	6a1b      	ldr	r3, [r3, #32]
 800881a:	f023 0201 	bic.w	r2, r3, #1
 800881e:	68fb      	ldr	r3, [r7, #12]
 8008820:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008822:	68fb      	ldr	r3, [r7, #12]
 8008824:	699b      	ldr	r3, [r3, #24]
 8008826:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008828:	693b      	ldr	r3, [r7, #16]
 800882a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800882e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	011b      	lsls	r3, r3, #4
 8008834:	693a      	ldr	r2, [r7, #16]
 8008836:	4313      	orrs	r3, r2
 8008838:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800883a:	697b      	ldr	r3, [r7, #20]
 800883c:	f023 030a 	bic.w	r3, r3, #10
 8008840:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008842:	697a      	ldr	r2, [r7, #20]
 8008844:	68bb      	ldr	r3, [r7, #8]
 8008846:	4313      	orrs	r3, r2
 8008848:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800884a:	68fb      	ldr	r3, [r7, #12]
 800884c:	693a      	ldr	r2, [r7, #16]
 800884e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	697a      	ldr	r2, [r7, #20]
 8008854:	621a      	str	r2, [r3, #32]
}
 8008856:	bf00      	nop
 8008858:	371c      	adds	r7, #28
 800885a:	46bd      	mov	sp, r7
 800885c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008860:	4770      	bx	lr

08008862 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008862:	b480      	push	{r7}
 8008864:	b087      	sub	sp, #28
 8008866:	af00      	add	r7, sp, #0
 8008868:	60f8      	str	r0, [r7, #12]
 800886a:	60b9      	str	r1, [r7, #8]
 800886c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800886e:	68fb      	ldr	r3, [r7, #12]
 8008870:	6a1b      	ldr	r3, [r3, #32]
 8008872:	f023 0210 	bic.w	r2, r3, #16
 8008876:	68fb      	ldr	r3, [r7, #12]
 8008878:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800887a:	68fb      	ldr	r3, [r7, #12]
 800887c:	699b      	ldr	r3, [r3, #24]
 800887e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008880:	68fb      	ldr	r3, [r7, #12]
 8008882:	6a1b      	ldr	r3, [r3, #32]
 8008884:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008886:	697b      	ldr	r3, [r7, #20]
 8008888:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800888c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	031b      	lsls	r3, r3, #12
 8008892:	697a      	ldr	r2, [r7, #20]
 8008894:	4313      	orrs	r3, r2
 8008896:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008898:	693b      	ldr	r3, [r7, #16]
 800889a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800889e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80088a0:	68bb      	ldr	r3, [r7, #8]
 80088a2:	011b      	lsls	r3, r3, #4
 80088a4:	693a      	ldr	r2, [r7, #16]
 80088a6:	4313      	orrs	r3, r2
 80088a8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80088aa:	68fb      	ldr	r3, [r7, #12]
 80088ac:	697a      	ldr	r2, [r7, #20]
 80088ae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80088b0:	68fb      	ldr	r3, [r7, #12]
 80088b2:	693a      	ldr	r2, [r7, #16]
 80088b4:	621a      	str	r2, [r3, #32]
}
 80088b6:	bf00      	nop
 80088b8:	371c      	adds	r7, #28
 80088ba:	46bd      	mov	sp, r7
 80088bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088c0:	4770      	bx	lr

080088c2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80088c2:	b480      	push	{r7}
 80088c4:	b085      	sub	sp, #20
 80088c6:	af00      	add	r7, sp, #0
 80088c8:	6078      	str	r0, [r7, #4]
 80088ca:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	689b      	ldr	r3, [r3, #8]
 80088d0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80088d2:	68fb      	ldr	r3, [r7, #12]
 80088d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80088d8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80088da:	683a      	ldr	r2, [r7, #0]
 80088dc:	68fb      	ldr	r3, [r7, #12]
 80088de:	4313      	orrs	r3, r2
 80088e0:	f043 0307 	orr.w	r3, r3, #7
 80088e4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	68fa      	ldr	r2, [r7, #12]
 80088ea:	609a      	str	r2, [r3, #8]
}
 80088ec:	bf00      	nop
 80088ee:	3714      	adds	r7, #20
 80088f0:	46bd      	mov	sp, r7
 80088f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088f6:	4770      	bx	lr

080088f8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80088f8:	b480      	push	{r7}
 80088fa:	b087      	sub	sp, #28
 80088fc:	af00      	add	r7, sp, #0
 80088fe:	60f8      	str	r0, [r7, #12]
 8008900:	60b9      	str	r1, [r7, #8]
 8008902:	607a      	str	r2, [r7, #4]
 8008904:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008906:	68fb      	ldr	r3, [r7, #12]
 8008908:	689b      	ldr	r3, [r3, #8]
 800890a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800890c:	697b      	ldr	r3, [r7, #20]
 800890e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008912:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008914:	683b      	ldr	r3, [r7, #0]
 8008916:	021a      	lsls	r2, r3, #8
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	431a      	orrs	r2, r3
 800891c:	68bb      	ldr	r3, [r7, #8]
 800891e:	4313      	orrs	r3, r2
 8008920:	697a      	ldr	r2, [r7, #20]
 8008922:	4313      	orrs	r3, r2
 8008924:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008926:	68fb      	ldr	r3, [r7, #12]
 8008928:	697a      	ldr	r2, [r7, #20]
 800892a:	609a      	str	r2, [r3, #8]
}
 800892c:	bf00      	nop
 800892e:	371c      	adds	r7, #28
 8008930:	46bd      	mov	sp, r7
 8008932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008936:	4770      	bx	lr

08008938 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008938:	b480      	push	{r7}
 800893a:	b085      	sub	sp, #20
 800893c:	af00      	add	r7, sp, #0
 800893e:	6078      	str	r0, [r7, #4]
 8008940:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008948:	2b01      	cmp	r3, #1
 800894a:	d101      	bne.n	8008950 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800894c:	2302      	movs	r3, #2
 800894e:	e05a      	b.n	8008a06 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	2201      	movs	r2, #1
 8008954:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	2202      	movs	r2, #2
 800895c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	685b      	ldr	r3, [r3, #4]
 8008966:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	689b      	ldr	r3, [r3, #8]
 800896e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008970:	68fb      	ldr	r3, [r7, #12]
 8008972:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008976:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008978:	683b      	ldr	r3, [r7, #0]
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	68fa      	ldr	r2, [r7, #12]
 800897e:	4313      	orrs	r3, r2
 8008980:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	68fa      	ldr	r2, [r7, #12]
 8008988:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	4a21      	ldr	r2, [pc, #132]	; (8008a14 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8008990:	4293      	cmp	r3, r2
 8008992:	d022      	beq.n	80089da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800899c:	d01d      	beq.n	80089da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	4a1d      	ldr	r2, [pc, #116]	; (8008a18 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80089a4:	4293      	cmp	r3, r2
 80089a6:	d018      	beq.n	80089da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	4a1b      	ldr	r2, [pc, #108]	; (8008a1c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80089ae:	4293      	cmp	r3, r2
 80089b0:	d013      	beq.n	80089da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	4a1a      	ldr	r2, [pc, #104]	; (8008a20 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80089b8:	4293      	cmp	r3, r2
 80089ba:	d00e      	beq.n	80089da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	4a18      	ldr	r2, [pc, #96]	; (8008a24 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80089c2:	4293      	cmp	r3, r2
 80089c4:	d009      	beq.n	80089da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	4a17      	ldr	r2, [pc, #92]	; (8008a28 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80089cc:	4293      	cmp	r3, r2
 80089ce:	d004      	beq.n	80089da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	4a15      	ldr	r2, [pc, #84]	; (8008a2c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80089d6:	4293      	cmp	r3, r2
 80089d8:	d10c      	bne.n	80089f4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80089da:	68bb      	ldr	r3, [r7, #8]
 80089dc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80089e0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80089e2:	683b      	ldr	r3, [r7, #0]
 80089e4:	685b      	ldr	r3, [r3, #4]
 80089e6:	68ba      	ldr	r2, [r7, #8]
 80089e8:	4313      	orrs	r3, r2
 80089ea:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	68ba      	ldr	r2, [r7, #8]
 80089f2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	2201      	movs	r2, #1
 80089f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	2200      	movs	r2, #0
 8008a00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008a04:	2300      	movs	r3, #0
}
 8008a06:	4618      	mov	r0, r3
 8008a08:	3714      	adds	r7, #20
 8008a0a:	46bd      	mov	sp, r7
 8008a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a10:	4770      	bx	lr
 8008a12:	bf00      	nop
 8008a14:	40010000 	.word	0x40010000
 8008a18:	40000400 	.word	0x40000400
 8008a1c:	40000800 	.word	0x40000800
 8008a20:	40000c00 	.word	0x40000c00
 8008a24:	40010400 	.word	0x40010400
 8008a28:	40014000 	.word	0x40014000
 8008a2c:	40001800 	.word	0x40001800

08008a30 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008a30:	b480      	push	{r7}
 8008a32:	b083      	sub	sp, #12
 8008a34:	af00      	add	r7, sp, #0
 8008a36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008a38:	bf00      	nop
 8008a3a:	370c      	adds	r7, #12
 8008a3c:	46bd      	mov	sp, r7
 8008a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a42:	4770      	bx	lr

08008a44 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008a44:	b480      	push	{r7}
 8008a46:	b083      	sub	sp, #12
 8008a48:	af00      	add	r7, sp, #0
 8008a4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008a4c:	bf00      	nop
 8008a4e:	370c      	adds	r7, #12
 8008a50:	46bd      	mov	sp, r7
 8008a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a56:	4770      	bx	lr

08008a58 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008a58:	b580      	push	{r7, lr}
 8008a5a:	b082      	sub	sp, #8
 8008a5c:	af00      	add	r7, sp, #0
 8008a5e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	2b00      	cmp	r3, #0
 8008a64:	d101      	bne.n	8008a6a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008a66:	2301      	movs	r3, #1
 8008a68:	e03f      	b.n	8008aea <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008a70:	b2db      	uxtb	r3, r3
 8008a72:	2b00      	cmp	r3, #0
 8008a74:	d106      	bne.n	8008a84 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	2200      	movs	r2, #0
 8008a7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008a7e:	6878      	ldr	r0, [r7, #4]
 8008a80:	f7f9 ffae 	bl	80029e0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	2224      	movs	r2, #36	; 0x24
 8008a88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	68da      	ldr	r2, [r3, #12]
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	681b      	ldr	r3, [r3, #0]
 8008a96:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008a9a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008a9c:	6878      	ldr	r0, [r7, #4]
 8008a9e:	f000 f929 	bl	8008cf4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	691a      	ldr	r2, [r3, #16]
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008ab0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	695a      	ldr	r2, [r3, #20]
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008ac0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	68da      	ldr	r2, [r3, #12]
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008ad0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	2200      	movs	r2, #0
 8008ad6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	2220      	movs	r2, #32
 8008adc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	2220      	movs	r2, #32
 8008ae4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8008ae8:	2300      	movs	r3, #0
}
 8008aea:	4618      	mov	r0, r3
 8008aec:	3708      	adds	r7, #8
 8008aee:	46bd      	mov	sp, r7
 8008af0:	bd80      	pop	{r7, pc}

08008af2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008af2:	b580      	push	{r7, lr}
 8008af4:	b08a      	sub	sp, #40	; 0x28
 8008af6:	af02      	add	r7, sp, #8
 8008af8:	60f8      	str	r0, [r7, #12]
 8008afa:	60b9      	str	r1, [r7, #8]
 8008afc:	603b      	str	r3, [r7, #0]
 8008afe:	4613      	mov	r3, r2
 8008b00:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8008b02:	2300      	movs	r3, #0
 8008b04:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008b06:	68fb      	ldr	r3, [r7, #12]
 8008b08:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008b0c:	b2db      	uxtb	r3, r3
 8008b0e:	2b20      	cmp	r3, #32
 8008b10:	d17c      	bne.n	8008c0c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8008b12:	68bb      	ldr	r3, [r7, #8]
 8008b14:	2b00      	cmp	r3, #0
 8008b16:	d002      	beq.n	8008b1e <HAL_UART_Transmit+0x2c>
 8008b18:	88fb      	ldrh	r3, [r7, #6]
 8008b1a:	2b00      	cmp	r3, #0
 8008b1c:	d101      	bne.n	8008b22 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8008b1e:	2301      	movs	r3, #1
 8008b20:	e075      	b.n	8008c0e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008b22:	68fb      	ldr	r3, [r7, #12]
 8008b24:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008b28:	2b01      	cmp	r3, #1
 8008b2a:	d101      	bne.n	8008b30 <HAL_UART_Transmit+0x3e>
 8008b2c:	2302      	movs	r3, #2
 8008b2e:	e06e      	b.n	8008c0e <HAL_UART_Transmit+0x11c>
 8008b30:	68fb      	ldr	r3, [r7, #12]
 8008b32:	2201      	movs	r2, #1
 8008b34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008b38:	68fb      	ldr	r3, [r7, #12]
 8008b3a:	2200      	movs	r2, #0
 8008b3c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008b3e:	68fb      	ldr	r3, [r7, #12]
 8008b40:	2221      	movs	r2, #33	; 0x21
 8008b42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008b46:	f7fa f9cf 	bl	8002ee8 <HAL_GetTick>
 8008b4a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8008b4c:	68fb      	ldr	r3, [r7, #12]
 8008b4e:	88fa      	ldrh	r2, [r7, #6]
 8008b50:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8008b52:	68fb      	ldr	r3, [r7, #12]
 8008b54:	88fa      	ldrh	r2, [r7, #6]
 8008b56:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008b58:	68fb      	ldr	r3, [r7, #12]
 8008b5a:	689b      	ldr	r3, [r3, #8]
 8008b5c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008b60:	d108      	bne.n	8008b74 <HAL_UART_Transmit+0x82>
 8008b62:	68fb      	ldr	r3, [r7, #12]
 8008b64:	691b      	ldr	r3, [r3, #16]
 8008b66:	2b00      	cmp	r3, #0
 8008b68:	d104      	bne.n	8008b74 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8008b6a:	2300      	movs	r3, #0
 8008b6c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8008b6e:	68bb      	ldr	r3, [r7, #8]
 8008b70:	61bb      	str	r3, [r7, #24]
 8008b72:	e003      	b.n	8008b7c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8008b74:	68bb      	ldr	r3, [r7, #8]
 8008b76:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008b78:	2300      	movs	r3, #0
 8008b7a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8008b7c:	68fb      	ldr	r3, [r7, #12]
 8008b7e:	2200      	movs	r2, #0
 8008b80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8008b84:	e02a      	b.n	8008bdc <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008b86:	683b      	ldr	r3, [r7, #0]
 8008b88:	9300      	str	r3, [sp, #0]
 8008b8a:	697b      	ldr	r3, [r7, #20]
 8008b8c:	2200      	movs	r2, #0
 8008b8e:	2180      	movs	r1, #128	; 0x80
 8008b90:	68f8      	ldr	r0, [r7, #12]
 8008b92:	f000 f840 	bl	8008c16 <UART_WaitOnFlagUntilTimeout>
 8008b96:	4603      	mov	r3, r0
 8008b98:	2b00      	cmp	r3, #0
 8008b9a:	d001      	beq.n	8008ba0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8008b9c:	2303      	movs	r3, #3
 8008b9e:	e036      	b.n	8008c0e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8008ba0:	69fb      	ldr	r3, [r7, #28]
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	d10b      	bne.n	8008bbe <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008ba6:	69bb      	ldr	r3, [r7, #24]
 8008ba8:	881b      	ldrh	r3, [r3, #0]
 8008baa:	461a      	mov	r2, r3
 8008bac:	68fb      	ldr	r3, [r7, #12]
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008bb4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8008bb6:	69bb      	ldr	r3, [r7, #24]
 8008bb8:	3302      	adds	r3, #2
 8008bba:	61bb      	str	r3, [r7, #24]
 8008bbc:	e007      	b.n	8008bce <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8008bbe:	69fb      	ldr	r3, [r7, #28]
 8008bc0:	781a      	ldrb	r2, [r3, #0]
 8008bc2:	68fb      	ldr	r3, [r7, #12]
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8008bc8:	69fb      	ldr	r3, [r7, #28]
 8008bca:	3301      	adds	r3, #1
 8008bcc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008bce:	68fb      	ldr	r3, [r7, #12]
 8008bd0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008bd2:	b29b      	uxth	r3, r3
 8008bd4:	3b01      	subs	r3, #1
 8008bd6:	b29a      	uxth	r2, r3
 8008bd8:	68fb      	ldr	r3, [r7, #12]
 8008bda:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8008bdc:	68fb      	ldr	r3, [r7, #12]
 8008bde:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008be0:	b29b      	uxth	r3, r3
 8008be2:	2b00      	cmp	r3, #0
 8008be4:	d1cf      	bne.n	8008b86 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008be6:	683b      	ldr	r3, [r7, #0]
 8008be8:	9300      	str	r3, [sp, #0]
 8008bea:	697b      	ldr	r3, [r7, #20]
 8008bec:	2200      	movs	r2, #0
 8008bee:	2140      	movs	r1, #64	; 0x40
 8008bf0:	68f8      	ldr	r0, [r7, #12]
 8008bf2:	f000 f810 	bl	8008c16 <UART_WaitOnFlagUntilTimeout>
 8008bf6:	4603      	mov	r3, r0
 8008bf8:	2b00      	cmp	r3, #0
 8008bfa:	d001      	beq.n	8008c00 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8008bfc:	2303      	movs	r3, #3
 8008bfe:	e006      	b.n	8008c0e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008c00:	68fb      	ldr	r3, [r7, #12]
 8008c02:	2220      	movs	r2, #32
 8008c04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8008c08:	2300      	movs	r3, #0
 8008c0a:	e000      	b.n	8008c0e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8008c0c:	2302      	movs	r3, #2
  }
}
 8008c0e:	4618      	mov	r0, r3
 8008c10:	3720      	adds	r7, #32
 8008c12:	46bd      	mov	sp, r7
 8008c14:	bd80      	pop	{r7, pc}

08008c16 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8008c16:	b580      	push	{r7, lr}
 8008c18:	b090      	sub	sp, #64	; 0x40
 8008c1a:	af00      	add	r7, sp, #0
 8008c1c:	60f8      	str	r0, [r7, #12]
 8008c1e:	60b9      	str	r1, [r7, #8]
 8008c20:	603b      	str	r3, [r7, #0]
 8008c22:	4613      	mov	r3, r2
 8008c24:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008c26:	e050      	b.n	8008cca <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008c28:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008c2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c2e:	d04c      	beq.n	8008cca <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8008c30:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008c32:	2b00      	cmp	r3, #0
 8008c34:	d007      	beq.n	8008c46 <UART_WaitOnFlagUntilTimeout+0x30>
 8008c36:	f7fa f957 	bl	8002ee8 <HAL_GetTick>
 8008c3a:	4602      	mov	r2, r0
 8008c3c:	683b      	ldr	r3, [r7, #0]
 8008c3e:	1ad3      	subs	r3, r2, r3
 8008c40:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008c42:	429a      	cmp	r2, r3
 8008c44:	d241      	bcs.n	8008cca <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008c46:	68fb      	ldr	r3, [r7, #12]
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	330c      	adds	r3, #12
 8008c4c:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c50:	e853 3f00 	ldrex	r3, [r3]
 8008c54:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008c56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c58:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008c5c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008c5e:	68fb      	ldr	r3, [r7, #12]
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	330c      	adds	r3, #12
 8008c64:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008c66:	637a      	str	r2, [r7, #52]	; 0x34
 8008c68:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c6a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008c6c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008c6e:	e841 2300 	strex	r3, r2, [r1]
 8008c72:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008c74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	d1e5      	bne.n	8008c46 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008c7a:	68fb      	ldr	r3, [r7, #12]
 8008c7c:	681b      	ldr	r3, [r3, #0]
 8008c7e:	3314      	adds	r3, #20
 8008c80:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c82:	697b      	ldr	r3, [r7, #20]
 8008c84:	e853 3f00 	ldrex	r3, [r3]
 8008c88:	613b      	str	r3, [r7, #16]
   return(result);
 8008c8a:	693b      	ldr	r3, [r7, #16]
 8008c8c:	f023 0301 	bic.w	r3, r3, #1
 8008c90:	63bb      	str	r3, [r7, #56]	; 0x38
 8008c92:	68fb      	ldr	r3, [r7, #12]
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	3314      	adds	r3, #20
 8008c98:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008c9a:	623a      	str	r2, [r7, #32]
 8008c9c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c9e:	69f9      	ldr	r1, [r7, #28]
 8008ca0:	6a3a      	ldr	r2, [r7, #32]
 8008ca2:	e841 2300 	strex	r3, r2, [r1]
 8008ca6:	61bb      	str	r3, [r7, #24]
   return(result);
 8008ca8:	69bb      	ldr	r3, [r7, #24]
 8008caa:	2b00      	cmp	r3, #0
 8008cac:	d1e5      	bne.n	8008c7a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8008cae:	68fb      	ldr	r3, [r7, #12]
 8008cb0:	2220      	movs	r2, #32
 8008cb2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8008cb6:	68fb      	ldr	r3, [r7, #12]
 8008cb8:	2220      	movs	r2, #32
 8008cba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8008cbe:	68fb      	ldr	r3, [r7, #12]
 8008cc0:	2200      	movs	r2, #0
 8008cc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8008cc6:	2303      	movs	r3, #3
 8008cc8:	e00f      	b.n	8008cea <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008cca:	68fb      	ldr	r3, [r7, #12]
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	681a      	ldr	r2, [r3, #0]
 8008cd0:	68bb      	ldr	r3, [r7, #8]
 8008cd2:	4013      	ands	r3, r2
 8008cd4:	68ba      	ldr	r2, [r7, #8]
 8008cd6:	429a      	cmp	r2, r3
 8008cd8:	bf0c      	ite	eq
 8008cda:	2301      	moveq	r3, #1
 8008cdc:	2300      	movne	r3, #0
 8008cde:	b2db      	uxtb	r3, r3
 8008ce0:	461a      	mov	r2, r3
 8008ce2:	79fb      	ldrb	r3, [r7, #7]
 8008ce4:	429a      	cmp	r2, r3
 8008ce6:	d09f      	beq.n	8008c28 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008ce8:	2300      	movs	r3, #0
}
 8008cea:	4618      	mov	r0, r3
 8008cec:	3740      	adds	r7, #64	; 0x40
 8008cee:	46bd      	mov	sp, r7
 8008cf0:	bd80      	pop	{r7, pc}
	...

08008cf4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008cf4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008cf8:	b09f      	sub	sp, #124	; 0x7c
 8008cfa:	af00      	add	r7, sp, #0
 8008cfc:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008cfe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008d00:	681b      	ldr	r3, [r3, #0]
 8008d02:	691b      	ldr	r3, [r3, #16]
 8008d04:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8008d08:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008d0a:	68d9      	ldr	r1, [r3, #12]
 8008d0c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008d0e:	681a      	ldr	r2, [r3, #0]
 8008d10:	ea40 0301 	orr.w	r3, r0, r1
 8008d14:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008d16:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008d18:	689a      	ldr	r2, [r3, #8]
 8008d1a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008d1c:	691b      	ldr	r3, [r3, #16]
 8008d1e:	431a      	orrs	r2, r3
 8008d20:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008d22:	695b      	ldr	r3, [r3, #20]
 8008d24:	431a      	orrs	r2, r3
 8008d26:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008d28:	69db      	ldr	r3, [r3, #28]
 8008d2a:	4313      	orrs	r3, r2
 8008d2c:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8008d2e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008d30:	681b      	ldr	r3, [r3, #0]
 8008d32:	68db      	ldr	r3, [r3, #12]
 8008d34:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8008d38:	f021 010c 	bic.w	r1, r1, #12
 8008d3c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008d3e:	681a      	ldr	r2, [r3, #0]
 8008d40:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008d42:	430b      	orrs	r3, r1
 8008d44:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008d46:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008d48:	681b      	ldr	r3, [r3, #0]
 8008d4a:	695b      	ldr	r3, [r3, #20]
 8008d4c:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8008d50:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008d52:	6999      	ldr	r1, [r3, #24]
 8008d54:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008d56:	681a      	ldr	r2, [r3, #0]
 8008d58:	ea40 0301 	orr.w	r3, r0, r1
 8008d5c:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008d5e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008d60:	681a      	ldr	r2, [r3, #0]
 8008d62:	4bc5      	ldr	r3, [pc, #788]	; (8009078 <UART_SetConfig+0x384>)
 8008d64:	429a      	cmp	r2, r3
 8008d66:	d004      	beq.n	8008d72 <UART_SetConfig+0x7e>
 8008d68:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008d6a:	681a      	ldr	r2, [r3, #0]
 8008d6c:	4bc3      	ldr	r3, [pc, #780]	; (800907c <UART_SetConfig+0x388>)
 8008d6e:	429a      	cmp	r2, r3
 8008d70:	d103      	bne.n	8008d7a <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008d72:	f7ff f973 	bl	800805c <HAL_RCC_GetPCLK2Freq>
 8008d76:	6778      	str	r0, [r7, #116]	; 0x74
 8008d78:	e002      	b.n	8008d80 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8008d7a:	f7ff f95b 	bl	8008034 <HAL_RCC_GetPCLK1Freq>
 8008d7e:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008d80:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008d82:	69db      	ldr	r3, [r3, #28]
 8008d84:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008d88:	f040 80b6 	bne.w	8008ef8 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008d8c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008d8e:	461c      	mov	r4, r3
 8008d90:	f04f 0500 	mov.w	r5, #0
 8008d94:	4622      	mov	r2, r4
 8008d96:	462b      	mov	r3, r5
 8008d98:	1891      	adds	r1, r2, r2
 8008d9a:	6439      	str	r1, [r7, #64]	; 0x40
 8008d9c:	415b      	adcs	r3, r3
 8008d9e:	647b      	str	r3, [r7, #68]	; 0x44
 8008da0:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8008da4:	1912      	adds	r2, r2, r4
 8008da6:	eb45 0303 	adc.w	r3, r5, r3
 8008daa:	f04f 0000 	mov.w	r0, #0
 8008dae:	f04f 0100 	mov.w	r1, #0
 8008db2:	00d9      	lsls	r1, r3, #3
 8008db4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8008db8:	00d0      	lsls	r0, r2, #3
 8008dba:	4602      	mov	r2, r0
 8008dbc:	460b      	mov	r3, r1
 8008dbe:	1911      	adds	r1, r2, r4
 8008dc0:	6639      	str	r1, [r7, #96]	; 0x60
 8008dc2:	416b      	adcs	r3, r5
 8008dc4:	667b      	str	r3, [r7, #100]	; 0x64
 8008dc6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008dc8:	685b      	ldr	r3, [r3, #4]
 8008dca:	461a      	mov	r2, r3
 8008dcc:	f04f 0300 	mov.w	r3, #0
 8008dd0:	1891      	adds	r1, r2, r2
 8008dd2:	63b9      	str	r1, [r7, #56]	; 0x38
 8008dd4:	415b      	adcs	r3, r3
 8008dd6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008dd8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8008ddc:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8008de0:	f7f7 ff32 	bl	8000c48 <__aeabi_uldivmod>
 8008de4:	4602      	mov	r2, r0
 8008de6:	460b      	mov	r3, r1
 8008de8:	4ba5      	ldr	r3, [pc, #660]	; (8009080 <UART_SetConfig+0x38c>)
 8008dea:	fba3 2302 	umull	r2, r3, r3, r2
 8008dee:	095b      	lsrs	r3, r3, #5
 8008df0:	011e      	lsls	r6, r3, #4
 8008df2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008df4:	461c      	mov	r4, r3
 8008df6:	f04f 0500 	mov.w	r5, #0
 8008dfa:	4622      	mov	r2, r4
 8008dfc:	462b      	mov	r3, r5
 8008dfe:	1891      	adds	r1, r2, r2
 8008e00:	6339      	str	r1, [r7, #48]	; 0x30
 8008e02:	415b      	adcs	r3, r3
 8008e04:	637b      	str	r3, [r7, #52]	; 0x34
 8008e06:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8008e0a:	1912      	adds	r2, r2, r4
 8008e0c:	eb45 0303 	adc.w	r3, r5, r3
 8008e10:	f04f 0000 	mov.w	r0, #0
 8008e14:	f04f 0100 	mov.w	r1, #0
 8008e18:	00d9      	lsls	r1, r3, #3
 8008e1a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8008e1e:	00d0      	lsls	r0, r2, #3
 8008e20:	4602      	mov	r2, r0
 8008e22:	460b      	mov	r3, r1
 8008e24:	1911      	adds	r1, r2, r4
 8008e26:	65b9      	str	r1, [r7, #88]	; 0x58
 8008e28:	416b      	adcs	r3, r5
 8008e2a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008e2c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008e2e:	685b      	ldr	r3, [r3, #4]
 8008e30:	461a      	mov	r2, r3
 8008e32:	f04f 0300 	mov.w	r3, #0
 8008e36:	1891      	adds	r1, r2, r2
 8008e38:	62b9      	str	r1, [r7, #40]	; 0x28
 8008e3a:	415b      	adcs	r3, r3
 8008e3c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008e3e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008e42:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8008e46:	f7f7 feff 	bl	8000c48 <__aeabi_uldivmod>
 8008e4a:	4602      	mov	r2, r0
 8008e4c:	460b      	mov	r3, r1
 8008e4e:	4b8c      	ldr	r3, [pc, #560]	; (8009080 <UART_SetConfig+0x38c>)
 8008e50:	fba3 1302 	umull	r1, r3, r3, r2
 8008e54:	095b      	lsrs	r3, r3, #5
 8008e56:	2164      	movs	r1, #100	; 0x64
 8008e58:	fb01 f303 	mul.w	r3, r1, r3
 8008e5c:	1ad3      	subs	r3, r2, r3
 8008e5e:	00db      	lsls	r3, r3, #3
 8008e60:	3332      	adds	r3, #50	; 0x32
 8008e62:	4a87      	ldr	r2, [pc, #540]	; (8009080 <UART_SetConfig+0x38c>)
 8008e64:	fba2 2303 	umull	r2, r3, r2, r3
 8008e68:	095b      	lsrs	r3, r3, #5
 8008e6a:	005b      	lsls	r3, r3, #1
 8008e6c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008e70:	441e      	add	r6, r3
 8008e72:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008e74:	4618      	mov	r0, r3
 8008e76:	f04f 0100 	mov.w	r1, #0
 8008e7a:	4602      	mov	r2, r0
 8008e7c:	460b      	mov	r3, r1
 8008e7e:	1894      	adds	r4, r2, r2
 8008e80:	623c      	str	r4, [r7, #32]
 8008e82:	415b      	adcs	r3, r3
 8008e84:	627b      	str	r3, [r7, #36]	; 0x24
 8008e86:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008e8a:	1812      	adds	r2, r2, r0
 8008e8c:	eb41 0303 	adc.w	r3, r1, r3
 8008e90:	f04f 0400 	mov.w	r4, #0
 8008e94:	f04f 0500 	mov.w	r5, #0
 8008e98:	00dd      	lsls	r5, r3, #3
 8008e9a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8008e9e:	00d4      	lsls	r4, r2, #3
 8008ea0:	4622      	mov	r2, r4
 8008ea2:	462b      	mov	r3, r5
 8008ea4:	1814      	adds	r4, r2, r0
 8008ea6:	653c      	str	r4, [r7, #80]	; 0x50
 8008ea8:	414b      	adcs	r3, r1
 8008eaa:	657b      	str	r3, [r7, #84]	; 0x54
 8008eac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008eae:	685b      	ldr	r3, [r3, #4]
 8008eb0:	461a      	mov	r2, r3
 8008eb2:	f04f 0300 	mov.w	r3, #0
 8008eb6:	1891      	adds	r1, r2, r2
 8008eb8:	61b9      	str	r1, [r7, #24]
 8008eba:	415b      	adcs	r3, r3
 8008ebc:	61fb      	str	r3, [r7, #28]
 8008ebe:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008ec2:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8008ec6:	f7f7 febf 	bl	8000c48 <__aeabi_uldivmod>
 8008eca:	4602      	mov	r2, r0
 8008ecc:	460b      	mov	r3, r1
 8008ece:	4b6c      	ldr	r3, [pc, #432]	; (8009080 <UART_SetConfig+0x38c>)
 8008ed0:	fba3 1302 	umull	r1, r3, r3, r2
 8008ed4:	095b      	lsrs	r3, r3, #5
 8008ed6:	2164      	movs	r1, #100	; 0x64
 8008ed8:	fb01 f303 	mul.w	r3, r1, r3
 8008edc:	1ad3      	subs	r3, r2, r3
 8008ede:	00db      	lsls	r3, r3, #3
 8008ee0:	3332      	adds	r3, #50	; 0x32
 8008ee2:	4a67      	ldr	r2, [pc, #412]	; (8009080 <UART_SetConfig+0x38c>)
 8008ee4:	fba2 2303 	umull	r2, r3, r2, r3
 8008ee8:	095b      	lsrs	r3, r3, #5
 8008eea:	f003 0207 	and.w	r2, r3, #7
 8008eee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008ef0:	681b      	ldr	r3, [r3, #0]
 8008ef2:	4432      	add	r2, r6
 8008ef4:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8008ef6:	e0b9      	b.n	800906c <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008ef8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008efa:	461c      	mov	r4, r3
 8008efc:	f04f 0500 	mov.w	r5, #0
 8008f00:	4622      	mov	r2, r4
 8008f02:	462b      	mov	r3, r5
 8008f04:	1891      	adds	r1, r2, r2
 8008f06:	6139      	str	r1, [r7, #16]
 8008f08:	415b      	adcs	r3, r3
 8008f0a:	617b      	str	r3, [r7, #20]
 8008f0c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8008f10:	1912      	adds	r2, r2, r4
 8008f12:	eb45 0303 	adc.w	r3, r5, r3
 8008f16:	f04f 0000 	mov.w	r0, #0
 8008f1a:	f04f 0100 	mov.w	r1, #0
 8008f1e:	00d9      	lsls	r1, r3, #3
 8008f20:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8008f24:	00d0      	lsls	r0, r2, #3
 8008f26:	4602      	mov	r2, r0
 8008f28:	460b      	mov	r3, r1
 8008f2a:	eb12 0804 	adds.w	r8, r2, r4
 8008f2e:	eb43 0905 	adc.w	r9, r3, r5
 8008f32:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008f34:	685b      	ldr	r3, [r3, #4]
 8008f36:	4618      	mov	r0, r3
 8008f38:	f04f 0100 	mov.w	r1, #0
 8008f3c:	f04f 0200 	mov.w	r2, #0
 8008f40:	f04f 0300 	mov.w	r3, #0
 8008f44:	008b      	lsls	r3, r1, #2
 8008f46:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8008f4a:	0082      	lsls	r2, r0, #2
 8008f4c:	4640      	mov	r0, r8
 8008f4e:	4649      	mov	r1, r9
 8008f50:	f7f7 fe7a 	bl	8000c48 <__aeabi_uldivmod>
 8008f54:	4602      	mov	r2, r0
 8008f56:	460b      	mov	r3, r1
 8008f58:	4b49      	ldr	r3, [pc, #292]	; (8009080 <UART_SetConfig+0x38c>)
 8008f5a:	fba3 2302 	umull	r2, r3, r3, r2
 8008f5e:	095b      	lsrs	r3, r3, #5
 8008f60:	011e      	lsls	r6, r3, #4
 8008f62:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008f64:	4618      	mov	r0, r3
 8008f66:	f04f 0100 	mov.w	r1, #0
 8008f6a:	4602      	mov	r2, r0
 8008f6c:	460b      	mov	r3, r1
 8008f6e:	1894      	adds	r4, r2, r2
 8008f70:	60bc      	str	r4, [r7, #8]
 8008f72:	415b      	adcs	r3, r3
 8008f74:	60fb      	str	r3, [r7, #12]
 8008f76:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008f7a:	1812      	adds	r2, r2, r0
 8008f7c:	eb41 0303 	adc.w	r3, r1, r3
 8008f80:	f04f 0400 	mov.w	r4, #0
 8008f84:	f04f 0500 	mov.w	r5, #0
 8008f88:	00dd      	lsls	r5, r3, #3
 8008f8a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8008f8e:	00d4      	lsls	r4, r2, #3
 8008f90:	4622      	mov	r2, r4
 8008f92:	462b      	mov	r3, r5
 8008f94:	1814      	adds	r4, r2, r0
 8008f96:	64bc      	str	r4, [r7, #72]	; 0x48
 8008f98:	414b      	adcs	r3, r1
 8008f9a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008f9c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008f9e:	685b      	ldr	r3, [r3, #4]
 8008fa0:	4618      	mov	r0, r3
 8008fa2:	f04f 0100 	mov.w	r1, #0
 8008fa6:	f04f 0200 	mov.w	r2, #0
 8008faa:	f04f 0300 	mov.w	r3, #0
 8008fae:	008b      	lsls	r3, r1, #2
 8008fb0:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8008fb4:	0082      	lsls	r2, r0, #2
 8008fb6:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8008fba:	f7f7 fe45 	bl	8000c48 <__aeabi_uldivmod>
 8008fbe:	4602      	mov	r2, r0
 8008fc0:	460b      	mov	r3, r1
 8008fc2:	4b2f      	ldr	r3, [pc, #188]	; (8009080 <UART_SetConfig+0x38c>)
 8008fc4:	fba3 1302 	umull	r1, r3, r3, r2
 8008fc8:	095b      	lsrs	r3, r3, #5
 8008fca:	2164      	movs	r1, #100	; 0x64
 8008fcc:	fb01 f303 	mul.w	r3, r1, r3
 8008fd0:	1ad3      	subs	r3, r2, r3
 8008fd2:	011b      	lsls	r3, r3, #4
 8008fd4:	3332      	adds	r3, #50	; 0x32
 8008fd6:	4a2a      	ldr	r2, [pc, #168]	; (8009080 <UART_SetConfig+0x38c>)
 8008fd8:	fba2 2303 	umull	r2, r3, r2, r3
 8008fdc:	095b      	lsrs	r3, r3, #5
 8008fde:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008fe2:	441e      	add	r6, r3
 8008fe4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008fe6:	4618      	mov	r0, r3
 8008fe8:	f04f 0100 	mov.w	r1, #0
 8008fec:	4602      	mov	r2, r0
 8008fee:	460b      	mov	r3, r1
 8008ff0:	1894      	adds	r4, r2, r2
 8008ff2:	603c      	str	r4, [r7, #0]
 8008ff4:	415b      	adcs	r3, r3
 8008ff6:	607b      	str	r3, [r7, #4]
 8008ff8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008ffc:	1812      	adds	r2, r2, r0
 8008ffe:	eb41 0303 	adc.w	r3, r1, r3
 8009002:	f04f 0400 	mov.w	r4, #0
 8009006:	f04f 0500 	mov.w	r5, #0
 800900a:	00dd      	lsls	r5, r3, #3
 800900c:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8009010:	00d4      	lsls	r4, r2, #3
 8009012:	4622      	mov	r2, r4
 8009014:	462b      	mov	r3, r5
 8009016:	eb12 0a00 	adds.w	sl, r2, r0
 800901a:	eb43 0b01 	adc.w	fp, r3, r1
 800901e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009020:	685b      	ldr	r3, [r3, #4]
 8009022:	4618      	mov	r0, r3
 8009024:	f04f 0100 	mov.w	r1, #0
 8009028:	f04f 0200 	mov.w	r2, #0
 800902c:	f04f 0300 	mov.w	r3, #0
 8009030:	008b      	lsls	r3, r1, #2
 8009032:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8009036:	0082      	lsls	r2, r0, #2
 8009038:	4650      	mov	r0, sl
 800903a:	4659      	mov	r1, fp
 800903c:	f7f7 fe04 	bl	8000c48 <__aeabi_uldivmod>
 8009040:	4602      	mov	r2, r0
 8009042:	460b      	mov	r3, r1
 8009044:	4b0e      	ldr	r3, [pc, #56]	; (8009080 <UART_SetConfig+0x38c>)
 8009046:	fba3 1302 	umull	r1, r3, r3, r2
 800904a:	095b      	lsrs	r3, r3, #5
 800904c:	2164      	movs	r1, #100	; 0x64
 800904e:	fb01 f303 	mul.w	r3, r1, r3
 8009052:	1ad3      	subs	r3, r2, r3
 8009054:	011b      	lsls	r3, r3, #4
 8009056:	3332      	adds	r3, #50	; 0x32
 8009058:	4a09      	ldr	r2, [pc, #36]	; (8009080 <UART_SetConfig+0x38c>)
 800905a:	fba2 2303 	umull	r2, r3, r2, r3
 800905e:	095b      	lsrs	r3, r3, #5
 8009060:	f003 020f 	and.w	r2, r3, #15
 8009064:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	4432      	add	r2, r6
 800906a:	609a      	str	r2, [r3, #8]
}
 800906c:	bf00      	nop
 800906e:	377c      	adds	r7, #124	; 0x7c
 8009070:	46bd      	mov	sp, r7
 8009072:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009076:	bf00      	nop
 8009078:	40011000 	.word	0x40011000
 800907c:	40011400 	.word	0x40011400
 8009080:	51eb851f 	.word	0x51eb851f

08009084 <__errno>:
 8009084:	4b01      	ldr	r3, [pc, #4]	; (800908c <__errno+0x8>)
 8009086:	6818      	ldr	r0, [r3, #0]
 8009088:	4770      	bx	lr
 800908a:	bf00      	nop
 800908c:	20000024 	.word	0x20000024

08009090 <__libc_init_array>:
 8009090:	b570      	push	{r4, r5, r6, lr}
 8009092:	4d0d      	ldr	r5, [pc, #52]	; (80090c8 <__libc_init_array+0x38>)
 8009094:	4c0d      	ldr	r4, [pc, #52]	; (80090cc <__libc_init_array+0x3c>)
 8009096:	1b64      	subs	r4, r4, r5
 8009098:	10a4      	asrs	r4, r4, #2
 800909a:	2600      	movs	r6, #0
 800909c:	42a6      	cmp	r6, r4
 800909e:	d109      	bne.n	80090b4 <__libc_init_array+0x24>
 80090a0:	4d0b      	ldr	r5, [pc, #44]	; (80090d0 <__libc_init_array+0x40>)
 80090a2:	4c0c      	ldr	r4, [pc, #48]	; (80090d4 <__libc_init_array+0x44>)
 80090a4:	f004 f806 	bl	800d0b4 <_init>
 80090a8:	1b64      	subs	r4, r4, r5
 80090aa:	10a4      	asrs	r4, r4, #2
 80090ac:	2600      	movs	r6, #0
 80090ae:	42a6      	cmp	r6, r4
 80090b0:	d105      	bne.n	80090be <__libc_init_array+0x2e>
 80090b2:	bd70      	pop	{r4, r5, r6, pc}
 80090b4:	f855 3b04 	ldr.w	r3, [r5], #4
 80090b8:	4798      	blx	r3
 80090ba:	3601      	adds	r6, #1
 80090bc:	e7ee      	b.n	800909c <__libc_init_array+0xc>
 80090be:	f855 3b04 	ldr.w	r3, [r5], #4
 80090c2:	4798      	blx	r3
 80090c4:	3601      	adds	r6, #1
 80090c6:	e7f2      	b.n	80090ae <__libc_init_array+0x1e>
 80090c8:	0800d728 	.word	0x0800d728
 80090cc:	0800d728 	.word	0x0800d728
 80090d0:	0800d728 	.word	0x0800d728
 80090d4:	0800d72c 	.word	0x0800d72c

080090d8 <memset>:
 80090d8:	4402      	add	r2, r0
 80090da:	4603      	mov	r3, r0
 80090dc:	4293      	cmp	r3, r2
 80090de:	d100      	bne.n	80090e2 <memset+0xa>
 80090e0:	4770      	bx	lr
 80090e2:	f803 1b01 	strb.w	r1, [r3], #1
 80090e6:	e7f9      	b.n	80090dc <memset+0x4>

080090e8 <__cvt>:
 80090e8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80090ec:	ec55 4b10 	vmov	r4, r5, d0
 80090f0:	2d00      	cmp	r5, #0
 80090f2:	460e      	mov	r6, r1
 80090f4:	4619      	mov	r1, r3
 80090f6:	462b      	mov	r3, r5
 80090f8:	bfbb      	ittet	lt
 80090fa:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80090fe:	461d      	movlt	r5, r3
 8009100:	2300      	movge	r3, #0
 8009102:	232d      	movlt	r3, #45	; 0x2d
 8009104:	700b      	strb	r3, [r1, #0]
 8009106:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009108:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800910c:	4691      	mov	r9, r2
 800910e:	f023 0820 	bic.w	r8, r3, #32
 8009112:	bfbc      	itt	lt
 8009114:	4622      	movlt	r2, r4
 8009116:	4614      	movlt	r4, r2
 8009118:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800911c:	d005      	beq.n	800912a <__cvt+0x42>
 800911e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8009122:	d100      	bne.n	8009126 <__cvt+0x3e>
 8009124:	3601      	adds	r6, #1
 8009126:	2102      	movs	r1, #2
 8009128:	e000      	b.n	800912c <__cvt+0x44>
 800912a:	2103      	movs	r1, #3
 800912c:	ab03      	add	r3, sp, #12
 800912e:	9301      	str	r3, [sp, #4]
 8009130:	ab02      	add	r3, sp, #8
 8009132:	9300      	str	r3, [sp, #0]
 8009134:	ec45 4b10 	vmov	d0, r4, r5
 8009138:	4653      	mov	r3, sl
 800913a:	4632      	mov	r2, r6
 800913c:	f000 ff14 	bl	8009f68 <_dtoa_r>
 8009140:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8009144:	4607      	mov	r7, r0
 8009146:	d102      	bne.n	800914e <__cvt+0x66>
 8009148:	f019 0f01 	tst.w	r9, #1
 800914c:	d022      	beq.n	8009194 <__cvt+0xac>
 800914e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009152:	eb07 0906 	add.w	r9, r7, r6
 8009156:	d110      	bne.n	800917a <__cvt+0x92>
 8009158:	783b      	ldrb	r3, [r7, #0]
 800915a:	2b30      	cmp	r3, #48	; 0x30
 800915c:	d10a      	bne.n	8009174 <__cvt+0x8c>
 800915e:	2200      	movs	r2, #0
 8009160:	2300      	movs	r3, #0
 8009162:	4620      	mov	r0, r4
 8009164:	4629      	mov	r1, r5
 8009166:	f7f7 fcaf 	bl	8000ac8 <__aeabi_dcmpeq>
 800916a:	b918      	cbnz	r0, 8009174 <__cvt+0x8c>
 800916c:	f1c6 0601 	rsb	r6, r6, #1
 8009170:	f8ca 6000 	str.w	r6, [sl]
 8009174:	f8da 3000 	ldr.w	r3, [sl]
 8009178:	4499      	add	r9, r3
 800917a:	2200      	movs	r2, #0
 800917c:	2300      	movs	r3, #0
 800917e:	4620      	mov	r0, r4
 8009180:	4629      	mov	r1, r5
 8009182:	f7f7 fca1 	bl	8000ac8 <__aeabi_dcmpeq>
 8009186:	b108      	cbz	r0, 800918c <__cvt+0xa4>
 8009188:	f8cd 900c 	str.w	r9, [sp, #12]
 800918c:	2230      	movs	r2, #48	; 0x30
 800918e:	9b03      	ldr	r3, [sp, #12]
 8009190:	454b      	cmp	r3, r9
 8009192:	d307      	bcc.n	80091a4 <__cvt+0xbc>
 8009194:	9b03      	ldr	r3, [sp, #12]
 8009196:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009198:	1bdb      	subs	r3, r3, r7
 800919a:	4638      	mov	r0, r7
 800919c:	6013      	str	r3, [r2, #0]
 800919e:	b004      	add	sp, #16
 80091a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80091a4:	1c59      	adds	r1, r3, #1
 80091a6:	9103      	str	r1, [sp, #12]
 80091a8:	701a      	strb	r2, [r3, #0]
 80091aa:	e7f0      	b.n	800918e <__cvt+0xa6>

080091ac <__exponent>:
 80091ac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80091ae:	4603      	mov	r3, r0
 80091b0:	2900      	cmp	r1, #0
 80091b2:	bfb8      	it	lt
 80091b4:	4249      	neglt	r1, r1
 80091b6:	f803 2b02 	strb.w	r2, [r3], #2
 80091ba:	bfb4      	ite	lt
 80091bc:	222d      	movlt	r2, #45	; 0x2d
 80091be:	222b      	movge	r2, #43	; 0x2b
 80091c0:	2909      	cmp	r1, #9
 80091c2:	7042      	strb	r2, [r0, #1]
 80091c4:	dd2a      	ble.n	800921c <__exponent+0x70>
 80091c6:	f10d 0407 	add.w	r4, sp, #7
 80091ca:	46a4      	mov	ip, r4
 80091cc:	270a      	movs	r7, #10
 80091ce:	46a6      	mov	lr, r4
 80091d0:	460a      	mov	r2, r1
 80091d2:	fb91 f6f7 	sdiv	r6, r1, r7
 80091d6:	fb07 1516 	mls	r5, r7, r6, r1
 80091da:	3530      	adds	r5, #48	; 0x30
 80091dc:	2a63      	cmp	r2, #99	; 0x63
 80091de:	f104 34ff 	add.w	r4, r4, #4294967295
 80091e2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80091e6:	4631      	mov	r1, r6
 80091e8:	dcf1      	bgt.n	80091ce <__exponent+0x22>
 80091ea:	3130      	adds	r1, #48	; 0x30
 80091ec:	f1ae 0502 	sub.w	r5, lr, #2
 80091f0:	f804 1c01 	strb.w	r1, [r4, #-1]
 80091f4:	1c44      	adds	r4, r0, #1
 80091f6:	4629      	mov	r1, r5
 80091f8:	4561      	cmp	r1, ip
 80091fa:	d30a      	bcc.n	8009212 <__exponent+0x66>
 80091fc:	f10d 0209 	add.w	r2, sp, #9
 8009200:	eba2 020e 	sub.w	r2, r2, lr
 8009204:	4565      	cmp	r5, ip
 8009206:	bf88      	it	hi
 8009208:	2200      	movhi	r2, #0
 800920a:	4413      	add	r3, r2
 800920c:	1a18      	subs	r0, r3, r0
 800920e:	b003      	add	sp, #12
 8009210:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009212:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009216:	f804 2f01 	strb.w	r2, [r4, #1]!
 800921a:	e7ed      	b.n	80091f8 <__exponent+0x4c>
 800921c:	2330      	movs	r3, #48	; 0x30
 800921e:	3130      	adds	r1, #48	; 0x30
 8009220:	7083      	strb	r3, [r0, #2]
 8009222:	70c1      	strb	r1, [r0, #3]
 8009224:	1d03      	adds	r3, r0, #4
 8009226:	e7f1      	b.n	800920c <__exponent+0x60>

08009228 <_printf_float>:
 8009228:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800922c:	ed2d 8b02 	vpush	{d8}
 8009230:	b08d      	sub	sp, #52	; 0x34
 8009232:	460c      	mov	r4, r1
 8009234:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8009238:	4616      	mov	r6, r2
 800923a:	461f      	mov	r7, r3
 800923c:	4605      	mov	r5, r0
 800923e:	f001 fe37 	bl	800aeb0 <_localeconv_r>
 8009242:	f8d0 a000 	ldr.w	sl, [r0]
 8009246:	4650      	mov	r0, sl
 8009248:	f7f6 ffc2 	bl	80001d0 <strlen>
 800924c:	2300      	movs	r3, #0
 800924e:	930a      	str	r3, [sp, #40]	; 0x28
 8009250:	6823      	ldr	r3, [r4, #0]
 8009252:	9305      	str	r3, [sp, #20]
 8009254:	f8d8 3000 	ldr.w	r3, [r8]
 8009258:	f894 b018 	ldrb.w	fp, [r4, #24]
 800925c:	3307      	adds	r3, #7
 800925e:	f023 0307 	bic.w	r3, r3, #7
 8009262:	f103 0208 	add.w	r2, r3, #8
 8009266:	f8c8 2000 	str.w	r2, [r8]
 800926a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800926e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8009272:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8009276:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800927a:	9307      	str	r3, [sp, #28]
 800927c:	f8cd 8018 	str.w	r8, [sp, #24]
 8009280:	ee08 0a10 	vmov	s16, r0
 8009284:	4b9f      	ldr	r3, [pc, #636]	; (8009504 <_printf_float+0x2dc>)
 8009286:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800928a:	f04f 32ff 	mov.w	r2, #4294967295
 800928e:	f7f7 fc4d 	bl	8000b2c <__aeabi_dcmpun>
 8009292:	bb88      	cbnz	r0, 80092f8 <_printf_float+0xd0>
 8009294:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009298:	4b9a      	ldr	r3, [pc, #616]	; (8009504 <_printf_float+0x2dc>)
 800929a:	f04f 32ff 	mov.w	r2, #4294967295
 800929e:	f7f7 fc27 	bl	8000af0 <__aeabi_dcmple>
 80092a2:	bb48      	cbnz	r0, 80092f8 <_printf_float+0xd0>
 80092a4:	2200      	movs	r2, #0
 80092a6:	2300      	movs	r3, #0
 80092a8:	4640      	mov	r0, r8
 80092aa:	4649      	mov	r1, r9
 80092ac:	f7f7 fc16 	bl	8000adc <__aeabi_dcmplt>
 80092b0:	b110      	cbz	r0, 80092b8 <_printf_float+0x90>
 80092b2:	232d      	movs	r3, #45	; 0x2d
 80092b4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80092b8:	4b93      	ldr	r3, [pc, #588]	; (8009508 <_printf_float+0x2e0>)
 80092ba:	4894      	ldr	r0, [pc, #592]	; (800950c <_printf_float+0x2e4>)
 80092bc:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80092c0:	bf94      	ite	ls
 80092c2:	4698      	movls	r8, r3
 80092c4:	4680      	movhi	r8, r0
 80092c6:	2303      	movs	r3, #3
 80092c8:	6123      	str	r3, [r4, #16]
 80092ca:	9b05      	ldr	r3, [sp, #20]
 80092cc:	f023 0204 	bic.w	r2, r3, #4
 80092d0:	6022      	str	r2, [r4, #0]
 80092d2:	f04f 0900 	mov.w	r9, #0
 80092d6:	9700      	str	r7, [sp, #0]
 80092d8:	4633      	mov	r3, r6
 80092da:	aa0b      	add	r2, sp, #44	; 0x2c
 80092dc:	4621      	mov	r1, r4
 80092de:	4628      	mov	r0, r5
 80092e0:	f000 f9d8 	bl	8009694 <_printf_common>
 80092e4:	3001      	adds	r0, #1
 80092e6:	f040 8090 	bne.w	800940a <_printf_float+0x1e2>
 80092ea:	f04f 30ff 	mov.w	r0, #4294967295
 80092ee:	b00d      	add	sp, #52	; 0x34
 80092f0:	ecbd 8b02 	vpop	{d8}
 80092f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80092f8:	4642      	mov	r2, r8
 80092fa:	464b      	mov	r3, r9
 80092fc:	4640      	mov	r0, r8
 80092fe:	4649      	mov	r1, r9
 8009300:	f7f7 fc14 	bl	8000b2c <__aeabi_dcmpun>
 8009304:	b140      	cbz	r0, 8009318 <_printf_float+0xf0>
 8009306:	464b      	mov	r3, r9
 8009308:	2b00      	cmp	r3, #0
 800930a:	bfbc      	itt	lt
 800930c:	232d      	movlt	r3, #45	; 0x2d
 800930e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8009312:	487f      	ldr	r0, [pc, #508]	; (8009510 <_printf_float+0x2e8>)
 8009314:	4b7f      	ldr	r3, [pc, #508]	; (8009514 <_printf_float+0x2ec>)
 8009316:	e7d1      	b.n	80092bc <_printf_float+0x94>
 8009318:	6863      	ldr	r3, [r4, #4]
 800931a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800931e:	9206      	str	r2, [sp, #24]
 8009320:	1c5a      	adds	r2, r3, #1
 8009322:	d13f      	bne.n	80093a4 <_printf_float+0x17c>
 8009324:	2306      	movs	r3, #6
 8009326:	6063      	str	r3, [r4, #4]
 8009328:	9b05      	ldr	r3, [sp, #20]
 800932a:	6861      	ldr	r1, [r4, #4]
 800932c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8009330:	2300      	movs	r3, #0
 8009332:	9303      	str	r3, [sp, #12]
 8009334:	ab0a      	add	r3, sp, #40	; 0x28
 8009336:	e9cd b301 	strd	fp, r3, [sp, #4]
 800933a:	ab09      	add	r3, sp, #36	; 0x24
 800933c:	ec49 8b10 	vmov	d0, r8, r9
 8009340:	9300      	str	r3, [sp, #0]
 8009342:	6022      	str	r2, [r4, #0]
 8009344:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8009348:	4628      	mov	r0, r5
 800934a:	f7ff fecd 	bl	80090e8 <__cvt>
 800934e:	9b06      	ldr	r3, [sp, #24]
 8009350:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009352:	2b47      	cmp	r3, #71	; 0x47
 8009354:	4680      	mov	r8, r0
 8009356:	d108      	bne.n	800936a <_printf_float+0x142>
 8009358:	1cc8      	adds	r0, r1, #3
 800935a:	db02      	blt.n	8009362 <_printf_float+0x13a>
 800935c:	6863      	ldr	r3, [r4, #4]
 800935e:	4299      	cmp	r1, r3
 8009360:	dd41      	ble.n	80093e6 <_printf_float+0x1be>
 8009362:	f1ab 0b02 	sub.w	fp, fp, #2
 8009366:	fa5f fb8b 	uxtb.w	fp, fp
 800936a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800936e:	d820      	bhi.n	80093b2 <_printf_float+0x18a>
 8009370:	3901      	subs	r1, #1
 8009372:	465a      	mov	r2, fp
 8009374:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8009378:	9109      	str	r1, [sp, #36]	; 0x24
 800937a:	f7ff ff17 	bl	80091ac <__exponent>
 800937e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009380:	1813      	adds	r3, r2, r0
 8009382:	2a01      	cmp	r2, #1
 8009384:	4681      	mov	r9, r0
 8009386:	6123      	str	r3, [r4, #16]
 8009388:	dc02      	bgt.n	8009390 <_printf_float+0x168>
 800938a:	6822      	ldr	r2, [r4, #0]
 800938c:	07d2      	lsls	r2, r2, #31
 800938e:	d501      	bpl.n	8009394 <_printf_float+0x16c>
 8009390:	3301      	adds	r3, #1
 8009392:	6123      	str	r3, [r4, #16]
 8009394:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8009398:	2b00      	cmp	r3, #0
 800939a:	d09c      	beq.n	80092d6 <_printf_float+0xae>
 800939c:	232d      	movs	r3, #45	; 0x2d
 800939e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80093a2:	e798      	b.n	80092d6 <_printf_float+0xae>
 80093a4:	9a06      	ldr	r2, [sp, #24]
 80093a6:	2a47      	cmp	r2, #71	; 0x47
 80093a8:	d1be      	bne.n	8009328 <_printf_float+0x100>
 80093aa:	2b00      	cmp	r3, #0
 80093ac:	d1bc      	bne.n	8009328 <_printf_float+0x100>
 80093ae:	2301      	movs	r3, #1
 80093b0:	e7b9      	b.n	8009326 <_printf_float+0xfe>
 80093b2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80093b6:	d118      	bne.n	80093ea <_printf_float+0x1c2>
 80093b8:	2900      	cmp	r1, #0
 80093ba:	6863      	ldr	r3, [r4, #4]
 80093bc:	dd0b      	ble.n	80093d6 <_printf_float+0x1ae>
 80093be:	6121      	str	r1, [r4, #16]
 80093c0:	b913      	cbnz	r3, 80093c8 <_printf_float+0x1a0>
 80093c2:	6822      	ldr	r2, [r4, #0]
 80093c4:	07d0      	lsls	r0, r2, #31
 80093c6:	d502      	bpl.n	80093ce <_printf_float+0x1a6>
 80093c8:	3301      	adds	r3, #1
 80093ca:	440b      	add	r3, r1
 80093cc:	6123      	str	r3, [r4, #16]
 80093ce:	65a1      	str	r1, [r4, #88]	; 0x58
 80093d0:	f04f 0900 	mov.w	r9, #0
 80093d4:	e7de      	b.n	8009394 <_printf_float+0x16c>
 80093d6:	b913      	cbnz	r3, 80093de <_printf_float+0x1b6>
 80093d8:	6822      	ldr	r2, [r4, #0]
 80093da:	07d2      	lsls	r2, r2, #31
 80093dc:	d501      	bpl.n	80093e2 <_printf_float+0x1ba>
 80093de:	3302      	adds	r3, #2
 80093e0:	e7f4      	b.n	80093cc <_printf_float+0x1a4>
 80093e2:	2301      	movs	r3, #1
 80093e4:	e7f2      	b.n	80093cc <_printf_float+0x1a4>
 80093e6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80093ea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80093ec:	4299      	cmp	r1, r3
 80093ee:	db05      	blt.n	80093fc <_printf_float+0x1d4>
 80093f0:	6823      	ldr	r3, [r4, #0]
 80093f2:	6121      	str	r1, [r4, #16]
 80093f4:	07d8      	lsls	r0, r3, #31
 80093f6:	d5ea      	bpl.n	80093ce <_printf_float+0x1a6>
 80093f8:	1c4b      	adds	r3, r1, #1
 80093fa:	e7e7      	b.n	80093cc <_printf_float+0x1a4>
 80093fc:	2900      	cmp	r1, #0
 80093fe:	bfd4      	ite	le
 8009400:	f1c1 0202 	rsble	r2, r1, #2
 8009404:	2201      	movgt	r2, #1
 8009406:	4413      	add	r3, r2
 8009408:	e7e0      	b.n	80093cc <_printf_float+0x1a4>
 800940a:	6823      	ldr	r3, [r4, #0]
 800940c:	055a      	lsls	r2, r3, #21
 800940e:	d407      	bmi.n	8009420 <_printf_float+0x1f8>
 8009410:	6923      	ldr	r3, [r4, #16]
 8009412:	4642      	mov	r2, r8
 8009414:	4631      	mov	r1, r6
 8009416:	4628      	mov	r0, r5
 8009418:	47b8      	blx	r7
 800941a:	3001      	adds	r0, #1
 800941c:	d12c      	bne.n	8009478 <_printf_float+0x250>
 800941e:	e764      	b.n	80092ea <_printf_float+0xc2>
 8009420:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8009424:	f240 80e0 	bls.w	80095e8 <_printf_float+0x3c0>
 8009428:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800942c:	2200      	movs	r2, #0
 800942e:	2300      	movs	r3, #0
 8009430:	f7f7 fb4a 	bl	8000ac8 <__aeabi_dcmpeq>
 8009434:	2800      	cmp	r0, #0
 8009436:	d034      	beq.n	80094a2 <_printf_float+0x27a>
 8009438:	4a37      	ldr	r2, [pc, #220]	; (8009518 <_printf_float+0x2f0>)
 800943a:	2301      	movs	r3, #1
 800943c:	4631      	mov	r1, r6
 800943e:	4628      	mov	r0, r5
 8009440:	47b8      	blx	r7
 8009442:	3001      	adds	r0, #1
 8009444:	f43f af51 	beq.w	80092ea <_printf_float+0xc2>
 8009448:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800944c:	429a      	cmp	r2, r3
 800944e:	db02      	blt.n	8009456 <_printf_float+0x22e>
 8009450:	6823      	ldr	r3, [r4, #0]
 8009452:	07d8      	lsls	r0, r3, #31
 8009454:	d510      	bpl.n	8009478 <_printf_float+0x250>
 8009456:	ee18 3a10 	vmov	r3, s16
 800945a:	4652      	mov	r2, sl
 800945c:	4631      	mov	r1, r6
 800945e:	4628      	mov	r0, r5
 8009460:	47b8      	blx	r7
 8009462:	3001      	adds	r0, #1
 8009464:	f43f af41 	beq.w	80092ea <_printf_float+0xc2>
 8009468:	f04f 0800 	mov.w	r8, #0
 800946c:	f104 091a 	add.w	r9, r4, #26
 8009470:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009472:	3b01      	subs	r3, #1
 8009474:	4543      	cmp	r3, r8
 8009476:	dc09      	bgt.n	800948c <_printf_float+0x264>
 8009478:	6823      	ldr	r3, [r4, #0]
 800947a:	079b      	lsls	r3, r3, #30
 800947c:	f100 8105 	bmi.w	800968a <_printf_float+0x462>
 8009480:	68e0      	ldr	r0, [r4, #12]
 8009482:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009484:	4298      	cmp	r0, r3
 8009486:	bfb8      	it	lt
 8009488:	4618      	movlt	r0, r3
 800948a:	e730      	b.n	80092ee <_printf_float+0xc6>
 800948c:	2301      	movs	r3, #1
 800948e:	464a      	mov	r2, r9
 8009490:	4631      	mov	r1, r6
 8009492:	4628      	mov	r0, r5
 8009494:	47b8      	blx	r7
 8009496:	3001      	adds	r0, #1
 8009498:	f43f af27 	beq.w	80092ea <_printf_float+0xc2>
 800949c:	f108 0801 	add.w	r8, r8, #1
 80094a0:	e7e6      	b.n	8009470 <_printf_float+0x248>
 80094a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80094a4:	2b00      	cmp	r3, #0
 80094a6:	dc39      	bgt.n	800951c <_printf_float+0x2f4>
 80094a8:	4a1b      	ldr	r2, [pc, #108]	; (8009518 <_printf_float+0x2f0>)
 80094aa:	2301      	movs	r3, #1
 80094ac:	4631      	mov	r1, r6
 80094ae:	4628      	mov	r0, r5
 80094b0:	47b8      	blx	r7
 80094b2:	3001      	adds	r0, #1
 80094b4:	f43f af19 	beq.w	80092ea <_printf_float+0xc2>
 80094b8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80094bc:	4313      	orrs	r3, r2
 80094be:	d102      	bne.n	80094c6 <_printf_float+0x29e>
 80094c0:	6823      	ldr	r3, [r4, #0]
 80094c2:	07d9      	lsls	r1, r3, #31
 80094c4:	d5d8      	bpl.n	8009478 <_printf_float+0x250>
 80094c6:	ee18 3a10 	vmov	r3, s16
 80094ca:	4652      	mov	r2, sl
 80094cc:	4631      	mov	r1, r6
 80094ce:	4628      	mov	r0, r5
 80094d0:	47b8      	blx	r7
 80094d2:	3001      	adds	r0, #1
 80094d4:	f43f af09 	beq.w	80092ea <_printf_float+0xc2>
 80094d8:	f04f 0900 	mov.w	r9, #0
 80094dc:	f104 0a1a 	add.w	sl, r4, #26
 80094e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80094e2:	425b      	negs	r3, r3
 80094e4:	454b      	cmp	r3, r9
 80094e6:	dc01      	bgt.n	80094ec <_printf_float+0x2c4>
 80094e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80094ea:	e792      	b.n	8009412 <_printf_float+0x1ea>
 80094ec:	2301      	movs	r3, #1
 80094ee:	4652      	mov	r2, sl
 80094f0:	4631      	mov	r1, r6
 80094f2:	4628      	mov	r0, r5
 80094f4:	47b8      	blx	r7
 80094f6:	3001      	adds	r0, #1
 80094f8:	f43f aef7 	beq.w	80092ea <_printf_float+0xc2>
 80094fc:	f109 0901 	add.w	r9, r9, #1
 8009500:	e7ee      	b.n	80094e0 <_printf_float+0x2b8>
 8009502:	bf00      	nop
 8009504:	7fefffff 	.word	0x7fefffff
 8009508:	0800d300 	.word	0x0800d300
 800950c:	0800d304 	.word	0x0800d304
 8009510:	0800d30c 	.word	0x0800d30c
 8009514:	0800d308 	.word	0x0800d308
 8009518:	0800d310 	.word	0x0800d310
 800951c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800951e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009520:	429a      	cmp	r2, r3
 8009522:	bfa8      	it	ge
 8009524:	461a      	movge	r2, r3
 8009526:	2a00      	cmp	r2, #0
 8009528:	4691      	mov	r9, r2
 800952a:	dc37      	bgt.n	800959c <_printf_float+0x374>
 800952c:	f04f 0b00 	mov.w	fp, #0
 8009530:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009534:	f104 021a 	add.w	r2, r4, #26
 8009538:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800953a:	9305      	str	r3, [sp, #20]
 800953c:	eba3 0309 	sub.w	r3, r3, r9
 8009540:	455b      	cmp	r3, fp
 8009542:	dc33      	bgt.n	80095ac <_printf_float+0x384>
 8009544:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009548:	429a      	cmp	r2, r3
 800954a:	db3b      	blt.n	80095c4 <_printf_float+0x39c>
 800954c:	6823      	ldr	r3, [r4, #0]
 800954e:	07da      	lsls	r2, r3, #31
 8009550:	d438      	bmi.n	80095c4 <_printf_float+0x39c>
 8009552:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009554:	9b05      	ldr	r3, [sp, #20]
 8009556:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009558:	1ad3      	subs	r3, r2, r3
 800955a:	eba2 0901 	sub.w	r9, r2, r1
 800955e:	4599      	cmp	r9, r3
 8009560:	bfa8      	it	ge
 8009562:	4699      	movge	r9, r3
 8009564:	f1b9 0f00 	cmp.w	r9, #0
 8009568:	dc35      	bgt.n	80095d6 <_printf_float+0x3ae>
 800956a:	f04f 0800 	mov.w	r8, #0
 800956e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009572:	f104 0a1a 	add.w	sl, r4, #26
 8009576:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800957a:	1a9b      	subs	r3, r3, r2
 800957c:	eba3 0309 	sub.w	r3, r3, r9
 8009580:	4543      	cmp	r3, r8
 8009582:	f77f af79 	ble.w	8009478 <_printf_float+0x250>
 8009586:	2301      	movs	r3, #1
 8009588:	4652      	mov	r2, sl
 800958a:	4631      	mov	r1, r6
 800958c:	4628      	mov	r0, r5
 800958e:	47b8      	blx	r7
 8009590:	3001      	adds	r0, #1
 8009592:	f43f aeaa 	beq.w	80092ea <_printf_float+0xc2>
 8009596:	f108 0801 	add.w	r8, r8, #1
 800959a:	e7ec      	b.n	8009576 <_printf_float+0x34e>
 800959c:	4613      	mov	r3, r2
 800959e:	4631      	mov	r1, r6
 80095a0:	4642      	mov	r2, r8
 80095a2:	4628      	mov	r0, r5
 80095a4:	47b8      	blx	r7
 80095a6:	3001      	adds	r0, #1
 80095a8:	d1c0      	bne.n	800952c <_printf_float+0x304>
 80095aa:	e69e      	b.n	80092ea <_printf_float+0xc2>
 80095ac:	2301      	movs	r3, #1
 80095ae:	4631      	mov	r1, r6
 80095b0:	4628      	mov	r0, r5
 80095b2:	9205      	str	r2, [sp, #20]
 80095b4:	47b8      	blx	r7
 80095b6:	3001      	adds	r0, #1
 80095b8:	f43f ae97 	beq.w	80092ea <_printf_float+0xc2>
 80095bc:	9a05      	ldr	r2, [sp, #20]
 80095be:	f10b 0b01 	add.w	fp, fp, #1
 80095c2:	e7b9      	b.n	8009538 <_printf_float+0x310>
 80095c4:	ee18 3a10 	vmov	r3, s16
 80095c8:	4652      	mov	r2, sl
 80095ca:	4631      	mov	r1, r6
 80095cc:	4628      	mov	r0, r5
 80095ce:	47b8      	blx	r7
 80095d0:	3001      	adds	r0, #1
 80095d2:	d1be      	bne.n	8009552 <_printf_float+0x32a>
 80095d4:	e689      	b.n	80092ea <_printf_float+0xc2>
 80095d6:	9a05      	ldr	r2, [sp, #20]
 80095d8:	464b      	mov	r3, r9
 80095da:	4442      	add	r2, r8
 80095dc:	4631      	mov	r1, r6
 80095de:	4628      	mov	r0, r5
 80095e0:	47b8      	blx	r7
 80095e2:	3001      	adds	r0, #1
 80095e4:	d1c1      	bne.n	800956a <_printf_float+0x342>
 80095e6:	e680      	b.n	80092ea <_printf_float+0xc2>
 80095e8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80095ea:	2a01      	cmp	r2, #1
 80095ec:	dc01      	bgt.n	80095f2 <_printf_float+0x3ca>
 80095ee:	07db      	lsls	r3, r3, #31
 80095f0:	d538      	bpl.n	8009664 <_printf_float+0x43c>
 80095f2:	2301      	movs	r3, #1
 80095f4:	4642      	mov	r2, r8
 80095f6:	4631      	mov	r1, r6
 80095f8:	4628      	mov	r0, r5
 80095fa:	47b8      	blx	r7
 80095fc:	3001      	adds	r0, #1
 80095fe:	f43f ae74 	beq.w	80092ea <_printf_float+0xc2>
 8009602:	ee18 3a10 	vmov	r3, s16
 8009606:	4652      	mov	r2, sl
 8009608:	4631      	mov	r1, r6
 800960a:	4628      	mov	r0, r5
 800960c:	47b8      	blx	r7
 800960e:	3001      	adds	r0, #1
 8009610:	f43f ae6b 	beq.w	80092ea <_printf_float+0xc2>
 8009614:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009618:	2200      	movs	r2, #0
 800961a:	2300      	movs	r3, #0
 800961c:	f7f7 fa54 	bl	8000ac8 <__aeabi_dcmpeq>
 8009620:	b9d8      	cbnz	r0, 800965a <_printf_float+0x432>
 8009622:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009624:	f108 0201 	add.w	r2, r8, #1
 8009628:	3b01      	subs	r3, #1
 800962a:	4631      	mov	r1, r6
 800962c:	4628      	mov	r0, r5
 800962e:	47b8      	blx	r7
 8009630:	3001      	adds	r0, #1
 8009632:	d10e      	bne.n	8009652 <_printf_float+0x42a>
 8009634:	e659      	b.n	80092ea <_printf_float+0xc2>
 8009636:	2301      	movs	r3, #1
 8009638:	4652      	mov	r2, sl
 800963a:	4631      	mov	r1, r6
 800963c:	4628      	mov	r0, r5
 800963e:	47b8      	blx	r7
 8009640:	3001      	adds	r0, #1
 8009642:	f43f ae52 	beq.w	80092ea <_printf_float+0xc2>
 8009646:	f108 0801 	add.w	r8, r8, #1
 800964a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800964c:	3b01      	subs	r3, #1
 800964e:	4543      	cmp	r3, r8
 8009650:	dcf1      	bgt.n	8009636 <_printf_float+0x40e>
 8009652:	464b      	mov	r3, r9
 8009654:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8009658:	e6dc      	b.n	8009414 <_printf_float+0x1ec>
 800965a:	f04f 0800 	mov.w	r8, #0
 800965e:	f104 0a1a 	add.w	sl, r4, #26
 8009662:	e7f2      	b.n	800964a <_printf_float+0x422>
 8009664:	2301      	movs	r3, #1
 8009666:	4642      	mov	r2, r8
 8009668:	e7df      	b.n	800962a <_printf_float+0x402>
 800966a:	2301      	movs	r3, #1
 800966c:	464a      	mov	r2, r9
 800966e:	4631      	mov	r1, r6
 8009670:	4628      	mov	r0, r5
 8009672:	47b8      	blx	r7
 8009674:	3001      	adds	r0, #1
 8009676:	f43f ae38 	beq.w	80092ea <_printf_float+0xc2>
 800967a:	f108 0801 	add.w	r8, r8, #1
 800967e:	68e3      	ldr	r3, [r4, #12]
 8009680:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009682:	1a5b      	subs	r3, r3, r1
 8009684:	4543      	cmp	r3, r8
 8009686:	dcf0      	bgt.n	800966a <_printf_float+0x442>
 8009688:	e6fa      	b.n	8009480 <_printf_float+0x258>
 800968a:	f04f 0800 	mov.w	r8, #0
 800968e:	f104 0919 	add.w	r9, r4, #25
 8009692:	e7f4      	b.n	800967e <_printf_float+0x456>

08009694 <_printf_common>:
 8009694:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009698:	4616      	mov	r6, r2
 800969a:	4699      	mov	r9, r3
 800969c:	688a      	ldr	r2, [r1, #8]
 800969e:	690b      	ldr	r3, [r1, #16]
 80096a0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80096a4:	4293      	cmp	r3, r2
 80096a6:	bfb8      	it	lt
 80096a8:	4613      	movlt	r3, r2
 80096aa:	6033      	str	r3, [r6, #0]
 80096ac:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80096b0:	4607      	mov	r7, r0
 80096b2:	460c      	mov	r4, r1
 80096b4:	b10a      	cbz	r2, 80096ba <_printf_common+0x26>
 80096b6:	3301      	adds	r3, #1
 80096b8:	6033      	str	r3, [r6, #0]
 80096ba:	6823      	ldr	r3, [r4, #0]
 80096bc:	0699      	lsls	r1, r3, #26
 80096be:	bf42      	ittt	mi
 80096c0:	6833      	ldrmi	r3, [r6, #0]
 80096c2:	3302      	addmi	r3, #2
 80096c4:	6033      	strmi	r3, [r6, #0]
 80096c6:	6825      	ldr	r5, [r4, #0]
 80096c8:	f015 0506 	ands.w	r5, r5, #6
 80096cc:	d106      	bne.n	80096dc <_printf_common+0x48>
 80096ce:	f104 0a19 	add.w	sl, r4, #25
 80096d2:	68e3      	ldr	r3, [r4, #12]
 80096d4:	6832      	ldr	r2, [r6, #0]
 80096d6:	1a9b      	subs	r3, r3, r2
 80096d8:	42ab      	cmp	r3, r5
 80096da:	dc26      	bgt.n	800972a <_printf_common+0x96>
 80096dc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80096e0:	1e13      	subs	r3, r2, #0
 80096e2:	6822      	ldr	r2, [r4, #0]
 80096e4:	bf18      	it	ne
 80096e6:	2301      	movne	r3, #1
 80096e8:	0692      	lsls	r2, r2, #26
 80096ea:	d42b      	bmi.n	8009744 <_printf_common+0xb0>
 80096ec:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80096f0:	4649      	mov	r1, r9
 80096f2:	4638      	mov	r0, r7
 80096f4:	47c0      	blx	r8
 80096f6:	3001      	adds	r0, #1
 80096f8:	d01e      	beq.n	8009738 <_printf_common+0xa4>
 80096fa:	6823      	ldr	r3, [r4, #0]
 80096fc:	68e5      	ldr	r5, [r4, #12]
 80096fe:	6832      	ldr	r2, [r6, #0]
 8009700:	f003 0306 	and.w	r3, r3, #6
 8009704:	2b04      	cmp	r3, #4
 8009706:	bf08      	it	eq
 8009708:	1aad      	subeq	r5, r5, r2
 800970a:	68a3      	ldr	r3, [r4, #8]
 800970c:	6922      	ldr	r2, [r4, #16]
 800970e:	bf0c      	ite	eq
 8009710:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009714:	2500      	movne	r5, #0
 8009716:	4293      	cmp	r3, r2
 8009718:	bfc4      	itt	gt
 800971a:	1a9b      	subgt	r3, r3, r2
 800971c:	18ed      	addgt	r5, r5, r3
 800971e:	2600      	movs	r6, #0
 8009720:	341a      	adds	r4, #26
 8009722:	42b5      	cmp	r5, r6
 8009724:	d11a      	bne.n	800975c <_printf_common+0xc8>
 8009726:	2000      	movs	r0, #0
 8009728:	e008      	b.n	800973c <_printf_common+0xa8>
 800972a:	2301      	movs	r3, #1
 800972c:	4652      	mov	r2, sl
 800972e:	4649      	mov	r1, r9
 8009730:	4638      	mov	r0, r7
 8009732:	47c0      	blx	r8
 8009734:	3001      	adds	r0, #1
 8009736:	d103      	bne.n	8009740 <_printf_common+0xac>
 8009738:	f04f 30ff 	mov.w	r0, #4294967295
 800973c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009740:	3501      	adds	r5, #1
 8009742:	e7c6      	b.n	80096d2 <_printf_common+0x3e>
 8009744:	18e1      	adds	r1, r4, r3
 8009746:	1c5a      	adds	r2, r3, #1
 8009748:	2030      	movs	r0, #48	; 0x30
 800974a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800974e:	4422      	add	r2, r4
 8009750:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009754:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009758:	3302      	adds	r3, #2
 800975a:	e7c7      	b.n	80096ec <_printf_common+0x58>
 800975c:	2301      	movs	r3, #1
 800975e:	4622      	mov	r2, r4
 8009760:	4649      	mov	r1, r9
 8009762:	4638      	mov	r0, r7
 8009764:	47c0      	blx	r8
 8009766:	3001      	adds	r0, #1
 8009768:	d0e6      	beq.n	8009738 <_printf_common+0xa4>
 800976a:	3601      	adds	r6, #1
 800976c:	e7d9      	b.n	8009722 <_printf_common+0x8e>
	...

08009770 <_printf_i>:
 8009770:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009774:	460c      	mov	r4, r1
 8009776:	4691      	mov	r9, r2
 8009778:	7e27      	ldrb	r7, [r4, #24]
 800977a:	990c      	ldr	r1, [sp, #48]	; 0x30
 800977c:	2f78      	cmp	r7, #120	; 0x78
 800977e:	4680      	mov	r8, r0
 8009780:	469a      	mov	sl, r3
 8009782:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009786:	d807      	bhi.n	8009798 <_printf_i+0x28>
 8009788:	2f62      	cmp	r7, #98	; 0x62
 800978a:	d80a      	bhi.n	80097a2 <_printf_i+0x32>
 800978c:	2f00      	cmp	r7, #0
 800978e:	f000 80d8 	beq.w	8009942 <_printf_i+0x1d2>
 8009792:	2f58      	cmp	r7, #88	; 0x58
 8009794:	f000 80a3 	beq.w	80098de <_printf_i+0x16e>
 8009798:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800979c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80097a0:	e03a      	b.n	8009818 <_printf_i+0xa8>
 80097a2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80097a6:	2b15      	cmp	r3, #21
 80097a8:	d8f6      	bhi.n	8009798 <_printf_i+0x28>
 80097aa:	a001      	add	r0, pc, #4	; (adr r0, 80097b0 <_printf_i+0x40>)
 80097ac:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80097b0:	08009809 	.word	0x08009809
 80097b4:	0800981d 	.word	0x0800981d
 80097b8:	08009799 	.word	0x08009799
 80097bc:	08009799 	.word	0x08009799
 80097c0:	08009799 	.word	0x08009799
 80097c4:	08009799 	.word	0x08009799
 80097c8:	0800981d 	.word	0x0800981d
 80097cc:	08009799 	.word	0x08009799
 80097d0:	08009799 	.word	0x08009799
 80097d4:	08009799 	.word	0x08009799
 80097d8:	08009799 	.word	0x08009799
 80097dc:	08009929 	.word	0x08009929
 80097e0:	0800984d 	.word	0x0800984d
 80097e4:	0800990b 	.word	0x0800990b
 80097e8:	08009799 	.word	0x08009799
 80097ec:	08009799 	.word	0x08009799
 80097f0:	0800994b 	.word	0x0800994b
 80097f4:	08009799 	.word	0x08009799
 80097f8:	0800984d 	.word	0x0800984d
 80097fc:	08009799 	.word	0x08009799
 8009800:	08009799 	.word	0x08009799
 8009804:	08009913 	.word	0x08009913
 8009808:	680b      	ldr	r3, [r1, #0]
 800980a:	1d1a      	adds	r2, r3, #4
 800980c:	681b      	ldr	r3, [r3, #0]
 800980e:	600a      	str	r2, [r1, #0]
 8009810:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8009814:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009818:	2301      	movs	r3, #1
 800981a:	e0a3      	b.n	8009964 <_printf_i+0x1f4>
 800981c:	6825      	ldr	r5, [r4, #0]
 800981e:	6808      	ldr	r0, [r1, #0]
 8009820:	062e      	lsls	r6, r5, #24
 8009822:	f100 0304 	add.w	r3, r0, #4
 8009826:	d50a      	bpl.n	800983e <_printf_i+0xce>
 8009828:	6805      	ldr	r5, [r0, #0]
 800982a:	600b      	str	r3, [r1, #0]
 800982c:	2d00      	cmp	r5, #0
 800982e:	da03      	bge.n	8009838 <_printf_i+0xc8>
 8009830:	232d      	movs	r3, #45	; 0x2d
 8009832:	426d      	negs	r5, r5
 8009834:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009838:	485e      	ldr	r0, [pc, #376]	; (80099b4 <_printf_i+0x244>)
 800983a:	230a      	movs	r3, #10
 800983c:	e019      	b.n	8009872 <_printf_i+0x102>
 800983e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8009842:	6805      	ldr	r5, [r0, #0]
 8009844:	600b      	str	r3, [r1, #0]
 8009846:	bf18      	it	ne
 8009848:	b22d      	sxthne	r5, r5
 800984a:	e7ef      	b.n	800982c <_printf_i+0xbc>
 800984c:	680b      	ldr	r3, [r1, #0]
 800984e:	6825      	ldr	r5, [r4, #0]
 8009850:	1d18      	adds	r0, r3, #4
 8009852:	6008      	str	r0, [r1, #0]
 8009854:	0628      	lsls	r0, r5, #24
 8009856:	d501      	bpl.n	800985c <_printf_i+0xec>
 8009858:	681d      	ldr	r5, [r3, #0]
 800985a:	e002      	b.n	8009862 <_printf_i+0xf2>
 800985c:	0669      	lsls	r1, r5, #25
 800985e:	d5fb      	bpl.n	8009858 <_printf_i+0xe8>
 8009860:	881d      	ldrh	r5, [r3, #0]
 8009862:	4854      	ldr	r0, [pc, #336]	; (80099b4 <_printf_i+0x244>)
 8009864:	2f6f      	cmp	r7, #111	; 0x6f
 8009866:	bf0c      	ite	eq
 8009868:	2308      	moveq	r3, #8
 800986a:	230a      	movne	r3, #10
 800986c:	2100      	movs	r1, #0
 800986e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009872:	6866      	ldr	r6, [r4, #4]
 8009874:	60a6      	str	r6, [r4, #8]
 8009876:	2e00      	cmp	r6, #0
 8009878:	bfa2      	ittt	ge
 800987a:	6821      	ldrge	r1, [r4, #0]
 800987c:	f021 0104 	bicge.w	r1, r1, #4
 8009880:	6021      	strge	r1, [r4, #0]
 8009882:	b90d      	cbnz	r5, 8009888 <_printf_i+0x118>
 8009884:	2e00      	cmp	r6, #0
 8009886:	d04d      	beq.n	8009924 <_printf_i+0x1b4>
 8009888:	4616      	mov	r6, r2
 800988a:	fbb5 f1f3 	udiv	r1, r5, r3
 800988e:	fb03 5711 	mls	r7, r3, r1, r5
 8009892:	5dc7      	ldrb	r7, [r0, r7]
 8009894:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009898:	462f      	mov	r7, r5
 800989a:	42bb      	cmp	r3, r7
 800989c:	460d      	mov	r5, r1
 800989e:	d9f4      	bls.n	800988a <_printf_i+0x11a>
 80098a0:	2b08      	cmp	r3, #8
 80098a2:	d10b      	bne.n	80098bc <_printf_i+0x14c>
 80098a4:	6823      	ldr	r3, [r4, #0]
 80098a6:	07df      	lsls	r7, r3, #31
 80098a8:	d508      	bpl.n	80098bc <_printf_i+0x14c>
 80098aa:	6923      	ldr	r3, [r4, #16]
 80098ac:	6861      	ldr	r1, [r4, #4]
 80098ae:	4299      	cmp	r1, r3
 80098b0:	bfde      	ittt	le
 80098b2:	2330      	movle	r3, #48	; 0x30
 80098b4:	f806 3c01 	strble.w	r3, [r6, #-1]
 80098b8:	f106 36ff 	addle.w	r6, r6, #4294967295
 80098bc:	1b92      	subs	r2, r2, r6
 80098be:	6122      	str	r2, [r4, #16]
 80098c0:	f8cd a000 	str.w	sl, [sp]
 80098c4:	464b      	mov	r3, r9
 80098c6:	aa03      	add	r2, sp, #12
 80098c8:	4621      	mov	r1, r4
 80098ca:	4640      	mov	r0, r8
 80098cc:	f7ff fee2 	bl	8009694 <_printf_common>
 80098d0:	3001      	adds	r0, #1
 80098d2:	d14c      	bne.n	800996e <_printf_i+0x1fe>
 80098d4:	f04f 30ff 	mov.w	r0, #4294967295
 80098d8:	b004      	add	sp, #16
 80098da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80098de:	4835      	ldr	r0, [pc, #212]	; (80099b4 <_printf_i+0x244>)
 80098e0:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80098e4:	6823      	ldr	r3, [r4, #0]
 80098e6:	680e      	ldr	r6, [r1, #0]
 80098e8:	061f      	lsls	r7, r3, #24
 80098ea:	f856 5b04 	ldr.w	r5, [r6], #4
 80098ee:	600e      	str	r6, [r1, #0]
 80098f0:	d514      	bpl.n	800991c <_printf_i+0x1ac>
 80098f2:	07d9      	lsls	r1, r3, #31
 80098f4:	bf44      	itt	mi
 80098f6:	f043 0320 	orrmi.w	r3, r3, #32
 80098fa:	6023      	strmi	r3, [r4, #0]
 80098fc:	b91d      	cbnz	r5, 8009906 <_printf_i+0x196>
 80098fe:	6823      	ldr	r3, [r4, #0]
 8009900:	f023 0320 	bic.w	r3, r3, #32
 8009904:	6023      	str	r3, [r4, #0]
 8009906:	2310      	movs	r3, #16
 8009908:	e7b0      	b.n	800986c <_printf_i+0xfc>
 800990a:	6823      	ldr	r3, [r4, #0]
 800990c:	f043 0320 	orr.w	r3, r3, #32
 8009910:	6023      	str	r3, [r4, #0]
 8009912:	2378      	movs	r3, #120	; 0x78
 8009914:	4828      	ldr	r0, [pc, #160]	; (80099b8 <_printf_i+0x248>)
 8009916:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800991a:	e7e3      	b.n	80098e4 <_printf_i+0x174>
 800991c:	065e      	lsls	r6, r3, #25
 800991e:	bf48      	it	mi
 8009920:	b2ad      	uxthmi	r5, r5
 8009922:	e7e6      	b.n	80098f2 <_printf_i+0x182>
 8009924:	4616      	mov	r6, r2
 8009926:	e7bb      	b.n	80098a0 <_printf_i+0x130>
 8009928:	680b      	ldr	r3, [r1, #0]
 800992a:	6826      	ldr	r6, [r4, #0]
 800992c:	6960      	ldr	r0, [r4, #20]
 800992e:	1d1d      	adds	r5, r3, #4
 8009930:	600d      	str	r5, [r1, #0]
 8009932:	0635      	lsls	r5, r6, #24
 8009934:	681b      	ldr	r3, [r3, #0]
 8009936:	d501      	bpl.n	800993c <_printf_i+0x1cc>
 8009938:	6018      	str	r0, [r3, #0]
 800993a:	e002      	b.n	8009942 <_printf_i+0x1d2>
 800993c:	0671      	lsls	r1, r6, #25
 800993e:	d5fb      	bpl.n	8009938 <_printf_i+0x1c8>
 8009940:	8018      	strh	r0, [r3, #0]
 8009942:	2300      	movs	r3, #0
 8009944:	6123      	str	r3, [r4, #16]
 8009946:	4616      	mov	r6, r2
 8009948:	e7ba      	b.n	80098c0 <_printf_i+0x150>
 800994a:	680b      	ldr	r3, [r1, #0]
 800994c:	1d1a      	adds	r2, r3, #4
 800994e:	600a      	str	r2, [r1, #0]
 8009950:	681e      	ldr	r6, [r3, #0]
 8009952:	6862      	ldr	r2, [r4, #4]
 8009954:	2100      	movs	r1, #0
 8009956:	4630      	mov	r0, r6
 8009958:	f7f6 fc42 	bl	80001e0 <memchr>
 800995c:	b108      	cbz	r0, 8009962 <_printf_i+0x1f2>
 800995e:	1b80      	subs	r0, r0, r6
 8009960:	6060      	str	r0, [r4, #4]
 8009962:	6863      	ldr	r3, [r4, #4]
 8009964:	6123      	str	r3, [r4, #16]
 8009966:	2300      	movs	r3, #0
 8009968:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800996c:	e7a8      	b.n	80098c0 <_printf_i+0x150>
 800996e:	6923      	ldr	r3, [r4, #16]
 8009970:	4632      	mov	r2, r6
 8009972:	4649      	mov	r1, r9
 8009974:	4640      	mov	r0, r8
 8009976:	47d0      	blx	sl
 8009978:	3001      	adds	r0, #1
 800997a:	d0ab      	beq.n	80098d4 <_printf_i+0x164>
 800997c:	6823      	ldr	r3, [r4, #0]
 800997e:	079b      	lsls	r3, r3, #30
 8009980:	d413      	bmi.n	80099aa <_printf_i+0x23a>
 8009982:	68e0      	ldr	r0, [r4, #12]
 8009984:	9b03      	ldr	r3, [sp, #12]
 8009986:	4298      	cmp	r0, r3
 8009988:	bfb8      	it	lt
 800998a:	4618      	movlt	r0, r3
 800998c:	e7a4      	b.n	80098d8 <_printf_i+0x168>
 800998e:	2301      	movs	r3, #1
 8009990:	4632      	mov	r2, r6
 8009992:	4649      	mov	r1, r9
 8009994:	4640      	mov	r0, r8
 8009996:	47d0      	blx	sl
 8009998:	3001      	adds	r0, #1
 800999a:	d09b      	beq.n	80098d4 <_printf_i+0x164>
 800999c:	3501      	adds	r5, #1
 800999e:	68e3      	ldr	r3, [r4, #12]
 80099a0:	9903      	ldr	r1, [sp, #12]
 80099a2:	1a5b      	subs	r3, r3, r1
 80099a4:	42ab      	cmp	r3, r5
 80099a6:	dcf2      	bgt.n	800998e <_printf_i+0x21e>
 80099a8:	e7eb      	b.n	8009982 <_printf_i+0x212>
 80099aa:	2500      	movs	r5, #0
 80099ac:	f104 0619 	add.w	r6, r4, #25
 80099b0:	e7f5      	b.n	800999e <_printf_i+0x22e>
 80099b2:	bf00      	nop
 80099b4:	0800d312 	.word	0x0800d312
 80099b8:	0800d323 	.word	0x0800d323

080099bc <iprintf>:
 80099bc:	b40f      	push	{r0, r1, r2, r3}
 80099be:	4b0a      	ldr	r3, [pc, #40]	; (80099e8 <iprintf+0x2c>)
 80099c0:	b513      	push	{r0, r1, r4, lr}
 80099c2:	681c      	ldr	r4, [r3, #0]
 80099c4:	b124      	cbz	r4, 80099d0 <iprintf+0x14>
 80099c6:	69a3      	ldr	r3, [r4, #24]
 80099c8:	b913      	cbnz	r3, 80099d0 <iprintf+0x14>
 80099ca:	4620      	mov	r0, r4
 80099cc:	f001 f9d2 	bl	800ad74 <__sinit>
 80099d0:	ab05      	add	r3, sp, #20
 80099d2:	9a04      	ldr	r2, [sp, #16]
 80099d4:	68a1      	ldr	r1, [r4, #8]
 80099d6:	9301      	str	r3, [sp, #4]
 80099d8:	4620      	mov	r0, r4
 80099da:	f002 f8a9 	bl	800bb30 <_vfiprintf_r>
 80099de:	b002      	add	sp, #8
 80099e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80099e4:	b004      	add	sp, #16
 80099e6:	4770      	bx	lr
 80099e8:	20000024 	.word	0x20000024

080099ec <_puts_r>:
 80099ec:	b570      	push	{r4, r5, r6, lr}
 80099ee:	460e      	mov	r6, r1
 80099f0:	4605      	mov	r5, r0
 80099f2:	b118      	cbz	r0, 80099fc <_puts_r+0x10>
 80099f4:	6983      	ldr	r3, [r0, #24]
 80099f6:	b90b      	cbnz	r3, 80099fc <_puts_r+0x10>
 80099f8:	f001 f9bc 	bl	800ad74 <__sinit>
 80099fc:	69ab      	ldr	r3, [r5, #24]
 80099fe:	68ac      	ldr	r4, [r5, #8]
 8009a00:	b913      	cbnz	r3, 8009a08 <_puts_r+0x1c>
 8009a02:	4628      	mov	r0, r5
 8009a04:	f001 f9b6 	bl	800ad74 <__sinit>
 8009a08:	4b2c      	ldr	r3, [pc, #176]	; (8009abc <_puts_r+0xd0>)
 8009a0a:	429c      	cmp	r4, r3
 8009a0c:	d120      	bne.n	8009a50 <_puts_r+0x64>
 8009a0e:	686c      	ldr	r4, [r5, #4]
 8009a10:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009a12:	07db      	lsls	r3, r3, #31
 8009a14:	d405      	bmi.n	8009a22 <_puts_r+0x36>
 8009a16:	89a3      	ldrh	r3, [r4, #12]
 8009a18:	0598      	lsls	r0, r3, #22
 8009a1a:	d402      	bmi.n	8009a22 <_puts_r+0x36>
 8009a1c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009a1e:	f001 fa4c 	bl	800aeba <__retarget_lock_acquire_recursive>
 8009a22:	89a3      	ldrh	r3, [r4, #12]
 8009a24:	0719      	lsls	r1, r3, #28
 8009a26:	d51d      	bpl.n	8009a64 <_puts_r+0x78>
 8009a28:	6923      	ldr	r3, [r4, #16]
 8009a2a:	b1db      	cbz	r3, 8009a64 <_puts_r+0x78>
 8009a2c:	3e01      	subs	r6, #1
 8009a2e:	68a3      	ldr	r3, [r4, #8]
 8009a30:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8009a34:	3b01      	subs	r3, #1
 8009a36:	60a3      	str	r3, [r4, #8]
 8009a38:	bb39      	cbnz	r1, 8009a8a <_puts_r+0x9e>
 8009a3a:	2b00      	cmp	r3, #0
 8009a3c:	da38      	bge.n	8009ab0 <_puts_r+0xc4>
 8009a3e:	4622      	mov	r2, r4
 8009a40:	210a      	movs	r1, #10
 8009a42:	4628      	mov	r0, r5
 8009a44:	f000 f942 	bl	8009ccc <__swbuf_r>
 8009a48:	3001      	adds	r0, #1
 8009a4a:	d011      	beq.n	8009a70 <_puts_r+0x84>
 8009a4c:	250a      	movs	r5, #10
 8009a4e:	e011      	b.n	8009a74 <_puts_r+0x88>
 8009a50:	4b1b      	ldr	r3, [pc, #108]	; (8009ac0 <_puts_r+0xd4>)
 8009a52:	429c      	cmp	r4, r3
 8009a54:	d101      	bne.n	8009a5a <_puts_r+0x6e>
 8009a56:	68ac      	ldr	r4, [r5, #8]
 8009a58:	e7da      	b.n	8009a10 <_puts_r+0x24>
 8009a5a:	4b1a      	ldr	r3, [pc, #104]	; (8009ac4 <_puts_r+0xd8>)
 8009a5c:	429c      	cmp	r4, r3
 8009a5e:	bf08      	it	eq
 8009a60:	68ec      	ldreq	r4, [r5, #12]
 8009a62:	e7d5      	b.n	8009a10 <_puts_r+0x24>
 8009a64:	4621      	mov	r1, r4
 8009a66:	4628      	mov	r0, r5
 8009a68:	f000 f982 	bl	8009d70 <__swsetup_r>
 8009a6c:	2800      	cmp	r0, #0
 8009a6e:	d0dd      	beq.n	8009a2c <_puts_r+0x40>
 8009a70:	f04f 35ff 	mov.w	r5, #4294967295
 8009a74:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009a76:	07da      	lsls	r2, r3, #31
 8009a78:	d405      	bmi.n	8009a86 <_puts_r+0x9a>
 8009a7a:	89a3      	ldrh	r3, [r4, #12]
 8009a7c:	059b      	lsls	r3, r3, #22
 8009a7e:	d402      	bmi.n	8009a86 <_puts_r+0x9a>
 8009a80:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009a82:	f001 fa1b 	bl	800aebc <__retarget_lock_release_recursive>
 8009a86:	4628      	mov	r0, r5
 8009a88:	bd70      	pop	{r4, r5, r6, pc}
 8009a8a:	2b00      	cmp	r3, #0
 8009a8c:	da04      	bge.n	8009a98 <_puts_r+0xac>
 8009a8e:	69a2      	ldr	r2, [r4, #24]
 8009a90:	429a      	cmp	r2, r3
 8009a92:	dc06      	bgt.n	8009aa2 <_puts_r+0xb6>
 8009a94:	290a      	cmp	r1, #10
 8009a96:	d004      	beq.n	8009aa2 <_puts_r+0xb6>
 8009a98:	6823      	ldr	r3, [r4, #0]
 8009a9a:	1c5a      	adds	r2, r3, #1
 8009a9c:	6022      	str	r2, [r4, #0]
 8009a9e:	7019      	strb	r1, [r3, #0]
 8009aa0:	e7c5      	b.n	8009a2e <_puts_r+0x42>
 8009aa2:	4622      	mov	r2, r4
 8009aa4:	4628      	mov	r0, r5
 8009aa6:	f000 f911 	bl	8009ccc <__swbuf_r>
 8009aaa:	3001      	adds	r0, #1
 8009aac:	d1bf      	bne.n	8009a2e <_puts_r+0x42>
 8009aae:	e7df      	b.n	8009a70 <_puts_r+0x84>
 8009ab0:	6823      	ldr	r3, [r4, #0]
 8009ab2:	250a      	movs	r5, #10
 8009ab4:	1c5a      	adds	r2, r3, #1
 8009ab6:	6022      	str	r2, [r4, #0]
 8009ab8:	701d      	strb	r5, [r3, #0]
 8009aba:	e7db      	b.n	8009a74 <_puts_r+0x88>
 8009abc:	0800d3e8 	.word	0x0800d3e8
 8009ac0:	0800d408 	.word	0x0800d408
 8009ac4:	0800d3c8 	.word	0x0800d3c8

08009ac8 <puts>:
 8009ac8:	4b02      	ldr	r3, [pc, #8]	; (8009ad4 <puts+0xc>)
 8009aca:	4601      	mov	r1, r0
 8009acc:	6818      	ldr	r0, [r3, #0]
 8009ace:	f7ff bf8d 	b.w	80099ec <_puts_r>
 8009ad2:	bf00      	nop
 8009ad4:	20000024 	.word	0x20000024

08009ad8 <setvbuf>:
 8009ad8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009adc:	461d      	mov	r5, r3
 8009ade:	4b5d      	ldr	r3, [pc, #372]	; (8009c54 <setvbuf+0x17c>)
 8009ae0:	681f      	ldr	r7, [r3, #0]
 8009ae2:	4604      	mov	r4, r0
 8009ae4:	460e      	mov	r6, r1
 8009ae6:	4690      	mov	r8, r2
 8009ae8:	b127      	cbz	r7, 8009af4 <setvbuf+0x1c>
 8009aea:	69bb      	ldr	r3, [r7, #24]
 8009aec:	b913      	cbnz	r3, 8009af4 <setvbuf+0x1c>
 8009aee:	4638      	mov	r0, r7
 8009af0:	f001 f940 	bl	800ad74 <__sinit>
 8009af4:	4b58      	ldr	r3, [pc, #352]	; (8009c58 <setvbuf+0x180>)
 8009af6:	429c      	cmp	r4, r3
 8009af8:	d167      	bne.n	8009bca <setvbuf+0xf2>
 8009afa:	687c      	ldr	r4, [r7, #4]
 8009afc:	f1b8 0f02 	cmp.w	r8, #2
 8009b00:	d006      	beq.n	8009b10 <setvbuf+0x38>
 8009b02:	f1b8 0f01 	cmp.w	r8, #1
 8009b06:	f200 809f 	bhi.w	8009c48 <setvbuf+0x170>
 8009b0a:	2d00      	cmp	r5, #0
 8009b0c:	f2c0 809c 	blt.w	8009c48 <setvbuf+0x170>
 8009b10:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009b12:	07db      	lsls	r3, r3, #31
 8009b14:	d405      	bmi.n	8009b22 <setvbuf+0x4a>
 8009b16:	89a3      	ldrh	r3, [r4, #12]
 8009b18:	0598      	lsls	r0, r3, #22
 8009b1a:	d402      	bmi.n	8009b22 <setvbuf+0x4a>
 8009b1c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009b1e:	f001 f9cc 	bl	800aeba <__retarget_lock_acquire_recursive>
 8009b22:	4621      	mov	r1, r4
 8009b24:	4638      	mov	r0, r7
 8009b26:	f001 f891 	bl	800ac4c <_fflush_r>
 8009b2a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009b2c:	b141      	cbz	r1, 8009b40 <setvbuf+0x68>
 8009b2e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009b32:	4299      	cmp	r1, r3
 8009b34:	d002      	beq.n	8009b3c <setvbuf+0x64>
 8009b36:	4638      	mov	r0, r7
 8009b38:	f001 fdca 	bl	800b6d0 <_free_r>
 8009b3c:	2300      	movs	r3, #0
 8009b3e:	6363      	str	r3, [r4, #52]	; 0x34
 8009b40:	2300      	movs	r3, #0
 8009b42:	61a3      	str	r3, [r4, #24]
 8009b44:	6063      	str	r3, [r4, #4]
 8009b46:	89a3      	ldrh	r3, [r4, #12]
 8009b48:	0619      	lsls	r1, r3, #24
 8009b4a:	d503      	bpl.n	8009b54 <setvbuf+0x7c>
 8009b4c:	6921      	ldr	r1, [r4, #16]
 8009b4e:	4638      	mov	r0, r7
 8009b50:	f001 fdbe 	bl	800b6d0 <_free_r>
 8009b54:	89a3      	ldrh	r3, [r4, #12]
 8009b56:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 8009b5a:	f023 0303 	bic.w	r3, r3, #3
 8009b5e:	f1b8 0f02 	cmp.w	r8, #2
 8009b62:	81a3      	strh	r3, [r4, #12]
 8009b64:	d06c      	beq.n	8009c40 <setvbuf+0x168>
 8009b66:	ab01      	add	r3, sp, #4
 8009b68:	466a      	mov	r2, sp
 8009b6a:	4621      	mov	r1, r4
 8009b6c:	4638      	mov	r0, r7
 8009b6e:	f001 f9a6 	bl	800aebe <__swhatbuf_r>
 8009b72:	89a3      	ldrh	r3, [r4, #12]
 8009b74:	4318      	orrs	r0, r3
 8009b76:	81a0      	strh	r0, [r4, #12]
 8009b78:	2d00      	cmp	r5, #0
 8009b7a:	d130      	bne.n	8009bde <setvbuf+0x106>
 8009b7c:	9d00      	ldr	r5, [sp, #0]
 8009b7e:	4628      	mov	r0, r5
 8009b80:	f001 fa02 	bl	800af88 <malloc>
 8009b84:	4606      	mov	r6, r0
 8009b86:	2800      	cmp	r0, #0
 8009b88:	d155      	bne.n	8009c36 <setvbuf+0x15e>
 8009b8a:	f8dd 9000 	ldr.w	r9, [sp]
 8009b8e:	45a9      	cmp	r9, r5
 8009b90:	d14a      	bne.n	8009c28 <setvbuf+0x150>
 8009b92:	f04f 35ff 	mov.w	r5, #4294967295
 8009b96:	2200      	movs	r2, #0
 8009b98:	60a2      	str	r2, [r4, #8]
 8009b9a:	f104 0247 	add.w	r2, r4, #71	; 0x47
 8009b9e:	6022      	str	r2, [r4, #0]
 8009ba0:	6122      	str	r2, [r4, #16]
 8009ba2:	2201      	movs	r2, #1
 8009ba4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009ba8:	6162      	str	r2, [r4, #20]
 8009baa:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009bac:	f043 0302 	orr.w	r3, r3, #2
 8009bb0:	07d2      	lsls	r2, r2, #31
 8009bb2:	81a3      	strh	r3, [r4, #12]
 8009bb4:	d405      	bmi.n	8009bc2 <setvbuf+0xea>
 8009bb6:	f413 7f00 	tst.w	r3, #512	; 0x200
 8009bba:	d102      	bne.n	8009bc2 <setvbuf+0xea>
 8009bbc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009bbe:	f001 f97d 	bl	800aebc <__retarget_lock_release_recursive>
 8009bc2:	4628      	mov	r0, r5
 8009bc4:	b003      	add	sp, #12
 8009bc6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009bca:	4b24      	ldr	r3, [pc, #144]	; (8009c5c <setvbuf+0x184>)
 8009bcc:	429c      	cmp	r4, r3
 8009bce:	d101      	bne.n	8009bd4 <setvbuf+0xfc>
 8009bd0:	68bc      	ldr	r4, [r7, #8]
 8009bd2:	e793      	b.n	8009afc <setvbuf+0x24>
 8009bd4:	4b22      	ldr	r3, [pc, #136]	; (8009c60 <setvbuf+0x188>)
 8009bd6:	429c      	cmp	r4, r3
 8009bd8:	bf08      	it	eq
 8009bda:	68fc      	ldreq	r4, [r7, #12]
 8009bdc:	e78e      	b.n	8009afc <setvbuf+0x24>
 8009bde:	2e00      	cmp	r6, #0
 8009be0:	d0cd      	beq.n	8009b7e <setvbuf+0xa6>
 8009be2:	69bb      	ldr	r3, [r7, #24]
 8009be4:	b913      	cbnz	r3, 8009bec <setvbuf+0x114>
 8009be6:	4638      	mov	r0, r7
 8009be8:	f001 f8c4 	bl	800ad74 <__sinit>
 8009bec:	f1b8 0f01 	cmp.w	r8, #1
 8009bf0:	bf08      	it	eq
 8009bf2:	89a3      	ldrheq	r3, [r4, #12]
 8009bf4:	6026      	str	r6, [r4, #0]
 8009bf6:	bf04      	itt	eq
 8009bf8:	f043 0301 	orreq.w	r3, r3, #1
 8009bfc:	81a3      	strheq	r3, [r4, #12]
 8009bfe:	89a2      	ldrh	r2, [r4, #12]
 8009c00:	f012 0308 	ands.w	r3, r2, #8
 8009c04:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8009c08:	d01c      	beq.n	8009c44 <setvbuf+0x16c>
 8009c0a:	07d3      	lsls	r3, r2, #31
 8009c0c:	bf41      	itttt	mi
 8009c0e:	2300      	movmi	r3, #0
 8009c10:	426d      	negmi	r5, r5
 8009c12:	60a3      	strmi	r3, [r4, #8]
 8009c14:	61a5      	strmi	r5, [r4, #24]
 8009c16:	bf58      	it	pl
 8009c18:	60a5      	strpl	r5, [r4, #8]
 8009c1a:	6e65      	ldr	r5, [r4, #100]	; 0x64
 8009c1c:	f015 0501 	ands.w	r5, r5, #1
 8009c20:	d115      	bne.n	8009c4e <setvbuf+0x176>
 8009c22:	f412 7f00 	tst.w	r2, #512	; 0x200
 8009c26:	e7c8      	b.n	8009bba <setvbuf+0xe2>
 8009c28:	4648      	mov	r0, r9
 8009c2a:	f001 f9ad 	bl	800af88 <malloc>
 8009c2e:	4606      	mov	r6, r0
 8009c30:	2800      	cmp	r0, #0
 8009c32:	d0ae      	beq.n	8009b92 <setvbuf+0xba>
 8009c34:	464d      	mov	r5, r9
 8009c36:	89a3      	ldrh	r3, [r4, #12]
 8009c38:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009c3c:	81a3      	strh	r3, [r4, #12]
 8009c3e:	e7d0      	b.n	8009be2 <setvbuf+0x10a>
 8009c40:	2500      	movs	r5, #0
 8009c42:	e7a8      	b.n	8009b96 <setvbuf+0xbe>
 8009c44:	60a3      	str	r3, [r4, #8]
 8009c46:	e7e8      	b.n	8009c1a <setvbuf+0x142>
 8009c48:	f04f 35ff 	mov.w	r5, #4294967295
 8009c4c:	e7b9      	b.n	8009bc2 <setvbuf+0xea>
 8009c4e:	2500      	movs	r5, #0
 8009c50:	e7b7      	b.n	8009bc2 <setvbuf+0xea>
 8009c52:	bf00      	nop
 8009c54:	20000024 	.word	0x20000024
 8009c58:	0800d3e8 	.word	0x0800d3e8
 8009c5c:	0800d408 	.word	0x0800d408
 8009c60:	0800d3c8 	.word	0x0800d3c8

08009c64 <sniprintf>:
 8009c64:	b40c      	push	{r2, r3}
 8009c66:	b530      	push	{r4, r5, lr}
 8009c68:	4b17      	ldr	r3, [pc, #92]	; (8009cc8 <sniprintf+0x64>)
 8009c6a:	1e0c      	subs	r4, r1, #0
 8009c6c:	681d      	ldr	r5, [r3, #0]
 8009c6e:	b09d      	sub	sp, #116	; 0x74
 8009c70:	da08      	bge.n	8009c84 <sniprintf+0x20>
 8009c72:	238b      	movs	r3, #139	; 0x8b
 8009c74:	602b      	str	r3, [r5, #0]
 8009c76:	f04f 30ff 	mov.w	r0, #4294967295
 8009c7a:	b01d      	add	sp, #116	; 0x74
 8009c7c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009c80:	b002      	add	sp, #8
 8009c82:	4770      	bx	lr
 8009c84:	f44f 7302 	mov.w	r3, #520	; 0x208
 8009c88:	f8ad 3014 	strh.w	r3, [sp, #20]
 8009c8c:	bf14      	ite	ne
 8009c8e:	f104 33ff 	addne.w	r3, r4, #4294967295
 8009c92:	4623      	moveq	r3, r4
 8009c94:	9304      	str	r3, [sp, #16]
 8009c96:	9307      	str	r3, [sp, #28]
 8009c98:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009c9c:	9002      	str	r0, [sp, #8]
 8009c9e:	9006      	str	r0, [sp, #24]
 8009ca0:	f8ad 3016 	strh.w	r3, [sp, #22]
 8009ca4:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8009ca6:	ab21      	add	r3, sp, #132	; 0x84
 8009ca8:	a902      	add	r1, sp, #8
 8009caa:	4628      	mov	r0, r5
 8009cac:	9301      	str	r3, [sp, #4]
 8009cae:	f001 fe15 	bl	800b8dc <_svfiprintf_r>
 8009cb2:	1c43      	adds	r3, r0, #1
 8009cb4:	bfbc      	itt	lt
 8009cb6:	238b      	movlt	r3, #139	; 0x8b
 8009cb8:	602b      	strlt	r3, [r5, #0]
 8009cba:	2c00      	cmp	r4, #0
 8009cbc:	d0dd      	beq.n	8009c7a <sniprintf+0x16>
 8009cbe:	9b02      	ldr	r3, [sp, #8]
 8009cc0:	2200      	movs	r2, #0
 8009cc2:	701a      	strb	r2, [r3, #0]
 8009cc4:	e7d9      	b.n	8009c7a <sniprintf+0x16>
 8009cc6:	bf00      	nop
 8009cc8:	20000024 	.word	0x20000024

08009ccc <__swbuf_r>:
 8009ccc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009cce:	460e      	mov	r6, r1
 8009cd0:	4614      	mov	r4, r2
 8009cd2:	4605      	mov	r5, r0
 8009cd4:	b118      	cbz	r0, 8009cde <__swbuf_r+0x12>
 8009cd6:	6983      	ldr	r3, [r0, #24]
 8009cd8:	b90b      	cbnz	r3, 8009cde <__swbuf_r+0x12>
 8009cda:	f001 f84b 	bl	800ad74 <__sinit>
 8009cde:	4b21      	ldr	r3, [pc, #132]	; (8009d64 <__swbuf_r+0x98>)
 8009ce0:	429c      	cmp	r4, r3
 8009ce2:	d12b      	bne.n	8009d3c <__swbuf_r+0x70>
 8009ce4:	686c      	ldr	r4, [r5, #4]
 8009ce6:	69a3      	ldr	r3, [r4, #24]
 8009ce8:	60a3      	str	r3, [r4, #8]
 8009cea:	89a3      	ldrh	r3, [r4, #12]
 8009cec:	071a      	lsls	r2, r3, #28
 8009cee:	d52f      	bpl.n	8009d50 <__swbuf_r+0x84>
 8009cf0:	6923      	ldr	r3, [r4, #16]
 8009cf2:	b36b      	cbz	r3, 8009d50 <__swbuf_r+0x84>
 8009cf4:	6923      	ldr	r3, [r4, #16]
 8009cf6:	6820      	ldr	r0, [r4, #0]
 8009cf8:	1ac0      	subs	r0, r0, r3
 8009cfa:	6963      	ldr	r3, [r4, #20]
 8009cfc:	b2f6      	uxtb	r6, r6
 8009cfe:	4283      	cmp	r3, r0
 8009d00:	4637      	mov	r7, r6
 8009d02:	dc04      	bgt.n	8009d0e <__swbuf_r+0x42>
 8009d04:	4621      	mov	r1, r4
 8009d06:	4628      	mov	r0, r5
 8009d08:	f000 ffa0 	bl	800ac4c <_fflush_r>
 8009d0c:	bb30      	cbnz	r0, 8009d5c <__swbuf_r+0x90>
 8009d0e:	68a3      	ldr	r3, [r4, #8]
 8009d10:	3b01      	subs	r3, #1
 8009d12:	60a3      	str	r3, [r4, #8]
 8009d14:	6823      	ldr	r3, [r4, #0]
 8009d16:	1c5a      	adds	r2, r3, #1
 8009d18:	6022      	str	r2, [r4, #0]
 8009d1a:	701e      	strb	r6, [r3, #0]
 8009d1c:	6963      	ldr	r3, [r4, #20]
 8009d1e:	3001      	adds	r0, #1
 8009d20:	4283      	cmp	r3, r0
 8009d22:	d004      	beq.n	8009d2e <__swbuf_r+0x62>
 8009d24:	89a3      	ldrh	r3, [r4, #12]
 8009d26:	07db      	lsls	r3, r3, #31
 8009d28:	d506      	bpl.n	8009d38 <__swbuf_r+0x6c>
 8009d2a:	2e0a      	cmp	r6, #10
 8009d2c:	d104      	bne.n	8009d38 <__swbuf_r+0x6c>
 8009d2e:	4621      	mov	r1, r4
 8009d30:	4628      	mov	r0, r5
 8009d32:	f000 ff8b 	bl	800ac4c <_fflush_r>
 8009d36:	b988      	cbnz	r0, 8009d5c <__swbuf_r+0x90>
 8009d38:	4638      	mov	r0, r7
 8009d3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009d3c:	4b0a      	ldr	r3, [pc, #40]	; (8009d68 <__swbuf_r+0x9c>)
 8009d3e:	429c      	cmp	r4, r3
 8009d40:	d101      	bne.n	8009d46 <__swbuf_r+0x7a>
 8009d42:	68ac      	ldr	r4, [r5, #8]
 8009d44:	e7cf      	b.n	8009ce6 <__swbuf_r+0x1a>
 8009d46:	4b09      	ldr	r3, [pc, #36]	; (8009d6c <__swbuf_r+0xa0>)
 8009d48:	429c      	cmp	r4, r3
 8009d4a:	bf08      	it	eq
 8009d4c:	68ec      	ldreq	r4, [r5, #12]
 8009d4e:	e7ca      	b.n	8009ce6 <__swbuf_r+0x1a>
 8009d50:	4621      	mov	r1, r4
 8009d52:	4628      	mov	r0, r5
 8009d54:	f000 f80c 	bl	8009d70 <__swsetup_r>
 8009d58:	2800      	cmp	r0, #0
 8009d5a:	d0cb      	beq.n	8009cf4 <__swbuf_r+0x28>
 8009d5c:	f04f 37ff 	mov.w	r7, #4294967295
 8009d60:	e7ea      	b.n	8009d38 <__swbuf_r+0x6c>
 8009d62:	bf00      	nop
 8009d64:	0800d3e8 	.word	0x0800d3e8
 8009d68:	0800d408 	.word	0x0800d408
 8009d6c:	0800d3c8 	.word	0x0800d3c8

08009d70 <__swsetup_r>:
 8009d70:	4b32      	ldr	r3, [pc, #200]	; (8009e3c <__swsetup_r+0xcc>)
 8009d72:	b570      	push	{r4, r5, r6, lr}
 8009d74:	681d      	ldr	r5, [r3, #0]
 8009d76:	4606      	mov	r6, r0
 8009d78:	460c      	mov	r4, r1
 8009d7a:	b125      	cbz	r5, 8009d86 <__swsetup_r+0x16>
 8009d7c:	69ab      	ldr	r3, [r5, #24]
 8009d7e:	b913      	cbnz	r3, 8009d86 <__swsetup_r+0x16>
 8009d80:	4628      	mov	r0, r5
 8009d82:	f000 fff7 	bl	800ad74 <__sinit>
 8009d86:	4b2e      	ldr	r3, [pc, #184]	; (8009e40 <__swsetup_r+0xd0>)
 8009d88:	429c      	cmp	r4, r3
 8009d8a:	d10f      	bne.n	8009dac <__swsetup_r+0x3c>
 8009d8c:	686c      	ldr	r4, [r5, #4]
 8009d8e:	89a3      	ldrh	r3, [r4, #12]
 8009d90:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009d94:	0719      	lsls	r1, r3, #28
 8009d96:	d42c      	bmi.n	8009df2 <__swsetup_r+0x82>
 8009d98:	06dd      	lsls	r5, r3, #27
 8009d9a:	d411      	bmi.n	8009dc0 <__swsetup_r+0x50>
 8009d9c:	2309      	movs	r3, #9
 8009d9e:	6033      	str	r3, [r6, #0]
 8009da0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009da4:	81a3      	strh	r3, [r4, #12]
 8009da6:	f04f 30ff 	mov.w	r0, #4294967295
 8009daa:	e03e      	b.n	8009e2a <__swsetup_r+0xba>
 8009dac:	4b25      	ldr	r3, [pc, #148]	; (8009e44 <__swsetup_r+0xd4>)
 8009dae:	429c      	cmp	r4, r3
 8009db0:	d101      	bne.n	8009db6 <__swsetup_r+0x46>
 8009db2:	68ac      	ldr	r4, [r5, #8]
 8009db4:	e7eb      	b.n	8009d8e <__swsetup_r+0x1e>
 8009db6:	4b24      	ldr	r3, [pc, #144]	; (8009e48 <__swsetup_r+0xd8>)
 8009db8:	429c      	cmp	r4, r3
 8009dba:	bf08      	it	eq
 8009dbc:	68ec      	ldreq	r4, [r5, #12]
 8009dbe:	e7e6      	b.n	8009d8e <__swsetup_r+0x1e>
 8009dc0:	0758      	lsls	r0, r3, #29
 8009dc2:	d512      	bpl.n	8009dea <__swsetup_r+0x7a>
 8009dc4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009dc6:	b141      	cbz	r1, 8009dda <__swsetup_r+0x6a>
 8009dc8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009dcc:	4299      	cmp	r1, r3
 8009dce:	d002      	beq.n	8009dd6 <__swsetup_r+0x66>
 8009dd0:	4630      	mov	r0, r6
 8009dd2:	f001 fc7d 	bl	800b6d0 <_free_r>
 8009dd6:	2300      	movs	r3, #0
 8009dd8:	6363      	str	r3, [r4, #52]	; 0x34
 8009dda:	89a3      	ldrh	r3, [r4, #12]
 8009ddc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009de0:	81a3      	strh	r3, [r4, #12]
 8009de2:	2300      	movs	r3, #0
 8009de4:	6063      	str	r3, [r4, #4]
 8009de6:	6923      	ldr	r3, [r4, #16]
 8009de8:	6023      	str	r3, [r4, #0]
 8009dea:	89a3      	ldrh	r3, [r4, #12]
 8009dec:	f043 0308 	orr.w	r3, r3, #8
 8009df0:	81a3      	strh	r3, [r4, #12]
 8009df2:	6923      	ldr	r3, [r4, #16]
 8009df4:	b94b      	cbnz	r3, 8009e0a <__swsetup_r+0x9a>
 8009df6:	89a3      	ldrh	r3, [r4, #12]
 8009df8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009dfc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009e00:	d003      	beq.n	8009e0a <__swsetup_r+0x9a>
 8009e02:	4621      	mov	r1, r4
 8009e04:	4630      	mov	r0, r6
 8009e06:	f001 f87f 	bl	800af08 <__smakebuf_r>
 8009e0a:	89a0      	ldrh	r0, [r4, #12]
 8009e0c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009e10:	f010 0301 	ands.w	r3, r0, #1
 8009e14:	d00a      	beq.n	8009e2c <__swsetup_r+0xbc>
 8009e16:	2300      	movs	r3, #0
 8009e18:	60a3      	str	r3, [r4, #8]
 8009e1a:	6963      	ldr	r3, [r4, #20]
 8009e1c:	425b      	negs	r3, r3
 8009e1e:	61a3      	str	r3, [r4, #24]
 8009e20:	6923      	ldr	r3, [r4, #16]
 8009e22:	b943      	cbnz	r3, 8009e36 <__swsetup_r+0xc6>
 8009e24:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009e28:	d1ba      	bne.n	8009da0 <__swsetup_r+0x30>
 8009e2a:	bd70      	pop	{r4, r5, r6, pc}
 8009e2c:	0781      	lsls	r1, r0, #30
 8009e2e:	bf58      	it	pl
 8009e30:	6963      	ldrpl	r3, [r4, #20]
 8009e32:	60a3      	str	r3, [r4, #8]
 8009e34:	e7f4      	b.n	8009e20 <__swsetup_r+0xb0>
 8009e36:	2000      	movs	r0, #0
 8009e38:	e7f7      	b.n	8009e2a <__swsetup_r+0xba>
 8009e3a:	bf00      	nop
 8009e3c:	20000024 	.word	0x20000024
 8009e40:	0800d3e8 	.word	0x0800d3e8
 8009e44:	0800d408 	.word	0x0800d408
 8009e48:	0800d3c8 	.word	0x0800d3c8

08009e4c <quorem>:
 8009e4c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e50:	6903      	ldr	r3, [r0, #16]
 8009e52:	690c      	ldr	r4, [r1, #16]
 8009e54:	42a3      	cmp	r3, r4
 8009e56:	4607      	mov	r7, r0
 8009e58:	f2c0 8081 	blt.w	8009f5e <quorem+0x112>
 8009e5c:	3c01      	subs	r4, #1
 8009e5e:	f101 0814 	add.w	r8, r1, #20
 8009e62:	f100 0514 	add.w	r5, r0, #20
 8009e66:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009e6a:	9301      	str	r3, [sp, #4]
 8009e6c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009e70:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009e74:	3301      	adds	r3, #1
 8009e76:	429a      	cmp	r2, r3
 8009e78:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8009e7c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009e80:	fbb2 f6f3 	udiv	r6, r2, r3
 8009e84:	d331      	bcc.n	8009eea <quorem+0x9e>
 8009e86:	f04f 0e00 	mov.w	lr, #0
 8009e8a:	4640      	mov	r0, r8
 8009e8c:	46ac      	mov	ip, r5
 8009e8e:	46f2      	mov	sl, lr
 8009e90:	f850 2b04 	ldr.w	r2, [r0], #4
 8009e94:	b293      	uxth	r3, r2
 8009e96:	fb06 e303 	mla	r3, r6, r3, lr
 8009e9a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8009e9e:	b29b      	uxth	r3, r3
 8009ea0:	ebaa 0303 	sub.w	r3, sl, r3
 8009ea4:	0c12      	lsrs	r2, r2, #16
 8009ea6:	f8dc a000 	ldr.w	sl, [ip]
 8009eaa:	fb06 e202 	mla	r2, r6, r2, lr
 8009eae:	fa13 f38a 	uxtah	r3, r3, sl
 8009eb2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8009eb6:	fa1f fa82 	uxth.w	sl, r2
 8009eba:	f8dc 2000 	ldr.w	r2, [ip]
 8009ebe:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8009ec2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009ec6:	b29b      	uxth	r3, r3
 8009ec8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009ecc:	4581      	cmp	r9, r0
 8009ece:	f84c 3b04 	str.w	r3, [ip], #4
 8009ed2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8009ed6:	d2db      	bcs.n	8009e90 <quorem+0x44>
 8009ed8:	f855 300b 	ldr.w	r3, [r5, fp]
 8009edc:	b92b      	cbnz	r3, 8009eea <quorem+0x9e>
 8009ede:	9b01      	ldr	r3, [sp, #4]
 8009ee0:	3b04      	subs	r3, #4
 8009ee2:	429d      	cmp	r5, r3
 8009ee4:	461a      	mov	r2, r3
 8009ee6:	d32e      	bcc.n	8009f46 <quorem+0xfa>
 8009ee8:	613c      	str	r4, [r7, #16]
 8009eea:	4638      	mov	r0, r7
 8009eec:	f001 fae0 	bl	800b4b0 <__mcmp>
 8009ef0:	2800      	cmp	r0, #0
 8009ef2:	db24      	blt.n	8009f3e <quorem+0xf2>
 8009ef4:	3601      	adds	r6, #1
 8009ef6:	4628      	mov	r0, r5
 8009ef8:	f04f 0c00 	mov.w	ip, #0
 8009efc:	f858 2b04 	ldr.w	r2, [r8], #4
 8009f00:	f8d0 e000 	ldr.w	lr, [r0]
 8009f04:	b293      	uxth	r3, r2
 8009f06:	ebac 0303 	sub.w	r3, ip, r3
 8009f0a:	0c12      	lsrs	r2, r2, #16
 8009f0c:	fa13 f38e 	uxtah	r3, r3, lr
 8009f10:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8009f14:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009f18:	b29b      	uxth	r3, r3
 8009f1a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009f1e:	45c1      	cmp	r9, r8
 8009f20:	f840 3b04 	str.w	r3, [r0], #4
 8009f24:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8009f28:	d2e8      	bcs.n	8009efc <quorem+0xb0>
 8009f2a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009f2e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009f32:	b922      	cbnz	r2, 8009f3e <quorem+0xf2>
 8009f34:	3b04      	subs	r3, #4
 8009f36:	429d      	cmp	r5, r3
 8009f38:	461a      	mov	r2, r3
 8009f3a:	d30a      	bcc.n	8009f52 <quorem+0x106>
 8009f3c:	613c      	str	r4, [r7, #16]
 8009f3e:	4630      	mov	r0, r6
 8009f40:	b003      	add	sp, #12
 8009f42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f46:	6812      	ldr	r2, [r2, #0]
 8009f48:	3b04      	subs	r3, #4
 8009f4a:	2a00      	cmp	r2, #0
 8009f4c:	d1cc      	bne.n	8009ee8 <quorem+0x9c>
 8009f4e:	3c01      	subs	r4, #1
 8009f50:	e7c7      	b.n	8009ee2 <quorem+0x96>
 8009f52:	6812      	ldr	r2, [r2, #0]
 8009f54:	3b04      	subs	r3, #4
 8009f56:	2a00      	cmp	r2, #0
 8009f58:	d1f0      	bne.n	8009f3c <quorem+0xf0>
 8009f5a:	3c01      	subs	r4, #1
 8009f5c:	e7eb      	b.n	8009f36 <quorem+0xea>
 8009f5e:	2000      	movs	r0, #0
 8009f60:	e7ee      	b.n	8009f40 <quorem+0xf4>
 8009f62:	0000      	movs	r0, r0
 8009f64:	0000      	movs	r0, r0
	...

08009f68 <_dtoa_r>:
 8009f68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f6c:	ed2d 8b02 	vpush	{d8}
 8009f70:	ec57 6b10 	vmov	r6, r7, d0
 8009f74:	b095      	sub	sp, #84	; 0x54
 8009f76:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8009f78:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8009f7c:	9105      	str	r1, [sp, #20]
 8009f7e:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8009f82:	4604      	mov	r4, r0
 8009f84:	9209      	str	r2, [sp, #36]	; 0x24
 8009f86:	930f      	str	r3, [sp, #60]	; 0x3c
 8009f88:	b975      	cbnz	r5, 8009fa8 <_dtoa_r+0x40>
 8009f8a:	2010      	movs	r0, #16
 8009f8c:	f000 fffc 	bl	800af88 <malloc>
 8009f90:	4602      	mov	r2, r0
 8009f92:	6260      	str	r0, [r4, #36]	; 0x24
 8009f94:	b920      	cbnz	r0, 8009fa0 <_dtoa_r+0x38>
 8009f96:	4bb2      	ldr	r3, [pc, #712]	; (800a260 <_dtoa_r+0x2f8>)
 8009f98:	21ea      	movs	r1, #234	; 0xea
 8009f9a:	48b2      	ldr	r0, [pc, #712]	; (800a264 <_dtoa_r+0x2fc>)
 8009f9c:	f001 ff5e 	bl	800be5c <__assert_func>
 8009fa0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8009fa4:	6005      	str	r5, [r0, #0]
 8009fa6:	60c5      	str	r5, [r0, #12]
 8009fa8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009faa:	6819      	ldr	r1, [r3, #0]
 8009fac:	b151      	cbz	r1, 8009fc4 <_dtoa_r+0x5c>
 8009fae:	685a      	ldr	r2, [r3, #4]
 8009fb0:	604a      	str	r2, [r1, #4]
 8009fb2:	2301      	movs	r3, #1
 8009fb4:	4093      	lsls	r3, r2
 8009fb6:	608b      	str	r3, [r1, #8]
 8009fb8:	4620      	mov	r0, r4
 8009fba:	f001 f83b 	bl	800b034 <_Bfree>
 8009fbe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009fc0:	2200      	movs	r2, #0
 8009fc2:	601a      	str	r2, [r3, #0]
 8009fc4:	1e3b      	subs	r3, r7, #0
 8009fc6:	bfb9      	ittee	lt
 8009fc8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8009fcc:	9303      	strlt	r3, [sp, #12]
 8009fce:	2300      	movge	r3, #0
 8009fd0:	f8c8 3000 	strge.w	r3, [r8]
 8009fd4:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8009fd8:	4ba3      	ldr	r3, [pc, #652]	; (800a268 <_dtoa_r+0x300>)
 8009fda:	bfbc      	itt	lt
 8009fdc:	2201      	movlt	r2, #1
 8009fde:	f8c8 2000 	strlt.w	r2, [r8]
 8009fe2:	ea33 0309 	bics.w	r3, r3, r9
 8009fe6:	d11b      	bne.n	800a020 <_dtoa_r+0xb8>
 8009fe8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009fea:	f242 730f 	movw	r3, #9999	; 0x270f
 8009fee:	6013      	str	r3, [r2, #0]
 8009ff0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009ff4:	4333      	orrs	r3, r6
 8009ff6:	f000 857a 	beq.w	800aaee <_dtoa_r+0xb86>
 8009ffa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009ffc:	b963      	cbnz	r3, 800a018 <_dtoa_r+0xb0>
 8009ffe:	4b9b      	ldr	r3, [pc, #620]	; (800a26c <_dtoa_r+0x304>)
 800a000:	e024      	b.n	800a04c <_dtoa_r+0xe4>
 800a002:	4b9b      	ldr	r3, [pc, #620]	; (800a270 <_dtoa_r+0x308>)
 800a004:	9300      	str	r3, [sp, #0]
 800a006:	3308      	adds	r3, #8
 800a008:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800a00a:	6013      	str	r3, [r2, #0]
 800a00c:	9800      	ldr	r0, [sp, #0]
 800a00e:	b015      	add	sp, #84	; 0x54
 800a010:	ecbd 8b02 	vpop	{d8}
 800a014:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a018:	4b94      	ldr	r3, [pc, #592]	; (800a26c <_dtoa_r+0x304>)
 800a01a:	9300      	str	r3, [sp, #0]
 800a01c:	3303      	adds	r3, #3
 800a01e:	e7f3      	b.n	800a008 <_dtoa_r+0xa0>
 800a020:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a024:	2200      	movs	r2, #0
 800a026:	ec51 0b17 	vmov	r0, r1, d7
 800a02a:	2300      	movs	r3, #0
 800a02c:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 800a030:	f7f6 fd4a 	bl	8000ac8 <__aeabi_dcmpeq>
 800a034:	4680      	mov	r8, r0
 800a036:	b158      	cbz	r0, 800a050 <_dtoa_r+0xe8>
 800a038:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a03a:	2301      	movs	r3, #1
 800a03c:	6013      	str	r3, [r2, #0]
 800a03e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a040:	2b00      	cmp	r3, #0
 800a042:	f000 8551 	beq.w	800aae8 <_dtoa_r+0xb80>
 800a046:	488b      	ldr	r0, [pc, #556]	; (800a274 <_dtoa_r+0x30c>)
 800a048:	6018      	str	r0, [r3, #0]
 800a04a:	1e43      	subs	r3, r0, #1
 800a04c:	9300      	str	r3, [sp, #0]
 800a04e:	e7dd      	b.n	800a00c <_dtoa_r+0xa4>
 800a050:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800a054:	aa12      	add	r2, sp, #72	; 0x48
 800a056:	a913      	add	r1, sp, #76	; 0x4c
 800a058:	4620      	mov	r0, r4
 800a05a:	f001 facd 	bl	800b5f8 <__d2b>
 800a05e:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800a062:	4683      	mov	fp, r0
 800a064:	2d00      	cmp	r5, #0
 800a066:	d07c      	beq.n	800a162 <_dtoa_r+0x1fa>
 800a068:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a06a:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 800a06e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a072:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 800a076:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800a07a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800a07e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800a082:	4b7d      	ldr	r3, [pc, #500]	; (800a278 <_dtoa_r+0x310>)
 800a084:	2200      	movs	r2, #0
 800a086:	4630      	mov	r0, r6
 800a088:	4639      	mov	r1, r7
 800a08a:	f7f6 f8fd 	bl	8000288 <__aeabi_dsub>
 800a08e:	a36e      	add	r3, pc, #440	; (adr r3, 800a248 <_dtoa_r+0x2e0>)
 800a090:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a094:	f7f6 fab0 	bl	80005f8 <__aeabi_dmul>
 800a098:	a36d      	add	r3, pc, #436	; (adr r3, 800a250 <_dtoa_r+0x2e8>)
 800a09a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a09e:	f7f6 f8f5 	bl	800028c <__adddf3>
 800a0a2:	4606      	mov	r6, r0
 800a0a4:	4628      	mov	r0, r5
 800a0a6:	460f      	mov	r7, r1
 800a0a8:	f7f6 fa3c 	bl	8000524 <__aeabi_i2d>
 800a0ac:	a36a      	add	r3, pc, #424	; (adr r3, 800a258 <_dtoa_r+0x2f0>)
 800a0ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0b2:	f7f6 faa1 	bl	80005f8 <__aeabi_dmul>
 800a0b6:	4602      	mov	r2, r0
 800a0b8:	460b      	mov	r3, r1
 800a0ba:	4630      	mov	r0, r6
 800a0bc:	4639      	mov	r1, r7
 800a0be:	f7f6 f8e5 	bl	800028c <__adddf3>
 800a0c2:	4606      	mov	r6, r0
 800a0c4:	460f      	mov	r7, r1
 800a0c6:	f7f6 fd47 	bl	8000b58 <__aeabi_d2iz>
 800a0ca:	2200      	movs	r2, #0
 800a0cc:	4682      	mov	sl, r0
 800a0ce:	2300      	movs	r3, #0
 800a0d0:	4630      	mov	r0, r6
 800a0d2:	4639      	mov	r1, r7
 800a0d4:	f7f6 fd02 	bl	8000adc <__aeabi_dcmplt>
 800a0d8:	b148      	cbz	r0, 800a0ee <_dtoa_r+0x186>
 800a0da:	4650      	mov	r0, sl
 800a0dc:	f7f6 fa22 	bl	8000524 <__aeabi_i2d>
 800a0e0:	4632      	mov	r2, r6
 800a0e2:	463b      	mov	r3, r7
 800a0e4:	f7f6 fcf0 	bl	8000ac8 <__aeabi_dcmpeq>
 800a0e8:	b908      	cbnz	r0, 800a0ee <_dtoa_r+0x186>
 800a0ea:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a0ee:	f1ba 0f16 	cmp.w	sl, #22
 800a0f2:	d854      	bhi.n	800a19e <_dtoa_r+0x236>
 800a0f4:	4b61      	ldr	r3, [pc, #388]	; (800a27c <_dtoa_r+0x314>)
 800a0f6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800a0fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0fe:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800a102:	f7f6 fceb 	bl	8000adc <__aeabi_dcmplt>
 800a106:	2800      	cmp	r0, #0
 800a108:	d04b      	beq.n	800a1a2 <_dtoa_r+0x23a>
 800a10a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a10e:	2300      	movs	r3, #0
 800a110:	930e      	str	r3, [sp, #56]	; 0x38
 800a112:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a114:	1b5d      	subs	r5, r3, r5
 800a116:	1e6b      	subs	r3, r5, #1
 800a118:	9304      	str	r3, [sp, #16]
 800a11a:	bf43      	ittte	mi
 800a11c:	2300      	movmi	r3, #0
 800a11e:	f1c5 0801 	rsbmi	r8, r5, #1
 800a122:	9304      	strmi	r3, [sp, #16]
 800a124:	f04f 0800 	movpl.w	r8, #0
 800a128:	f1ba 0f00 	cmp.w	sl, #0
 800a12c:	db3b      	blt.n	800a1a6 <_dtoa_r+0x23e>
 800a12e:	9b04      	ldr	r3, [sp, #16]
 800a130:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 800a134:	4453      	add	r3, sl
 800a136:	9304      	str	r3, [sp, #16]
 800a138:	2300      	movs	r3, #0
 800a13a:	9306      	str	r3, [sp, #24]
 800a13c:	9b05      	ldr	r3, [sp, #20]
 800a13e:	2b09      	cmp	r3, #9
 800a140:	d869      	bhi.n	800a216 <_dtoa_r+0x2ae>
 800a142:	2b05      	cmp	r3, #5
 800a144:	bfc4      	itt	gt
 800a146:	3b04      	subgt	r3, #4
 800a148:	9305      	strgt	r3, [sp, #20]
 800a14a:	9b05      	ldr	r3, [sp, #20]
 800a14c:	f1a3 0302 	sub.w	r3, r3, #2
 800a150:	bfcc      	ite	gt
 800a152:	2500      	movgt	r5, #0
 800a154:	2501      	movle	r5, #1
 800a156:	2b03      	cmp	r3, #3
 800a158:	d869      	bhi.n	800a22e <_dtoa_r+0x2c6>
 800a15a:	e8df f003 	tbb	[pc, r3]
 800a15e:	4e2c      	.short	0x4e2c
 800a160:	5a4c      	.short	0x5a4c
 800a162:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800a166:	441d      	add	r5, r3
 800a168:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800a16c:	2b20      	cmp	r3, #32
 800a16e:	bfc1      	itttt	gt
 800a170:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800a174:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800a178:	fa09 f303 	lslgt.w	r3, r9, r3
 800a17c:	fa26 f000 	lsrgt.w	r0, r6, r0
 800a180:	bfda      	itte	le
 800a182:	f1c3 0320 	rsble	r3, r3, #32
 800a186:	fa06 f003 	lslle.w	r0, r6, r3
 800a18a:	4318      	orrgt	r0, r3
 800a18c:	f7f6 f9ba 	bl	8000504 <__aeabi_ui2d>
 800a190:	2301      	movs	r3, #1
 800a192:	4606      	mov	r6, r0
 800a194:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800a198:	3d01      	subs	r5, #1
 800a19a:	9310      	str	r3, [sp, #64]	; 0x40
 800a19c:	e771      	b.n	800a082 <_dtoa_r+0x11a>
 800a19e:	2301      	movs	r3, #1
 800a1a0:	e7b6      	b.n	800a110 <_dtoa_r+0x1a8>
 800a1a2:	900e      	str	r0, [sp, #56]	; 0x38
 800a1a4:	e7b5      	b.n	800a112 <_dtoa_r+0x1aa>
 800a1a6:	f1ca 0300 	rsb	r3, sl, #0
 800a1aa:	9306      	str	r3, [sp, #24]
 800a1ac:	2300      	movs	r3, #0
 800a1ae:	eba8 080a 	sub.w	r8, r8, sl
 800a1b2:	930d      	str	r3, [sp, #52]	; 0x34
 800a1b4:	e7c2      	b.n	800a13c <_dtoa_r+0x1d4>
 800a1b6:	2300      	movs	r3, #0
 800a1b8:	9308      	str	r3, [sp, #32]
 800a1ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a1bc:	2b00      	cmp	r3, #0
 800a1be:	dc39      	bgt.n	800a234 <_dtoa_r+0x2cc>
 800a1c0:	f04f 0901 	mov.w	r9, #1
 800a1c4:	f8cd 9004 	str.w	r9, [sp, #4]
 800a1c8:	464b      	mov	r3, r9
 800a1ca:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800a1ce:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800a1d0:	2200      	movs	r2, #0
 800a1d2:	6042      	str	r2, [r0, #4]
 800a1d4:	2204      	movs	r2, #4
 800a1d6:	f102 0614 	add.w	r6, r2, #20
 800a1da:	429e      	cmp	r6, r3
 800a1dc:	6841      	ldr	r1, [r0, #4]
 800a1de:	d92f      	bls.n	800a240 <_dtoa_r+0x2d8>
 800a1e0:	4620      	mov	r0, r4
 800a1e2:	f000 fee7 	bl	800afb4 <_Balloc>
 800a1e6:	9000      	str	r0, [sp, #0]
 800a1e8:	2800      	cmp	r0, #0
 800a1ea:	d14b      	bne.n	800a284 <_dtoa_r+0x31c>
 800a1ec:	4b24      	ldr	r3, [pc, #144]	; (800a280 <_dtoa_r+0x318>)
 800a1ee:	4602      	mov	r2, r0
 800a1f0:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800a1f4:	e6d1      	b.n	8009f9a <_dtoa_r+0x32>
 800a1f6:	2301      	movs	r3, #1
 800a1f8:	e7de      	b.n	800a1b8 <_dtoa_r+0x250>
 800a1fa:	2300      	movs	r3, #0
 800a1fc:	9308      	str	r3, [sp, #32]
 800a1fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a200:	eb0a 0903 	add.w	r9, sl, r3
 800a204:	f109 0301 	add.w	r3, r9, #1
 800a208:	2b01      	cmp	r3, #1
 800a20a:	9301      	str	r3, [sp, #4]
 800a20c:	bfb8      	it	lt
 800a20e:	2301      	movlt	r3, #1
 800a210:	e7dd      	b.n	800a1ce <_dtoa_r+0x266>
 800a212:	2301      	movs	r3, #1
 800a214:	e7f2      	b.n	800a1fc <_dtoa_r+0x294>
 800a216:	2501      	movs	r5, #1
 800a218:	2300      	movs	r3, #0
 800a21a:	9305      	str	r3, [sp, #20]
 800a21c:	9508      	str	r5, [sp, #32]
 800a21e:	f04f 39ff 	mov.w	r9, #4294967295
 800a222:	2200      	movs	r2, #0
 800a224:	f8cd 9004 	str.w	r9, [sp, #4]
 800a228:	2312      	movs	r3, #18
 800a22a:	9209      	str	r2, [sp, #36]	; 0x24
 800a22c:	e7cf      	b.n	800a1ce <_dtoa_r+0x266>
 800a22e:	2301      	movs	r3, #1
 800a230:	9308      	str	r3, [sp, #32]
 800a232:	e7f4      	b.n	800a21e <_dtoa_r+0x2b6>
 800a234:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800a238:	f8cd 9004 	str.w	r9, [sp, #4]
 800a23c:	464b      	mov	r3, r9
 800a23e:	e7c6      	b.n	800a1ce <_dtoa_r+0x266>
 800a240:	3101      	adds	r1, #1
 800a242:	6041      	str	r1, [r0, #4]
 800a244:	0052      	lsls	r2, r2, #1
 800a246:	e7c6      	b.n	800a1d6 <_dtoa_r+0x26e>
 800a248:	636f4361 	.word	0x636f4361
 800a24c:	3fd287a7 	.word	0x3fd287a7
 800a250:	8b60c8b3 	.word	0x8b60c8b3
 800a254:	3fc68a28 	.word	0x3fc68a28
 800a258:	509f79fb 	.word	0x509f79fb
 800a25c:	3fd34413 	.word	0x3fd34413
 800a260:	0800d341 	.word	0x0800d341
 800a264:	0800d358 	.word	0x0800d358
 800a268:	7ff00000 	.word	0x7ff00000
 800a26c:	0800d33d 	.word	0x0800d33d
 800a270:	0800d334 	.word	0x0800d334
 800a274:	0800d311 	.word	0x0800d311
 800a278:	3ff80000 	.word	0x3ff80000
 800a27c:	0800d4b0 	.word	0x0800d4b0
 800a280:	0800d3b7 	.word	0x0800d3b7
 800a284:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a286:	9a00      	ldr	r2, [sp, #0]
 800a288:	601a      	str	r2, [r3, #0]
 800a28a:	9b01      	ldr	r3, [sp, #4]
 800a28c:	2b0e      	cmp	r3, #14
 800a28e:	f200 80ad 	bhi.w	800a3ec <_dtoa_r+0x484>
 800a292:	2d00      	cmp	r5, #0
 800a294:	f000 80aa 	beq.w	800a3ec <_dtoa_r+0x484>
 800a298:	f1ba 0f00 	cmp.w	sl, #0
 800a29c:	dd36      	ble.n	800a30c <_dtoa_r+0x3a4>
 800a29e:	4ac3      	ldr	r2, [pc, #780]	; (800a5ac <_dtoa_r+0x644>)
 800a2a0:	f00a 030f 	and.w	r3, sl, #15
 800a2a4:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800a2a8:	ed93 7b00 	vldr	d7, [r3]
 800a2ac:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800a2b0:	ea4f 172a 	mov.w	r7, sl, asr #4
 800a2b4:	eeb0 8a47 	vmov.f32	s16, s14
 800a2b8:	eef0 8a67 	vmov.f32	s17, s15
 800a2bc:	d016      	beq.n	800a2ec <_dtoa_r+0x384>
 800a2be:	4bbc      	ldr	r3, [pc, #752]	; (800a5b0 <_dtoa_r+0x648>)
 800a2c0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800a2c4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a2c8:	f7f6 fac0 	bl	800084c <__aeabi_ddiv>
 800a2cc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a2d0:	f007 070f 	and.w	r7, r7, #15
 800a2d4:	2503      	movs	r5, #3
 800a2d6:	4eb6      	ldr	r6, [pc, #728]	; (800a5b0 <_dtoa_r+0x648>)
 800a2d8:	b957      	cbnz	r7, 800a2f0 <_dtoa_r+0x388>
 800a2da:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a2de:	ec53 2b18 	vmov	r2, r3, d8
 800a2e2:	f7f6 fab3 	bl	800084c <__aeabi_ddiv>
 800a2e6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a2ea:	e029      	b.n	800a340 <_dtoa_r+0x3d8>
 800a2ec:	2502      	movs	r5, #2
 800a2ee:	e7f2      	b.n	800a2d6 <_dtoa_r+0x36e>
 800a2f0:	07f9      	lsls	r1, r7, #31
 800a2f2:	d508      	bpl.n	800a306 <_dtoa_r+0x39e>
 800a2f4:	ec51 0b18 	vmov	r0, r1, d8
 800a2f8:	e9d6 2300 	ldrd	r2, r3, [r6]
 800a2fc:	f7f6 f97c 	bl	80005f8 <__aeabi_dmul>
 800a300:	ec41 0b18 	vmov	d8, r0, r1
 800a304:	3501      	adds	r5, #1
 800a306:	107f      	asrs	r7, r7, #1
 800a308:	3608      	adds	r6, #8
 800a30a:	e7e5      	b.n	800a2d8 <_dtoa_r+0x370>
 800a30c:	f000 80a6 	beq.w	800a45c <_dtoa_r+0x4f4>
 800a310:	f1ca 0600 	rsb	r6, sl, #0
 800a314:	4ba5      	ldr	r3, [pc, #660]	; (800a5ac <_dtoa_r+0x644>)
 800a316:	4fa6      	ldr	r7, [pc, #664]	; (800a5b0 <_dtoa_r+0x648>)
 800a318:	f006 020f 	and.w	r2, r6, #15
 800a31c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a320:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a324:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800a328:	f7f6 f966 	bl	80005f8 <__aeabi_dmul>
 800a32c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a330:	1136      	asrs	r6, r6, #4
 800a332:	2300      	movs	r3, #0
 800a334:	2502      	movs	r5, #2
 800a336:	2e00      	cmp	r6, #0
 800a338:	f040 8085 	bne.w	800a446 <_dtoa_r+0x4de>
 800a33c:	2b00      	cmp	r3, #0
 800a33e:	d1d2      	bne.n	800a2e6 <_dtoa_r+0x37e>
 800a340:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a342:	2b00      	cmp	r3, #0
 800a344:	f000 808c 	beq.w	800a460 <_dtoa_r+0x4f8>
 800a348:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800a34c:	4b99      	ldr	r3, [pc, #612]	; (800a5b4 <_dtoa_r+0x64c>)
 800a34e:	2200      	movs	r2, #0
 800a350:	4630      	mov	r0, r6
 800a352:	4639      	mov	r1, r7
 800a354:	f7f6 fbc2 	bl	8000adc <__aeabi_dcmplt>
 800a358:	2800      	cmp	r0, #0
 800a35a:	f000 8081 	beq.w	800a460 <_dtoa_r+0x4f8>
 800a35e:	9b01      	ldr	r3, [sp, #4]
 800a360:	2b00      	cmp	r3, #0
 800a362:	d07d      	beq.n	800a460 <_dtoa_r+0x4f8>
 800a364:	f1b9 0f00 	cmp.w	r9, #0
 800a368:	dd3c      	ble.n	800a3e4 <_dtoa_r+0x47c>
 800a36a:	f10a 33ff 	add.w	r3, sl, #4294967295
 800a36e:	9307      	str	r3, [sp, #28]
 800a370:	2200      	movs	r2, #0
 800a372:	4b91      	ldr	r3, [pc, #580]	; (800a5b8 <_dtoa_r+0x650>)
 800a374:	4630      	mov	r0, r6
 800a376:	4639      	mov	r1, r7
 800a378:	f7f6 f93e 	bl	80005f8 <__aeabi_dmul>
 800a37c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a380:	3501      	adds	r5, #1
 800a382:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 800a386:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800a38a:	4628      	mov	r0, r5
 800a38c:	f7f6 f8ca 	bl	8000524 <__aeabi_i2d>
 800a390:	4632      	mov	r2, r6
 800a392:	463b      	mov	r3, r7
 800a394:	f7f6 f930 	bl	80005f8 <__aeabi_dmul>
 800a398:	4b88      	ldr	r3, [pc, #544]	; (800a5bc <_dtoa_r+0x654>)
 800a39a:	2200      	movs	r2, #0
 800a39c:	f7f5 ff76 	bl	800028c <__adddf3>
 800a3a0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800a3a4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a3a8:	9303      	str	r3, [sp, #12]
 800a3aa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a3ac:	2b00      	cmp	r3, #0
 800a3ae:	d15c      	bne.n	800a46a <_dtoa_r+0x502>
 800a3b0:	4b83      	ldr	r3, [pc, #524]	; (800a5c0 <_dtoa_r+0x658>)
 800a3b2:	2200      	movs	r2, #0
 800a3b4:	4630      	mov	r0, r6
 800a3b6:	4639      	mov	r1, r7
 800a3b8:	f7f5 ff66 	bl	8000288 <__aeabi_dsub>
 800a3bc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a3c0:	4606      	mov	r6, r0
 800a3c2:	460f      	mov	r7, r1
 800a3c4:	f7f6 fba8 	bl	8000b18 <__aeabi_dcmpgt>
 800a3c8:	2800      	cmp	r0, #0
 800a3ca:	f040 8296 	bne.w	800a8fa <_dtoa_r+0x992>
 800a3ce:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800a3d2:	4630      	mov	r0, r6
 800a3d4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a3d8:	4639      	mov	r1, r7
 800a3da:	f7f6 fb7f 	bl	8000adc <__aeabi_dcmplt>
 800a3de:	2800      	cmp	r0, #0
 800a3e0:	f040 8288 	bne.w	800a8f4 <_dtoa_r+0x98c>
 800a3e4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800a3e8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a3ec:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a3ee:	2b00      	cmp	r3, #0
 800a3f0:	f2c0 8158 	blt.w	800a6a4 <_dtoa_r+0x73c>
 800a3f4:	f1ba 0f0e 	cmp.w	sl, #14
 800a3f8:	f300 8154 	bgt.w	800a6a4 <_dtoa_r+0x73c>
 800a3fc:	4b6b      	ldr	r3, [pc, #428]	; (800a5ac <_dtoa_r+0x644>)
 800a3fe:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800a402:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a406:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a408:	2b00      	cmp	r3, #0
 800a40a:	f280 80e3 	bge.w	800a5d4 <_dtoa_r+0x66c>
 800a40e:	9b01      	ldr	r3, [sp, #4]
 800a410:	2b00      	cmp	r3, #0
 800a412:	f300 80df 	bgt.w	800a5d4 <_dtoa_r+0x66c>
 800a416:	f040 826d 	bne.w	800a8f4 <_dtoa_r+0x98c>
 800a41a:	4b69      	ldr	r3, [pc, #420]	; (800a5c0 <_dtoa_r+0x658>)
 800a41c:	2200      	movs	r2, #0
 800a41e:	4640      	mov	r0, r8
 800a420:	4649      	mov	r1, r9
 800a422:	f7f6 f8e9 	bl	80005f8 <__aeabi_dmul>
 800a426:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a42a:	f7f6 fb6b 	bl	8000b04 <__aeabi_dcmpge>
 800a42e:	9e01      	ldr	r6, [sp, #4]
 800a430:	4637      	mov	r7, r6
 800a432:	2800      	cmp	r0, #0
 800a434:	f040 8243 	bne.w	800a8be <_dtoa_r+0x956>
 800a438:	9d00      	ldr	r5, [sp, #0]
 800a43a:	2331      	movs	r3, #49	; 0x31
 800a43c:	f805 3b01 	strb.w	r3, [r5], #1
 800a440:	f10a 0a01 	add.w	sl, sl, #1
 800a444:	e23f      	b.n	800a8c6 <_dtoa_r+0x95e>
 800a446:	07f2      	lsls	r2, r6, #31
 800a448:	d505      	bpl.n	800a456 <_dtoa_r+0x4ee>
 800a44a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a44e:	f7f6 f8d3 	bl	80005f8 <__aeabi_dmul>
 800a452:	3501      	adds	r5, #1
 800a454:	2301      	movs	r3, #1
 800a456:	1076      	asrs	r6, r6, #1
 800a458:	3708      	adds	r7, #8
 800a45a:	e76c      	b.n	800a336 <_dtoa_r+0x3ce>
 800a45c:	2502      	movs	r5, #2
 800a45e:	e76f      	b.n	800a340 <_dtoa_r+0x3d8>
 800a460:	9b01      	ldr	r3, [sp, #4]
 800a462:	f8cd a01c 	str.w	sl, [sp, #28]
 800a466:	930c      	str	r3, [sp, #48]	; 0x30
 800a468:	e78d      	b.n	800a386 <_dtoa_r+0x41e>
 800a46a:	9900      	ldr	r1, [sp, #0]
 800a46c:	980c      	ldr	r0, [sp, #48]	; 0x30
 800a46e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a470:	4b4e      	ldr	r3, [pc, #312]	; (800a5ac <_dtoa_r+0x644>)
 800a472:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a476:	4401      	add	r1, r0
 800a478:	9102      	str	r1, [sp, #8]
 800a47a:	9908      	ldr	r1, [sp, #32]
 800a47c:	eeb0 8a47 	vmov.f32	s16, s14
 800a480:	eef0 8a67 	vmov.f32	s17, s15
 800a484:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a488:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800a48c:	2900      	cmp	r1, #0
 800a48e:	d045      	beq.n	800a51c <_dtoa_r+0x5b4>
 800a490:	494c      	ldr	r1, [pc, #304]	; (800a5c4 <_dtoa_r+0x65c>)
 800a492:	2000      	movs	r0, #0
 800a494:	f7f6 f9da 	bl	800084c <__aeabi_ddiv>
 800a498:	ec53 2b18 	vmov	r2, r3, d8
 800a49c:	f7f5 fef4 	bl	8000288 <__aeabi_dsub>
 800a4a0:	9d00      	ldr	r5, [sp, #0]
 800a4a2:	ec41 0b18 	vmov	d8, r0, r1
 800a4a6:	4639      	mov	r1, r7
 800a4a8:	4630      	mov	r0, r6
 800a4aa:	f7f6 fb55 	bl	8000b58 <__aeabi_d2iz>
 800a4ae:	900c      	str	r0, [sp, #48]	; 0x30
 800a4b0:	f7f6 f838 	bl	8000524 <__aeabi_i2d>
 800a4b4:	4602      	mov	r2, r0
 800a4b6:	460b      	mov	r3, r1
 800a4b8:	4630      	mov	r0, r6
 800a4ba:	4639      	mov	r1, r7
 800a4bc:	f7f5 fee4 	bl	8000288 <__aeabi_dsub>
 800a4c0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a4c2:	3330      	adds	r3, #48	; 0x30
 800a4c4:	f805 3b01 	strb.w	r3, [r5], #1
 800a4c8:	ec53 2b18 	vmov	r2, r3, d8
 800a4cc:	4606      	mov	r6, r0
 800a4ce:	460f      	mov	r7, r1
 800a4d0:	f7f6 fb04 	bl	8000adc <__aeabi_dcmplt>
 800a4d4:	2800      	cmp	r0, #0
 800a4d6:	d165      	bne.n	800a5a4 <_dtoa_r+0x63c>
 800a4d8:	4632      	mov	r2, r6
 800a4da:	463b      	mov	r3, r7
 800a4dc:	4935      	ldr	r1, [pc, #212]	; (800a5b4 <_dtoa_r+0x64c>)
 800a4de:	2000      	movs	r0, #0
 800a4e0:	f7f5 fed2 	bl	8000288 <__aeabi_dsub>
 800a4e4:	ec53 2b18 	vmov	r2, r3, d8
 800a4e8:	f7f6 faf8 	bl	8000adc <__aeabi_dcmplt>
 800a4ec:	2800      	cmp	r0, #0
 800a4ee:	f040 80b9 	bne.w	800a664 <_dtoa_r+0x6fc>
 800a4f2:	9b02      	ldr	r3, [sp, #8]
 800a4f4:	429d      	cmp	r5, r3
 800a4f6:	f43f af75 	beq.w	800a3e4 <_dtoa_r+0x47c>
 800a4fa:	4b2f      	ldr	r3, [pc, #188]	; (800a5b8 <_dtoa_r+0x650>)
 800a4fc:	ec51 0b18 	vmov	r0, r1, d8
 800a500:	2200      	movs	r2, #0
 800a502:	f7f6 f879 	bl	80005f8 <__aeabi_dmul>
 800a506:	4b2c      	ldr	r3, [pc, #176]	; (800a5b8 <_dtoa_r+0x650>)
 800a508:	ec41 0b18 	vmov	d8, r0, r1
 800a50c:	2200      	movs	r2, #0
 800a50e:	4630      	mov	r0, r6
 800a510:	4639      	mov	r1, r7
 800a512:	f7f6 f871 	bl	80005f8 <__aeabi_dmul>
 800a516:	4606      	mov	r6, r0
 800a518:	460f      	mov	r7, r1
 800a51a:	e7c4      	b.n	800a4a6 <_dtoa_r+0x53e>
 800a51c:	ec51 0b17 	vmov	r0, r1, d7
 800a520:	f7f6 f86a 	bl	80005f8 <__aeabi_dmul>
 800a524:	9b02      	ldr	r3, [sp, #8]
 800a526:	9d00      	ldr	r5, [sp, #0]
 800a528:	930c      	str	r3, [sp, #48]	; 0x30
 800a52a:	ec41 0b18 	vmov	d8, r0, r1
 800a52e:	4639      	mov	r1, r7
 800a530:	4630      	mov	r0, r6
 800a532:	f7f6 fb11 	bl	8000b58 <__aeabi_d2iz>
 800a536:	9011      	str	r0, [sp, #68]	; 0x44
 800a538:	f7f5 fff4 	bl	8000524 <__aeabi_i2d>
 800a53c:	4602      	mov	r2, r0
 800a53e:	460b      	mov	r3, r1
 800a540:	4630      	mov	r0, r6
 800a542:	4639      	mov	r1, r7
 800a544:	f7f5 fea0 	bl	8000288 <__aeabi_dsub>
 800a548:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a54a:	3330      	adds	r3, #48	; 0x30
 800a54c:	f805 3b01 	strb.w	r3, [r5], #1
 800a550:	9b02      	ldr	r3, [sp, #8]
 800a552:	429d      	cmp	r5, r3
 800a554:	4606      	mov	r6, r0
 800a556:	460f      	mov	r7, r1
 800a558:	f04f 0200 	mov.w	r2, #0
 800a55c:	d134      	bne.n	800a5c8 <_dtoa_r+0x660>
 800a55e:	4b19      	ldr	r3, [pc, #100]	; (800a5c4 <_dtoa_r+0x65c>)
 800a560:	ec51 0b18 	vmov	r0, r1, d8
 800a564:	f7f5 fe92 	bl	800028c <__adddf3>
 800a568:	4602      	mov	r2, r0
 800a56a:	460b      	mov	r3, r1
 800a56c:	4630      	mov	r0, r6
 800a56e:	4639      	mov	r1, r7
 800a570:	f7f6 fad2 	bl	8000b18 <__aeabi_dcmpgt>
 800a574:	2800      	cmp	r0, #0
 800a576:	d175      	bne.n	800a664 <_dtoa_r+0x6fc>
 800a578:	ec53 2b18 	vmov	r2, r3, d8
 800a57c:	4911      	ldr	r1, [pc, #68]	; (800a5c4 <_dtoa_r+0x65c>)
 800a57e:	2000      	movs	r0, #0
 800a580:	f7f5 fe82 	bl	8000288 <__aeabi_dsub>
 800a584:	4602      	mov	r2, r0
 800a586:	460b      	mov	r3, r1
 800a588:	4630      	mov	r0, r6
 800a58a:	4639      	mov	r1, r7
 800a58c:	f7f6 faa6 	bl	8000adc <__aeabi_dcmplt>
 800a590:	2800      	cmp	r0, #0
 800a592:	f43f af27 	beq.w	800a3e4 <_dtoa_r+0x47c>
 800a596:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a598:	1e6b      	subs	r3, r5, #1
 800a59a:	930c      	str	r3, [sp, #48]	; 0x30
 800a59c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800a5a0:	2b30      	cmp	r3, #48	; 0x30
 800a5a2:	d0f8      	beq.n	800a596 <_dtoa_r+0x62e>
 800a5a4:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800a5a8:	e04a      	b.n	800a640 <_dtoa_r+0x6d8>
 800a5aa:	bf00      	nop
 800a5ac:	0800d4b0 	.word	0x0800d4b0
 800a5b0:	0800d488 	.word	0x0800d488
 800a5b4:	3ff00000 	.word	0x3ff00000
 800a5b8:	40240000 	.word	0x40240000
 800a5bc:	401c0000 	.word	0x401c0000
 800a5c0:	40140000 	.word	0x40140000
 800a5c4:	3fe00000 	.word	0x3fe00000
 800a5c8:	4baf      	ldr	r3, [pc, #700]	; (800a888 <_dtoa_r+0x920>)
 800a5ca:	f7f6 f815 	bl	80005f8 <__aeabi_dmul>
 800a5ce:	4606      	mov	r6, r0
 800a5d0:	460f      	mov	r7, r1
 800a5d2:	e7ac      	b.n	800a52e <_dtoa_r+0x5c6>
 800a5d4:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800a5d8:	9d00      	ldr	r5, [sp, #0]
 800a5da:	4642      	mov	r2, r8
 800a5dc:	464b      	mov	r3, r9
 800a5de:	4630      	mov	r0, r6
 800a5e0:	4639      	mov	r1, r7
 800a5e2:	f7f6 f933 	bl	800084c <__aeabi_ddiv>
 800a5e6:	f7f6 fab7 	bl	8000b58 <__aeabi_d2iz>
 800a5ea:	9002      	str	r0, [sp, #8]
 800a5ec:	f7f5 ff9a 	bl	8000524 <__aeabi_i2d>
 800a5f0:	4642      	mov	r2, r8
 800a5f2:	464b      	mov	r3, r9
 800a5f4:	f7f6 f800 	bl	80005f8 <__aeabi_dmul>
 800a5f8:	4602      	mov	r2, r0
 800a5fa:	460b      	mov	r3, r1
 800a5fc:	4630      	mov	r0, r6
 800a5fe:	4639      	mov	r1, r7
 800a600:	f7f5 fe42 	bl	8000288 <__aeabi_dsub>
 800a604:	9e02      	ldr	r6, [sp, #8]
 800a606:	9f01      	ldr	r7, [sp, #4]
 800a608:	3630      	adds	r6, #48	; 0x30
 800a60a:	f805 6b01 	strb.w	r6, [r5], #1
 800a60e:	9e00      	ldr	r6, [sp, #0]
 800a610:	1bae      	subs	r6, r5, r6
 800a612:	42b7      	cmp	r7, r6
 800a614:	4602      	mov	r2, r0
 800a616:	460b      	mov	r3, r1
 800a618:	d137      	bne.n	800a68a <_dtoa_r+0x722>
 800a61a:	f7f5 fe37 	bl	800028c <__adddf3>
 800a61e:	4642      	mov	r2, r8
 800a620:	464b      	mov	r3, r9
 800a622:	4606      	mov	r6, r0
 800a624:	460f      	mov	r7, r1
 800a626:	f7f6 fa77 	bl	8000b18 <__aeabi_dcmpgt>
 800a62a:	b9c8      	cbnz	r0, 800a660 <_dtoa_r+0x6f8>
 800a62c:	4642      	mov	r2, r8
 800a62e:	464b      	mov	r3, r9
 800a630:	4630      	mov	r0, r6
 800a632:	4639      	mov	r1, r7
 800a634:	f7f6 fa48 	bl	8000ac8 <__aeabi_dcmpeq>
 800a638:	b110      	cbz	r0, 800a640 <_dtoa_r+0x6d8>
 800a63a:	9b02      	ldr	r3, [sp, #8]
 800a63c:	07d9      	lsls	r1, r3, #31
 800a63e:	d40f      	bmi.n	800a660 <_dtoa_r+0x6f8>
 800a640:	4620      	mov	r0, r4
 800a642:	4659      	mov	r1, fp
 800a644:	f000 fcf6 	bl	800b034 <_Bfree>
 800a648:	2300      	movs	r3, #0
 800a64a:	702b      	strb	r3, [r5, #0]
 800a64c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a64e:	f10a 0001 	add.w	r0, sl, #1
 800a652:	6018      	str	r0, [r3, #0]
 800a654:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a656:	2b00      	cmp	r3, #0
 800a658:	f43f acd8 	beq.w	800a00c <_dtoa_r+0xa4>
 800a65c:	601d      	str	r5, [r3, #0]
 800a65e:	e4d5      	b.n	800a00c <_dtoa_r+0xa4>
 800a660:	f8cd a01c 	str.w	sl, [sp, #28]
 800a664:	462b      	mov	r3, r5
 800a666:	461d      	mov	r5, r3
 800a668:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a66c:	2a39      	cmp	r2, #57	; 0x39
 800a66e:	d108      	bne.n	800a682 <_dtoa_r+0x71a>
 800a670:	9a00      	ldr	r2, [sp, #0]
 800a672:	429a      	cmp	r2, r3
 800a674:	d1f7      	bne.n	800a666 <_dtoa_r+0x6fe>
 800a676:	9a07      	ldr	r2, [sp, #28]
 800a678:	9900      	ldr	r1, [sp, #0]
 800a67a:	3201      	adds	r2, #1
 800a67c:	9207      	str	r2, [sp, #28]
 800a67e:	2230      	movs	r2, #48	; 0x30
 800a680:	700a      	strb	r2, [r1, #0]
 800a682:	781a      	ldrb	r2, [r3, #0]
 800a684:	3201      	adds	r2, #1
 800a686:	701a      	strb	r2, [r3, #0]
 800a688:	e78c      	b.n	800a5a4 <_dtoa_r+0x63c>
 800a68a:	4b7f      	ldr	r3, [pc, #508]	; (800a888 <_dtoa_r+0x920>)
 800a68c:	2200      	movs	r2, #0
 800a68e:	f7f5 ffb3 	bl	80005f8 <__aeabi_dmul>
 800a692:	2200      	movs	r2, #0
 800a694:	2300      	movs	r3, #0
 800a696:	4606      	mov	r6, r0
 800a698:	460f      	mov	r7, r1
 800a69a:	f7f6 fa15 	bl	8000ac8 <__aeabi_dcmpeq>
 800a69e:	2800      	cmp	r0, #0
 800a6a0:	d09b      	beq.n	800a5da <_dtoa_r+0x672>
 800a6a2:	e7cd      	b.n	800a640 <_dtoa_r+0x6d8>
 800a6a4:	9a08      	ldr	r2, [sp, #32]
 800a6a6:	2a00      	cmp	r2, #0
 800a6a8:	f000 80c4 	beq.w	800a834 <_dtoa_r+0x8cc>
 800a6ac:	9a05      	ldr	r2, [sp, #20]
 800a6ae:	2a01      	cmp	r2, #1
 800a6b0:	f300 80a8 	bgt.w	800a804 <_dtoa_r+0x89c>
 800a6b4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800a6b6:	2a00      	cmp	r2, #0
 800a6b8:	f000 80a0 	beq.w	800a7fc <_dtoa_r+0x894>
 800a6bc:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800a6c0:	9e06      	ldr	r6, [sp, #24]
 800a6c2:	4645      	mov	r5, r8
 800a6c4:	9a04      	ldr	r2, [sp, #16]
 800a6c6:	2101      	movs	r1, #1
 800a6c8:	441a      	add	r2, r3
 800a6ca:	4620      	mov	r0, r4
 800a6cc:	4498      	add	r8, r3
 800a6ce:	9204      	str	r2, [sp, #16]
 800a6d0:	f000 fd6c 	bl	800b1ac <__i2b>
 800a6d4:	4607      	mov	r7, r0
 800a6d6:	2d00      	cmp	r5, #0
 800a6d8:	dd0b      	ble.n	800a6f2 <_dtoa_r+0x78a>
 800a6da:	9b04      	ldr	r3, [sp, #16]
 800a6dc:	2b00      	cmp	r3, #0
 800a6de:	dd08      	ble.n	800a6f2 <_dtoa_r+0x78a>
 800a6e0:	42ab      	cmp	r3, r5
 800a6e2:	9a04      	ldr	r2, [sp, #16]
 800a6e4:	bfa8      	it	ge
 800a6e6:	462b      	movge	r3, r5
 800a6e8:	eba8 0803 	sub.w	r8, r8, r3
 800a6ec:	1aed      	subs	r5, r5, r3
 800a6ee:	1ad3      	subs	r3, r2, r3
 800a6f0:	9304      	str	r3, [sp, #16]
 800a6f2:	9b06      	ldr	r3, [sp, #24]
 800a6f4:	b1fb      	cbz	r3, 800a736 <_dtoa_r+0x7ce>
 800a6f6:	9b08      	ldr	r3, [sp, #32]
 800a6f8:	2b00      	cmp	r3, #0
 800a6fa:	f000 809f 	beq.w	800a83c <_dtoa_r+0x8d4>
 800a6fe:	2e00      	cmp	r6, #0
 800a700:	dd11      	ble.n	800a726 <_dtoa_r+0x7be>
 800a702:	4639      	mov	r1, r7
 800a704:	4632      	mov	r2, r6
 800a706:	4620      	mov	r0, r4
 800a708:	f000 fe0c 	bl	800b324 <__pow5mult>
 800a70c:	465a      	mov	r2, fp
 800a70e:	4601      	mov	r1, r0
 800a710:	4607      	mov	r7, r0
 800a712:	4620      	mov	r0, r4
 800a714:	f000 fd60 	bl	800b1d8 <__multiply>
 800a718:	4659      	mov	r1, fp
 800a71a:	9007      	str	r0, [sp, #28]
 800a71c:	4620      	mov	r0, r4
 800a71e:	f000 fc89 	bl	800b034 <_Bfree>
 800a722:	9b07      	ldr	r3, [sp, #28]
 800a724:	469b      	mov	fp, r3
 800a726:	9b06      	ldr	r3, [sp, #24]
 800a728:	1b9a      	subs	r2, r3, r6
 800a72a:	d004      	beq.n	800a736 <_dtoa_r+0x7ce>
 800a72c:	4659      	mov	r1, fp
 800a72e:	4620      	mov	r0, r4
 800a730:	f000 fdf8 	bl	800b324 <__pow5mult>
 800a734:	4683      	mov	fp, r0
 800a736:	2101      	movs	r1, #1
 800a738:	4620      	mov	r0, r4
 800a73a:	f000 fd37 	bl	800b1ac <__i2b>
 800a73e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a740:	2b00      	cmp	r3, #0
 800a742:	4606      	mov	r6, r0
 800a744:	dd7c      	ble.n	800a840 <_dtoa_r+0x8d8>
 800a746:	461a      	mov	r2, r3
 800a748:	4601      	mov	r1, r0
 800a74a:	4620      	mov	r0, r4
 800a74c:	f000 fdea 	bl	800b324 <__pow5mult>
 800a750:	9b05      	ldr	r3, [sp, #20]
 800a752:	2b01      	cmp	r3, #1
 800a754:	4606      	mov	r6, r0
 800a756:	dd76      	ble.n	800a846 <_dtoa_r+0x8de>
 800a758:	2300      	movs	r3, #0
 800a75a:	9306      	str	r3, [sp, #24]
 800a75c:	6933      	ldr	r3, [r6, #16]
 800a75e:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800a762:	6918      	ldr	r0, [r3, #16]
 800a764:	f000 fcd2 	bl	800b10c <__hi0bits>
 800a768:	f1c0 0020 	rsb	r0, r0, #32
 800a76c:	9b04      	ldr	r3, [sp, #16]
 800a76e:	4418      	add	r0, r3
 800a770:	f010 001f 	ands.w	r0, r0, #31
 800a774:	f000 8086 	beq.w	800a884 <_dtoa_r+0x91c>
 800a778:	f1c0 0320 	rsb	r3, r0, #32
 800a77c:	2b04      	cmp	r3, #4
 800a77e:	dd7f      	ble.n	800a880 <_dtoa_r+0x918>
 800a780:	f1c0 001c 	rsb	r0, r0, #28
 800a784:	9b04      	ldr	r3, [sp, #16]
 800a786:	4403      	add	r3, r0
 800a788:	4480      	add	r8, r0
 800a78a:	4405      	add	r5, r0
 800a78c:	9304      	str	r3, [sp, #16]
 800a78e:	f1b8 0f00 	cmp.w	r8, #0
 800a792:	dd05      	ble.n	800a7a0 <_dtoa_r+0x838>
 800a794:	4659      	mov	r1, fp
 800a796:	4642      	mov	r2, r8
 800a798:	4620      	mov	r0, r4
 800a79a:	f000 fe1d 	bl	800b3d8 <__lshift>
 800a79e:	4683      	mov	fp, r0
 800a7a0:	9b04      	ldr	r3, [sp, #16]
 800a7a2:	2b00      	cmp	r3, #0
 800a7a4:	dd05      	ble.n	800a7b2 <_dtoa_r+0x84a>
 800a7a6:	4631      	mov	r1, r6
 800a7a8:	461a      	mov	r2, r3
 800a7aa:	4620      	mov	r0, r4
 800a7ac:	f000 fe14 	bl	800b3d8 <__lshift>
 800a7b0:	4606      	mov	r6, r0
 800a7b2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a7b4:	2b00      	cmp	r3, #0
 800a7b6:	d069      	beq.n	800a88c <_dtoa_r+0x924>
 800a7b8:	4631      	mov	r1, r6
 800a7ba:	4658      	mov	r0, fp
 800a7bc:	f000 fe78 	bl	800b4b0 <__mcmp>
 800a7c0:	2800      	cmp	r0, #0
 800a7c2:	da63      	bge.n	800a88c <_dtoa_r+0x924>
 800a7c4:	2300      	movs	r3, #0
 800a7c6:	4659      	mov	r1, fp
 800a7c8:	220a      	movs	r2, #10
 800a7ca:	4620      	mov	r0, r4
 800a7cc:	f000 fc54 	bl	800b078 <__multadd>
 800a7d0:	9b08      	ldr	r3, [sp, #32]
 800a7d2:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a7d6:	4683      	mov	fp, r0
 800a7d8:	2b00      	cmp	r3, #0
 800a7da:	f000 818f 	beq.w	800aafc <_dtoa_r+0xb94>
 800a7de:	4639      	mov	r1, r7
 800a7e0:	2300      	movs	r3, #0
 800a7e2:	220a      	movs	r2, #10
 800a7e4:	4620      	mov	r0, r4
 800a7e6:	f000 fc47 	bl	800b078 <__multadd>
 800a7ea:	f1b9 0f00 	cmp.w	r9, #0
 800a7ee:	4607      	mov	r7, r0
 800a7f0:	f300 808e 	bgt.w	800a910 <_dtoa_r+0x9a8>
 800a7f4:	9b05      	ldr	r3, [sp, #20]
 800a7f6:	2b02      	cmp	r3, #2
 800a7f8:	dc50      	bgt.n	800a89c <_dtoa_r+0x934>
 800a7fa:	e089      	b.n	800a910 <_dtoa_r+0x9a8>
 800a7fc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a7fe:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800a802:	e75d      	b.n	800a6c0 <_dtoa_r+0x758>
 800a804:	9b01      	ldr	r3, [sp, #4]
 800a806:	1e5e      	subs	r6, r3, #1
 800a808:	9b06      	ldr	r3, [sp, #24]
 800a80a:	42b3      	cmp	r3, r6
 800a80c:	bfbf      	itttt	lt
 800a80e:	9b06      	ldrlt	r3, [sp, #24]
 800a810:	9606      	strlt	r6, [sp, #24]
 800a812:	1af2      	sublt	r2, r6, r3
 800a814:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 800a816:	bfb6      	itet	lt
 800a818:	189b      	addlt	r3, r3, r2
 800a81a:	1b9e      	subge	r6, r3, r6
 800a81c:	930d      	strlt	r3, [sp, #52]	; 0x34
 800a81e:	9b01      	ldr	r3, [sp, #4]
 800a820:	bfb8      	it	lt
 800a822:	2600      	movlt	r6, #0
 800a824:	2b00      	cmp	r3, #0
 800a826:	bfb5      	itete	lt
 800a828:	eba8 0503 	sublt.w	r5, r8, r3
 800a82c:	9b01      	ldrge	r3, [sp, #4]
 800a82e:	2300      	movlt	r3, #0
 800a830:	4645      	movge	r5, r8
 800a832:	e747      	b.n	800a6c4 <_dtoa_r+0x75c>
 800a834:	9e06      	ldr	r6, [sp, #24]
 800a836:	9f08      	ldr	r7, [sp, #32]
 800a838:	4645      	mov	r5, r8
 800a83a:	e74c      	b.n	800a6d6 <_dtoa_r+0x76e>
 800a83c:	9a06      	ldr	r2, [sp, #24]
 800a83e:	e775      	b.n	800a72c <_dtoa_r+0x7c4>
 800a840:	9b05      	ldr	r3, [sp, #20]
 800a842:	2b01      	cmp	r3, #1
 800a844:	dc18      	bgt.n	800a878 <_dtoa_r+0x910>
 800a846:	9b02      	ldr	r3, [sp, #8]
 800a848:	b9b3      	cbnz	r3, 800a878 <_dtoa_r+0x910>
 800a84a:	9b03      	ldr	r3, [sp, #12]
 800a84c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a850:	b9a3      	cbnz	r3, 800a87c <_dtoa_r+0x914>
 800a852:	9b03      	ldr	r3, [sp, #12]
 800a854:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a858:	0d1b      	lsrs	r3, r3, #20
 800a85a:	051b      	lsls	r3, r3, #20
 800a85c:	b12b      	cbz	r3, 800a86a <_dtoa_r+0x902>
 800a85e:	9b04      	ldr	r3, [sp, #16]
 800a860:	3301      	adds	r3, #1
 800a862:	9304      	str	r3, [sp, #16]
 800a864:	f108 0801 	add.w	r8, r8, #1
 800a868:	2301      	movs	r3, #1
 800a86a:	9306      	str	r3, [sp, #24]
 800a86c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a86e:	2b00      	cmp	r3, #0
 800a870:	f47f af74 	bne.w	800a75c <_dtoa_r+0x7f4>
 800a874:	2001      	movs	r0, #1
 800a876:	e779      	b.n	800a76c <_dtoa_r+0x804>
 800a878:	2300      	movs	r3, #0
 800a87a:	e7f6      	b.n	800a86a <_dtoa_r+0x902>
 800a87c:	9b02      	ldr	r3, [sp, #8]
 800a87e:	e7f4      	b.n	800a86a <_dtoa_r+0x902>
 800a880:	d085      	beq.n	800a78e <_dtoa_r+0x826>
 800a882:	4618      	mov	r0, r3
 800a884:	301c      	adds	r0, #28
 800a886:	e77d      	b.n	800a784 <_dtoa_r+0x81c>
 800a888:	40240000 	.word	0x40240000
 800a88c:	9b01      	ldr	r3, [sp, #4]
 800a88e:	2b00      	cmp	r3, #0
 800a890:	dc38      	bgt.n	800a904 <_dtoa_r+0x99c>
 800a892:	9b05      	ldr	r3, [sp, #20]
 800a894:	2b02      	cmp	r3, #2
 800a896:	dd35      	ble.n	800a904 <_dtoa_r+0x99c>
 800a898:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800a89c:	f1b9 0f00 	cmp.w	r9, #0
 800a8a0:	d10d      	bne.n	800a8be <_dtoa_r+0x956>
 800a8a2:	4631      	mov	r1, r6
 800a8a4:	464b      	mov	r3, r9
 800a8a6:	2205      	movs	r2, #5
 800a8a8:	4620      	mov	r0, r4
 800a8aa:	f000 fbe5 	bl	800b078 <__multadd>
 800a8ae:	4601      	mov	r1, r0
 800a8b0:	4606      	mov	r6, r0
 800a8b2:	4658      	mov	r0, fp
 800a8b4:	f000 fdfc 	bl	800b4b0 <__mcmp>
 800a8b8:	2800      	cmp	r0, #0
 800a8ba:	f73f adbd 	bgt.w	800a438 <_dtoa_r+0x4d0>
 800a8be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a8c0:	9d00      	ldr	r5, [sp, #0]
 800a8c2:	ea6f 0a03 	mvn.w	sl, r3
 800a8c6:	f04f 0800 	mov.w	r8, #0
 800a8ca:	4631      	mov	r1, r6
 800a8cc:	4620      	mov	r0, r4
 800a8ce:	f000 fbb1 	bl	800b034 <_Bfree>
 800a8d2:	2f00      	cmp	r7, #0
 800a8d4:	f43f aeb4 	beq.w	800a640 <_dtoa_r+0x6d8>
 800a8d8:	f1b8 0f00 	cmp.w	r8, #0
 800a8dc:	d005      	beq.n	800a8ea <_dtoa_r+0x982>
 800a8de:	45b8      	cmp	r8, r7
 800a8e0:	d003      	beq.n	800a8ea <_dtoa_r+0x982>
 800a8e2:	4641      	mov	r1, r8
 800a8e4:	4620      	mov	r0, r4
 800a8e6:	f000 fba5 	bl	800b034 <_Bfree>
 800a8ea:	4639      	mov	r1, r7
 800a8ec:	4620      	mov	r0, r4
 800a8ee:	f000 fba1 	bl	800b034 <_Bfree>
 800a8f2:	e6a5      	b.n	800a640 <_dtoa_r+0x6d8>
 800a8f4:	2600      	movs	r6, #0
 800a8f6:	4637      	mov	r7, r6
 800a8f8:	e7e1      	b.n	800a8be <_dtoa_r+0x956>
 800a8fa:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800a8fc:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800a900:	4637      	mov	r7, r6
 800a902:	e599      	b.n	800a438 <_dtoa_r+0x4d0>
 800a904:	9b08      	ldr	r3, [sp, #32]
 800a906:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800a90a:	2b00      	cmp	r3, #0
 800a90c:	f000 80fd 	beq.w	800ab0a <_dtoa_r+0xba2>
 800a910:	2d00      	cmp	r5, #0
 800a912:	dd05      	ble.n	800a920 <_dtoa_r+0x9b8>
 800a914:	4639      	mov	r1, r7
 800a916:	462a      	mov	r2, r5
 800a918:	4620      	mov	r0, r4
 800a91a:	f000 fd5d 	bl	800b3d8 <__lshift>
 800a91e:	4607      	mov	r7, r0
 800a920:	9b06      	ldr	r3, [sp, #24]
 800a922:	2b00      	cmp	r3, #0
 800a924:	d05c      	beq.n	800a9e0 <_dtoa_r+0xa78>
 800a926:	6879      	ldr	r1, [r7, #4]
 800a928:	4620      	mov	r0, r4
 800a92a:	f000 fb43 	bl	800afb4 <_Balloc>
 800a92e:	4605      	mov	r5, r0
 800a930:	b928      	cbnz	r0, 800a93e <_dtoa_r+0x9d6>
 800a932:	4b80      	ldr	r3, [pc, #512]	; (800ab34 <_dtoa_r+0xbcc>)
 800a934:	4602      	mov	r2, r0
 800a936:	f240 21ea 	movw	r1, #746	; 0x2ea
 800a93a:	f7ff bb2e 	b.w	8009f9a <_dtoa_r+0x32>
 800a93e:	693a      	ldr	r2, [r7, #16]
 800a940:	3202      	adds	r2, #2
 800a942:	0092      	lsls	r2, r2, #2
 800a944:	f107 010c 	add.w	r1, r7, #12
 800a948:	300c      	adds	r0, #12
 800a94a:	f000 fb25 	bl	800af98 <memcpy>
 800a94e:	2201      	movs	r2, #1
 800a950:	4629      	mov	r1, r5
 800a952:	4620      	mov	r0, r4
 800a954:	f000 fd40 	bl	800b3d8 <__lshift>
 800a958:	9b00      	ldr	r3, [sp, #0]
 800a95a:	3301      	adds	r3, #1
 800a95c:	9301      	str	r3, [sp, #4]
 800a95e:	9b00      	ldr	r3, [sp, #0]
 800a960:	444b      	add	r3, r9
 800a962:	9307      	str	r3, [sp, #28]
 800a964:	9b02      	ldr	r3, [sp, #8]
 800a966:	f003 0301 	and.w	r3, r3, #1
 800a96a:	46b8      	mov	r8, r7
 800a96c:	9306      	str	r3, [sp, #24]
 800a96e:	4607      	mov	r7, r0
 800a970:	9b01      	ldr	r3, [sp, #4]
 800a972:	4631      	mov	r1, r6
 800a974:	3b01      	subs	r3, #1
 800a976:	4658      	mov	r0, fp
 800a978:	9302      	str	r3, [sp, #8]
 800a97a:	f7ff fa67 	bl	8009e4c <quorem>
 800a97e:	4603      	mov	r3, r0
 800a980:	3330      	adds	r3, #48	; 0x30
 800a982:	9004      	str	r0, [sp, #16]
 800a984:	4641      	mov	r1, r8
 800a986:	4658      	mov	r0, fp
 800a988:	9308      	str	r3, [sp, #32]
 800a98a:	f000 fd91 	bl	800b4b0 <__mcmp>
 800a98e:	463a      	mov	r2, r7
 800a990:	4681      	mov	r9, r0
 800a992:	4631      	mov	r1, r6
 800a994:	4620      	mov	r0, r4
 800a996:	f000 fda7 	bl	800b4e8 <__mdiff>
 800a99a:	68c2      	ldr	r2, [r0, #12]
 800a99c:	9b08      	ldr	r3, [sp, #32]
 800a99e:	4605      	mov	r5, r0
 800a9a0:	bb02      	cbnz	r2, 800a9e4 <_dtoa_r+0xa7c>
 800a9a2:	4601      	mov	r1, r0
 800a9a4:	4658      	mov	r0, fp
 800a9a6:	f000 fd83 	bl	800b4b0 <__mcmp>
 800a9aa:	9b08      	ldr	r3, [sp, #32]
 800a9ac:	4602      	mov	r2, r0
 800a9ae:	4629      	mov	r1, r5
 800a9b0:	4620      	mov	r0, r4
 800a9b2:	e9cd 3208 	strd	r3, r2, [sp, #32]
 800a9b6:	f000 fb3d 	bl	800b034 <_Bfree>
 800a9ba:	9b05      	ldr	r3, [sp, #20]
 800a9bc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a9be:	9d01      	ldr	r5, [sp, #4]
 800a9c0:	ea43 0102 	orr.w	r1, r3, r2
 800a9c4:	9b06      	ldr	r3, [sp, #24]
 800a9c6:	430b      	orrs	r3, r1
 800a9c8:	9b08      	ldr	r3, [sp, #32]
 800a9ca:	d10d      	bne.n	800a9e8 <_dtoa_r+0xa80>
 800a9cc:	2b39      	cmp	r3, #57	; 0x39
 800a9ce:	d029      	beq.n	800aa24 <_dtoa_r+0xabc>
 800a9d0:	f1b9 0f00 	cmp.w	r9, #0
 800a9d4:	dd01      	ble.n	800a9da <_dtoa_r+0xa72>
 800a9d6:	9b04      	ldr	r3, [sp, #16]
 800a9d8:	3331      	adds	r3, #49	; 0x31
 800a9da:	9a02      	ldr	r2, [sp, #8]
 800a9dc:	7013      	strb	r3, [r2, #0]
 800a9de:	e774      	b.n	800a8ca <_dtoa_r+0x962>
 800a9e0:	4638      	mov	r0, r7
 800a9e2:	e7b9      	b.n	800a958 <_dtoa_r+0x9f0>
 800a9e4:	2201      	movs	r2, #1
 800a9e6:	e7e2      	b.n	800a9ae <_dtoa_r+0xa46>
 800a9e8:	f1b9 0f00 	cmp.w	r9, #0
 800a9ec:	db06      	blt.n	800a9fc <_dtoa_r+0xa94>
 800a9ee:	9905      	ldr	r1, [sp, #20]
 800a9f0:	ea41 0909 	orr.w	r9, r1, r9
 800a9f4:	9906      	ldr	r1, [sp, #24]
 800a9f6:	ea59 0101 	orrs.w	r1, r9, r1
 800a9fa:	d120      	bne.n	800aa3e <_dtoa_r+0xad6>
 800a9fc:	2a00      	cmp	r2, #0
 800a9fe:	ddec      	ble.n	800a9da <_dtoa_r+0xa72>
 800aa00:	4659      	mov	r1, fp
 800aa02:	2201      	movs	r2, #1
 800aa04:	4620      	mov	r0, r4
 800aa06:	9301      	str	r3, [sp, #4]
 800aa08:	f000 fce6 	bl	800b3d8 <__lshift>
 800aa0c:	4631      	mov	r1, r6
 800aa0e:	4683      	mov	fp, r0
 800aa10:	f000 fd4e 	bl	800b4b0 <__mcmp>
 800aa14:	2800      	cmp	r0, #0
 800aa16:	9b01      	ldr	r3, [sp, #4]
 800aa18:	dc02      	bgt.n	800aa20 <_dtoa_r+0xab8>
 800aa1a:	d1de      	bne.n	800a9da <_dtoa_r+0xa72>
 800aa1c:	07da      	lsls	r2, r3, #31
 800aa1e:	d5dc      	bpl.n	800a9da <_dtoa_r+0xa72>
 800aa20:	2b39      	cmp	r3, #57	; 0x39
 800aa22:	d1d8      	bne.n	800a9d6 <_dtoa_r+0xa6e>
 800aa24:	9a02      	ldr	r2, [sp, #8]
 800aa26:	2339      	movs	r3, #57	; 0x39
 800aa28:	7013      	strb	r3, [r2, #0]
 800aa2a:	462b      	mov	r3, r5
 800aa2c:	461d      	mov	r5, r3
 800aa2e:	3b01      	subs	r3, #1
 800aa30:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800aa34:	2a39      	cmp	r2, #57	; 0x39
 800aa36:	d050      	beq.n	800aada <_dtoa_r+0xb72>
 800aa38:	3201      	adds	r2, #1
 800aa3a:	701a      	strb	r2, [r3, #0]
 800aa3c:	e745      	b.n	800a8ca <_dtoa_r+0x962>
 800aa3e:	2a00      	cmp	r2, #0
 800aa40:	dd03      	ble.n	800aa4a <_dtoa_r+0xae2>
 800aa42:	2b39      	cmp	r3, #57	; 0x39
 800aa44:	d0ee      	beq.n	800aa24 <_dtoa_r+0xabc>
 800aa46:	3301      	adds	r3, #1
 800aa48:	e7c7      	b.n	800a9da <_dtoa_r+0xa72>
 800aa4a:	9a01      	ldr	r2, [sp, #4]
 800aa4c:	9907      	ldr	r1, [sp, #28]
 800aa4e:	f802 3c01 	strb.w	r3, [r2, #-1]
 800aa52:	428a      	cmp	r2, r1
 800aa54:	d02a      	beq.n	800aaac <_dtoa_r+0xb44>
 800aa56:	4659      	mov	r1, fp
 800aa58:	2300      	movs	r3, #0
 800aa5a:	220a      	movs	r2, #10
 800aa5c:	4620      	mov	r0, r4
 800aa5e:	f000 fb0b 	bl	800b078 <__multadd>
 800aa62:	45b8      	cmp	r8, r7
 800aa64:	4683      	mov	fp, r0
 800aa66:	f04f 0300 	mov.w	r3, #0
 800aa6a:	f04f 020a 	mov.w	r2, #10
 800aa6e:	4641      	mov	r1, r8
 800aa70:	4620      	mov	r0, r4
 800aa72:	d107      	bne.n	800aa84 <_dtoa_r+0xb1c>
 800aa74:	f000 fb00 	bl	800b078 <__multadd>
 800aa78:	4680      	mov	r8, r0
 800aa7a:	4607      	mov	r7, r0
 800aa7c:	9b01      	ldr	r3, [sp, #4]
 800aa7e:	3301      	adds	r3, #1
 800aa80:	9301      	str	r3, [sp, #4]
 800aa82:	e775      	b.n	800a970 <_dtoa_r+0xa08>
 800aa84:	f000 faf8 	bl	800b078 <__multadd>
 800aa88:	4639      	mov	r1, r7
 800aa8a:	4680      	mov	r8, r0
 800aa8c:	2300      	movs	r3, #0
 800aa8e:	220a      	movs	r2, #10
 800aa90:	4620      	mov	r0, r4
 800aa92:	f000 faf1 	bl	800b078 <__multadd>
 800aa96:	4607      	mov	r7, r0
 800aa98:	e7f0      	b.n	800aa7c <_dtoa_r+0xb14>
 800aa9a:	f1b9 0f00 	cmp.w	r9, #0
 800aa9e:	9a00      	ldr	r2, [sp, #0]
 800aaa0:	bfcc      	ite	gt
 800aaa2:	464d      	movgt	r5, r9
 800aaa4:	2501      	movle	r5, #1
 800aaa6:	4415      	add	r5, r2
 800aaa8:	f04f 0800 	mov.w	r8, #0
 800aaac:	4659      	mov	r1, fp
 800aaae:	2201      	movs	r2, #1
 800aab0:	4620      	mov	r0, r4
 800aab2:	9301      	str	r3, [sp, #4]
 800aab4:	f000 fc90 	bl	800b3d8 <__lshift>
 800aab8:	4631      	mov	r1, r6
 800aaba:	4683      	mov	fp, r0
 800aabc:	f000 fcf8 	bl	800b4b0 <__mcmp>
 800aac0:	2800      	cmp	r0, #0
 800aac2:	dcb2      	bgt.n	800aa2a <_dtoa_r+0xac2>
 800aac4:	d102      	bne.n	800aacc <_dtoa_r+0xb64>
 800aac6:	9b01      	ldr	r3, [sp, #4]
 800aac8:	07db      	lsls	r3, r3, #31
 800aaca:	d4ae      	bmi.n	800aa2a <_dtoa_r+0xac2>
 800aacc:	462b      	mov	r3, r5
 800aace:	461d      	mov	r5, r3
 800aad0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800aad4:	2a30      	cmp	r2, #48	; 0x30
 800aad6:	d0fa      	beq.n	800aace <_dtoa_r+0xb66>
 800aad8:	e6f7      	b.n	800a8ca <_dtoa_r+0x962>
 800aada:	9a00      	ldr	r2, [sp, #0]
 800aadc:	429a      	cmp	r2, r3
 800aade:	d1a5      	bne.n	800aa2c <_dtoa_r+0xac4>
 800aae0:	f10a 0a01 	add.w	sl, sl, #1
 800aae4:	2331      	movs	r3, #49	; 0x31
 800aae6:	e779      	b.n	800a9dc <_dtoa_r+0xa74>
 800aae8:	4b13      	ldr	r3, [pc, #76]	; (800ab38 <_dtoa_r+0xbd0>)
 800aaea:	f7ff baaf 	b.w	800a04c <_dtoa_r+0xe4>
 800aaee:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800aaf0:	2b00      	cmp	r3, #0
 800aaf2:	f47f aa86 	bne.w	800a002 <_dtoa_r+0x9a>
 800aaf6:	4b11      	ldr	r3, [pc, #68]	; (800ab3c <_dtoa_r+0xbd4>)
 800aaf8:	f7ff baa8 	b.w	800a04c <_dtoa_r+0xe4>
 800aafc:	f1b9 0f00 	cmp.w	r9, #0
 800ab00:	dc03      	bgt.n	800ab0a <_dtoa_r+0xba2>
 800ab02:	9b05      	ldr	r3, [sp, #20]
 800ab04:	2b02      	cmp	r3, #2
 800ab06:	f73f aec9 	bgt.w	800a89c <_dtoa_r+0x934>
 800ab0a:	9d00      	ldr	r5, [sp, #0]
 800ab0c:	4631      	mov	r1, r6
 800ab0e:	4658      	mov	r0, fp
 800ab10:	f7ff f99c 	bl	8009e4c <quorem>
 800ab14:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800ab18:	f805 3b01 	strb.w	r3, [r5], #1
 800ab1c:	9a00      	ldr	r2, [sp, #0]
 800ab1e:	1aaa      	subs	r2, r5, r2
 800ab20:	4591      	cmp	r9, r2
 800ab22:	ddba      	ble.n	800aa9a <_dtoa_r+0xb32>
 800ab24:	4659      	mov	r1, fp
 800ab26:	2300      	movs	r3, #0
 800ab28:	220a      	movs	r2, #10
 800ab2a:	4620      	mov	r0, r4
 800ab2c:	f000 faa4 	bl	800b078 <__multadd>
 800ab30:	4683      	mov	fp, r0
 800ab32:	e7eb      	b.n	800ab0c <_dtoa_r+0xba4>
 800ab34:	0800d3b7 	.word	0x0800d3b7
 800ab38:	0800d310 	.word	0x0800d310
 800ab3c:	0800d334 	.word	0x0800d334

0800ab40 <__sflush_r>:
 800ab40:	898a      	ldrh	r2, [r1, #12]
 800ab42:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ab46:	4605      	mov	r5, r0
 800ab48:	0710      	lsls	r0, r2, #28
 800ab4a:	460c      	mov	r4, r1
 800ab4c:	d458      	bmi.n	800ac00 <__sflush_r+0xc0>
 800ab4e:	684b      	ldr	r3, [r1, #4]
 800ab50:	2b00      	cmp	r3, #0
 800ab52:	dc05      	bgt.n	800ab60 <__sflush_r+0x20>
 800ab54:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800ab56:	2b00      	cmp	r3, #0
 800ab58:	dc02      	bgt.n	800ab60 <__sflush_r+0x20>
 800ab5a:	2000      	movs	r0, #0
 800ab5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ab60:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ab62:	2e00      	cmp	r6, #0
 800ab64:	d0f9      	beq.n	800ab5a <__sflush_r+0x1a>
 800ab66:	2300      	movs	r3, #0
 800ab68:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800ab6c:	682f      	ldr	r7, [r5, #0]
 800ab6e:	602b      	str	r3, [r5, #0]
 800ab70:	d032      	beq.n	800abd8 <__sflush_r+0x98>
 800ab72:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800ab74:	89a3      	ldrh	r3, [r4, #12]
 800ab76:	075a      	lsls	r2, r3, #29
 800ab78:	d505      	bpl.n	800ab86 <__sflush_r+0x46>
 800ab7a:	6863      	ldr	r3, [r4, #4]
 800ab7c:	1ac0      	subs	r0, r0, r3
 800ab7e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ab80:	b10b      	cbz	r3, 800ab86 <__sflush_r+0x46>
 800ab82:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ab84:	1ac0      	subs	r0, r0, r3
 800ab86:	2300      	movs	r3, #0
 800ab88:	4602      	mov	r2, r0
 800ab8a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ab8c:	6a21      	ldr	r1, [r4, #32]
 800ab8e:	4628      	mov	r0, r5
 800ab90:	47b0      	blx	r6
 800ab92:	1c43      	adds	r3, r0, #1
 800ab94:	89a3      	ldrh	r3, [r4, #12]
 800ab96:	d106      	bne.n	800aba6 <__sflush_r+0x66>
 800ab98:	6829      	ldr	r1, [r5, #0]
 800ab9a:	291d      	cmp	r1, #29
 800ab9c:	d82c      	bhi.n	800abf8 <__sflush_r+0xb8>
 800ab9e:	4a2a      	ldr	r2, [pc, #168]	; (800ac48 <__sflush_r+0x108>)
 800aba0:	40ca      	lsrs	r2, r1
 800aba2:	07d6      	lsls	r6, r2, #31
 800aba4:	d528      	bpl.n	800abf8 <__sflush_r+0xb8>
 800aba6:	2200      	movs	r2, #0
 800aba8:	6062      	str	r2, [r4, #4]
 800abaa:	04d9      	lsls	r1, r3, #19
 800abac:	6922      	ldr	r2, [r4, #16]
 800abae:	6022      	str	r2, [r4, #0]
 800abb0:	d504      	bpl.n	800abbc <__sflush_r+0x7c>
 800abb2:	1c42      	adds	r2, r0, #1
 800abb4:	d101      	bne.n	800abba <__sflush_r+0x7a>
 800abb6:	682b      	ldr	r3, [r5, #0]
 800abb8:	b903      	cbnz	r3, 800abbc <__sflush_r+0x7c>
 800abba:	6560      	str	r0, [r4, #84]	; 0x54
 800abbc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800abbe:	602f      	str	r7, [r5, #0]
 800abc0:	2900      	cmp	r1, #0
 800abc2:	d0ca      	beq.n	800ab5a <__sflush_r+0x1a>
 800abc4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800abc8:	4299      	cmp	r1, r3
 800abca:	d002      	beq.n	800abd2 <__sflush_r+0x92>
 800abcc:	4628      	mov	r0, r5
 800abce:	f000 fd7f 	bl	800b6d0 <_free_r>
 800abd2:	2000      	movs	r0, #0
 800abd4:	6360      	str	r0, [r4, #52]	; 0x34
 800abd6:	e7c1      	b.n	800ab5c <__sflush_r+0x1c>
 800abd8:	6a21      	ldr	r1, [r4, #32]
 800abda:	2301      	movs	r3, #1
 800abdc:	4628      	mov	r0, r5
 800abde:	47b0      	blx	r6
 800abe0:	1c41      	adds	r1, r0, #1
 800abe2:	d1c7      	bne.n	800ab74 <__sflush_r+0x34>
 800abe4:	682b      	ldr	r3, [r5, #0]
 800abe6:	2b00      	cmp	r3, #0
 800abe8:	d0c4      	beq.n	800ab74 <__sflush_r+0x34>
 800abea:	2b1d      	cmp	r3, #29
 800abec:	d001      	beq.n	800abf2 <__sflush_r+0xb2>
 800abee:	2b16      	cmp	r3, #22
 800abf0:	d101      	bne.n	800abf6 <__sflush_r+0xb6>
 800abf2:	602f      	str	r7, [r5, #0]
 800abf4:	e7b1      	b.n	800ab5a <__sflush_r+0x1a>
 800abf6:	89a3      	ldrh	r3, [r4, #12]
 800abf8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800abfc:	81a3      	strh	r3, [r4, #12]
 800abfe:	e7ad      	b.n	800ab5c <__sflush_r+0x1c>
 800ac00:	690f      	ldr	r7, [r1, #16]
 800ac02:	2f00      	cmp	r7, #0
 800ac04:	d0a9      	beq.n	800ab5a <__sflush_r+0x1a>
 800ac06:	0793      	lsls	r3, r2, #30
 800ac08:	680e      	ldr	r6, [r1, #0]
 800ac0a:	bf08      	it	eq
 800ac0c:	694b      	ldreq	r3, [r1, #20]
 800ac0e:	600f      	str	r7, [r1, #0]
 800ac10:	bf18      	it	ne
 800ac12:	2300      	movne	r3, #0
 800ac14:	eba6 0807 	sub.w	r8, r6, r7
 800ac18:	608b      	str	r3, [r1, #8]
 800ac1a:	f1b8 0f00 	cmp.w	r8, #0
 800ac1e:	dd9c      	ble.n	800ab5a <__sflush_r+0x1a>
 800ac20:	6a21      	ldr	r1, [r4, #32]
 800ac22:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800ac24:	4643      	mov	r3, r8
 800ac26:	463a      	mov	r2, r7
 800ac28:	4628      	mov	r0, r5
 800ac2a:	47b0      	blx	r6
 800ac2c:	2800      	cmp	r0, #0
 800ac2e:	dc06      	bgt.n	800ac3e <__sflush_r+0xfe>
 800ac30:	89a3      	ldrh	r3, [r4, #12]
 800ac32:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ac36:	81a3      	strh	r3, [r4, #12]
 800ac38:	f04f 30ff 	mov.w	r0, #4294967295
 800ac3c:	e78e      	b.n	800ab5c <__sflush_r+0x1c>
 800ac3e:	4407      	add	r7, r0
 800ac40:	eba8 0800 	sub.w	r8, r8, r0
 800ac44:	e7e9      	b.n	800ac1a <__sflush_r+0xda>
 800ac46:	bf00      	nop
 800ac48:	20400001 	.word	0x20400001

0800ac4c <_fflush_r>:
 800ac4c:	b538      	push	{r3, r4, r5, lr}
 800ac4e:	690b      	ldr	r3, [r1, #16]
 800ac50:	4605      	mov	r5, r0
 800ac52:	460c      	mov	r4, r1
 800ac54:	b913      	cbnz	r3, 800ac5c <_fflush_r+0x10>
 800ac56:	2500      	movs	r5, #0
 800ac58:	4628      	mov	r0, r5
 800ac5a:	bd38      	pop	{r3, r4, r5, pc}
 800ac5c:	b118      	cbz	r0, 800ac66 <_fflush_r+0x1a>
 800ac5e:	6983      	ldr	r3, [r0, #24]
 800ac60:	b90b      	cbnz	r3, 800ac66 <_fflush_r+0x1a>
 800ac62:	f000 f887 	bl	800ad74 <__sinit>
 800ac66:	4b14      	ldr	r3, [pc, #80]	; (800acb8 <_fflush_r+0x6c>)
 800ac68:	429c      	cmp	r4, r3
 800ac6a:	d11b      	bne.n	800aca4 <_fflush_r+0x58>
 800ac6c:	686c      	ldr	r4, [r5, #4]
 800ac6e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ac72:	2b00      	cmp	r3, #0
 800ac74:	d0ef      	beq.n	800ac56 <_fflush_r+0xa>
 800ac76:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800ac78:	07d0      	lsls	r0, r2, #31
 800ac7a:	d404      	bmi.n	800ac86 <_fflush_r+0x3a>
 800ac7c:	0599      	lsls	r1, r3, #22
 800ac7e:	d402      	bmi.n	800ac86 <_fflush_r+0x3a>
 800ac80:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ac82:	f000 f91a 	bl	800aeba <__retarget_lock_acquire_recursive>
 800ac86:	4628      	mov	r0, r5
 800ac88:	4621      	mov	r1, r4
 800ac8a:	f7ff ff59 	bl	800ab40 <__sflush_r>
 800ac8e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ac90:	07da      	lsls	r2, r3, #31
 800ac92:	4605      	mov	r5, r0
 800ac94:	d4e0      	bmi.n	800ac58 <_fflush_r+0xc>
 800ac96:	89a3      	ldrh	r3, [r4, #12]
 800ac98:	059b      	lsls	r3, r3, #22
 800ac9a:	d4dd      	bmi.n	800ac58 <_fflush_r+0xc>
 800ac9c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ac9e:	f000 f90d 	bl	800aebc <__retarget_lock_release_recursive>
 800aca2:	e7d9      	b.n	800ac58 <_fflush_r+0xc>
 800aca4:	4b05      	ldr	r3, [pc, #20]	; (800acbc <_fflush_r+0x70>)
 800aca6:	429c      	cmp	r4, r3
 800aca8:	d101      	bne.n	800acae <_fflush_r+0x62>
 800acaa:	68ac      	ldr	r4, [r5, #8]
 800acac:	e7df      	b.n	800ac6e <_fflush_r+0x22>
 800acae:	4b04      	ldr	r3, [pc, #16]	; (800acc0 <_fflush_r+0x74>)
 800acb0:	429c      	cmp	r4, r3
 800acb2:	bf08      	it	eq
 800acb4:	68ec      	ldreq	r4, [r5, #12]
 800acb6:	e7da      	b.n	800ac6e <_fflush_r+0x22>
 800acb8:	0800d3e8 	.word	0x0800d3e8
 800acbc:	0800d408 	.word	0x0800d408
 800acc0:	0800d3c8 	.word	0x0800d3c8

0800acc4 <std>:
 800acc4:	2300      	movs	r3, #0
 800acc6:	b510      	push	{r4, lr}
 800acc8:	4604      	mov	r4, r0
 800acca:	e9c0 3300 	strd	r3, r3, [r0]
 800acce:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800acd2:	6083      	str	r3, [r0, #8]
 800acd4:	8181      	strh	r1, [r0, #12]
 800acd6:	6643      	str	r3, [r0, #100]	; 0x64
 800acd8:	81c2      	strh	r2, [r0, #14]
 800acda:	6183      	str	r3, [r0, #24]
 800acdc:	4619      	mov	r1, r3
 800acde:	2208      	movs	r2, #8
 800ace0:	305c      	adds	r0, #92	; 0x5c
 800ace2:	f7fe f9f9 	bl	80090d8 <memset>
 800ace6:	4b05      	ldr	r3, [pc, #20]	; (800acfc <std+0x38>)
 800ace8:	6263      	str	r3, [r4, #36]	; 0x24
 800acea:	4b05      	ldr	r3, [pc, #20]	; (800ad00 <std+0x3c>)
 800acec:	62a3      	str	r3, [r4, #40]	; 0x28
 800acee:	4b05      	ldr	r3, [pc, #20]	; (800ad04 <std+0x40>)
 800acf0:	62e3      	str	r3, [r4, #44]	; 0x2c
 800acf2:	4b05      	ldr	r3, [pc, #20]	; (800ad08 <std+0x44>)
 800acf4:	6224      	str	r4, [r4, #32]
 800acf6:	6323      	str	r3, [r4, #48]	; 0x30
 800acf8:	bd10      	pop	{r4, pc}
 800acfa:	bf00      	nop
 800acfc:	0800bdb1 	.word	0x0800bdb1
 800ad00:	0800bdd3 	.word	0x0800bdd3
 800ad04:	0800be0b 	.word	0x0800be0b
 800ad08:	0800be2f 	.word	0x0800be2f

0800ad0c <_cleanup_r>:
 800ad0c:	4901      	ldr	r1, [pc, #4]	; (800ad14 <_cleanup_r+0x8>)
 800ad0e:	f000 b8af 	b.w	800ae70 <_fwalk_reent>
 800ad12:	bf00      	nop
 800ad14:	0800ac4d 	.word	0x0800ac4d

0800ad18 <__sfmoreglue>:
 800ad18:	b570      	push	{r4, r5, r6, lr}
 800ad1a:	1e4a      	subs	r2, r1, #1
 800ad1c:	2568      	movs	r5, #104	; 0x68
 800ad1e:	4355      	muls	r5, r2
 800ad20:	460e      	mov	r6, r1
 800ad22:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800ad26:	f000 fd23 	bl	800b770 <_malloc_r>
 800ad2a:	4604      	mov	r4, r0
 800ad2c:	b140      	cbz	r0, 800ad40 <__sfmoreglue+0x28>
 800ad2e:	2100      	movs	r1, #0
 800ad30:	e9c0 1600 	strd	r1, r6, [r0]
 800ad34:	300c      	adds	r0, #12
 800ad36:	60a0      	str	r0, [r4, #8]
 800ad38:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800ad3c:	f7fe f9cc 	bl	80090d8 <memset>
 800ad40:	4620      	mov	r0, r4
 800ad42:	bd70      	pop	{r4, r5, r6, pc}

0800ad44 <__sfp_lock_acquire>:
 800ad44:	4801      	ldr	r0, [pc, #4]	; (800ad4c <__sfp_lock_acquire+0x8>)
 800ad46:	f000 b8b8 	b.w	800aeba <__retarget_lock_acquire_recursive>
 800ad4a:	bf00      	nop
 800ad4c:	20000954 	.word	0x20000954

0800ad50 <__sfp_lock_release>:
 800ad50:	4801      	ldr	r0, [pc, #4]	; (800ad58 <__sfp_lock_release+0x8>)
 800ad52:	f000 b8b3 	b.w	800aebc <__retarget_lock_release_recursive>
 800ad56:	bf00      	nop
 800ad58:	20000954 	.word	0x20000954

0800ad5c <__sinit_lock_acquire>:
 800ad5c:	4801      	ldr	r0, [pc, #4]	; (800ad64 <__sinit_lock_acquire+0x8>)
 800ad5e:	f000 b8ac 	b.w	800aeba <__retarget_lock_acquire_recursive>
 800ad62:	bf00      	nop
 800ad64:	2000094f 	.word	0x2000094f

0800ad68 <__sinit_lock_release>:
 800ad68:	4801      	ldr	r0, [pc, #4]	; (800ad70 <__sinit_lock_release+0x8>)
 800ad6a:	f000 b8a7 	b.w	800aebc <__retarget_lock_release_recursive>
 800ad6e:	bf00      	nop
 800ad70:	2000094f 	.word	0x2000094f

0800ad74 <__sinit>:
 800ad74:	b510      	push	{r4, lr}
 800ad76:	4604      	mov	r4, r0
 800ad78:	f7ff fff0 	bl	800ad5c <__sinit_lock_acquire>
 800ad7c:	69a3      	ldr	r3, [r4, #24]
 800ad7e:	b11b      	cbz	r3, 800ad88 <__sinit+0x14>
 800ad80:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ad84:	f7ff bff0 	b.w	800ad68 <__sinit_lock_release>
 800ad88:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800ad8c:	6523      	str	r3, [r4, #80]	; 0x50
 800ad8e:	4b13      	ldr	r3, [pc, #76]	; (800addc <__sinit+0x68>)
 800ad90:	4a13      	ldr	r2, [pc, #76]	; (800ade0 <__sinit+0x6c>)
 800ad92:	681b      	ldr	r3, [r3, #0]
 800ad94:	62a2      	str	r2, [r4, #40]	; 0x28
 800ad96:	42a3      	cmp	r3, r4
 800ad98:	bf04      	itt	eq
 800ad9a:	2301      	moveq	r3, #1
 800ad9c:	61a3      	streq	r3, [r4, #24]
 800ad9e:	4620      	mov	r0, r4
 800ada0:	f000 f820 	bl	800ade4 <__sfp>
 800ada4:	6060      	str	r0, [r4, #4]
 800ada6:	4620      	mov	r0, r4
 800ada8:	f000 f81c 	bl	800ade4 <__sfp>
 800adac:	60a0      	str	r0, [r4, #8]
 800adae:	4620      	mov	r0, r4
 800adb0:	f000 f818 	bl	800ade4 <__sfp>
 800adb4:	2200      	movs	r2, #0
 800adb6:	60e0      	str	r0, [r4, #12]
 800adb8:	2104      	movs	r1, #4
 800adba:	6860      	ldr	r0, [r4, #4]
 800adbc:	f7ff ff82 	bl	800acc4 <std>
 800adc0:	68a0      	ldr	r0, [r4, #8]
 800adc2:	2201      	movs	r2, #1
 800adc4:	2109      	movs	r1, #9
 800adc6:	f7ff ff7d 	bl	800acc4 <std>
 800adca:	68e0      	ldr	r0, [r4, #12]
 800adcc:	2202      	movs	r2, #2
 800adce:	2112      	movs	r1, #18
 800add0:	f7ff ff78 	bl	800acc4 <std>
 800add4:	2301      	movs	r3, #1
 800add6:	61a3      	str	r3, [r4, #24]
 800add8:	e7d2      	b.n	800ad80 <__sinit+0xc>
 800adda:	bf00      	nop
 800addc:	0800d2fc 	.word	0x0800d2fc
 800ade0:	0800ad0d 	.word	0x0800ad0d

0800ade4 <__sfp>:
 800ade4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ade6:	4607      	mov	r7, r0
 800ade8:	f7ff ffac 	bl	800ad44 <__sfp_lock_acquire>
 800adec:	4b1e      	ldr	r3, [pc, #120]	; (800ae68 <__sfp+0x84>)
 800adee:	681e      	ldr	r6, [r3, #0]
 800adf0:	69b3      	ldr	r3, [r6, #24]
 800adf2:	b913      	cbnz	r3, 800adfa <__sfp+0x16>
 800adf4:	4630      	mov	r0, r6
 800adf6:	f7ff ffbd 	bl	800ad74 <__sinit>
 800adfa:	3648      	adds	r6, #72	; 0x48
 800adfc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800ae00:	3b01      	subs	r3, #1
 800ae02:	d503      	bpl.n	800ae0c <__sfp+0x28>
 800ae04:	6833      	ldr	r3, [r6, #0]
 800ae06:	b30b      	cbz	r3, 800ae4c <__sfp+0x68>
 800ae08:	6836      	ldr	r6, [r6, #0]
 800ae0a:	e7f7      	b.n	800adfc <__sfp+0x18>
 800ae0c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800ae10:	b9d5      	cbnz	r5, 800ae48 <__sfp+0x64>
 800ae12:	4b16      	ldr	r3, [pc, #88]	; (800ae6c <__sfp+0x88>)
 800ae14:	60e3      	str	r3, [r4, #12]
 800ae16:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800ae1a:	6665      	str	r5, [r4, #100]	; 0x64
 800ae1c:	f000 f84c 	bl	800aeb8 <__retarget_lock_init_recursive>
 800ae20:	f7ff ff96 	bl	800ad50 <__sfp_lock_release>
 800ae24:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800ae28:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800ae2c:	6025      	str	r5, [r4, #0]
 800ae2e:	61a5      	str	r5, [r4, #24]
 800ae30:	2208      	movs	r2, #8
 800ae32:	4629      	mov	r1, r5
 800ae34:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800ae38:	f7fe f94e 	bl	80090d8 <memset>
 800ae3c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800ae40:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800ae44:	4620      	mov	r0, r4
 800ae46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ae48:	3468      	adds	r4, #104	; 0x68
 800ae4a:	e7d9      	b.n	800ae00 <__sfp+0x1c>
 800ae4c:	2104      	movs	r1, #4
 800ae4e:	4638      	mov	r0, r7
 800ae50:	f7ff ff62 	bl	800ad18 <__sfmoreglue>
 800ae54:	4604      	mov	r4, r0
 800ae56:	6030      	str	r0, [r6, #0]
 800ae58:	2800      	cmp	r0, #0
 800ae5a:	d1d5      	bne.n	800ae08 <__sfp+0x24>
 800ae5c:	f7ff ff78 	bl	800ad50 <__sfp_lock_release>
 800ae60:	230c      	movs	r3, #12
 800ae62:	603b      	str	r3, [r7, #0]
 800ae64:	e7ee      	b.n	800ae44 <__sfp+0x60>
 800ae66:	bf00      	nop
 800ae68:	0800d2fc 	.word	0x0800d2fc
 800ae6c:	ffff0001 	.word	0xffff0001

0800ae70 <_fwalk_reent>:
 800ae70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ae74:	4606      	mov	r6, r0
 800ae76:	4688      	mov	r8, r1
 800ae78:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800ae7c:	2700      	movs	r7, #0
 800ae7e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ae82:	f1b9 0901 	subs.w	r9, r9, #1
 800ae86:	d505      	bpl.n	800ae94 <_fwalk_reent+0x24>
 800ae88:	6824      	ldr	r4, [r4, #0]
 800ae8a:	2c00      	cmp	r4, #0
 800ae8c:	d1f7      	bne.n	800ae7e <_fwalk_reent+0xe>
 800ae8e:	4638      	mov	r0, r7
 800ae90:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ae94:	89ab      	ldrh	r3, [r5, #12]
 800ae96:	2b01      	cmp	r3, #1
 800ae98:	d907      	bls.n	800aeaa <_fwalk_reent+0x3a>
 800ae9a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ae9e:	3301      	adds	r3, #1
 800aea0:	d003      	beq.n	800aeaa <_fwalk_reent+0x3a>
 800aea2:	4629      	mov	r1, r5
 800aea4:	4630      	mov	r0, r6
 800aea6:	47c0      	blx	r8
 800aea8:	4307      	orrs	r7, r0
 800aeaa:	3568      	adds	r5, #104	; 0x68
 800aeac:	e7e9      	b.n	800ae82 <_fwalk_reent+0x12>
	...

0800aeb0 <_localeconv_r>:
 800aeb0:	4800      	ldr	r0, [pc, #0]	; (800aeb4 <_localeconv_r+0x4>)
 800aeb2:	4770      	bx	lr
 800aeb4:	20000178 	.word	0x20000178

0800aeb8 <__retarget_lock_init_recursive>:
 800aeb8:	4770      	bx	lr

0800aeba <__retarget_lock_acquire_recursive>:
 800aeba:	4770      	bx	lr

0800aebc <__retarget_lock_release_recursive>:
 800aebc:	4770      	bx	lr

0800aebe <__swhatbuf_r>:
 800aebe:	b570      	push	{r4, r5, r6, lr}
 800aec0:	460e      	mov	r6, r1
 800aec2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aec6:	2900      	cmp	r1, #0
 800aec8:	b096      	sub	sp, #88	; 0x58
 800aeca:	4614      	mov	r4, r2
 800aecc:	461d      	mov	r5, r3
 800aece:	da07      	bge.n	800aee0 <__swhatbuf_r+0x22>
 800aed0:	2300      	movs	r3, #0
 800aed2:	602b      	str	r3, [r5, #0]
 800aed4:	89b3      	ldrh	r3, [r6, #12]
 800aed6:	061a      	lsls	r2, r3, #24
 800aed8:	d410      	bmi.n	800aefc <__swhatbuf_r+0x3e>
 800aeda:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800aede:	e00e      	b.n	800aefe <__swhatbuf_r+0x40>
 800aee0:	466a      	mov	r2, sp
 800aee2:	f000 fffb 	bl	800bedc <_fstat_r>
 800aee6:	2800      	cmp	r0, #0
 800aee8:	dbf2      	blt.n	800aed0 <__swhatbuf_r+0x12>
 800aeea:	9a01      	ldr	r2, [sp, #4]
 800aeec:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800aef0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800aef4:	425a      	negs	r2, r3
 800aef6:	415a      	adcs	r2, r3
 800aef8:	602a      	str	r2, [r5, #0]
 800aefa:	e7ee      	b.n	800aeda <__swhatbuf_r+0x1c>
 800aefc:	2340      	movs	r3, #64	; 0x40
 800aefe:	2000      	movs	r0, #0
 800af00:	6023      	str	r3, [r4, #0]
 800af02:	b016      	add	sp, #88	; 0x58
 800af04:	bd70      	pop	{r4, r5, r6, pc}
	...

0800af08 <__smakebuf_r>:
 800af08:	898b      	ldrh	r3, [r1, #12]
 800af0a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800af0c:	079d      	lsls	r5, r3, #30
 800af0e:	4606      	mov	r6, r0
 800af10:	460c      	mov	r4, r1
 800af12:	d507      	bpl.n	800af24 <__smakebuf_r+0x1c>
 800af14:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800af18:	6023      	str	r3, [r4, #0]
 800af1a:	6123      	str	r3, [r4, #16]
 800af1c:	2301      	movs	r3, #1
 800af1e:	6163      	str	r3, [r4, #20]
 800af20:	b002      	add	sp, #8
 800af22:	bd70      	pop	{r4, r5, r6, pc}
 800af24:	ab01      	add	r3, sp, #4
 800af26:	466a      	mov	r2, sp
 800af28:	f7ff ffc9 	bl	800aebe <__swhatbuf_r>
 800af2c:	9900      	ldr	r1, [sp, #0]
 800af2e:	4605      	mov	r5, r0
 800af30:	4630      	mov	r0, r6
 800af32:	f000 fc1d 	bl	800b770 <_malloc_r>
 800af36:	b948      	cbnz	r0, 800af4c <__smakebuf_r+0x44>
 800af38:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800af3c:	059a      	lsls	r2, r3, #22
 800af3e:	d4ef      	bmi.n	800af20 <__smakebuf_r+0x18>
 800af40:	f023 0303 	bic.w	r3, r3, #3
 800af44:	f043 0302 	orr.w	r3, r3, #2
 800af48:	81a3      	strh	r3, [r4, #12]
 800af4a:	e7e3      	b.n	800af14 <__smakebuf_r+0xc>
 800af4c:	4b0d      	ldr	r3, [pc, #52]	; (800af84 <__smakebuf_r+0x7c>)
 800af4e:	62b3      	str	r3, [r6, #40]	; 0x28
 800af50:	89a3      	ldrh	r3, [r4, #12]
 800af52:	6020      	str	r0, [r4, #0]
 800af54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800af58:	81a3      	strh	r3, [r4, #12]
 800af5a:	9b00      	ldr	r3, [sp, #0]
 800af5c:	6163      	str	r3, [r4, #20]
 800af5e:	9b01      	ldr	r3, [sp, #4]
 800af60:	6120      	str	r0, [r4, #16]
 800af62:	b15b      	cbz	r3, 800af7c <__smakebuf_r+0x74>
 800af64:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800af68:	4630      	mov	r0, r6
 800af6a:	f000 ffc9 	bl	800bf00 <_isatty_r>
 800af6e:	b128      	cbz	r0, 800af7c <__smakebuf_r+0x74>
 800af70:	89a3      	ldrh	r3, [r4, #12]
 800af72:	f023 0303 	bic.w	r3, r3, #3
 800af76:	f043 0301 	orr.w	r3, r3, #1
 800af7a:	81a3      	strh	r3, [r4, #12]
 800af7c:	89a0      	ldrh	r0, [r4, #12]
 800af7e:	4305      	orrs	r5, r0
 800af80:	81a5      	strh	r5, [r4, #12]
 800af82:	e7cd      	b.n	800af20 <__smakebuf_r+0x18>
 800af84:	0800ad0d 	.word	0x0800ad0d

0800af88 <malloc>:
 800af88:	4b02      	ldr	r3, [pc, #8]	; (800af94 <malloc+0xc>)
 800af8a:	4601      	mov	r1, r0
 800af8c:	6818      	ldr	r0, [r3, #0]
 800af8e:	f000 bbef 	b.w	800b770 <_malloc_r>
 800af92:	bf00      	nop
 800af94:	20000024 	.word	0x20000024

0800af98 <memcpy>:
 800af98:	440a      	add	r2, r1
 800af9a:	4291      	cmp	r1, r2
 800af9c:	f100 33ff 	add.w	r3, r0, #4294967295
 800afa0:	d100      	bne.n	800afa4 <memcpy+0xc>
 800afa2:	4770      	bx	lr
 800afa4:	b510      	push	{r4, lr}
 800afa6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800afaa:	f803 4f01 	strb.w	r4, [r3, #1]!
 800afae:	4291      	cmp	r1, r2
 800afb0:	d1f9      	bne.n	800afa6 <memcpy+0xe>
 800afb2:	bd10      	pop	{r4, pc}

0800afb4 <_Balloc>:
 800afb4:	b570      	push	{r4, r5, r6, lr}
 800afb6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800afb8:	4604      	mov	r4, r0
 800afba:	460d      	mov	r5, r1
 800afbc:	b976      	cbnz	r6, 800afdc <_Balloc+0x28>
 800afbe:	2010      	movs	r0, #16
 800afc0:	f7ff ffe2 	bl	800af88 <malloc>
 800afc4:	4602      	mov	r2, r0
 800afc6:	6260      	str	r0, [r4, #36]	; 0x24
 800afc8:	b920      	cbnz	r0, 800afd4 <_Balloc+0x20>
 800afca:	4b18      	ldr	r3, [pc, #96]	; (800b02c <_Balloc+0x78>)
 800afcc:	4818      	ldr	r0, [pc, #96]	; (800b030 <_Balloc+0x7c>)
 800afce:	2166      	movs	r1, #102	; 0x66
 800afd0:	f000 ff44 	bl	800be5c <__assert_func>
 800afd4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800afd8:	6006      	str	r6, [r0, #0]
 800afda:	60c6      	str	r6, [r0, #12]
 800afdc:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800afde:	68f3      	ldr	r3, [r6, #12]
 800afe0:	b183      	cbz	r3, 800b004 <_Balloc+0x50>
 800afe2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800afe4:	68db      	ldr	r3, [r3, #12]
 800afe6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800afea:	b9b8      	cbnz	r0, 800b01c <_Balloc+0x68>
 800afec:	2101      	movs	r1, #1
 800afee:	fa01 f605 	lsl.w	r6, r1, r5
 800aff2:	1d72      	adds	r2, r6, #5
 800aff4:	0092      	lsls	r2, r2, #2
 800aff6:	4620      	mov	r0, r4
 800aff8:	f000 fb5a 	bl	800b6b0 <_calloc_r>
 800affc:	b160      	cbz	r0, 800b018 <_Balloc+0x64>
 800affe:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b002:	e00e      	b.n	800b022 <_Balloc+0x6e>
 800b004:	2221      	movs	r2, #33	; 0x21
 800b006:	2104      	movs	r1, #4
 800b008:	4620      	mov	r0, r4
 800b00a:	f000 fb51 	bl	800b6b0 <_calloc_r>
 800b00e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b010:	60f0      	str	r0, [r6, #12]
 800b012:	68db      	ldr	r3, [r3, #12]
 800b014:	2b00      	cmp	r3, #0
 800b016:	d1e4      	bne.n	800afe2 <_Balloc+0x2e>
 800b018:	2000      	movs	r0, #0
 800b01a:	bd70      	pop	{r4, r5, r6, pc}
 800b01c:	6802      	ldr	r2, [r0, #0]
 800b01e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b022:	2300      	movs	r3, #0
 800b024:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b028:	e7f7      	b.n	800b01a <_Balloc+0x66>
 800b02a:	bf00      	nop
 800b02c:	0800d341 	.word	0x0800d341
 800b030:	0800d428 	.word	0x0800d428

0800b034 <_Bfree>:
 800b034:	b570      	push	{r4, r5, r6, lr}
 800b036:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800b038:	4605      	mov	r5, r0
 800b03a:	460c      	mov	r4, r1
 800b03c:	b976      	cbnz	r6, 800b05c <_Bfree+0x28>
 800b03e:	2010      	movs	r0, #16
 800b040:	f7ff ffa2 	bl	800af88 <malloc>
 800b044:	4602      	mov	r2, r0
 800b046:	6268      	str	r0, [r5, #36]	; 0x24
 800b048:	b920      	cbnz	r0, 800b054 <_Bfree+0x20>
 800b04a:	4b09      	ldr	r3, [pc, #36]	; (800b070 <_Bfree+0x3c>)
 800b04c:	4809      	ldr	r0, [pc, #36]	; (800b074 <_Bfree+0x40>)
 800b04e:	218a      	movs	r1, #138	; 0x8a
 800b050:	f000 ff04 	bl	800be5c <__assert_func>
 800b054:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b058:	6006      	str	r6, [r0, #0]
 800b05a:	60c6      	str	r6, [r0, #12]
 800b05c:	b13c      	cbz	r4, 800b06e <_Bfree+0x3a>
 800b05e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800b060:	6862      	ldr	r2, [r4, #4]
 800b062:	68db      	ldr	r3, [r3, #12]
 800b064:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b068:	6021      	str	r1, [r4, #0]
 800b06a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b06e:	bd70      	pop	{r4, r5, r6, pc}
 800b070:	0800d341 	.word	0x0800d341
 800b074:	0800d428 	.word	0x0800d428

0800b078 <__multadd>:
 800b078:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b07c:	690e      	ldr	r6, [r1, #16]
 800b07e:	4607      	mov	r7, r0
 800b080:	4698      	mov	r8, r3
 800b082:	460c      	mov	r4, r1
 800b084:	f101 0014 	add.w	r0, r1, #20
 800b088:	2300      	movs	r3, #0
 800b08a:	6805      	ldr	r5, [r0, #0]
 800b08c:	b2a9      	uxth	r1, r5
 800b08e:	fb02 8101 	mla	r1, r2, r1, r8
 800b092:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800b096:	0c2d      	lsrs	r5, r5, #16
 800b098:	fb02 c505 	mla	r5, r2, r5, ip
 800b09c:	b289      	uxth	r1, r1
 800b09e:	3301      	adds	r3, #1
 800b0a0:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800b0a4:	429e      	cmp	r6, r3
 800b0a6:	f840 1b04 	str.w	r1, [r0], #4
 800b0aa:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800b0ae:	dcec      	bgt.n	800b08a <__multadd+0x12>
 800b0b0:	f1b8 0f00 	cmp.w	r8, #0
 800b0b4:	d022      	beq.n	800b0fc <__multadd+0x84>
 800b0b6:	68a3      	ldr	r3, [r4, #8]
 800b0b8:	42b3      	cmp	r3, r6
 800b0ba:	dc19      	bgt.n	800b0f0 <__multadd+0x78>
 800b0bc:	6861      	ldr	r1, [r4, #4]
 800b0be:	4638      	mov	r0, r7
 800b0c0:	3101      	adds	r1, #1
 800b0c2:	f7ff ff77 	bl	800afb4 <_Balloc>
 800b0c6:	4605      	mov	r5, r0
 800b0c8:	b928      	cbnz	r0, 800b0d6 <__multadd+0x5e>
 800b0ca:	4602      	mov	r2, r0
 800b0cc:	4b0d      	ldr	r3, [pc, #52]	; (800b104 <__multadd+0x8c>)
 800b0ce:	480e      	ldr	r0, [pc, #56]	; (800b108 <__multadd+0x90>)
 800b0d0:	21b5      	movs	r1, #181	; 0xb5
 800b0d2:	f000 fec3 	bl	800be5c <__assert_func>
 800b0d6:	6922      	ldr	r2, [r4, #16]
 800b0d8:	3202      	adds	r2, #2
 800b0da:	f104 010c 	add.w	r1, r4, #12
 800b0de:	0092      	lsls	r2, r2, #2
 800b0e0:	300c      	adds	r0, #12
 800b0e2:	f7ff ff59 	bl	800af98 <memcpy>
 800b0e6:	4621      	mov	r1, r4
 800b0e8:	4638      	mov	r0, r7
 800b0ea:	f7ff ffa3 	bl	800b034 <_Bfree>
 800b0ee:	462c      	mov	r4, r5
 800b0f0:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800b0f4:	3601      	adds	r6, #1
 800b0f6:	f8c3 8014 	str.w	r8, [r3, #20]
 800b0fa:	6126      	str	r6, [r4, #16]
 800b0fc:	4620      	mov	r0, r4
 800b0fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b102:	bf00      	nop
 800b104:	0800d3b7 	.word	0x0800d3b7
 800b108:	0800d428 	.word	0x0800d428

0800b10c <__hi0bits>:
 800b10c:	0c03      	lsrs	r3, r0, #16
 800b10e:	041b      	lsls	r3, r3, #16
 800b110:	b9d3      	cbnz	r3, 800b148 <__hi0bits+0x3c>
 800b112:	0400      	lsls	r0, r0, #16
 800b114:	2310      	movs	r3, #16
 800b116:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800b11a:	bf04      	itt	eq
 800b11c:	0200      	lsleq	r0, r0, #8
 800b11e:	3308      	addeq	r3, #8
 800b120:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800b124:	bf04      	itt	eq
 800b126:	0100      	lsleq	r0, r0, #4
 800b128:	3304      	addeq	r3, #4
 800b12a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800b12e:	bf04      	itt	eq
 800b130:	0080      	lsleq	r0, r0, #2
 800b132:	3302      	addeq	r3, #2
 800b134:	2800      	cmp	r0, #0
 800b136:	db05      	blt.n	800b144 <__hi0bits+0x38>
 800b138:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800b13c:	f103 0301 	add.w	r3, r3, #1
 800b140:	bf08      	it	eq
 800b142:	2320      	moveq	r3, #32
 800b144:	4618      	mov	r0, r3
 800b146:	4770      	bx	lr
 800b148:	2300      	movs	r3, #0
 800b14a:	e7e4      	b.n	800b116 <__hi0bits+0xa>

0800b14c <__lo0bits>:
 800b14c:	6803      	ldr	r3, [r0, #0]
 800b14e:	f013 0207 	ands.w	r2, r3, #7
 800b152:	4601      	mov	r1, r0
 800b154:	d00b      	beq.n	800b16e <__lo0bits+0x22>
 800b156:	07da      	lsls	r2, r3, #31
 800b158:	d424      	bmi.n	800b1a4 <__lo0bits+0x58>
 800b15a:	0798      	lsls	r0, r3, #30
 800b15c:	bf49      	itett	mi
 800b15e:	085b      	lsrmi	r3, r3, #1
 800b160:	089b      	lsrpl	r3, r3, #2
 800b162:	2001      	movmi	r0, #1
 800b164:	600b      	strmi	r3, [r1, #0]
 800b166:	bf5c      	itt	pl
 800b168:	600b      	strpl	r3, [r1, #0]
 800b16a:	2002      	movpl	r0, #2
 800b16c:	4770      	bx	lr
 800b16e:	b298      	uxth	r0, r3
 800b170:	b9b0      	cbnz	r0, 800b1a0 <__lo0bits+0x54>
 800b172:	0c1b      	lsrs	r3, r3, #16
 800b174:	2010      	movs	r0, #16
 800b176:	f013 0fff 	tst.w	r3, #255	; 0xff
 800b17a:	bf04      	itt	eq
 800b17c:	0a1b      	lsreq	r3, r3, #8
 800b17e:	3008      	addeq	r0, #8
 800b180:	071a      	lsls	r2, r3, #28
 800b182:	bf04      	itt	eq
 800b184:	091b      	lsreq	r3, r3, #4
 800b186:	3004      	addeq	r0, #4
 800b188:	079a      	lsls	r2, r3, #30
 800b18a:	bf04      	itt	eq
 800b18c:	089b      	lsreq	r3, r3, #2
 800b18e:	3002      	addeq	r0, #2
 800b190:	07da      	lsls	r2, r3, #31
 800b192:	d403      	bmi.n	800b19c <__lo0bits+0x50>
 800b194:	085b      	lsrs	r3, r3, #1
 800b196:	f100 0001 	add.w	r0, r0, #1
 800b19a:	d005      	beq.n	800b1a8 <__lo0bits+0x5c>
 800b19c:	600b      	str	r3, [r1, #0]
 800b19e:	4770      	bx	lr
 800b1a0:	4610      	mov	r0, r2
 800b1a2:	e7e8      	b.n	800b176 <__lo0bits+0x2a>
 800b1a4:	2000      	movs	r0, #0
 800b1a6:	4770      	bx	lr
 800b1a8:	2020      	movs	r0, #32
 800b1aa:	4770      	bx	lr

0800b1ac <__i2b>:
 800b1ac:	b510      	push	{r4, lr}
 800b1ae:	460c      	mov	r4, r1
 800b1b0:	2101      	movs	r1, #1
 800b1b2:	f7ff feff 	bl	800afb4 <_Balloc>
 800b1b6:	4602      	mov	r2, r0
 800b1b8:	b928      	cbnz	r0, 800b1c6 <__i2b+0x1a>
 800b1ba:	4b05      	ldr	r3, [pc, #20]	; (800b1d0 <__i2b+0x24>)
 800b1bc:	4805      	ldr	r0, [pc, #20]	; (800b1d4 <__i2b+0x28>)
 800b1be:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800b1c2:	f000 fe4b 	bl	800be5c <__assert_func>
 800b1c6:	2301      	movs	r3, #1
 800b1c8:	6144      	str	r4, [r0, #20]
 800b1ca:	6103      	str	r3, [r0, #16]
 800b1cc:	bd10      	pop	{r4, pc}
 800b1ce:	bf00      	nop
 800b1d0:	0800d3b7 	.word	0x0800d3b7
 800b1d4:	0800d428 	.word	0x0800d428

0800b1d8 <__multiply>:
 800b1d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b1dc:	4614      	mov	r4, r2
 800b1de:	690a      	ldr	r2, [r1, #16]
 800b1e0:	6923      	ldr	r3, [r4, #16]
 800b1e2:	429a      	cmp	r2, r3
 800b1e4:	bfb8      	it	lt
 800b1e6:	460b      	movlt	r3, r1
 800b1e8:	460d      	mov	r5, r1
 800b1ea:	bfbc      	itt	lt
 800b1ec:	4625      	movlt	r5, r4
 800b1ee:	461c      	movlt	r4, r3
 800b1f0:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800b1f4:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800b1f8:	68ab      	ldr	r3, [r5, #8]
 800b1fa:	6869      	ldr	r1, [r5, #4]
 800b1fc:	eb0a 0709 	add.w	r7, sl, r9
 800b200:	42bb      	cmp	r3, r7
 800b202:	b085      	sub	sp, #20
 800b204:	bfb8      	it	lt
 800b206:	3101      	addlt	r1, #1
 800b208:	f7ff fed4 	bl	800afb4 <_Balloc>
 800b20c:	b930      	cbnz	r0, 800b21c <__multiply+0x44>
 800b20e:	4602      	mov	r2, r0
 800b210:	4b42      	ldr	r3, [pc, #264]	; (800b31c <__multiply+0x144>)
 800b212:	4843      	ldr	r0, [pc, #268]	; (800b320 <__multiply+0x148>)
 800b214:	f240 115d 	movw	r1, #349	; 0x15d
 800b218:	f000 fe20 	bl	800be5c <__assert_func>
 800b21c:	f100 0614 	add.w	r6, r0, #20
 800b220:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800b224:	4633      	mov	r3, r6
 800b226:	2200      	movs	r2, #0
 800b228:	4543      	cmp	r3, r8
 800b22a:	d31e      	bcc.n	800b26a <__multiply+0x92>
 800b22c:	f105 0c14 	add.w	ip, r5, #20
 800b230:	f104 0314 	add.w	r3, r4, #20
 800b234:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800b238:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800b23c:	9202      	str	r2, [sp, #8]
 800b23e:	ebac 0205 	sub.w	r2, ip, r5
 800b242:	3a15      	subs	r2, #21
 800b244:	f022 0203 	bic.w	r2, r2, #3
 800b248:	3204      	adds	r2, #4
 800b24a:	f105 0115 	add.w	r1, r5, #21
 800b24e:	458c      	cmp	ip, r1
 800b250:	bf38      	it	cc
 800b252:	2204      	movcc	r2, #4
 800b254:	9201      	str	r2, [sp, #4]
 800b256:	9a02      	ldr	r2, [sp, #8]
 800b258:	9303      	str	r3, [sp, #12]
 800b25a:	429a      	cmp	r2, r3
 800b25c:	d808      	bhi.n	800b270 <__multiply+0x98>
 800b25e:	2f00      	cmp	r7, #0
 800b260:	dc55      	bgt.n	800b30e <__multiply+0x136>
 800b262:	6107      	str	r7, [r0, #16]
 800b264:	b005      	add	sp, #20
 800b266:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b26a:	f843 2b04 	str.w	r2, [r3], #4
 800b26e:	e7db      	b.n	800b228 <__multiply+0x50>
 800b270:	f8b3 a000 	ldrh.w	sl, [r3]
 800b274:	f1ba 0f00 	cmp.w	sl, #0
 800b278:	d020      	beq.n	800b2bc <__multiply+0xe4>
 800b27a:	f105 0e14 	add.w	lr, r5, #20
 800b27e:	46b1      	mov	r9, r6
 800b280:	2200      	movs	r2, #0
 800b282:	f85e 4b04 	ldr.w	r4, [lr], #4
 800b286:	f8d9 b000 	ldr.w	fp, [r9]
 800b28a:	b2a1      	uxth	r1, r4
 800b28c:	fa1f fb8b 	uxth.w	fp, fp
 800b290:	fb0a b101 	mla	r1, sl, r1, fp
 800b294:	4411      	add	r1, r2
 800b296:	f8d9 2000 	ldr.w	r2, [r9]
 800b29a:	0c24      	lsrs	r4, r4, #16
 800b29c:	0c12      	lsrs	r2, r2, #16
 800b29e:	fb0a 2404 	mla	r4, sl, r4, r2
 800b2a2:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800b2a6:	b289      	uxth	r1, r1
 800b2a8:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800b2ac:	45f4      	cmp	ip, lr
 800b2ae:	f849 1b04 	str.w	r1, [r9], #4
 800b2b2:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800b2b6:	d8e4      	bhi.n	800b282 <__multiply+0xaa>
 800b2b8:	9901      	ldr	r1, [sp, #4]
 800b2ba:	5072      	str	r2, [r6, r1]
 800b2bc:	9a03      	ldr	r2, [sp, #12]
 800b2be:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800b2c2:	3304      	adds	r3, #4
 800b2c4:	f1b9 0f00 	cmp.w	r9, #0
 800b2c8:	d01f      	beq.n	800b30a <__multiply+0x132>
 800b2ca:	6834      	ldr	r4, [r6, #0]
 800b2cc:	f105 0114 	add.w	r1, r5, #20
 800b2d0:	46b6      	mov	lr, r6
 800b2d2:	f04f 0a00 	mov.w	sl, #0
 800b2d6:	880a      	ldrh	r2, [r1, #0]
 800b2d8:	f8be b002 	ldrh.w	fp, [lr, #2]
 800b2dc:	fb09 b202 	mla	r2, r9, r2, fp
 800b2e0:	4492      	add	sl, r2
 800b2e2:	b2a4      	uxth	r4, r4
 800b2e4:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800b2e8:	f84e 4b04 	str.w	r4, [lr], #4
 800b2ec:	f851 4b04 	ldr.w	r4, [r1], #4
 800b2f0:	f8be 2000 	ldrh.w	r2, [lr]
 800b2f4:	0c24      	lsrs	r4, r4, #16
 800b2f6:	fb09 2404 	mla	r4, r9, r4, r2
 800b2fa:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800b2fe:	458c      	cmp	ip, r1
 800b300:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800b304:	d8e7      	bhi.n	800b2d6 <__multiply+0xfe>
 800b306:	9a01      	ldr	r2, [sp, #4]
 800b308:	50b4      	str	r4, [r6, r2]
 800b30a:	3604      	adds	r6, #4
 800b30c:	e7a3      	b.n	800b256 <__multiply+0x7e>
 800b30e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800b312:	2b00      	cmp	r3, #0
 800b314:	d1a5      	bne.n	800b262 <__multiply+0x8a>
 800b316:	3f01      	subs	r7, #1
 800b318:	e7a1      	b.n	800b25e <__multiply+0x86>
 800b31a:	bf00      	nop
 800b31c:	0800d3b7 	.word	0x0800d3b7
 800b320:	0800d428 	.word	0x0800d428

0800b324 <__pow5mult>:
 800b324:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b328:	4615      	mov	r5, r2
 800b32a:	f012 0203 	ands.w	r2, r2, #3
 800b32e:	4606      	mov	r6, r0
 800b330:	460f      	mov	r7, r1
 800b332:	d007      	beq.n	800b344 <__pow5mult+0x20>
 800b334:	4c25      	ldr	r4, [pc, #148]	; (800b3cc <__pow5mult+0xa8>)
 800b336:	3a01      	subs	r2, #1
 800b338:	2300      	movs	r3, #0
 800b33a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b33e:	f7ff fe9b 	bl	800b078 <__multadd>
 800b342:	4607      	mov	r7, r0
 800b344:	10ad      	asrs	r5, r5, #2
 800b346:	d03d      	beq.n	800b3c4 <__pow5mult+0xa0>
 800b348:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800b34a:	b97c      	cbnz	r4, 800b36c <__pow5mult+0x48>
 800b34c:	2010      	movs	r0, #16
 800b34e:	f7ff fe1b 	bl	800af88 <malloc>
 800b352:	4602      	mov	r2, r0
 800b354:	6270      	str	r0, [r6, #36]	; 0x24
 800b356:	b928      	cbnz	r0, 800b364 <__pow5mult+0x40>
 800b358:	4b1d      	ldr	r3, [pc, #116]	; (800b3d0 <__pow5mult+0xac>)
 800b35a:	481e      	ldr	r0, [pc, #120]	; (800b3d4 <__pow5mult+0xb0>)
 800b35c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800b360:	f000 fd7c 	bl	800be5c <__assert_func>
 800b364:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b368:	6004      	str	r4, [r0, #0]
 800b36a:	60c4      	str	r4, [r0, #12]
 800b36c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800b370:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b374:	b94c      	cbnz	r4, 800b38a <__pow5mult+0x66>
 800b376:	f240 2171 	movw	r1, #625	; 0x271
 800b37a:	4630      	mov	r0, r6
 800b37c:	f7ff ff16 	bl	800b1ac <__i2b>
 800b380:	2300      	movs	r3, #0
 800b382:	f8c8 0008 	str.w	r0, [r8, #8]
 800b386:	4604      	mov	r4, r0
 800b388:	6003      	str	r3, [r0, #0]
 800b38a:	f04f 0900 	mov.w	r9, #0
 800b38e:	07eb      	lsls	r3, r5, #31
 800b390:	d50a      	bpl.n	800b3a8 <__pow5mult+0x84>
 800b392:	4639      	mov	r1, r7
 800b394:	4622      	mov	r2, r4
 800b396:	4630      	mov	r0, r6
 800b398:	f7ff ff1e 	bl	800b1d8 <__multiply>
 800b39c:	4639      	mov	r1, r7
 800b39e:	4680      	mov	r8, r0
 800b3a0:	4630      	mov	r0, r6
 800b3a2:	f7ff fe47 	bl	800b034 <_Bfree>
 800b3a6:	4647      	mov	r7, r8
 800b3a8:	106d      	asrs	r5, r5, #1
 800b3aa:	d00b      	beq.n	800b3c4 <__pow5mult+0xa0>
 800b3ac:	6820      	ldr	r0, [r4, #0]
 800b3ae:	b938      	cbnz	r0, 800b3c0 <__pow5mult+0x9c>
 800b3b0:	4622      	mov	r2, r4
 800b3b2:	4621      	mov	r1, r4
 800b3b4:	4630      	mov	r0, r6
 800b3b6:	f7ff ff0f 	bl	800b1d8 <__multiply>
 800b3ba:	6020      	str	r0, [r4, #0]
 800b3bc:	f8c0 9000 	str.w	r9, [r0]
 800b3c0:	4604      	mov	r4, r0
 800b3c2:	e7e4      	b.n	800b38e <__pow5mult+0x6a>
 800b3c4:	4638      	mov	r0, r7
 800b3c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b3ca:	bf00      	nop
 800b3cc:	0800d578 	.word	0x0800d578
 800b3d0:	0800d341 	.word	0x0800d341
 800b3d4:	0800d428 	.word	0x0800d428

0800b3d8 <__lshift>:
 800b3d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b3dc:	460c      	mov	r4, r1
 800b3de:	6849      	ldr	r1, [r1, #4]
 800b3e0:	6923      	ldr	r3, [r4, #16]
 800b3e2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b3e6:	68a3      	ldr	r3, [r4, #8]
 800b3e8:	4607      	mov	r7, r0
 800b3ea:	4691      	mov	r9, r2
 800b3ec:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b3f0:	f108 0601 	add.w	r6, r8, #1
 800b3f4:	42b3      	cmp	r3, r6
 800b3f6:	db0b      	blt.n	800b410 <__lshift+0x38>
 800b3f8:	4638      	mov	r0, r7
 800b3fa:	f7ff fddb 	bl	800afb4 <_Balloc>
 800b3fe:	4605      	mov	r5, r0
 800b400:	b948      	cbnz	r0, 800b416 <__lshift+0x3e>
 800b402:	4602      	mov	r2, r0
 800b404:	4b28      	ldr	r3, [pc, #160]	; (800b4a8 <__lshift+0xd0>)
 800b406:	4829      	ldr	r0, [pc, #164]	; (800b4ac <__lshift+0xd4>)
 800b408:	f240 11d9 	movw	r1, #473	; 0x1d9
 800b40c:	f000 fd26 	bl	800be5c <__assert_func>
 800b410:	3101      	adds	r1, #1
 800b412:	005b      	lsls	r3, r3, #1
 800b414:	e7ee      	b.n	800b3f4 <__lshift+0x1c>
 800b416:	2300      	movs	r3, #0
 800b418:	f100 0114 	add.w	r1, r0, #20
 800b41c:	f100 0210 	add.w	r2, r0, #16
 800b420:	4618      	mov	r0, r3
 800b422:	4553      	cmp	r3, sl
 800b424:	db33      	blt.n	800b48e <__lshift+0xb6>
 800b426:	6920      	ldr	r0, [r4, #16]
 800b428:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b42c:	f104 0314 	add.w	r3, r4, #20
 800b430:	f019 091f 	ands.w	r9, r9, #31
 800b434:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b438:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800b43c:	d02b      	beq.n	800b496 <__lshift+0xbe>
 800b43e:	f1c9 0e20 	rsb	lr, r9, #32
 800b442:	468a      	mov	sl, r1
 800b444:	2200      	movs	r2, #0
 800b446:	6818      	ldr	r0, [r3, #0]
 800b448:	fa00 f009 	lsl.w	r0, r0, r9
 800b44c:	4302      	orrs	r2, r0
 800b44e:	f84a 2b04 	str.w	r2, [sl], #4
 800b452:	f853 2b04 	ldr.w	r2, [r3], #4
 800b456:	459c      	cmp	ip, r3
 800b458:	fa22 f20e 	lsr.w	r2, r2, lr
 800b45c:	d8f3      	bhi.n	800b446 <__lshift+0x6e>
 800b45e:	ebac 0304 	sub.w	r3, ip, r4
 800b462:	3b15      	subs	r3, #21
 800b464:	f023 0303 	bic.w	r3, r3, #3
 800b468:	3304      	adds	r3, #4
 800b46a:	f104 0015 	add.w	r0, r4, #21
 800b46e:	4584      	cmp	ip, r0
 800b470:	bf38      	it	cc
 800b472:	2304      	movcc	r3, #4
 800b474:	50ca      	str	r2, [r1, r3]
 800b476:	b10a      	cbz	r2, 800b47c <__lshift+0xa4>
 800b478:	f108 0602 	add.w	r6, r8, #2
 800b47c:	3e01      	subs	r6, #1
 800b47e:	4638      	mov	r0, r7
 800b480:	612e      	str	r6, [r5, #16]
 800b482:	4621      	mov	r1, r4
 800b484:	f7ff fdd6 	bl	800b034 <_Bfree>
 800b488:	4628      	mov	r0, r5
 800b48a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b48e:	f842 0f04 	str.w	r0, [r2, #4]!
 800b492:	3301      	adds	r3, #1
 800b494:	e7c5      	b.n	800b422 <__lshift+0x4a>
 800b496:	3904      	subs	r1, #4
 800b498:	f853 2b04 	ldr.w	r2, [r3], #4
 800b49c:	f841 2f04 	str.w	r2, [r1, #4]!
 800b4a0:	459c      	cmp	ip, r3
 800b4a2:	d8f9      	bhi.n	800b498 <__lshift+0xc0>
 800b4a4:	e7ea      	b.n	800b47c <__lshift+0xa4>
 800b4a6:	bf00      	nop
 800b4a8:	0800d3b7 	.word	0x0800d3b7
 800b4ac:	0800d428 	.word	0x0800d428

0800b4b0 <__mcmp>:
 800b4b0:	b530      	push	{r4, r5, lr}
 800b4b2:	6902      	ldr	r2, [r0, #16]
 800b4b4:	690c      	ldr	r4, [r1, #16]
 800b4b6:	1b12      	subs	r2, r2, r4
 800b4b8:	d10e      	bne.n	800b4d8 <__mcmp+0x28>
 800b4ba:	f100 0314 	add.w	r3, r0, #20
 800b4be:	3114      	adds	r1, #20
 800b4c0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800b4c4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800b4c8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800b4cc:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800b4d0:	42a5      	cmp	r5, r4
 800b4d2:	d003      	beq.n	800b4dc <__mcmp+0x2c>
 800b4d4:	d305      	bcc.n	800b4e2 <__mcmp+0x32>
 800b4d6:	2201      	movs	r2, #1
 800b4d8:	4610      	mov	r0, r2
 800b4da:	bd30      	pop	{r4, r5, pc}
 800b4dc:	4283      	cmp	r3, r0
 800b4de:	d3f3      	bcc.n	800b4c8 <__mcmp+0x18>
 800b4e0:	e7fa      	b.n	800b4d8 <__mcmp+0x28>
 800b4e2:	f04f 32ff 	mov.w	r2, #4294967295
 800b4e6:	e7f7      	b.n	800b4d8 <__mcmp+0x28>

0800b4e8 <__mdiff>:
 800b4e8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b4ec:	460c      	mov	r4, r1
 800b4ee:	4606      	mov	r6, r0
 800b4f0:	4611      	mov	r1, r2
 800b4f2:	4620      	mov	r0, r4
 800b4f4:	4617      	mov	r7, r2
 800b4f6:	f7ff ffdb 	bl	800b4b0 <__mcmp>
 800b4fa:	1e05      	subs	r5, r0, #0
 800b4fc:	d110      	bne.n	800b520 <__mdiff+0x38>
 800b4fe:	4629      	mov	r1, r5
 800b500:	4630      	mov	r0, r6
 800b502:	f7ff fd57 	bl	800afb4 <_Balloc>
 800b506:	b930      	cbnz	r0, 800b516 <__mdiff+0x2e>
 800b508:	4b39      	ldr	r3, [pc, #228]	; (800b5f0 <__mdiff+0x108>)
 800b50a:	4602      	mov	r2, r0
 800b50c:	f240 2132 	movw	r1, #562	; 0x232
 800b510:	4838      	ldr	r0, [pc, #224]	; (800b5f4 <__mdiff+0x10c>)
 800b512:	f000 fca3 	bl	800be5c <__assert_func>
 800b516:	2301      	movs	r3, #1
 800b518:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b51c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b520:	bfa4      	itt	ge
 800b522:	463b      	movge	r3, r7
 800b524:	4627      	movge	r7, r4
 800b526:	4630      	mov	r0, r6
 800b528:	6879      	ldr	r1, [r7, #4]
 800b52a:	bfa6      	itte	ge
 800b52c:	461c      	movge	r4, r3
 800b52e:	2500      	movge	r5, #0
 800b530:	2501      	movlt	r5, #1
 800b532:	f7ff fd3f 	bl	800afb4 <_Balloc>
 800b536:	b920      	cbnz	r0, 800b542 <__mdiff+0x5a>
 800b538:	4b2d      	ldr	r3, [pc, #180]	; (800b5f0 <__mdiff+0x108>)
 800b53a:	4602      	mov	r2, r0
 800b53c:	f44f 7110 	mov.w	r1, #576	; 0x240
 800b540:	e7e6      	b.n	800b510 <__mdiff+0x28>
 800b542:	693e      	ldr	r6, [r7, #16]
 800b544:	60c5      	str	r5, [r0, #12]
 800b546:	6925      	ldr	r5, [r4, #16]
 800b548:	f107 0114 	add.w	r1, r7, #20
 800b54c:	f104 0914 	add.w	r9, r4, #20
 800b550:	f100 0e14 	add.w	lr, r0, #20
 800b554:	f107 0210 	add.w	r2, r7, #16
 800b558:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800b55c:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800b560:	46f2      	mov	sl, lr
 800b562:	2700      	movs	r7, #0
 800b564:	f859 3b04 	ldr.w	r3, [r9], #4
 800b568:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800b56c:	fa1f f883 	uxth.w	r8, r3
 800b570:	fa17 f78b 	uxtah	r7, r7, fp
 800b574:	0c1b      	lsrs	r3, r3, #16
 800b576:	eba7 0808 	sub.w	r8, r7, r8
 800b57a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800b57e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800b582:	fa1f f888 	uxth.w	r8, r8
 800b586:	141f      	asrs	r7, r3, #16
 800b588:	454d      	cmp	r5, r9
 800b58a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800b58e:	f84a 3b04 	str.w	r3, [sl], #4
 800b592:	d8e7      	bhi.n	800b564 <__mdiff+0x7c>
 800b594:	1b2b      	subs	r3, r5, r4
 800b596:	3b15      	subs	r3, #21
 800b598:	f023 0303 	bic.w	r3, r3, #3
 800b59c:	3304      	adds	r3, #4
 800b59e:	3415      	adds	r4, #21
 800b5a0:	42a5      	cmp	r5, r4
 800b5a2:	bf38      	it	cc
 800b5a4:	2304      	movcc	r3, #4
 800b5a6:	4419      	add	r1, r3
 800b5a8:	4473      	add	r3, lr
 800b5aa:	469e      	mov	lr, r3
 800b5ac:	460d      	mov	r5, r1
 800b5ae:	4565      	cmp	r5, ip
 800b5b0:	d30e      	bcc.n	800b5d0 <__mdiff+0xe8>
 800b5b2:	f10c 0203 	add.w	r2, ip, #3
 800b5b6:	1a52      	subs	r2, r2, r1
 800b5b8:	f022 0203 	bic.w	r2, r2, #3
 800b5bc:	3903      	subs	r1, #3
 800b5be:	458c      	cmp	ip, r1
 800b5c0:	bf38      	it	cc
 800b5c2:	2200      	movcc	r2, #0
 800b5c4:	441a      	add	r2, r3
 800b5c6:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800b5ca:	b17b      	cbz	r3, 800b5ec <__mdiff+0x104>
 800b5cc:	6106      	str	r6, [r0, #16]
 800b5ce:	e7a5      	b.n	800b51c <__mdiff+0x34>
 800b5d0:	f855 8b04 	ldr.w	r8, [r5], #4
 800b5d4:	fa17 f488 	uxtah	r4, r7, r8
 800b5d8:	1422      	asrs	r2, r4, #16
 800b5da:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800b5de:	b2a4      	uxth	r4, r4
 800b5e0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800b5e4:	f84e 4b04 	str.w	r4, [lr], #4
 800b5e8:	1417      	asrs	r7, r2, #16
 800b5ea:	e7e0      	b.n	800b5ae <__mdiff+0xc6>
 800b5ec:	3e01      	subs	r6, #1
 800b5ee:	e7ea      	b.n	800b5c6 <__mdiff+0xde>
 800b5f0:	0800d3b7 	.word	0x0800d3b7
 800b5f4:	0800d428 	.word	0x0800d428

0800b5f8 <__d2b>:
 800b5f8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b5fc:	4689      	mov	r9, r1
 800b5fe:	2101      	movs	r1, #1
 800b600:	ec57 6b10 	vmov	r6, r7, d0
 800b604:	4690      	mov	r8, r2
 800b606:	f7ff fcd5 	bl	800afb4 <_Balloc>
 800b60a:	4604      	mov	r4, r0
 800b60c:	b930      	cbnz	r0, 800b61c <__d2b+0x24>
 800b60e:	4602      	mov	r2, r0
 800b610:	4b25      	ldr	r3, [pc, #148]	; (800b6a8 <__d2b+0xb0>)
 800b612:	4826      	ldr	r0, [pc, #152]	; (800b6ac <__d2b+0xb4>)
 800b614:	f240 310a 	movw	r1, #778	; 0x30a
 800b618:	f000 fc20 	bl	800be5c <__assert_func>
 800b61c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800b620:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800b624:	bb35      	cbnz	r5, 800b674 <__d2b+0x7c>
 800b626:	2e00      	cmp	r6, #0
 800b628:	9301      	str	r3, [sp, #4]
 800b62a:	d028      	beq.n	800b67e <__d2b+0x86>
 800b62c:	4668      	mov	r0, sp
 800b62e:	9600      	str	r6, [sp, #0]
 800b630:	f7ff fd8c 	bl	800b14c <__lo0bits>
 800b634:	9900      	ldr	r1, [sp, #0]
 800b636:	b300      	cbz	r0, 800b67a <__d2b+0x82>
 800b638:	9a01      	ldr	r2, [sp, #4]
 800b63a:	f1c0 0320 	rsb	r3, r0, #32
 800b63e:	fa02 f303 	lsl.w	r3, r2, r3
 800b642:	430b      	orrs	r3, r1
 800b644:	40c2      	lsrs	r2, r0
 800b646:	6163      	str	r3, [r4, #20]
 800b648:	9201      	str	r2, [sp, #4]
 800b64a:	9b01      	ldr	r3, [sp, #4]
 800b64c:	61a3      	str	r3, [r4, #24]
 800b64e:	2b00      	cmp	r3, #0
 800b650:	bf14      	ite	ne
 800b652:	2202      	movne	r2, #2
 800b654:	2201      	moveq	r2, #1
 800b656:	6122      	str	r2, [r4, #16]
 800b658:	b1d5      	cbz	r5, 800b690 <__d2b+0x98>
 800b65a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800b65e:	4405      	add	r5, r0
 800b660:	f8c9 5000 	str.w	r5, [r9]
 800b664:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800b668:	f8c8 0000 	str.w	r0, [r8]
 800b66c:	4620      	mov	r0, r4
 800b66e:	b003      	add	sp, #12
 800b670:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b678:	e7d5      	b.n	800b626 <__d2b+0x2e>
 800b67a:	6161      	str	r1, [r4, #20]
 800b67c:	e7e5      	b.n	800b64a <__d2b+0x52>
 800b67e:	a801      	add	r0, sp, #4
 800b680:	f7ff fd64 	bl	800b14c <__lo0bits>
 800b684:	9b01      	ldr	r3, [sp, #4]
 800b686:	6163      	str	r3, [r4, #20]
 800b688:	2201      	movs	r2, #1
 800b68a:	6122      	str	r2, [r4, #16]
 800b68c:	3020      	adds	r0, #32
 800b68e:	e7e3      	b.n	800b658 <__d2b+0x60>
 800b690:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b694:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800b698:	f8c9 0000 	str.w	r0, [r9]
 800b69c:	6918      	ldr	r0, [r3, #16]
 800b69e:	f7ff fd35 	bl	800b10c <__hi0bits>
 800b6a2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b6a6:	e7df      	b.n	800b668 <__d2b+0x70>
 800b6a8:	0800d3b7 	.word	0x0800d3b7
 800b6ac:	0800d428 	.word	0x0800d428

0800b6b0 <_calloc_r>:
 800b6b0:	b513      	push	{r0, r1, r4, lr}
 800b6b2:	434a      	muls	r2, r1
 800b6b4:	4611      	mov	r1, r2
 800b6b6:	9201      	str	r2, [sp, #4]
 800b6b8:	f000 f85a 	bl	800b770 <_malloc_r>
 800b6bc:	4604      	mov	r4, r0
 800b6be:	b118      	cbz	r0, 800b6c8 <_calloc_r+0x18>
 800b6c0:	9a01      	ldr	r2, [sp, #4]
 800b6c2:	2100      	movs	r1, #0
 800b6c4:	f7fd fd08 	bl	80090d8 <memset>
 800b6c8:	4620      	mov	r0, r4
 800b6ca:	b002      	add	sp, #8
 800b6cc:	bd10      	pop	{r4, pc}
	...

0800b6d0 <_free_r>:
 800b6d0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b6d2:	2900      	cmp	r1, #0
 800b6d4:	d048      	beq.n	800b768 <_free_r+0x98>
 800b6d6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b6da:	9001      	str	r0, [sp, #4]
 800b6dc:	2b00      	cmp	r3, #0
 800b6de:	f1a1 0404 	sub.w	r4, r1, #4
 800b6e2:	bfb8      	it	lt
 800b6e4:	18e4      	addlt	r4, r4, r3
 800b6e6:	f000 fc59 	bl	800bf9c <__malloc_lock>
 800b6ea:	4a20      	ldr	r2, [pc, #128]	; (800b76c <_free_r+0x9c>)
 800b6ec:	9801      	ldr	r0, [sp, #4]
 800b6ee:	6813      	ldr	r3, [r2, #0]
 800b6f0:	4615      	mov	r5, r2
 800b6f2:	b933      	cbnz	r3, 800b702 <_free_r+0x32>
 800b6f4:	6063      	str	r3, [r4, #4]
 800b6f6:	6014      	str	r4, [r2, #0]
 800b6f8:	b003      	add	sp, #12
 800b6fa:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b6fe:	f000 bc53 	b.w	800bfa8 <__malloc_unlock>
 800b702:	42a3      	cmp	r3, r4
 800b704:	d90b      	bls.n	800b71e <_free_r+0x4e>
 800b706:	6821      	ldr	r1, [r4, #0]
 800b708:	1862      	adds	r2, r4, r1
 800b70a:	4293      	cmp	r3, r2
 800b70c:	bf04      	itt	eq
 800b70e:	681a      	ldreq	r2, [r3, #0]
 800b710:	685b      	ldreq	r3, [r3, #4]
 800b712:	6063      	str	r3, [r4, #4]
 800b714:	bf04      	itt	eq
 800b716:	1852      	addeq	r2, r2, r1
 800b718:	6022      	streq	r2, [r4, #0]
 800b71a:	602c      	str	r4, [r5, #0]
 800b71c:	e7ec      	b.n	800b6f8 <_free_r+0x28>
 800b71e:	461a      	mov	r2, r3
 800b720:	685b      	ldr	r3, [r3, #4]
 800b722:	b10b      	cbz	r3, 800b728 <_free_r+0x58>
 800b724:	42a3      	cmp	r3, r4
 800b726:	d9fa      	bls.n	800b71e <_free_r+0x4e>
 800b728:	6811      	ldr	r1, [r2, #0]
 800b72a:	1855      	adds	r5, r2, r1
 800b72c:	42a5      	cmp	r5, r4
 800b72e:	d10b      	bne.n	800b748 <_free_r+0x78>
 800b730:	6824      	ldr	r4, [r4, #0]
 800b732:	4421      	add	r1, r4
 800b734:	1854      	adds	r4, r2, r1
 800b736:	42a3      	cmp	r3, r4
 800b738:	6011      	str	r1, [r2, #0]
 800b73a:	d1dd      	bne.n	800b6f8 <_free_r+0x28>
 800b73c:	681c      	ldr	r4, [r3, #0]
 800b73e:	685b      	ldr	r3, [r3, #4]
 800b740:	6053      	str	r3, [r2, #4]
 800b742:	4421      	add	r1, r4
 800b744:	6011      	str	r1, [r2, #0]
 800b746:	e7d7      	b.n	800b6f8 <_free_r+0x28>
 800b748:	d902      	bls.n	800b750 <_free_r+0x80>
 800b74a:	230c      	movs	r3, #12
 800b74c:	6003      	str	r3, [r0, #0]
 800b74e:	e7d3      	b.n	800b6f8 <_free_r+0x28>
 800b750:	6825      	ldr	r5, [r4, #0]
 800b752:	1961      	adds	r1, r4, r5
 800b754:	428b      	cmp	r3, r1
 800b756:	bf04      	itt	eq
 800b758:	6819      	ldreq	r1, [r3, #0]
 800b75a:	685b      	ldreq	r3, [r3, #4]
 800b75c:	6063      	str	r3, [r4, #4]
 800b75e:	bf04      	itt	eq
 800b760:	1949      	addeq	r1, r1, r5
 800b762:	6021      	streq	r1, [r4, #0]
 800b764:	6054      	str	r4, [r2, #4]
 800b766:	e7c7      	b.n	800b6f8 <_free_r+0x28>
 800b768:	b003      	add	sp, #12
 800b76a:	bd30      	pop	{r4, r5, pc}
 800b76c:	20000230 	.word	0x20000230

0800b770 <_malloc_r>:
 800b770:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b772:	1ccd      	adds	r5, r1, #3
 800b774:	f025 0503 	bic.w	r5, r5, #3
 800b778:	3508      	adds	r5, #8
 800b77a:	2d0c      	cmp	r5, #12
 800b77c:	bf38      	it	cc
 800b77e:	250c      	movcc	r5, #12
 800b780:	2d00      	cmp	r5, #0
 800b782:	4606      	mov	r6, r0
 800b784:	db01      	blt.n	800b78a <_malloc_r+0x1a>
 800b786:	42a9      	cmp	r1, r5
 800b788:	d903      	bls.n	800b792 <_malloc_r+0x22>
 800b78a:	230c      	movs	r3, #12
 800b78c:	6033      	str	r3, [r6, #0]
 800b78e:	2000      	movs	r0, #0
 800b790:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b792:	f000 fc03 	bl	800bf9c <__malloc_lock>
 800b796:	4921      	ldr	r1, [pc, #132]	; (800b81c <_malloc_r+0xac>)
 800b798:	680a      	ldr	r2, [r1, #0]
 800b79a:	4614      	mov	r4, r2
 800b79c:	b99c      	cbnz	r4, 800b7c6 <_malloc_r+0x56>
 800b79e:	4f20      	ldr	r7, [pc, #128]	; (800b820 <_malloc_r+0xb0>)
 800b7a0:	683b      	ldr	r3, [r7, #0]
 800b7a2:	b923      	cbnz	r3, 800b7ae <_malloc_r+0x3e>
 800b7a4:	4621      	mov	r1, r4
 800b7a6:	4630      	mov	r0, r6
 800b7a8:	f000 faf2 	bl	800bd90 <_sbrk_r>
 800b7ac:	6038      	str	r0, [r7, #0]
 800b7ae:	4629      	mov	r1, r5
 800b7b0:	4630      	mov	r0, r6
 800b7b2:	f000 faed 	bl	800bd90 <_sbrk_r>
 800b7b6:	1c43      	adds	r3, r0, #1
 800b7b8:	d123      	bne.n	800b802 <_malloc_r+0x92>
 800b7ba:	230c      	movs	r3, #12
 800b7bc:	6033      	str	r3, [r6, #0]
 800b7be:	4630      	mov	r0, r6
 800b7c0:	f000 fbf2 	bl	800bfa8 <__malloc_unlock>
 800b7c4:	e7e3      	b.n	800b78e <_malloc_r+0x1e>
 800b7c6:	6823      	ldr	r3, [r4, #0]
 800b7c8:	1b5b      	subs	r3, r3, r5
 800b7ca:	d417      	bmi.n	800b7fc <_malloc_r+0x8c>
 800b7cc:	2b0b      	cmp	r3, #11
 800b7ce:	d903      	bls.n	800b7d8 <_malloc_r+0x68>
 800b7d0:	6023      	str	r3, [r4, #0]
 800b7d2:	441c      	add	r4, r3
 800b7d4:	6025      	str	r5, [r4, #0]
 800b7d6:	e004      	b.n	800b7e2 <_malloc_r+0x72>
 800b7d8:	6863      	ldr	r3, [r4, #4]
 800b7da:	42a2      	cmp	r2, r4
 800b7dc:	bf0c      	ite	eq
 800b7de:	600b      	streq	r3, [r1, #0]
 800b7e0:	6053      	strne	r3, [r2, #4]
 800b7e2:	4630      	mov	r0, r6
 800b7e4:	f000 fbe0 	bl	800bfa8 <__malloc_unlock>
 800b7e8:	f104 000b 	add.w	r0, r4, #11
 800b7ec:	1d23      	adds	r3, r4, #4
 800b7ee:	f020 0007 	bic.w	r0, r0, #7
 800b7f2:	1ac2      	subs	r2, r0, r3
 800b7f4:	d0cc      	beq.n	800b790 <_malloc_r+0x20>
 800b7f6:	1a1b      	subs	r3, r3, r0
 800b7f8:	50a3      	str	r3, [r4, r2]
 800b7fa:	e7c9      	b.n	800b790 <_malloc_r+0x20>
 800b7fc:	4622      	mov	r2, r4
 800b7fe:	6864      	ldr	r4, [r4, #4]
 800b800:	e7cc      	b.n	800b79c <_malloc_r+0x2c>
 800b802:	1cc4      	adds	r4, r0, #3
 800b804:	f024 0403 	bic.w	r4, r4, #3
 800b808:	42a0      	cmp	r0, r4
 800b80a:	d0e3      	beq.n	800b7d4 <_malloc_r+0x64>
 800b80c:	1a21      	subs	r1, r4, r0
 800b80e:	4630      	mov	r0, r6
 800b810:	f000 fabe 	bl	800bd90 <_sbrk_r>
 800b814:	3001      	adds	r0, #1
 800b816:	d1dd      	bne.n	800b7d4 <_malloc_r+0x64>
 800b818:	e7cf      	b.n	800b7ba <_malloc_r+0x4a>
 800b81a:	bf00      	nop
 800b81c:	20000230 	.word	0x20000230
 800b820:	20000234 	.word	0x20000234

0800b824 <__ssputs_r>:
 800b824:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b828:	688e      	ldr	r6, [r1, #8]
 800b82a:	429e      	cmp	r6, r3
 800b82c:	4682      	mov	sl, r0
 800b82e:	460c      	mov	r4, r1
 800b830:	4690      	mov	r8, r2
 800b832:	461f      	mov	r7, r3
 800b834:	d838      	bhi.n	800b8a8 <__ssputs_r+0x84>
 800b836:	898a      	ldrh	r2, [r1, #12]
 800b838:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b83c:	d032      	beq.n	800b8a4 <__ssputs_r+0x80>
 800b83e:	6825      	ldr	r5, [r4, #0]
 800b840:	6909      	ldr	r1, [r1, #16]
 800b842:	eba5 0901 	sub.w	r9, r5, r1
 800b846:	6965      	ldr	r5, [r4, #20]
 800b848:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b84c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b850:	3301      	adds	r3, #1
 800b852:	444b      	add	r3, r9
 800b854:	106d      	asrs	r5, r5, #1
 800b856:	429d      	cmp	r5, r3
 800b858:	bf38      	it	cc
 800b85a:	461d      	movcc	r5, r3
 800b85c:	0553      	lsls	r3, r2, #21
 800b85e:	d531      	bpl.n	800b8c4 <__ssputs_r+0xa0>
 800b860:	4629      	mov	r1, r5
 800b862:	f7ff ff85 	bl	800b770 <_malloc_r>
 800b866:	4606      	mov	r6, r0
 800b868:	b950      	cbnz	r0, 800b880 <__ssputs_r+0x5c>
 800b86a:	230c      	movs	r3, #12
 800b86c:	f8ca 3000 	str.w	r3, [sl]
 800b870:	89a3      	ldrh	r3, [r4, #12]
 800b872:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b876:	81a3      	strh	r3, [r4, #12]
 800b878:	f04f 30ff 	mov.w	r0, #4294967295
 800b87c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b880:	6921      	ldr	r1, [r4, #16]
 800b882:	464a      	mov	r2, r9
 800b884:	f7ff fb88 	bl	800af98 <memcpy>
 800b888:	89a3      	ldrh	r3, [r4, #12]
 800b88a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b88e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b892:	81a3      	strh	r3, [r4, #12]
 800b894:	6126      	str	r6, [r4, #16]
 800b896:	6165      	str	r5, [r4, #20]
 800b898:	444e      	add	r6, r9
 800b89a:	eba5 0509 	sub.w	r5, r5, r9
 800b89e:	6026      	str	r6, [r4, #0]
 800b8a0:	60a5      	str	r5, [r4, #8]
 800b8a2:	463e      	mov	r6, r7
 800b8a4:	42be      	cmp	r6, r7
 800b8a6:	d900      	bls.n	800b8aa <__ssputs_r+0x86>
 800b8a8:	463e      	mov	r6, r7
 800b8aa:	4632      	mov	r2, r6
 800b8ac:	6820      	ldr	r0, [r4, #0]
 800b8ae:	4641      	mov	r1, r8
 800b8b0:	f000 fb5a 	bl	800bf68 <memmove>
 800b8b4:	68a3      	ldr	r3, [r4, #8]
 800b8b6:	6822      	ldr	r2, [r4, #0]
 800b8b8:	1b9b      	subs	r3, r3, r6
 800b8ba:	4432      	add	r2, r6
 800b8bc:	60a3      	str	r3, [r4, #8]
 800b8be:	6022      	str	r2, [r4, #0]
 800b8c0:	2000      	movs	r0, #0
 800b8c2:	e7db      	b.n	800b87c <__ssputs_r+0x58>
 800b8c4:	462a      	mov	r2, r5
 800b8c6:	f000 fb75 	bl	800bfb4 <_realloc_r>
 800b8ca:	4606      	mov	r6, r0
 800b8cc:	2800      	cmp	r0, #0
 800b8ce:	d1e1      	bne.n	800b894 <__ssputs_r+0x70>
 800b8d0:	6921      	ldr	r1, [r4, #16]
 800b8d2:	4650      	mov	r0, sl
 800b8d4:	f7ff fefc 	bl	800b6d0 <_free_r>
 800b8d8:	e7c7      	b.n	800b86a <__ssputs_r+0x46>
	...

0800b8dc <_svfiprintf_r>:
 800b8dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b8e0:	4698      	mov	r8, r3
 800b8e2:	898b      	ldrh	r3, [r1, #12]
 800b8e4:	061b      	lsls	r3, r3, #24
 800b8e6:	b09d      	sub	sp, #116	; 0x74
 800b8e8:	4607      	mov	r7, r0
 800b8ea:	460d      	mov	r5, r1
 800b8ec:	4614      	mov	r4, r2
 800b8ee:	d50e      	bpl.n	800b90e <_svfiprintf_r+0x32>
 800b8f0:	690b      	ldr	r3, [r1, #16]
 800b8f2:	b963      	cbnz	r3, 800b90e <_svfiprintf_r+0x32>
 800b8f4:	2140      	movs	r1, #64	; 0x40
 800b8f6:	f7ff ff3b 	bl	800b770 <_malloc_r>
 800b8fa:	6028      	str	r0, [r5, #0]
 800b8fc:	6128      	str	r0, [r5, #16]
 800b8fe:	b920      	cbnz	r0, 800b90a <_svfiprintf_r+0x2e>
 800b900:	230c      	movs	r3, #12
 800b902:	603b      	str	r3, [r7, #0]
 800b904:	f04f 30ff 	mov.w	r0, #4294967295
 800b908:	e0d1      	b.n	800baae <_svfiprintf_r+0x1d2>
 800b90a:	2340      	movs	r3, #64	; 0x40
 800b90c:	616b      	str	r3, [r5, #20]
 800b90e:	2300      	movs	r3, #0
 800b910:	9309      	str	r3, [sp, #36]	; 0x24
 800b912:	2320      	movs	r3, #32
 800b914:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b918:	f8cd 800c 	str.w	r8, [sp, #12]
 800b91c:	2330      	movs	r3, #48	; 0x30
 800b91e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800bac8 <_svfiprintf_r+0x1ec>
 800b922:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b926:	f04f 0901 	mov.w	r9, #1
 800b92a:	4623      	mov	r3, r4
 800b92c:	469a      	mov	sl, r3
 800b92e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b932:	b10a      	cbz	r2, 800b938 <_svfiprintf_r+0x5c>
 800b934:	2a25      	cmp	r2, #37	; 0x25
 800b936:	d1f9      	bne.n	800b92c <_svfiprintf_r+0x50>
 800b938:	ebba 0b04 	subs.w	fp, sl, r4
 800b93c:	d00b      	beq.n	800b956 <_svfiprintf_r+0x7a>
 800b93e:	465b      	mov	r3, fp
 800b940:	4622      	mov	r2, r4
 800b942:	4629      	mov	r1, r5
 800b944:	4638      	mov	r0, r7
 800b946:	f7ff ff6d 	bl	800b824 <__ssputs_r>
 800b94a:	3001      	adds	r0, #1
 800b94c:	f000 80aa 	beq.w	800baa4 <_svfiprintf_r+0x1c8>
 800b950:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b952:	445a      	add	r2, fp
 800b954:	9209      	str	r2, [sp, #36]	; 0x24
 800b956:	f89a 3000 	ldrb.w	r3, [sl]
 800b95a:	2b00      	cmp	r3, #0
 800b95c:	f000 80a2 	beq.w	800baa4 <_svfiprintf_r+0x1c8>
 800b960:	2300      	movs	r3, #0
 800b962:	f04f 32ff 	mov.w	r2, #4294967295
 800b966:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b96a:	f10a 0a01 	add.w	sl, sl, #1
 800b96e:	9304      	str	r3, [sp, #16]
 800b970:	9307      	str	r3, [sp, #28]
 800b972:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b976:	931a      	str	r3, [sp, #104]	; 0x68
 800b978:	4654      	mov	r4, sl
 800b97a:	2205      	movs	r2, #5
 800b97c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b980:	4851      	ldr	r0, [pc, #324]	; (800bac8 <_svfiprintf_r+0x1ec>)
 800b982:	f7f4 fc2d 	bl	80001e0 <memchr>
 800b986:	9a04      	ldr	r2, [sp, #16]
 800b988:	b9d8      	cbnz	r0, 800b9c2 <_svfiprintf_r+0xe6>
 800b98a:	06d0      	lsls	r0, r2, #27
 800b98c:	bf44      	itt	mi
 800b98e:	2320      	movmi	r3, #32
 800b990:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b994:	0711      	lsls	r1, r2, #28
 800b996:	bf44      	itt	mi
 800b998:	232b      	movmi	r3, #43	; 0x2b
 800b99a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b99e:	f89a 3000 	ldrb.w	r3, [sl]
 800b9a2:	2b2a      	cmp	r3, #42	; 0x2a
 800b9a4:	d015      	beq.n	800b9d2 <_svfiprintf_r+0xf6>
 800b9a6:	9a07      	ldr	r2, [sp, #28]
 800b9a8:	4654      	mov	r4, sl
 800b9aa:	2000      	movs	r0, #0
 800b9ac:	f04f 0c0a 	mov.w	ip, #10
 800b9b0:	4621      	mov	r1, r4
 800b9b2:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b9b6:	3b30      	subs	r3, #48	; 0x30
 800b9b8:	2b09      	cmp	r3, #9
 800b9ba:	d94e      	bls.n	800ba5a <_svfiprintf_r+0x17e>
 800b9bc:	b1b0      	cbz	r0, 800b9ec <_svfiprintf_r+0x110>
 800b9be:	9207      	str	r2, [sp, #28]
 800b9c0:	e014      	b.n	800b9ec <_svfiprintf_r+0x110>
 800b9c2:	eba0 0308 	sub.w	r3, r0, r8
 800b9c6:	fa09 f303 	lsl.w	r3, r9, r3
 800b9ca:	4313      	orrs	r3, r2
 800b9cc:	9304      	str	r3, [sp, #16]
 800b9ce:	46a2      	mov	sl, r4
 800b9d0:	e7d2      	b.n	800b978 <_svfiprintf_r+0x9c>
 800b9d2:	9b03      	ldr	r3, [sp, #12]
 800b9d4:	1d19      	adds	r1, r3, #4
 800b9d6:	681b      	ldr	r3, [r3, #0]
 800b9d8:	9103      	str	r1, [sp, #12]
 800b9da:	2b00      	cmp	r3, #0
 800b9dc:	bfbb      	ittet	lt
 800b9de:	425b      	neglt	r3, r3
 800b9e0:	f042 0202 	orrlt.w	r2, r2, #2
 800b9e4:	9307      	strge	r3, [sp, #28]
 800b9e6:	9307      	strlt	r3, [sp, #28]
 800b9e8:	bfb8      	it	lt
 800b9ea:	9204      	strlt	r2, [sp, #16]
 800b9ec:	7823      	ldrb	r3, [r4, #0]
 800b9ee:	2b2e      	cmp	r3, #46	; 0x2e
 800b9f0:	d10c      	bne.n	800ba0c <_svfiprintf_r+0x130>
 800b9f2:	7863      	ldrb	r3, [r4, #1]
 800b9f4:	2b2a      	cmp	r3, #42	; 0x2a
 800b9f6:	d135      	bne.n	800ba64 <_svfiprintf_r+0x188>
 800b9f8:	9b03      	ldr	r3, [sp, #12]
 800b9fa:	1d1a      	adds	r2, r3, #4
 800b9fc:	681b      	ldr	r3, [r3, #0]
 800b9fe:	9203      	str	r2, [sp, #12]
 800ba00:	2b00      	cmp	r3, #0
 800ba02:	bfb8      	it	lt
 800ba04:	f04f 33ff 	movlt.w	r3, #4294967295
 800ba08:	3402      	adds	r4, #2
 800ba0a:	9305      	str	r3, [sp, #20]
 800ba0c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800bad8 <_svfiprintf_r+0x1fc>
 800ba10:	7821      	ldrb	r1, [r4, #0]
 800ba12:	2203      	movs	r2, #3
 800ba14:	4650      	mov	r0, sl
 800ba16:	f7f4 fbe3 	bl	80001e0 <memchr>
 800ba1a:	b140      	cbz	r0, 800ba2e <_svfiprintf_r+0x152>
 800ba1c:	2340      	movs	r3, #64	; 0x40
 800ba1e:	eba0 000a 	sub.w	r0, r0, sl
 800ba22:	fa03 f000 	lsl.w	r0, r3, r0
 800ba26:	9b04      	ldr	r3, [sp, #16]
 800ba28:	4303      	orrs	r3, r0
 800ba2a:	3401      	adds	r4, #1
 800ba2c:	9304      	str	r3, [sp, #16]
 800ba2e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ba32:	4826      	ldr	r0, [pc, #152]	; (800bacc <_svfiprintf_r+0x1f0>)
 800ba34:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ba38:	2206      	movs	r2, #6
 800ba3a:	f7f4 fbd1 	bl	80001e0 <memchr>
 800ba3e:	2800      	cmp	r0, #0
 800ba40:	d038      	beq.n	800bab4 <_svfiprintf_r+0x1d8>
 800ba42:	4b23      	ldr	r3, [pc, #140]	; (800bad0 <_svfiprintf_r+0x1f4>)
 800ba44:	bb1b      	cbnz	r3, 800ba8e <_svfiprintf_r+0x1b2>
 800ba46:	9b03      	ldr	r3, [sp, #12]
 800ba48:	3307      	adds	r3, #7
 800ba4a:	f023 0307 	bic.w	r3, r3, #7
 800ba4e:	3308      	adds	r3, #8
 800ba50:	9303      	str	r3, [sp, #12]
 800ba52:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ba54:	4433      	add	r3, r6
 800ba56:	9309      	str	r3, [sp, #36]	; 0x24
 800ba58:	e767      	b.n	800b92a <_svfiprintf_r+0x4e>
 800ba5a:	fb0c 3202 	mla	r2, ip, r2, r3
 800ba5e:	460c      	mov	r4, r1
 800ba60:	2001      	movs	r0, #1
 800ba62:	e7a5      	b.n	800b9b0 <_svfiprintf_r+0xd4>
 800ba64:	2300      	movs	r3, #0
 800ba66:	3401      	adds	r4, #1
 800ba68:	9305      	str	r3, [sp, #20]
 800ba6a:	4619      	mov	r1, r3
 800ba6c:	f04f 0c0a 	mov.w	ip, #10
 800ba70:	4620      	mov	r0, r4
 800ba72:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ba76:	3a30      	subs	r2, #48	; 0x30
 800ba78:	2a09      	cmp	r2, #9
 800ba7a:	d903      	bls.n	800ba84 <_svfiprintf_r+0x1a8>
 800ba7c:	2b00      	cmp	r3, #0
 800ba7e:	d0c5      	beq.n	800ba0c <_svfiprintf_r+0x130>
 800ba80:	9105      	str	r1, [sp, #20]
 800ba82:	e7c3      	b.n	800ba0c <_svfiprintf_r+0x130>
 800ba84:	fb0c 2101 	mla	r1, ip, r1, r2
 800ba88:	4604      	mov	r4, r0
 800ba8a:	2301      	movs	r3, #1
 800ba8c:	e7f0      	b.n	800ba70 <_svfiprintf_r+0x194>
 800ba8e:	ab03      	add	r3, sp, #12
 800ba90:	9300      	str	r3, [sp, #0]
 800ba92:	462a      	mov	r2, r5
 800ba94:	4b0f      	ldr	r3, [pc, #60]	; (800bad4 <_svfiprintf_r+0x1f8>)
 800ba96:	a904      	add	r1, sp, #16
 800ba98:	4638      	mov	r0, r7
 800ba9a:	f7fd fbc5 	bl	8009228 <_printf_float>
 800ba9e:	1c42      	adds	r2, r0, #1
 800baa0:	4606      	mov	r6, r0
 800baa2:	d1d6      	bne.n	800ba52 <_svfiprintf_r+0x176>
 800baa4:	89ab      	ldrh	r3, [r5, #12]
 800baa6:	065b      	lsls	r3, r3, #25
 800baa8:	f53f af2c 	bmi.w	800b904 <_svfiprintf_r+0x28>
 800baac:	9809      	ldr	r0, [sp, #36]	; 0x24
 800baae:	b01d      	add	sp, #116	; 0x74
 800bab0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bab4:	ab03      	add	r3, sp, #12
 800bab6:	9300      	str	r3, [sp, #0]
 800bab8:	462a      	mov	r2, r5
 800baba:	4b06      	ldr	r3, [pc, #24]	; (800bad4 <_svfiprintf_r+0x1f8>)
 800babc:	a904      	add	r1, sp, #16
 800babe:	4638      	mov	r0, r7
 800bac0:	f7fd fe56 	bl	8009770 <_printf_i>
 800bac4:	e7eb      	b.n	800ba9e <_svfiprintf_r+0x1c2>
 800bac6:	bf00      	nop
 800bac8:	0800d584 	.word	0x0800d584
 800bacc:	0800d58e 	.word	0x0800d58e
 800bad0:	08009229 	.word	0x08009229
 800bad4:	0800b825 	.word	0x0800b825
 800bad8:	0800d58a 	.word	0x0800d58a

0800badc <__sfputc_r>:
 800badc:	6893      	ldr	r3, [r2, #8]
 800bade:	3b01      	subs	r3, #1
 800bae0:	2b00      	cmp	r3, #0
 800bae2:	b410      	push	{r4}
 800bae4:	6093      	str	r3, [r2, #8]
 800bae6:	da08      	bge.n	800bafa <__sfputc_r+0x1e>
 800bae8:	6994      	ldr	r4, [r2, #24]
 800baea:	42a3      	cmp	r3, r4
 800baec:	db01      	blt.n	800baf2 <__sfputc_r+0x16>
 800baee:	290a      	cmp	r1, #10
 800baf0:	d103      	bne.n	800bafa <__sfputc_r+0x1e>
 800baf2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800baf6:	f7fe b8e9 	b.w	8009ccc <__swbuf_r>
 800bafa:	6813      	ldr	r3, [r2, #0]
 800bafc:	1c58      	adds	r0, r3, #1
 800bafe:	6010      	str	r0, [r2, #0]
 800bb00:	7019      	strb	r1, [r3, #0]
 800bb02:	4608      	mov	r0, r1
 800bb04:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bb08:	4770      	bx	lr

0800bb0a <__sfputs_r>:
 800bb0a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bb0c:	4606      	mov	r6, r0
 800bb0e:	460f      	mov	r7, r1
 800bb10:	4614      	mov	r4, r2
 800bb12:	18d5      	adds	r5, r2, r3
 800bb14:	42ac      	cmp	r4, r5
 800bb16:	d101      	bne.n	800bb1c <__sfputs_r+0x12>
 800bb18:	2000      	movs	r0, #0
 800bb1a:	e007      	b.n	800bb2c <__sfputs_r+0x22>
 800bb1c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bb20:	463a      	mov	r2, r7
 800bb22:	4630      	mov	r0, r6
 800bb24:	f7ff ffda 	bl	800badc <__sfputc_r>
 800bb28:	1c43      	adds	r3, r0, #1
 800bb2a:	d1f3      	bne.n	800bb14 <__sfputs_r+0xa>
 800bb2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800bb30 <_vfiprintf_r>:
 800bb30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb34:	460d      	mov	r5, r1
 800bb36:	b09d      	sub	sp, #116	; 0x74
 800bb38:	4614      	mov	r4, r2
 800bb3a:	4698      	mov	r8, r3
 800bb3c:	4606      	mov	r6, r0
 800bb3e:	b118      	cbz	r0, 800bb48 <_vfiprintf_r+0x18>
 800bb40:	6983      	ldr	r3, [r0, #24]
 800bb42:	b90b      	cbnz	r3, 800bb48 <_vfiprintf_r+0x18>
 800bb44:	f7ff f916 	bl	800ad74 <__sinit>
 800bb48:	4b89      	ldr	r3, [pc, #548]	; (800bd70 <_vfiprintf_r+0x240>)
 800bb4a:	429d      	cmp	r5, r3
 800bb4c:	d11b      	bne.n	800bb86 <_vfiprintf_r+0x56>
 800bb4e:	6875      	ldr	r5, [r6, #4]
 800bb50:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bb52:	07d9      	lsls	r1, r3, #31
 800bb54:	d405      	bmi.n	800bb62 <_vfiprintf_r+0x32>
 800bb56:	89ab      	ldrh	r3, [r5, #12]
 800bb58:	059a      	lsls	r2, r3, #22
 800bb5a:	d402      	bmi.n	800bb62 <_vfiprintf_r+0x32>
 800bb5c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bb5e:	f7ff f9ac 	bl	800aeba <__retarget_lock_acquire_recursive>
 800bb62:	89ab      	ldrh	r3, [r5, #12]
 800bb64:	071b      	lsls	r3, r3, #28
 800bb66:	d501      	bpl.n	800bb6c <_vfiprintf_r+0x3c>
 800bb68:	692b      	ldr	r3, [r5, #16]
 800bb6a:	b9eb      	cbnz	r3, 800bba8 <_vfiprintf_r+0x78>
 800bb6c:	4629      	mov	r1, r5
 800bb6e:	4630      	mov	r0, r6
 800bb70:	f7fe f8fe 	bl	8009d70 <__swsetup_r>
 800bb74:	b1c0      	cbz	r0, 800bba8 <_vfiprintf_r+0x78>
 800bb76:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bb78:	07dc      	lsls	r4, r3, #31
 800bb7a:	d50e      	bpl.n	800bb9a <_vfiprintf_r+0x6a>
 800bb7c:	f04f 30ff 	mov.w	r0, #4294967295
 800bb80:	b01d      	add	sp, #116	; 0x74
 800bb82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bb86:	4b7b      	ldr	r3, [pc, #492]	; (800bd74 <_vfiprintf_r+0x244>)
 800bb88:	429d      	cmp	r5, r3
 800bb8a:	d101      	bne.n	800bb90 <_vfiprintf_r+0x60>
 800bb8c:	68b5      	ldr	r5, [r6, #8]
 800bb8e:	e7df      	b.n	800bb50 <_vfiprintf_r+0x20>
 800bb90:	4b79      	ldr	r3, [pc, #484]	; (800bd78 <_vfiprintf_r+0x248>)
 800bb92:	429d      	cmp	r5, r3
 800bb94:	bf08      	it	eq
 800bb96:	68f5      	ldreq	r5, [r6, #12]
 800bb98:	e7da      	b.n	800bb50 <_vfiprintf_r+0x20>
 800bb9a:	89ab      	ldrh	r3, [r5, #12]
 800bb9c:	0598      	lsls	r0, r3, #22
 800bb9e:	d4ed      	bmi.n	800bb7c <_vfiprintf_r+0x4c>
 800bba0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bba2:	f7ff f98b 	bl	800aebc <__retarget_lock_release_recursive>
 800bba6:	e7e9      	b.n	800bb7c <_vfiprintf_r+0x4c>
 800bba8:	2300      	movs	r3, #0
 800bbaa:	9309      	str	r3, [sp, #36]	; 0x24
 800bbac:	2320      	movs	r3, #32
 800bbae:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800bbb2:	f8cd 800c 	str.w	r8, [sp, #12]
 800bbb6:	2330      	movs	r3, #48	; 0x30
 800bbb8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800bd7c <_vfiprintf_r+0x24c>
 800bbbc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800bbc0:	f04f 0901 	mov.w	r9, #1
 800bbc4:	4623      	mov	r3, r4
 800bbc6:	469a      	mov	sl, r3
 800bbc8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bbcc:	b10a      	cbz	r2, 800bbd2 <_vfiprintf_r+0xa2>
 800bbce:	2a25      	cmp	r2, #37	; 0x25
 800bbd0:	d1f9      	bne.n	800bbc6 <_vfiprintf_r+0x96>
 800bbd2:	ebba 0b04 	subs.w	fp, sl, r4
 800bbd6:	d00b      	beq.n	800bbf0 <_vfiprintf_r+0xc0>
 800bbd8:	465b      	mov	r3, fp
 800bbda:	4622      	mov	r2, r4
 800bbdc:	4629      	mov	r1, r5
 800bbde:	4630      	mov	r0, r6
 800bbe0:	f7ff ff93 	bl	800bb0a <__sfputs_r>
 800bbe4:	3001      	adds	r0, #1
 800bbe6:	f000 80aa 	beq.w	800bd3e <_vfiprintf_r+0x20e>
 800bbea:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bbec:	445a      	add	r2, fp
 800bbee:	9209      	str	r2, [sp, #36]	; 0x24
 800bbf0:	f89a 3000 	ldrb.w	r3, [sl]
 800bbf4:	2b00      	cmp	r3, #0
 800bbf6:	f000 80a2 	beq.w	800bd3e <_vfiprintf_r+0x20e>
 800bbfa:	2300      	movs	r3, #0
 800bbfc:	f04f 32ff 	mov.w	r2, #4294967295
 800bc00:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bc04:	f10a 0a01 	add.w	sl, sl, #1
 800bc08:	9304      	str	r3, [sp, #16]
 800bc0a:	9307      	str	r3, [sp, #28]
 800bc0c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800bc10:	931a      	str	r3, [sp, #104]	; 0x68
 800bc12:	4654      	mov	r4, sl
 800bc14:	2205      	movs	r2, #5
 800bc16:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bc1a:	4858      	ldr	r0, [pc, #352]	; (800bd7c <_vfiprintf_r+0x24c>)
 800bc1c:	f7f4 fae0 	bl	80001e0 <memchr>
 800bc20:	9a04      	ldr	r2, [sp, #16]
 800bc22:	b9d8      	cbnz	r0, 800bc5c <_vfiprintf_r+0x12c>
 800bc24:	06d1      	lsls	r1, r2, #27
 800bc26:	bf44      	itt	mi
 800bc28:	2320      	movmi	r3, #32
 800bc2a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bc2e:	0713      	lsls	r3, r2, #28
 800bc30:	bf44      	itt	mi
 800bc32:	232b      	movmi	r3, #43	; 0x2b
 800bc34:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bc38:	f89a 3000 	ldrb.w	r3, [sl]
 800bc3c:	2b2a      	cmp	r3, #42	; 0x2a
 800bc3e:	d015      	beq.n	800bc6c <_vfiprintf_r+0x13c>
 800bc40:	9a07      	ldr	r2, [sp, #28]
 800bc42:	4654      	mov	r4, sl
 800bc44:	2000      	movs	r0, #0
 800bc46:	f04f 0c0a 	mov.w	ip, #10
 800bc4a:	4621      	mov	r1, r4
 800bc4c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bc50:	3b30      	subs	r3, #48	; 0x30
 800bc52:	2b09      	cmp	r3, #9
 800bc54:	d94e      	bls.n	800bcf4 <_vfiprintf_r+0x1c4>
 800bc56:	b1b0      	cbz	r0, 800bc86 <_vfiprintf_r+0x156>
 800bc58:	9207      	str	r2, [sp, #28]
 800bc5a:	e014      	b.n	800bc86 <_vfiprintf_r+0x156>
 800bc5c:	eba0 0308 	sub.w	r3, r0, r8
 800bc60:	fa09 f303 	lsl.w	r3, r9, r3
 800bc64:	4313      	orrs	r3, r2
 800bc66:	9304      	str	r3, [sp, #16]
 800bc68:	46a2      	mov	sl, r4
 800bc6a:	e7d2      	b.n	800bc12 <_vfiprintf_r+0xe2>
 800bc6c:	9b03      	ldr	r3, [sp, #12]
 800bc6e:	1d19      	adds	r1, r3, #4
 800bc70:	681b      	ldr	r3, [r3, #0]
 800bc72:	9103      	str	r1, [sp, #12]
 800bc74:	2b00      	cmp	r3, #0
 800bc76:	bfbb      	ittet	lt
 800bc78:	425b      	neglt	r3, r3
 800bc7a:	f042 0202 	orrlt.w	r2, r2, #2
 800bc7e:	9307      	strge	r3, [sp, #28]
 800bc80:	9307      	strlt	r3, [sp, #28]
 800bc82:	bfb8      	it	lt
 800bc84:	9204      	strlt	r2, [sp, #16]
 800bc86:	7823      	ldrb	r3, [r4, #0]
 800bc88:	2b2e      	cmp	r3, #46	; 0x2e
 800bc8a:	d10c      	bne.n	800bca6 <_vfiprintf_r+0x176>
 800bc8c:	7863      	ldrb	r3, [r4, #1]
 800bc8e:	2b2a      	cmp	r3, #42	; 0x2a
 800bc90:	d135      	bne.n	800bcfe <_vfiprintf_r+0x1ce>
 800bc92:	9b03      	ldr	r3, [sp, #12]
 800bc94:	1d1a      	adds	r2, r3, #4
 800bc96:	681b      	ldr	r3, [r3, #0]
 800bc98:	9203      	str	r2, [sp, #12]
 800bc9a:	2b00      	cmp	r3, #0
 800bc9c:	bfb8      	it	lt
 800bc9e:	f04f 33ff 	movlt.w	r3, #4294967295
 800bca2:	3402      	adds	r4, #2
 800bca4:	9305      	str	r3, [sp, #20]
 800bca6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800bd8c <_vfiprintf_r+0x25c>
 800bcaa:	7821      	ldrb	r1, [r4, #0]
 800bcac:	2203      	movs	r2, #3
 800bcae:	4650      	mov	r0, sl
 800bcb0:	f7f4 fa96 	bl	80001e0 <memchr>
 800bcb4:	b140      	cbz	r0, 800bcc8 <_vfiprintf_r+0x198>
 800bcb6:	2340      	movs	r3, #64	; 0x40
 800bcb8:	eba0 000a 	sub.w	r0, r0, sl
 800bcbc:	fa03 f000 	lsl.w	r0, r3, r0
 800bcc0:	9b04      	ldr	r3, [sp, #16]
 800bcc2:	4303      	orrs	r3, r0
 800bcc4:	3401      	adds	r4, #1
 800bcc6:	9304      	str	r3, [sp, #16]
 800bcc8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bccc:	482c      	ldr	r0, [pc, #176]	; (800bd80 <_vfiprintf_r+0x250>)
 800bcce:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800bcd2:	2206      	movs	r2, #6
 800bcd4:	f7f4 fa84 	bl	80001e0 <memchr>
 800bcd8:	2800      	cmp	r0, #0
 800bcda:	d03f      	beq.n	800bd5c <_vfiprintf_r+0x22c>
 800bcdc:	4b29      	ldr	r3, [pc, #164]	; (800bd84 <_vfiprintf_r+0x254>)
 800bcde:	bb1b      	cbnz	r3, 800bd28 <_vfiprintf_r+0x1f8>
 800bce0:	9b03      	ldr	r3, [sp, #12]
 800bce2:	3307      	adds	r3, #7
 800bce4:	f023 0307 	bic.w	r3, r3, #7
 800bce8:	3308      	adds	r3, #8
 800bcea:	9303      	str	r3, [sp, #12]
 800bcec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bcee:	443b      	add	r3, r7
 800bcf0:	9309      	str	r3, [sp, #36]	; 0x24
 800bcf2:	e767      	b.n	800bbc4 <_vfiprintf_r+0x94>
 800bcf4:	fb0c 3202 	mla	r2, ip, r2, r3
 800bcf8:	460c      	mov	r4, r1
 800bcfa:	2001      	movs	r0, #1
 800bcfc:	e7a5      	b.n	800bc4a <_vfiprintf_r+0x11a>
 800bcfe:	2300      	movs	r3, #0
 800bd00:	3401      	adds	r4, #1
 800bd02:	9305      	str	r3, [sp, #20]
 800bd04:	4619      	mov	r1, r3
 800bd06:	f04f 0c0a 	mov.w	ip, #10
 800bd0a:	4620      	mov	r0, r4
 800bd0c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bd10:	3a30      	subs	r2, #48	; 0x30
 800bd12:	2a09      	cmp	r2, #9
 800bd14:	d903      	bls.n	800bd1e <_vfiprintf_r+0x1ee>
 800bd16:	2b00      	cmp	r3, #0
 800bd18:	d0c5      	beq.n	800bca6 <_vfiprintf_r+0x176>
 800bd1a:	9105      	str	r1, [sp, #20]
 800bd1c:	e7c3      	b.n	800bca6 <_vfiprintf_r+0x176>
 800bd1e:	fb0c 2101 	mla	r1, ip, r1, r2
 800bd22:	4604      	mov	r4, r0
 800bd24:	2301      	movs	r3, #1
 800bd26:	e7f0      	b.n	800bd0a <_vfiprintf_r+0x1da>
 800bd28:	ab03      	add	r3, sp, #12
 800bd2a:	9300      	str	r3, [sp, #0]
 800bd2c:	462a      	mov	r2, r5
 800bd2e:	4b16      	ldr	r3, [pc, #88]	; (800bd88 <_vfiprintf_r+0x258>)
 800bd30:	a904      	add	r1, sp, #16
 800bd32:	4630      	mov	r0, r6
 800bd34:	f7fd fa78 	bl	8009228 <_printf_float>
 800bd38:	4607      	mov	r7, r0
 800bd3a:	1c78      	adds	r0, r7, #1
 800bd3c:	d1d6      	bne.n	800bcec <_vfiprintf_r+0x1bc>
 800bd3e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bd40:	07d9      	lsls	r1, r3, #31
 800bd42:	d405      	bmi.n	800bd50 <_vfiprintf_r+0x220>
 800bd44:	89ab      	ldrh	r3, [r5, #12]
 800bd46:	059a      	lsls	r2, r3, #22
 800bd48:	d402      	bmi.n	800bd50 <_vfiprintf_r+0x220>
 800bd4a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bd4c:	f7ff f8b6 	bl	800aebc <__retarget_lock_release_recursive>
 800bd50:	89ab      	ldrh	r3, [r5, #12]
 800bd52:	065b      	lsls	r3, r3, #25
 800bd54:	f53f af12 	bmi.w	800bb7c <_vfiprintf_r+0x4c>
 800bd58:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bd5a:	e711      	b.n	800bb80 <_vfiprintf_r+0x50>
 800bd5c:	ab03      	add	r3, sp, #12
 800bd5e:	9300      	str	r3, [sp, #0]
 800bd60:	462a      	mov	r2, r5
 800bd62:	4b09      	ldr	r3, [pc, #36]	; (800bd88 <_vfiprintf_r+0x258>)
 800bd64:	a904      	add	r1, sp, #16
 800bd66:	4630      	mov	r0, r6
 800bd68:	f7fd fd02 	bl	8009770 <_printf_i>
 800bd6c:	e7e4      	b.n	800bd38 <_vfiprintf_r+0x208>
 800bd6e:	bf00      	nop
 800bd70:	0800d3e8 	.word	0x0800d3e8
 800bd74:	0800d408 	.word	0x0800d408
 800bd78:	0800d3c8 	.word	0x0800d3c8
 800bd7c:	0800d584 	.word	0x0800d584
 800bd80:	0800d58e 	.word	0x0800d58e
 800bd84:	08009229 	.word	0x08009229
 800bd88:	0800bb0b 	.word	0x0800bb0b
 800bd8c:	0800d58a 	.word	0x0800d58a

0800bd90 <_sbrk_r>:
 800bd90:	b538      	push	{r3, r4, r5, lr}
 800bd92:	4d06      	ldr	r5, [pc, #24]	; (800bdac <_sbrk_r+0x1c>)
 800bd94:	2300      	movs	r3, #0
 800bd96:	4604      	mov	r4, r0
 800bd98:	4608      	mov	r0, r1
 800bd9a:	602b      	str	r3, [r5, #0]
 800bd9c:	f7f6 ffcc 	bl	8002d38 <_sbrk>
 800bda0:	1c43      	adds	r3, r0, #1
 800bda2:	d102      	bne.n	800bdaa <_sbrk_r+0x1a>
 800bda4:	682b      	ldr	r3, [r5, #0]
 800bda6:	b103      	cbz	r3, 800bdaa <_sbrk_r+0x1a>
 800bda8:	6023      	str	r3, [r4, #0]
 800bdaa:	bd38      	pop	{r3, r4, r5, pc}
 800bdac:	20000958 	.word	0x20000958

0800bdb0 <__sread>:
 800bdb0:	b510      	push	{r4, lr}
 800bdb2:	460c      	mov	r4, r1
 800bdb4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bdb8:	f000 f922 	bl	800c000 <_read_r>
 800bdbc:	2800      	cmp	r0, #0
 800bdbe:	bfab      	itete	ge
 800bdc0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800bdc2:	89a3      	ldrhlt	r3, [r4, #12]
 800bdc4:	181b      	addge	r3, r3, r0
 800bdc6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800bdca:	bfac      	ite	ge
 800bdcc:	6563      	strge	r3, [r4, #84]	; 0x54
 800bdce:	81a3      	strhlt	r3, [r4, #12]
 800bdd0:	bd10      	pop	{r4, pc}

0800bdd2 <__swrite>:
 800bdd2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bdd6:	461f      	mov	r7, r3
 800bdd8:	898b      	ldrh	r3, [r1, #12]
 800bdda:	05db      	lsls	r3, r3, #23
 800bddc:	4605      	mov	r5, r0
 800bdde:	460c      	mov	r4, r1
 800bde0:	4616      	mov	r6, r2
 800bde2:	d505      	bpl.n	800bdf0 <__swrite+0x1e>
 800bde4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bde8:	2302      	movs	r3, #2
 800bdea:	2200      	movs	r2, #0
 800bdec:	f000 f898 	bl	800bf20 <_lseek_r>
 800bdf0:	89a3      	ldrh	r3, [r4, #12]
 800bdf2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bdf6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800bdfa:	81a3      	strh	r3, [r4, #12]
 800bdfc:	4632      	mov	r2, r6
 800bdfe:	463b      	mov	r3, r7
 800be00:	4628      	mov	r0, r5
 800be02:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800be06:	f000 b817 	b.w	800be38 <_write_r>

0800be0a <__sseek>:
 800be0a:	b510      	push	{r4, lr}
 800be0c:	460c      	mov	r4, r1
 800be0e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800be12:	f000 f885 	bl	800bf20 <_lseek_r>
 800be16:	1c43      	adds	r3, r0, #1
 800be18:	89a3      	ldrh	r3, [r4, #12]
 800be1a:	bf15      	itete	ne
 800be1c:	6560      	strne	r0, [r4, #84]	; 0x54
 800be1e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800be22:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800be26:	81a3      	strheq	r3, [r4, #12]
 800be28:	bf18      	it	ne
 800be2a:	81a3      	strhne	r3, [r4, #12]
 800be2c:	bd10      	pop	{r4, pc}

0800be2e <__sclose>:
 800be2e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800be32:	f000 b831 	b.w	800be98 <_close_r>
	...

0800be38 <_write_r>:
 800be38:	b538      	push	{r3, r4, r5, lr}
 800be3a:	4d07      	ldr	r5, [pc, #28]	; (800be58 <_write_r+0x20>)
 800be3c:	4604      	mov	r4, r0
 800be3e:	4608      	mov	r0, r1
 800be40:	4611      	mov	r1, r2
 800be42:	2200      	movs	r2, #0
 800be44:	602a      	str	r2, [r5, #0]
 800be46:	461a      	mov	r2, r3
 800be48:	f7f6 ff16 	bl	8002c78 <_write>
 800be4c:	1c43      	adds	r3, r0, #1
 800be4e:	d102      	bne.n	800be56 <_write_r+0x1e>
 800be50:	682b      	ldr	r3, [r5, #0]
 800be52:	b103      	cbz	r3, 800be56 <_write_r+0x1e>
 800be54:	6023      	str	r3, [r4, #0]
 800be56:	bd38      	pop	{r3, r4, r5, pc}
 800be58:	20000958 	.word	0x20000958

0800be5c <__assert_func>:
 800be5c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800be5e:	4614      	mov	r4, r2
 800be60:	461a      	mov	r2, r3
 800be62:	4b09      	ldr	r3, [pc, #36]	; (800be88 <__assert_func+0x2c>)
 800be64:	681b      	ldr	r3, [r3, #0]
 800be66:	4605      	mov	r5, r0
 800be68:	68d8      	ldr	r0, [r3, #12]
 800be6a:	b14c      	cbz	r4, 800be80 <__assert_func+0x24>
 800be6c:	4b07      	ldr	r3, [pc, #28]	; (800be8c <__assert_func+0x30>)
 800be6e:	9100      	str	r1, [sp, #0]
 800be70:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800be74:	4906      	ldr	r1, [pc, #24]	; (800be90 <__assert_func+0x34>)
 800be76:	462b      	mov	r3, r5
 800be78:	f000 f81e 	bl	800beb8 <fiprintf>
 800be7c:	f000 f8df 	bl	800c03e <abort>
 800be80:	4b04      	ldr	r3, [pc, #16]	; (800be94 <__assert_func+0x38>)
 800be82:	461c      	mov	r4, r3
 800be84:	e7f3      	b.n	800be6e <__assert_func+0x12>
 800be86:	bf00      	nop
 800be88:	20000024 	.word	0x20000024
 800be8c:	0800d595 	.word	0x0800d595
 800be90:	0800d5a2 	.word	0x0800d5a2
 800be94:	0800d5d0 	.word	0x0800d5d0

0800be98 <_close_r>:
 800be98:	b538      	push	{r3, r4, r5, lr}
 800be9a:	4d06      	ldr	r5, [pc, #24]	; (800beb4 <_close_r+0x1c>)
 800be9c:	2300      	movs	r3, #0
 800be9e:	4604      	mov	r4, r0
 800bea0:	4608      	mov	r0, r1
 800bea2:	602b      	str	r3, [r5, #0]
 800bea4:	f7f6 ff14 	bl	8002cd0 <_close>
 800bea8:	1c43      	adds	r3, r0, #1
 800beaa:	d102      	bne.n	800beb2 <_close_r+0x1a>
 800beac:	682b      	ldr	r3, [r5, #0]
 800beae:	b103      	cbz	r3, 800beb2 <_close_r+0x1a>
 800beb0:	6023      	str	r3, [r4, #0]
 800beb2:	bd38      	pop	{r3, r4, r5, pc}
 800beb4:	20000958 	.word	0x20000958

0800beb8 <fiprintf>:
 800beb8:	b40e      	push	{r1, r2, r3}
 800beba:	b503      	push	{r0, r1, lr}
 800bebc:	4601      	mov	r1, r0
 800bebe:	ab03      	add	r3, sp, #12
 800bec0:	4805      	ldr	r0, [pc, #20]	; (800bed8 <fiprintf+0x20>)
 800bec2:	f853 2b04 	ldr.w	r2, [r3], #4
 800bec6:	6800      	ldr	r0, [r0, #0]
 800bec8:	9301      	str	r3, [sp, #4]
 800beca:	f7ff fe31 	bl	800bb30 <_vfiprintf_r>
 800bece:	b002      	add	sp, #8
 800bed0:	f85d eb04 	ldr.w	lr, [sp], #4
 800bed4:	b003      	add	sp, #12
 800bed6:	4770      	bx	lr
 800bed8:	20000024 	.word	0x20000024

0800bedc <_fstat_r>:
 800bedc:	b538      	push	{r3, r4, r5, lr}
 800bede:	4d07      	ldr	r5, [pc, #28]	; (800befc <_fstat_r+0x20>)
 800bee0:	2300      	movs	r3, #0
 800bee2:	4604      	mov	r4, r0
 800bee4:	4608      	mov	r0, r1
 800bee6:	4611      	mov	r1, r2
 800bee8:	602b      	str	r3, [r5, #0]
 800beea:	f7f6 fefd 	bl	8002ce8 <_fstat>
 800beee:	1c43      	adds	r3, r0, #1
 800bef0:	d102      	bne.n	800bef8 <_fstat_r+0x1c>
 800bef2:	682b      	ldr	r3, [r5, #0]
 800bef4:	b103      	cbz	r3, 800bef8 <_fstat_r+0x1c>
 800bef6:	6023      	str	r3, [r4, #0]
 800bef8:	bd38      	pop	{r3, r4, r5, pc}
 800befa:	bf00      	nop
 800befc:	20000958 	.word	0x20000958

0800bf00 <_isatty_r>:
 800bf00:	b538      	push	{r3, r4, r5, lr}
 800bf02:	4d06      	ldr	r5, [pc, #24]	; (800bf1c <_isatty_r+0x1c>)
 800bf04:	2300      	movs	r3, #0
 800bf06:	4604      	mov	r4, r0
 800bf08:	4608      	mov	r0, r1
 800bf0a:	602b      	str	r3, [r5, #0]
 800bf0c:	f7f6 fefc 	bl	8002d08 <_isatty>
 800bf10:	1c43      	adds	r3, r0, #1
 800bf12:	d102      	bne.n	800bf1a <_isatty_r+0x1a>
 800bf14:	682b      	ldr	r3, [r5, #0]
 800bf16:	b103      	cbz	r3, 800bf1a <_isatty_r+0x1a>
 800bf18:	6023      	str	r3, [r4, #0]
 800bf1a:	bd38      	pop	{r3, r4, r5, pc}
 800bf1c:	20000958 	.word	0x20000958

0800bf20 <_lseek_r>:
 800bf20:	b538      	push	{r3, r4, r5, lr}
 800bf22:	4d07      	ldr	r5, [pc, #28]	; (800bf40 <_lseek_r+0x20>)
 800bf24:	4604      	mov	r4, r0
 800bf26:	4608      	mov	r0, r1
 800bf28:	4611      	mov	r1, r2
 800bf2a:	2200      	movs	r2, #0
 800bf2c:	602a      	str	r2, [r5, #0]
 800bf2e:	461a      	mov	r2, r3
 800bf30:	f7f6 fef5 	bl	8002d1e <_lseek>
 800bf34:	1c43      	adds	r3, r0, #1
 800bf36:	d102      	bne.n	800bf3e <_lseek_r+0x1e>
 800bf38:	682b      	ldr	r3, [r5, #0]
 800bf3a:	b103      	cbz	r3, 800bf3e <_lseek_r+0x1e>
 800bf3c:	6023      	str	r3, [r4, #0]
 800bf3e:	bd38      	pop	{r3, r4, r5, pc}
 800bf40:	20000958 	.word	0x20000958

0800bf44 <__ascii_mbtowc>:
 800bf44:	b082      	sub	sp, #8
 800bf46:	b901      	cbnz	r1, 800bf4a <__ascii_mbtowc+0x6>
 800bf48:	a901      	add	r1, sp, #4
 800bf4a:	b142      	cbz	r2, 800bf5e <__ascii_mbtowc+0x1a>
 800bf4c:	b14b      	cbz	r3, 800bf62 <__ascii_mbtowc+0x1e>
 800bf4e:	7813      	ldrb	r3, [r2, #0]
 800bf50:	600b      	str	r3, [r1, #0]
 800bf52:	7812      	ldrb	r2, [r2, #0]
 800bf54:	1e10      	subs	r0, r2, #0
 800bf56:	bf18      	it	ne
 800bf58:	2001      	movne	r0, #1
 800bf5a:	b002      	add	sp, #8
 800bf5c:	4770      	bx	lr
 800bf5e:	4610      	mov	r0, r2
 800bf60:	e7fb      	b.n	800bf5a <__ascii_mbtowc+0x16>
 800bf62:	f06f 0001 	mvn.w	r0, #1
 800bf66:	e7f8      	b.n	800bf5a <__ascii_mbtowc+0x16>

0800bf68 <memmove>:
 800bf68:	4288      	cmp	r0, r1
 800bf6a:	b510      	push	{r4, lr}
 800bf6c:	eb01 0402 	add.w	r4, r1, r2
 800bf70:	d902      	bls.n	800bf78 <memmove+0x10>
 800bf72:	4284      	cmp	r4, r0
 800bf74:	4623      	mov	r3, r4
 800bf76:	d807      	bhi.n	800bf88 <memmove+0x20>
 800bf78:	1e43      	subs	r3, r0, #1
 800bf7a:	42a1      	cmp	r1, r4
 800bf7c:	d008      	beq.n	800bf90 <memmove+0x28>
 800bf7e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800bf82:	f803 2f01 	strb.w	r2, [r3, #1]!
 800bf86:	e7f8      	b.n	800bf7a <memmove+0x12>
 800bf88:	4402      	add	r2, r0
 800bf8a:	4601      	mov	r1, r0
 800bf8c:	428a      	cmp	r2, r1
 800bf8e:	d100      	bne.n	800bf92 <memmove+0x2a>
 800bf90:	bd10      	pop	{r4, pc}
 800bf92:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800bf96:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800bf9a:	e7f7      	b.n	800bf8c <memmove+0x24>

0800bf9c <__malloc_lock>:
 800bf9c:	4801      	ldr	r0, [pc, #4]	; (800bfa4 <__malloc_lock+0x8>)
 800bf9e:	f7fe bf8c 	b.w	800aeba <__retarget_lock_acquire_recursive>
 800bfa2:	bf00      	nop
 800bfa4:	20000950 	.word	0x20000950

0800bfa8 <__malloc_unlock>:
 800bfa8:	4801      	ldr	r0, [pc, #4]	; (800bfb0 <__malloc_unlock+0x8>)
 800bfaa:	f7fe bf87 	b.w	800aebc <__retarget_lock_release_recursive>
 800bfae:	bf00      	nop
 800bfb0:	20000950 	.word	0x20000950

0800bfb4 <_realloc_r>:
 800bfb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bfb6:	4607      	mov	r7, r0
 800bfb8:	4614      	mov	r4, r2
 800bfba:	460e      	mov	r6, r1
 800bfbc:	b921      	cbnz	r1, 800bfc8 <_realloc_r+0x14>
 800bfbe:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800bfc2:	4611      	mov	r1, r2
 800bfc4:	f7ff bbd4 	b.w	800b770 <_malloc_r>
 800bfc8:	b922      	cbnz	r2, 800bfd4 <_realloc_r+0x20>
 800bfca:	f7ff fb81 	bl	800b6d0 <_free_r>
 800bfce:	4625      	mov	r5, r4
 800bfd0:	4628      	mov	r0, r5
 800bfd2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bfd4:	f000 f83a 	bl	800c04c <_malloc_usable_size_r>
 800bfd8:	42a0      	cmp	r0, r4
 800bfda:	d20f      	bcs.n	800bffc <_realloc_r+0x48>
 800bfdc:	4621      	mov	r1, r4
 800bfde:	4638      	mov	r0, r7
 800bfe0:	f7ff fbc6 	bl	800b770 <_malloc_r>
 800bfe4:	4605      	mov	r5, r0
 800bfe6:	2800      	cmp	r0, #0
 800bfe8:	d0f2      	beq.n	800bfd0 <_realloc_r+0x1c>
 800bfea:	4631      	mov	r1, r6
 800bfec:	4622      	mov	r2, r4
 800bfee:	f7fe ffd3 	bl	800af98 <memcpy>
 800bff2:	4631      	mov	r1, r6
 800bff4:	4638      	mov	r0, r7
 800bff6:	f7ff fb6b 	bl	800b6d0 <_free_r>
 800bffa:	e7e9      	b.n	800bfd0 <_realloc_r+0x1c>
 800bffc:	4635      	mov	r5, r6
 800bffe:	e7e7      	b.n	800bfd0 <_realloc_r+0x1c>

0800c000 <_read_r>:
 800c000:	b538      	push	{r3, r4, r5, lr}
 800c002:	4d07      	ldr	r5, [pc, #28]	; (800c020 <_read_r+0x20>)
 800c004:	4604      	mov	r4, r0
 800c006:	4608      	mov	r0, r1
 800c008:	4611      	mov	r1, r2
 800c00a:	2200      	movs	r2, #0
 800c00c:	602a      	str	r2, [r5, #0]
 800c00e:	461a      	mov	r2, r3
 800c010:	f7f6 fe14 	bl	8002c3c <_read>
 800c014:	1c43      	adds	r3, r0, #1
 800c016:	d102      	bne.n	800c01e <_read_r+0x1e>
 800c018:	682b      	ldr	r3, [r5, #0]
 800c01a:	b103      	cbz	r3, 800c01e <_read_r+0x1e>
 800c01c:	6023      	str	r3, [r4, #0]
 800c01e:	bd38      	pop	{r3, r4, r5, pc}
 800c020:	20000958 	.word	0x20000958

0800c024 <__ascii_wctomb>:
 800c024:	b149      	cbz	r1, 800c03a <__ascii_wctomb+0x16>
 800c026:	2aff      	cmp	r2, #255	; 0xff
 800c028:	bf85      	ittet	hi
 800c02a:	238a      	movhi	r3, #138	; 0x8a
 800c02c:	6003      	strhi	r3, [r0, #0]
 800c02e:	700a      	strbls	r2, [r1, #0]
 800c030:	f04f 30ff 	movhi.w	r0, #4294967295
 800c034:	bf98      	it	ls
 800c036:	2001      	movls	r0, #1
 800c038:	4770      	bx	lr
 800c03a:	4608      	mov	r0, r1
 800c03c:	4770      	bx	lr

0800c03e <abort>:
 800c03e:	b508      	push	{r3, lr}
 800c040:	2006      	movs	r0, #6
 800c042:	f000 f833 	bl	800c0ac <raise>
 800c046:	2001      	movs	r0, #1
 800c048:	f7f6 fdee 	bl	8002c28 <_exit>

0800c04c <_malloc_usable_size_r>:
 800c04c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c050:	1f18      	subs	r0, r3, #4
 800c052:	2b00      	cmp	r3, #0
 800c054:	bfbc      	itt	lt
 800c056:	580b      	ldrlt	r3, [r1, r0]
 800c058:	18c0      	addlt	r0, r0, r3
 800c05a:	4770      	bx	lr

0800c05c <_raise_r>:
 800c05c:	291f      	cmp	r1, #31
 800c05e:	b538      	push	{r3, r4, r5, lr}
 800c060:	4604      	mov	r4, r0
 800c062:	460d      	mov	r5, r1
 800c064:	d904      	bls.n	800c070 <_raise_r+0x14>
 800c066:	2316      	movs	r3, #22
 800c068:	6003      	str	r3, [r0, #0]
 800c06a:	f04f 30ff 	mov.w	r0, #4294967295
 800c06e:	bd38      	pop	{r3, r4, r5, pc}
 800c070:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800c072:	b112      	cbz	r2, 800c07a <_raise_r+0x1e>
 800c074:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c078:	b94b      	cbnz	r3, 800c08e <_raise_r+0x32>
 800c07a:	4620      	mov	r0, r4
 800c07c:	f000 f830 	bl	800c0e0 <_getpid_r>
 800c080:	462a      	mov	r2, r5
 800c082:	4601      	mov	r1, r0
 800c084:	4620      	mov	r0, r4
 800c086:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c08a:	f000 b817 	b.w	800c0bc <_kill_r>
 800c08e:	2b01      	cmp	r3, #1
 800c090:	d00a      	beq.n	800c0a8 <_raise_r+0x4c>
 800c092:	1c59      	adds	r1, r3, #1
 800c094:	d103      	bne.n	800c09e <_raise_r+0x42>
 800c096:	2316      	movs	r3, #22
 800c098:	6003      	str	r3, [r0, #0]
 800c09a:	2001      	movs	r0, #1
 800c09c:	e7e7      	b.n	800c06e <_raise_r+0x12>
 800c09e:	2400      	movs	r4, #0
 800c0a0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800c0a4:	4628      	mov	r0, r5
 800c0a6:	4798      	blx	r3
 800c0a8:	2000      	movs	r0, #0
 800c0aa:	e7e0      	b.n	800c06e <_raise_r+0x12>

0800c0ac <raise>:
 800c0ac:	4b02      	ldr	r3, [pc, #8]	; (800c0b8 <raise+0xc>)
 800c0ae:	4601      	mov	r1, r0
 800c0b0:	6818      	ldr	r0, [r3, #0]
 800c0b2:	f7ff bfd3 	b.w	800c05c <_raise_r>
 800c0b6:	bf00      	nop
 800c0b8:	20000024 	.word	0x20000024

0800c0bc <_kill_r>:
 800c0bc:	b538      	push	{r3, r4, r5, lr}
 800c0be:	4d07      	ldr	r5, [pc, #28]	; (800c0dc <_kill_r+0x20>)
 800c0c0:	2300      	movs	r3, #0
 800c0c2:	4604      	mov	r4, r0
 800c0c4:	4608      	mov	r0, r1
 800c0c6:	4611      	mov	r1, r2
 800c0c8:	602b      	str	r3, [r5, #0]
 800c0ca:	f7f6 fd9d 	bl	8002c08 <_kill>
 800c0ce:	1c43      	adds	r3, r0, #1
 800c0d0:	d102      	bne.n	800c0d8 <_kill_r+0x1c>
 800c0d2:	682b      	ldr	r3, [r5, #0]
 800c0d4:	b103      	cbz	r3, 800c0d8 <_kill_r+0x1c>
 800c0d6:	6023      	str	r3, [r4, #0]
 800c0d8:	bd38      	pop	{r3, r4, r5, pc}
 800c0da:	bf00      	nop
 800c0dc:	20000958 	.word	0x20000958

0800c0e0 <_getpid_r>:
 800c0e0:	f7f6 bd8a 	b.w	8002bf8 <_getpid>

0800c0e4 <pow>:
 800c0e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c0e8:	ec59 8b10 	vmov	r8, r9, d0
 800c0ec:	ec57 6b11 	vmov	r6, r7, d1
 800c0f0:	f000 f8da 	bl	800c2a8 <__ieee754_pow>
 800c0f4:	4b4e      	ldr	r3, [pc, #312]	; (800c230 <pow+0x14c>)
 800c0f6:	f993 3000 	ldrsb.w	r3, [r3]
 800c0fa:	3301      	adds	r3, #1
 800c0fc:	ec55 4b10 	vmov	r4, r5, d0
 800c100:	d015      	beq.n	800c12e <pow+0x4a>
 800c102:	4632      	mov	r2, r6
 800c104:	463b      	mov	r3, r7
 800c106:	4630      	mov	r0, r6
 800c108:	4639      	mov	r1, r7
 800c10a:	f7f4 fd0f 	bl	8000b2c <__aeabi_dcmpun>
 800c10e:	b970      	cbnz	r0, 800c12e <pow+0x4a>
 800c110:	4642      	mov	r2, r8
 800c112:	464b      	mov	r3, r9
 800c114:	4640      	mov	r0, r8
 800c116:	4649      	mov	r1, r9
 800c118:	f7f4 fd08 	bl	8000b2c <__aeabi_dcmpun>
 800c11c:	2200      	movs	r2, #0
 800c11e:	2300      	movs	r3, #0
 800c120:	b148      	cbz	r0, 800c136 <pow+0x52>
 800c122:	4630      	mov	r0, r6
 800c124:	4639      	mov	r1, r7
 800c126:	f7f4 fccf 	bl	8000ac8 <__aeabi_dcmpeq>
 800c12a:	2800      	cmp	r0, #0
 800c12c:	d17d      	bne.n	800c22a <pow+0x146>
 800c12e:	ec45 4b10 	vmov	d0, r4, r5
 800c132:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c136:	4640      	mov	r0, r8
 800c138:	4649      	mov	r1, r9
 800c13a:	f7f4 fcc5 	bl	8000ac8 <__aeabi_dcmpeq>
 800c13e:	b1e0      	cbz	r0, 800c17a <pow+0x96>
 800c140:	2200      	movs	r2, #0
 800c142:	2300      	movs	r3, #0
 800c144:	4630      	mov	r0, r6
 800c146:	4639      	mov	r1, r7
 800c148:	f7f4 fcbe 	bl	8000ac8 <__aeabi_dcmpeq>
 800c14c:	2800      	cmp	r0, #0
 800c14e:	d16c      	bne.n	800c22a <pow+0x146>
 800c150:	ec47 6b10 	vmov	d0, r6, r7
 800c154:	f000 fe87 	bl	800ce66 <finite>
 800c158:	2800      	cmp	r0, #0
 800c15a:	d0e8      	beq.n	800c12e <pow+0x4a>
 800c15c:	2200      	movs	r2, #0
 800c15e:	2300      	movs	r3, #0
 800c160:	4630      	mov	r0, r6
 800c162:	4639      	mov	r1, r7
 800c164:	f7f4 fcba 	bl	8000adc <__aeabi_dcmplt>
 800c168:	2800      	cmp	r0, #0
 800c16a:	d0e0      	beq.n	800c12e <pow+0x4a>
 800c16c:	f7fc ff8a 	bl	8009084 <__errno>
 800c170:	2321      	movs	r3, #33	; 0x21
 800c172:	6003      	str	r3, [r0, #0]
 800c174:	2400      	movs	r4, #0
 800c176:	4d2f      	ldr	r5, [pc, #188]	; (800c234 <pow+0x150>)
 800c178:	e7d9      	b.n	800c12e <pow+0x4a>
 800c17a:	ec45 4b10 	vmov	d0, r4, r5
 800c17e:	f000 fe72 	bl	800ce66 <finite>
 800c182:	bbb8      	cbnz	r0, 800c1f4 <pow+0x110>
 800c184:	ec49 8b10 	vmov	d0, r8, r9
 800c188:	f000 fe6d 	bl	800ce66 <finite>
 800c18c:	b390      	cbz	r0, 800c1f4 <pow+0x110>
 800c18e:	ec47 6b10 	vmov	d0, r6, r7
 800c192:	f000 fe68 	bl	800ce66 <finite>
 800c196:	b368      	cbz	r0, 800c1f4 <pow+0x110>
 800c198:	4622      	mov	r2, r4
 800c19a:	462b      	mov	r3, r5
 800c19c:	4620      	mov	r0, r4
 800c19e:	4629      	mov	r1, r5
 800c1a0:	f7f4 fcc4 	bl	8000b2c <__aeabi_dcmpun>
 800c1a4:	b160      	cbz	r0, 800c1c0 <pow+0xdc>
 800c1a6:	f7fc ff6d 	bl	8009084 <__errno>
 800c1aa:	2321      	movs	r3, #33	; 0x21
 800c1ac:	6003      	str	r3, [r0, #0]
 800c1ae:	2200      	movs	r2, #0
 800c1b0:	2300      	movs	r3, #0
 800c1b2:	4610      	mov	r0, r2
 800c1b4:	4619      	mov	r1, r3
 800c1b6:	f7f4 fb49 	bl	800084c <__aeabi_ddiv>
 800c1ba:	4604      	mov	r4, r0
 800c1bc:	460d      	mov	r5, r1
 800c1be:	e7b6      	b.n	800c12e <pow+0x4a>
 800c1c0:	f7fc ff60 	bl	8009084 <__errno>
 800c1c4:	2322      	movs	r3, #34	; 0x22
 800c1c6:	6003      	str	r3, [r0, #0]
 800c1c8:	2200      	movs	r2, #0
 800c1ca:	2300      	movs	r3, #0
 800c1cc:	4640      	mov	r0, r8
 800c1ce:	4649      	mov	r1, r9
 800c1d0:	f7f4 fc84 	bl	8000adc <__aeabi_dcmplt>
 800c1d4:	2400      	movs	r4, #0
 800c1d6:	b158      	cbz	r0, 800c1f0 <pow+0x10c>
 800c1d8:	ec47 6b10 	vmov	d0, r6, r7
 800c1dc:	f000 fe58 	bl	800ce90 <rint>
 800c1e0:	4632      	mov	r2, r6
 800c1e2:	ec51 0b10 	vmov	r0, r1, d0
 800c1e6:	463b      	mov	r3, r7
 800c1e8:	f7f4 fc6e 	bl	8000ac8 <__aeabi_dcmpeq>
 800c1ec:	2800      	cmp	r0, #0
 800c1ee:	d0c2      	beq.n	800c176 <pow+0x92>
 800c1f0:	4d11      	ldr	r5, [pc, #68]	; (800c238 <pow+0x154>)
 800c1f2:	e79c      	b.n	800c12e <pow+0x4a>
 800c1f4:	2200      	movs	r2, #0
 800c1f6:	2300      	movs	r3, #0
 800c1f8:	4620      	mov	r0, r4
 800c1fa:	4629      	mov	r1, r5
 800c1fc:	f7f4 fc64 	bl	8000ac8 <__aeabi_dcmpeq>
 800c200:	2800      	cmp	r0, #0
 800c202:	d094      	beq.n	800c12e <pow+0x4a>
 800c204:	ec49 8b10 	vmov	d0, r8, r9
 800c208:	f000 fe2d 	bl	800ce66 <finite>
 800c20c:	2800      	cmp	r0, #0
 800c20e:	d08e      	beq.n	800c12e <pow+0x4a>
 800c210:	ec47 6b10 	vmov	d0, r6, r7
 800c214:	f000 fe27 	bl	800ce66 <finite>
 800c218:	2800      	cmp	r0, #0
 800c21a:	d088      	beq.n	800c12e <pow+0x4a>
 800c21c:	f7fc ff32 	bl	8009084 <__errno>
 800c220:	2322      	movs	r3, #34	; 0x22
 800c222:	6003      	str	r3, [r0, #0]
 800c224:	2400      	movs	r4, #0
 800c226:	2500      	movs	r5, #0
 800c228:	e781      	b.n	800c12e <pow+0x4a>
 800c22a:	4d04      	ldr	r5, [pc, #16]	; (800c23c <pow+0x158>)
 800c22c:	2400      	movs	r4, #0
 800c22e:	e77e      	b.n	800c12e <pow+0x4a>
 800c230:	200001f4 	.word	0x200001f4
 800c234:	fff00000 	.word	0xfff00000
 800c238:	7ff00000 	.word	0x7ff00000
 800c23c:	3ff00000 	.word	0x3ff00000

0800c240 <sqrt>:
 800c240:	b538      	push	{r3, r4, r5, lr}
 800c242:	ed2d 8b02 	vpush	{d8}
 800c246:	ec55 4b10 	vmov	r4, r5, d0
 800c24a:	f000 fd4f 	bl	800ccec <__ieee754_sqrt>
 800c24e:	4b15      	ldr	r3, [pc, #84]	; (800c2a4 <sqrt+0x64>)
 800c250:	eeb0 8a40 	vmov.f32	s16, s0
 800c254:	eef0 8a60 	vmov.f32	s17, s1
 800c258:	f993 3000 	ldrsb.w	r3, [r3]
 800c25c:	3301      	adds	r3, #1
 800c25e:	d019      	beq.n	800c294 <sqrt+0x54>
 800c260:	4622      	mov	r2, r4
 800c262:	462b      	mov	r3, r5
 800c264:	4620      	mov	r0, r4
 800c266:	4629      	mov	r1, r5
 800c268:	f7f4 fc60 	bl	8000b2c <__aeabi_dcmpun>
 800c26c:	b990      	cbnz	r0, 800c294 <sqrt+0x54>
 800c26e:	2200      	movs	r2, #0
 800c270:	2300      	movs	r3, #0
 800c272:	4620      	mov	r0, r4
 800c274:	4629      	mov	r1, r5
 800c276:	f7f4 fc31 	bl	8000adc <__aeabi_dcmplt>
 800c27a:	b158      	cbz	r0, 800c294 <sqrt+0x54>
 800c27c:	f7fc ff02 	bl	8009084 <__errno>
 800c280:	2321      	movs	r3, #33	; 0x21
 800c282:	6003      	str	r3, [r0, #0]
 800c284:	2200      	movs	r2, #0
 800c286:	2300      	movs	r3, #0
 800c288:	4610      	mov	r0, r2
 800c28a:	4619      	mov	r1, r3
 800c28c:	f7f4 fade 	bl	800084c <__aeabi_ddiv>
 800c290:	ec41 0b18 	vmov	d8, r0, r1
 800c294:	eeb0 0a48 	vmov.f32	s0, s16
 800c298:	eef0 0a68 	vmov.f32	s1, s17
 800c29c:	ecbd 8b02 	vpop	{d8}
 800c2a0:	bd38      	pop	{r3, r4, r5, pc}
 800c2a2:	bf00      	nop
 800c2a4:	200001f4 	.word	0x200001f4

0800c2a8 <__ieee754_pow>:
 800c2a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c2ac:	ed2d 8b06 	vpush	{d8-d10}
 800c2b0:	b08d      	sub	sp, #52	; 0x34
 800c2b2:	ed8d 1b02 	vstr	d1, [sp, #8]
 800c2b6:	e9dd 0702 	ldrd	r0, r7, [sp, #8]
 800c2ba:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 800c2be:	ea56 0100 	orrs.w	r1, r6, r0
 800c2c2:	ec53 2b10 	vmov	r2, r3, d0
 800c2c6:	f000 84d1 	beq.w	800cc6c <__ieee754_pow+0x9c4>
 800c2ca:	497f      	ldr	r1, [pc, #508]	; (800c4c8 <__ieee754_pow+0x220>)
 800c2cc:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 800c2d0:	428c      	cmp	r4, r1
 800c2d2:	ee10 8a10 	vmov	r8, s0
 800c2d6:	4699      	mov	r9, r3
 800c2d8:	dc09      	bgt.n	800c2ee <__ieee754_pow+0x46>
 800c2da:	d103      	bne.n	800c2e4 <__ieee754_pow+0x3c>
 800c2dc:	b97a      	cbnz	r2, 800c2fe <__ieee754_pow+0x56>
 800c2de:	42a6      	cmp	r6, r4
 800c2e0:	dd02      	ble.n	800c2e8 <__ieee754_pow+0x40>
 800c2e2:	e00c      	b.n	800c2fe <__ieee754_pow+0x56>
 800c2e4:	428e      	cmp	r6, r1
 800c2e6:	dc02      	bgt.n	800c2ee <__ieee754_pow+0x46>
 800c2e8:	428e      	cmp	r6, r1
 800c2ea:	d110      	bne.n	800c30e <__ieee754_pow+0x66>
 800c2ec:	b178      	cbz	r0, 800c30e <__ieee754_pow+0x66>
 800c2ee:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800c2f2:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800c2f6:	ea54 0308 	orrs.w	r3, r4, r8
 800c2fa:	f000 84b7 	beq.w	800cc6c <__ieee754_pow+0x9c4>
 800c2fe:	4873      	ldr	r0, [pc, #460]	; (800c4cc <__ieee754_pow+0x224>)
 800c300:	b00d      	add	sp, #52	; 0x34
 800c302:	ecbd 8b06 	vpop	{d8-d10}
 800c306:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c30a:	f000 bdb9 	b.w	800ce80 <nan>
 800c30e:	f1b9 0f00 	cmp.w	r9, #0
 800c312:	da36      	bge.n	800c382 <__ieee754_pow+0xda>
 800c314:	496e      	ldr	r1, [pc, #440]	; (800c4d0 <__ieee754_pow+0x228>)
 800c316:	428e      	cmp	r6, r1
 800c318:	dc51      	bgt.n	800c3be <__ieee754_pow+0x116>
 800c31a:	f1a1 7154 	sub.w	r1, r1, #55574528	; 0x3500000
 800c31e:	428e      	cmp	r6, r1
 800c320:	f340 84af 	ble.w	800cc82 <__ieee754_pow+0x9da>
 800c324:	1531      	asrs	r1, r6, #20
 800c326:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800c32a:	2914      	cmp	r1, #20
 800c32c:	dd0f      	ble.n	800c34e <__ieee754_pow+0xa6>
 800c32e:	f1c1 0134 	rsb	r1, r1, #52	; 0x34
 800c332:	fa20 fc01 	lsr.w	ip, r0, r1
 800c336:	fa0c f101 	lsl.w	r1, ip, r1
 800c33a:	4281      	cmp	r1, r0
 800c33c:	f040 84a1 	bne.w	800cc82 <__ieee754_pow+0x9da>
 800c340:	f00c 0c01 	and.w	ip, ip, #1
 800c344:	f1cc 0102 	rsb	r1, ip, #2
 800c348:	9100      	str	r1, [sp, #0]
 800c34a:	b180      	cbz	r0, 800c36e <__ieee754_pow+0xc6>
 800c34c:	e059      	b.n	800c402 <__ieee754_pow+0x15a>
 800c34e:	2800      	cmp	r0, #0
 800c350:	d155      	bne.n	800c3fe <__ieee754_pow+0x156>
 800c352:	f1c1 0114 	rsb	r1, r1, #20
 800c356:	fa46 fc01 	asr.w	ip, r6, r1
 800c35a:	fa0c f101 	lsl.w	r1, ip, r1
 800c35e:	42b1      	cmp	r1, r6
 800c360:	f040 848c 	bne.w	800cc7c <__ieee754_pow+0x9d4>
 800c364:	f00c 0c01 	and.w	ip, ip, #1
 800c368:	f1cc 0102 	rsb	r1, ip, #2
 800c36c:	9100      	str	r1, [sp, #0]
 800c36e:	4959      	ldr	r1, [pc, #356]	; (800c4d4 <__ieee754_pow+0x22c>)
 800c370:	428e      	cmp	r6, r1
 800c372:	d12d      	bne.n	800c3d0 <__ieee754_pow+0x128>
 800c374:	2f00      	cmp	r7, #0
 800c376:	da79      	bge.n	800c46c <__ieee754_pow+0x1c4>
 800c378:	4956      	ldr	r1, [pc, #344]	; (800c4d4 <__ieee754_pow+0x22c>)
 800c37a:	2000      	movs	r0, #0
 800c37c:	f7f4 fa66 	bl	800084c <__aeabi_ddiv>
 800c380:	e016      	b.n	800c3b0 <__ieee754_pow+0x108>
 800c382:	2100      	movs	r1, #0
 800c384:	9100      	str	r1, [sp, #0]
 800c386:	2800      	cmp	r0, #0
 800c388:	d13b      	bne.n	800c402 <__ieee754_pow+0x15a>
 800c38a:	494f      	ldr	r1, [pc, #316]	; (800c4c8 <__ieee754_pow+0x220>)
 800c38c:	428e      	cmp	r6, r1
 800c38e:	d1ee      	bne.n	800c36e <__ieee754_pow+0xc6>
 800c390:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800c394:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800c398:	ea53 0308 	orrs.w	r3, r3, r8
 800c39c:	f000 8466 	beq.w	800cc6c <__ieee754_pow+0x9c4>
 800c3a0:	4b4d      	ldr	r3, [pc, #308]	; (800c4d8 <__ieee754_pow+0x230>)
 800c3a2:	429c      	cmp	r4, r3
 800c3a4:	dd0d      	ble.n	800c3c2 <__ieee754_pow+0x11a>
 800c3a6:	2f00      	cmp	r7, #0
 800c3a8:	f280 8464 	bge.w	800cc74 <__ieee754_pow+0x9cc>
 800c3ac:	2000      	movs	r0, #0
 800c3ae:	2100      	movs	r1, #0
 800c3b0:	ec41 0b10 	vmov	d0, r0, r1
 800c3b4:	b00d      	add	sp, #52	; 0x34
 800c3b6:	ecbd 8b06 	vpop	{d8-d10}
 800c3ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c3be:	2102      	movs	r1, #2
 800c3c0:	e7e0      	b.n	800c384 <__ieee754_pow+0xdc>
 800c3c2:	2f00      	cmp	r7, #0
 800c3c4:	daf2      	bge.n	800c3ac <__ieee754_pow+0x104>
 800c3c6:	e9dd 0302 	ldrd	r0, r3, [sp, #8]
 800c3ca:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800c3ce:	e7ef      	b.n	800c3b0 <__ieee754_pow+0x108>
 800c3d0:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 800c3d4:	d104      	bne.n	800c3e0 <__ieee754_pow+0x138>
 800c3d6:	4610      	mov	r0, r2
 800c3d8:	4619      	mov	r1, r3
 800c3da:	f7f4 f90d 	bl	80005f8 <__aeabi_dmul>
 800c3de:	e7e7      	b.n	800c3b0 <__ieee754_pow+0x108>
 800c3e0:	493e      	ldr	r1, [pc, #248]	; (800c4dc <__ieee754_pow+0x234>)
 800c3e2:	428f      	cmp	r7, r1
 800c3e4:	d10d      	bne.n	800c402 <__ieee754_pow+0x15a>
 800c3e6:	f1b9 0f00 	cmp.w	r9, #0
 800c3ea:	db0a      	blt.n	800c402 <__ieee754_pow+0x15a>
 800c3ec:	ec43 2b10 	vmov	d0, r2, r3
 800c3f0:	b00d      	add	sp, #52	; 0x34
 800c3f2:	ecbd 8b06 	vpop	{d8-d10}
 800c3f6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c3fa:	f000 bc77 	b.w	800ccec <__ieee754_sqrt>
 800c3fe:	2100      	movs	r1, #0
 800c400:	9100      	str	r1, [sp, #0]
 800c402:	ec43 2b10 	vmov	d0, r2, r3
 800c406:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800c40a:	f000 fd23 	bl	800ce54 <fabs>
 800c40e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c412:	ec51 0b10 	vmov	r0, r1, d0
 800c416:	f1b8 0f00 	cmp.w	r8, #0
 800c41a:	d12a      	bne.n	800c472 <__ieee754_pow+0x1ca>
 800c41c:	b12c      	cbz	r4, 800c42a <__ieee754_pow+0x182>
 800c41e:	f8df c0b4 	ldr.w	ip, [pc, #180]	; 800c4d4 <__ieee754_pow+0x22c>
 800c422:	f029 4e40 	bic.w	lr, r9, #3221225472	; 0xc0000000
 800c426:	45e6      	cmp	lr, ip
 800c428:	d123      	bne.n	800c472 <__ieee754_pow+0x1ca>
 800c42a:	2f00      	cmp	r7, #0
 800c42c:	da05      	bge.n	800c43a <__ieee754_pow+0x192>
 800c42e:	4602      	mov	r2, r0
 800c430:	460b      	mov	r3, r1
 800c432:	2000      	movs	r0, #0
 800c434:	4927      	ldr	r1, [pc, #156]	; (800c4d4 <__ieee754_pow+0x22c>)
 800c436:	f7f4 fa09 	bl	800084c <__aeabi_ddiv>
 800c43a:	f1b9 0f00 	cmp.w	r9, #0
 800c43e:	dab7      	bge.n	800c3b0 <__ieee754_pow+0x108>
 800c440:	9b00      	ldr	r3, [sp, #0]
 800c442:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800c446:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800c44a:	4323      	orrs	r3, r4
 800c44c:	d108      	bne.n	800c460 <__ieee754_pow+0x1b8>
 800c44e:	4602      	mov	r2, r0
 800c450:	460b      	mov	r3, r1
 800c452:	4610      	mov	r0, r2
 800c454:	4619      	mov	r1, r3
 800c456:	f7f3 ff17 	bl	8000288 <__aeabi_dsub>
 800c45a:	4602      	mov	r2, r0
 800c45c:	460b      	mov	r3, r1
 800c45e:	e78d      	b.n	800c37c <__ieee754_pow+0xd4>
 800c460:	9b00      	ldr	r3, [sp, #0]
 800c462:	2b01      	cmp	r3, #1
 800c464:	d1a4      	bne.n	800c3b0 <__ieee754_pow+0x108>
 800c466:	4602      	mov	r2, r0
 800c468:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c46c:	4610      	mov	r0, r2
 800c46e:	4619      	mov	r1, r3
 800c470:	e79e      	b.n	800c3b0 <__ieee754_pow+0x108>
 800c472:	ea4f 7cd9 	mov.w	ip, r9, lsr #31
 800c476:	f10c 35ff 	add.w	r5, ip, #4294967295
 800c47a:	950a      	str	r5, [sp, #40]	; 0x28
 800c47c:	9d00      	ldr	r5, [sp, #0]
 800c47e:	46ac      	mov	ip, r5
 800c480:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800c482:	ea5c 0505 	orrs.w	r5, ip, r5
 800c486:	d0e4      	beq.n	800c452 <__ieee754_pow+0x1aa>
 800c488:	4b15      	ldr	r3, [pc, #84]	; (800c4e0 <__ieee754_pow+0x238>)
 800c48a:	429e      	cmp	r6, r3
 800c48c:	f340 80fc 	ble.w	800c688 <__ieee754_pow+0x3e0>
 800c490:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800c494:	429e      	cmp	r6, r3
 800c496:	4b10      	ldr	r3, [pc, #64]	; (800c4d8 <__ieee754_pow+0x230>)
 800c498:	dd07      	ble.n	800c4aa <__ieee754_pow+0x202>
 800c49a:	429c      	cmp	r4, r3
 800c49c:	dc0a      	bgt.n	800c4b4 <__ieee754_pow+0x20c>
 800c49e:	2f00      	cmp	r7, #0
 800c4a0:	da84      	bge.n	800c3ac <__ieee754_pow+0x104>
 800c4a2:	a307      	add	r3, pc, #28	; (adr r3, 800c4c0 <__ieee754_pow+0x218>)
 800c4a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4a8:	e795      	b.n	800c3d6 <__ieee754_pow+0x12e>
 800c4aa:	429c      	cmp	r4, r3
 800c4ac:	dbf7      	blt.n	800c49e <__ieee754_pow+0x1f6>
 800c4ae:	4b09      	ldr	r3, [pc, #36]	; (800c4d4 <__ieee754_pow+0x22c>)
 800c4b0:	429c      	cmp	r4, r3
 800c4b2:	dd17      	ble.n	800c4e4 <__ieee754_pow+0x23c>
 800c4b4:	2f00      	cmp	r7, #0
 800c4b6:	dcf4      	bgt.n	800c4a2 <__ieee754_pow+0x1fa>
 800c4b8:	e778      	b.n	800c3ac <__ieee754_pow+0x104>
 800c4ba:	bf00      	nop
 800c4bc:	f3af 8000 	nop.w
 800c4c0:	8800759c 	.word	0x8800759c
 800c4c4:	7e37e43c 	.word	0x7e37e43c
 800c4c8:	7ff00000 	.word	0x7ff00000
 800c4cc:	0800d5d0 	.word	0x0800d5d0
 800c4d0:	433fffff 	.word	0x433fffff
 800c4d4:	3ff00000 	.word	0x3ff00000
 800c4d8:	3fefffff 	.word	0x3fefffff
 800c4dc:	3fe00000 	.word	0x3fe00000
 800c4e0:	41e00000 	.word	0x41e00000
 800c4e4:	4b64      	ldr	r3, [pc, #400]	; (800c678 <__ieee754_pow+0x3d0>)
 800c4e6:	2200      	movs	r2, #0
 800c4e8:	f7f3 fece 	bl	8000288 <__aeabi_dsub>
 800c4ec:	a356      	add	r3, pc, #344	; (adr r3, 800c648 <__ieee754_pow+0x3a0>)
 800c4ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4f2:	4604      	mov	r4, r0
 800c4f4:	460d      	mov	r5, r1
 800c4f6:	f7f4 f87f 	bl	80005f8 <__aeabi_dmul>
 800c4fa:	a355      	add	r3, pc, #340	; (adr r3, 800c650 <__ieee754_pow+0x3a8>)
 800c4fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c500:	4606      	mov	r6, r0
 800c502:	460f      	mov	r7, r1
 800c504:	4620      	mov	r0, r4
 800c506:	4629      	mov	r1, r5
 800c508:	f7f4 f876 	bl	80005f8 <__aeabi_dmul>
 800c50c:	4b5b      	ldr	r3, [pc, #364]	; (800c67c <__ieee754_pow+0x3d4>)
 800c50e:	4682      	mov	sl, r0
 800c510:	468b      	mov	fp, r1
 800c512:	2200      	movs	r2, #0
 800c514:	4620      	mov	r0, r4
 800c516:	4629      	mov	r1, r5
 800c518:	f7f4 f86e 	bl	80005f8 <__aeabi_dmul>
 800c51c:	4602      	mov	r2, r0
 800c51e:	460b      	mov	r3, r1
 800c520:	a14d      	add	r1, pc, #308	; (adr r1, 800c658 <__ieee754_pow+0x3b0>)
 800c522:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c526:	f7f3 feaf 	bl	8000288 <__aeabi_dsub>
 800c52a:	4622      	mov	r2, r4
 800c52c:	462b      	mov	r3, r5
 800c52e:	f7f4 f863 	bl	80005f8 <__aeabi_dmul>
 800c532:	4602      	mov	r2, r0
 800c534:	460b      	mov	r3, r1
 800c536:	2000      	movs	r0, #0
 800c538:	4951      	ldr	r1, [pc, #324]	; (800c680 <__ieee754_pow+0x3d8>)
 800c53a:	f7f3 fea5 	bl	8000288 <__aeabi_dsub>
 800c53e:	4622      	mov	r2, r4
 800c540:	4680      	mov	r8, r0
 800c542:	4689      	mov	r9, r1
 800c544:	462b      	mov	r3, r5
 800c546:	4620      	mov	r0, r4
 800c548:	4629      	mov	r1, r5
 800c54a:	f7f4 f855 	bl	80005f8 <__aeabi_dmul>
 800c54e:	4602      	mov	r2, r0
 800c550:	460b      	mov	r3, r1
 800c552:	4640      	mov	r0, r8
 800c554:	4649      	mov	r1, r9
 800c556:	f7f4 f84f 	bl	80005f8 <__aeabi_dmul>
 800c55a:	a341      	add	r3, pc, #260	; (adr r3, 800c660 <__ieee754_pow+0x3b8>)
 800c55c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c560:	f7f4 f84a 	bl	80005f8 <__aeabi_dmul>
 800c564:	4602      	mov	r2, r0
 800c566:	460b      	mov	r3, r1
 800c568:	4650      	mov	r0, sl
 800c56a:	4659      	mov	r1, fp
 800c56c:	f7f3 fe8c 	bl	8000288 <__aeabi_dsub>
 800c570:	4602      	mov	r2, r0
 800c572:	460b      	mov	r3, r1
 800c574:	4680      	mov	r8, r0
 800c576:	4689      	mov	r9, r1
 800c578:	4630      	mov	r0, r6
 800c57a:	4639      	mov	r1, r7
 800c57c:	f7f3 fe86 	bl	800028c <__adddf3>
 800c580:	2400      	movs	r4, #0
 800c582:	4632      	mov	r2, r6
 800c584:	463b      	mov	r3, r7
 800c586:	4620      	mov	r0, r4
 800c588:	460d      	mov	r5, r1
 800c58a:	f7f3 fe7d 	bl	8000288 <__aeabi_dsub>
 800c58e:	4602      	mov	r2, r0
 800c590:	460b      	mov	r3, r1
 800c592:	4640      	mov	r0, r8
 800c594:	4649      	mov	r1, r9
 800c596:	f7f3 fe77 	bl	8000288 <__aeabi_dsub>
 800c59a:	9b00      	ldr	r3, [sp, #0]
 800c59c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c59e:	3b01      	subs	r3, #1
 800c5a0:	4313      	orrs	r3, r2
 800c5a2:	4682      	mov	sl, r0
 800c5a4:	468b      	mov	fp, r1
 800c5a6:	f040 81f1 	bne.w	800c98c <__ieee754_pow+0x6e4>
 800c5aa:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 800c668 <__ieee754_pow+0x3c0>
 800c5ae:	eeb0 8a47 	vmov.f32	s16, s14
 800c5b2:	eef0 8a67 	vmov.f32	s17, s15
 800c5b6:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800c5ba:	2600      	movs	r6, #0
 800c5bc:	4632      	mov	r2, r6
 800c5be:	463b      	mov	r3, r7
 800c5c0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c5c4:	f7f3 fe60 	bl	8000288 <__aeabi_dsub>
 800c5c8:	4622      	mov	r2, r4
 800c5ca:	462b      	mov	r3, r5
 800c5cc:	f7f4 f814 	bl	80005f8 <__aeabi_dmul>
 800c5d0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c5d4:	4680      	mov	r8, r0
 800c5d6:	4689      	mov	r9, r1
 800c5d8:	4650      	mov	r0, sl
 800c5da:	4659      	mov	r1, fp
 800c5dc:	f7f4 f80c 	bl	80005f8 <__aeabi_dmul>
 800c5e0:	4602      	mov	r2, r0
 800c5e2:	460b      	mov	r3, r1
 800c5e4:	4640      	mov	r0, r8
 800c5e6:	4649      	mov	r1, r9
 800c5e8:	f7f3 fe50 	bl	800028c <__adddf3>
 800c5ec:	4632      	mov	r2, r6
 800c5ee:	463b      	mov	r3, r7
 800c5f0:	4680      	mov	r8, r0
 800c5f2:	4689      	mov	r9, r1
 800c5f4:	4620      	mov	r0, r4
 800c5f6:	4629      	mov	r1, r5
 800c5f8:	f7f3 fffe 	bl	80005f8 <__aeabi_dmul>
 800c5fc:	460b      	mov	r3, r1
 800c5fe:	4604      	mov	r4, r0
 800c600:	460d      	mov	r5, r1
 800c602:	4602      	mov	r2, r0
 800c604:	4649      	mov	r1, r9
 800c606:	4640      	mov	r0, r8
 800c608:	f7f3 fe40 	bl	800028c <__adddf3>
 800c60c:	4b1d      	ldr	r3, [pc, #116]	; (800c684 <__ieee754_pow+0x3dc>)
 800c60e:	4299      	cmp	r1, r3
 800c610:	ec45 4b19 	vmov	d9, r4, r5
 800c614:	4606      	mov	r6, r0
 800c616:	460f      	mov	r7, r1
 800c618:	468b      	mov	fp, r1
 800c61a:	f340 82fe 	ble.w	800cc1a <__ieee754_pow+0x972>
 800c61e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800c622:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800c626:	4303      	orrs	r3, r0
 800c628:	f000 81f0 	beq.w	800ca0c <__ieee754_pow+0x764>
 800c62c:	a310      	add	r3, pc, #64	; (adr r3, 800c670 <__ieee754_pow+0x3c8>)
 800c62e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c632:	ec51 0b18 	vmov	r0, r1, d8
 800c636:	f7f3 ffdf 	bl	80005f8 <__aeabi_dmul>
 800c63a:	a30d      	add	r3, pc, #52	; (adr r3, 800c670 <__ieee754_pow+0x3c8>)
 800c63c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c640:	e6cb      	b.n	800c3da <__ieee754_pow+0x132>
 800c642:	bf00      	nop
 800c644:	f3af 8000 	nop.w
 800c648:	60000000 	.word	0x60000000
 800c64c:	3ff71547 	.word	0x3ff71547
 800c650:	f85ddf44 	.word	0xf85ddf44
 800c654:	3e54ae0b 	.word	0x3e54ae0b
 800c658:	55555555 	.word	0x55555555
 800c65c:	3fd55555 	.word	0x3fd55555
 800c660:	652b82fe 	.word	0x652b82fe
 800c664:	3ff71547 	.word	0x3ff71547
 800c668:	00000000 	.word	0x00000000
 800c66c:	bff00000 	.word	0xbff00000
 800c670:	8800759c 	.word	0x8800759c
 800c674:	7e37e43c 	.word	0x7e37e43c
 800c678:	3ff00000 	.word	0x3ff00000
 800c67c:	3fd00000 	.word	0x3fd00000
 800c680:	3fe00000 	.word	0x3fe00000
 800c684:	408fffff 	.word	0x408fffff
 800c688:	4bd7      	ldr	r3, [pc, #860]	; (800c9e8 <__ieee754_pow+0x740>)
 800c68a:	ea03 0309 	and.w	r3, r3, r9
 800c68e:	2200      	movs	r2, #0
 800c690:	b92b      	cbnz	r3, 800c69e <__ieee754_pow+0x3f6>
 800c692:	4bd6      	ldr	r3, [pc, #856]	; (800c9ec <__ieee754_pow+0x744>)
 800c694:	f7f3 ffb0 	bl	80005f8 <__aeabi_dmul>
 800c698:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800c69c:	460c      	mov	r4, r1
 800c69e:	1523      	asrs	r3, r4, #20
 800c6a0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800c6a4:	4413      	add	r3, r2
 800c6a6:	9309      	str	r3, [sp, #36]	; 0x24
 800c6a8:	4bd1      	ldr	r3, [pc, #836]	; (800c9f0 <__ieee754_pow+0x748>)
 800c6aa:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800c6ae:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800c6b2:	429c      	cmp	r4, r3
 800c6b4:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800c6b8:	dd08      	ble.n	800c6cc <__ieee754_pow+0x424>
 800c6ba:	4bce      	ldr	r3, [pc, #824]	; (800c9f4 <__ieee754_pow+0x74c>)
 800c6bc:	429c      	cmp	r4, r3
 800c6be:	f340 8163 	ble.w	800c988 <__ieee754_pow+0x6e0>
 800c6c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c6c4:	3301      	adds	r3, #1
 800c6c6:	9309      	str	r3, [sp, #36]	; 0x24
 800c6c8:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800c6cc:	2400      	movs	r4, #0
 800c6ce:	00e3      	lsls	r3, r4, #3
 800c6d0:	930b      	str	r3, [sp, #44]	; 0x2c
 800c6d2:	4bc9      	ldr	r3, [pc, #804]	; (800c9f8 <__ieee754_pow+0x750>)
 800c6d4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800c6d8:	ed93 7b00 	vldr	d7, [r3]
 800c6dc:	4629      	mov	r1, r5
 800c6de:	ec53 2b17 	vmov	r2, r3, d7
 800c6e2:	eeb0 8a47 	vmov.f32	s16, s14
 800c6e6:	eef0 8a67 	vmov.f32	s17, s15
 800c6ea:	4682      	mov	sl, r0
 800c6ec:	f7f3 fdcc 	bl	8000288 <__aeabi_dsub>
 800c6f0:	4652      	mov	r2, sl
 800c6f2:	4606      	mov	r6, r0
 800c6f4:	460f      	mov	r7, r1
 800c6f6:	462b      	mov	r3, r5
 800c6f8:	ec51 0b18 	vmov	r0, r1, d8
 800c6fc:	f7f3 fdc6 	bl	800028c <__adddf3>
 800c700:	4602      	mov	r2, r0
 800c702:	460b      	mov	r3, r1
 800c704:	2000      	movs	r0, #0
 800c706:	49bd      	ldr	r1, [pc, #756]	; (800c9fc <__ieee754_pow+0x754>)
 800c708:	f7f4 f8a0 	bl	800084c <__aeabi_ddiv>
 800c70c:	ec41 0b19 	vmov	d9, r0, r1
 800c710:	4602      	mov	r2, r0
 800c712:	460b      	mov	r3, r1
 800c714:	4630      	mov	r0, r6
 800c716:	4639      	mov	r1, r7
 800c718:	f7f3 ff6e 	bl	80005f8 <__aeabi_dmul>
 800c71c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800c720:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c724:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800c728:	2300      	movs	r3, #0
 800c72a:	9304      	str	r3, [sp, #16]
 800c72c:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800c730:	46ab      	mov	fp, r5
 800c732:	106d      	asrs	r5, r5, #1
 800c734:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800c738:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800c73c:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 800c740:	2200      	movs	r2, #0
 800c742:	4640      	mov	r0, r8
 800c744:	4649      	mov	r1, r9
 800c746:	4614      	mov	r4, r2
 800c748:	461d      	mov	r5, r3
 800c74a:	f7f3 ff55 	bl	80005f8 <__aeabi_dmul>
 800c74e:	4602      	mov	r2, r0
 800c750:	460b      	mov	r3, r1
 800c752:	4630      	mov	r0, r6
 800c754:	4639      	mov	r1, r7
 800c756:	f7f3 fd97 	bl	8000288 <__aeabi_dsub>
 800c75a:	ec53 2b18 	vmov	r2, r3, d8
 800c75e:	4606      	mov	r6, r0
 800c760:	460f      	mov	r7, r1
 800c762:	4620      	mov	r0, r4
 800c764:	4629      	mov	r1, r5
 800c766:	f7f3 fd8f 	bl	8000288 <__aeabi_dsub>
 800c76a:	4602      	mov	r2, r0
 800c76c:	460b      	mov	r3, r1
 800c76e:	4650      	mov	r0, sl
 800c770:	4659      	mov	r1, fp
 800c772:	f7f3 fd89 	bl	8000288 <__aeabi_dsub>
 800c776:	4642      	mov	r2, r8
 800c778:	464b      	mov	r3, r9
 800c77a:	f7f3 ff3d 	bl	80005f8 <__aeabi_dmul>
 800c77e:	4602      	mov	r2, r0
 800c780:	460b      	mov	r3, r1
 800c782:	4630      	mov	r0, r6
 800c784:	4639      	mov	r1, r7
 800c786:	f7f3 fd7f 	bl	8000288 <__aeabi_dsub>
 800c78a:	ec53 2b19 	vmov	r2, r3, d9
 800c78e:	f7f3 ff33 	bl	80005f8 <__aeabi_dmul>
 800c792:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c796:	ec41 0b18 	vmov	d8, r0, r1
 800c79a:	4610      	mov	r0, r2
 800c79c:	4619      	mov	r1, r3
 800c79e:	f7f3 ff2b 	bl	80005f8 <__aeabi_dmul>
 800c7a2:	a37d      	add	r3, pc, #500	; (adr r3, 800c998 <__ieee754_pow+0x6f0>)
 800c7a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7a8:	4604      	mov	r4, r0
 800c7aa:	460d      	mov	r5, r1
 800c7ac:	f7f3 ff24 	bl	80005f8 <__aeabi_dmul>
 800c7b0:	a37b      	add	r3, pc, #492	; (adr r3, 800c9a0 <__ieee754_pow+0x6f8>)
 800c7b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7b6:	f7f3 fd69 	bl	800028c <__adddf3>
 800c7ba:	4622      	mov	r2, r4
 800c7bc:	462b      	mov	r3, r5
 800c7be:	f7f3 ff1b 	bl	80005f8 <__aeabi_dmul>
 800c7c2:	a379      	add	r3, pc, #484	; (adr r3, 800c9a8 <__ieee754_pow+0x700>)
 800c7c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7c8:	f7f3 fd60 	bl	800028c <__adddf3>
 800c7cc:	4622      	mov	r2, r4
 800c7ce:	462b      	mov	r3, r5
 800c7d0:	f7f3 ff12 	bl	80005f8 <__aeabi_dmul>
 800c7d4:	a376      	add	r3, pc, #472	; (adr r3, 800c9b0 <__ieee754_pow+0x708>)
 800c7d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7da:	f7f3 fd57 	bl	800028c <__adddf3>
 800c7de:	4622      	mov	r2, r4
 800c7e0:	462b      	mov	r3, r5
 800c7e2:	f7f3 ff09 	bl	80005f8 <__aeabi_dmul>
 800c7e6:	a374      	add	r3, pc, #464	; (adr r3, 800c9b8 <__ieee754_pow+0x710>)
 800c7e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7ec:	f7f3 fd4e 	bl	800028c <__adddf3>
 800c7f0:	4622      	mov	r2, r4
 800c7f2:	462b      	mov	r3, r5
 800c7f4:	f7f3 ff00 	bl	80005f8 <__aeabi_dmul>
 800c7f8:	a371      	add	r3, pc, #452	; (adr r3, 800c9c0 <__ieee754_pow+0x718>)
 800c7fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7fe:	f7f3 fd45 	bl	800028c <__adddf3>
 800c802:	4622      	mov	r2, r4
 800c804:	4606      	mov	r6, r0
 800c806:	460f      	mov	r7, r1
 800c808:	462b      	mov	r3, r5
 800c80a:	4620      	mov	r0, r4
 800c80c:	4629      	mov	r1, r5
 800c80e:	f7f3 fef3 	bl	80005f8 <__aeabi_dmul>
 800c812:	4602      	mov	r2, r0
 800c814:	460b      	mov	r3, r1
 800c816:	4630      	mov	r0, r6
 800c818:	4639      	mov	r1, r7
 800c81a:	f7f3 feed 	bl	80005f8 <__aeabi_dmul>
 800c81e:	4642      	mov	r2, r8
 800c820:	4604      	mov	r4, r0
 800c822:	460d      	mov	r5, r1
 800c824:	464b      	mov	r3, r9
 800c826:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c82a:	f7f3 fd2f 	bl	800028c <__adddf3>
 800c82e:	ec53 2b18 	vmov	r2, r3, d8
 800c832:	f7f3 fee1 	bl	80005f8 <__aeabi_dmul>
 800c836:	4622      	mov	r2, r4
 800c838:	462b      	mov	r3, r5
 800c83a:	f7f3 fd27 	bl	800028c <__adddf3>
 800c83e:	4642      	mov	r2, r8
 800c840:	4682      	mov	sl, r0
 800c842:	468b      	mov	fp, r1
 800c844:	464b      	mov	r3, r9
 800c846:	4640      	mov	r0, r8
 800c848:	4649      	mov	r1, r9
 800c84a:	f7f3 fed5 	bl	80005f8 <__aeabi_dmul>
 800c84e:	4b6c      	ldr	r3, [pc, #432]	; (800ca00 <__ieee754_pow+0x758>)
 800c850:	2200      	movs	r2, #0
 800c852:	4606      	mov	r6, r0
 800c854:	460f      	mov	r7, r1
 800c856:	f7f3 fd19 	bl	800028c <__adddf3>
 800c85a:	4652      	mov	r2, sl
 800c85c:	465b      	mov	r3, fp
 800c85e:	f7f3 fd15 	bl	800028c <__adddf3>
 800c862:	9c04      	ldr	r4, [sp, #16]
 800c864:	460d      	mov	r5, r1
 800c866:	4622      	mov	r2, r4
 800c868:	460b      	mov	r3, r1
 800c86a:	4640      	mov	r0, r8
 800c86c:	4649      	mov	r1, r9
 800c86e:	f7f3 fec3 	bl	80005f8 <__aeabi_dmul>
 800c872:	4b63      	ldr	r3, [pc, #396]	; (800ca00 <__ieee754_pow+0x758>)
 800c874:	4680      	mov	r8, r0
 800c876:	4689      	mov	r9, r1
 800c878:	2200      	movs	r2, #0
 800c87a:	4620      	mov	r0, r4
 800c87c:	4629      	mov	r1, r5
 800c87e:	f7f3 fd03 	bl	8000288 <__aeabi_dsub>
 800c882:	4632      	mov	r2, r6
 800c884:	463b      	mov	r3, r7
 800c886:	f7f3 fcff 	bl	8000288 <__aeabi_dsub>
 800c88a:	4602      	mov	r2, r0
 800c88c:	460b      	mov	r3, r1
 800c88e:	4650      	mov	r0, sl
 800c890:	4659      	mov	r1, fp
 800c892:	f7f3 fcf9 	bl	8000288 <__aeabi_dsub>
 800c896:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c89a:	f7f3 fead 	bl	80005f8 <__aeabi_dmul>
 800c89e:	4622      	mov	r2, r4
 800c8a0:	4606      	mov	r6, r0
 800c8a2:	460f      	mov	r7, r1
 800c8a4:	462b      	mov	r3, r5
 800c8a6:	ec51 0b18 	vmov	r0, r1, d8
 800c8aa:	f7f3 fea5 	bl	80005f8 <__aeabi_dmul>
 800c8ae:	4602      	mov	r2, r0
 800c8b0:	460b      	mov	r3, r1
 800c8b2:	4630      	mov	r0, r6
 800c8b4:	4639      	mov	r1, r7
 800c8b6:	f7f3 fce9 	bl	800028c <__adddf3>
 800c8ba:	4606      	mov	r6, r0
 800c8bc:	460f      	mov	r7, r1
 800c8be:	4602      	mov	r2, r0
 800c8c0:	460b      	mov	r3, r1
 800c8c2:	4640      	mov	r0, r8
 800c8c4:	4649      	mov	r1, r9
 800c8c6:	f7f3 fce1 	bl	800028c <__adddf3>
 800c8ca:	9c04      	ldr	r4, [sp, #16]
 800c8cc:	a33e      	add	r3, pc, #248	; (adr r3, 800c9c8 <__ieee754_pow+0x720>)
 800c8ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8d2:	4620      	mov	r0, r4
 800c8d4:	460d      	mov	r5, r1
 800c8d6:	f7f3 fe8f 	bl	80005f8 <__aeabi_dmul>
 800c8da:	4642      	mov	r2, r8
 800c8dc:	ec41 0b18 	vmov	d8, r0, r1
 800c8e0:	464b      	mov	r3, r9
 800c8e2:	4620      	mov	r0, r4
 800c8e4:	4629      	mov	r1, r5
 800c8e6:	f7f3 fccf 	bl	8000288 <__aeabi_dsub>
 800c8ea:	4602      	mov	r2, r0
 800c8ec:	460b      	mov	r3, r1
 800c8ee:	4630      	mov	r0, r6
 800c8f0:	4639      	mov	r1, r7
 800c8f2:	f7f3 fcc9 	bl	8000288 <__aeabi_dsub>
 800c8f6:	a336      	add	r3, pc, #216	; (adr r3, 800c9d0 <__ieee754_pow+0x728>)
 800c8f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8fc:	f7f3 fe7c 	bl	80005f8 <__aeabi_dmul>
 800c900:	a335      	add	r3, pc, #212	; (adr r3, 800c9d8 <__ieee754_pow+0x730>)
 800c902:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c906:	4606      	mov	r6, r0
 800c908:	460f      	mov	r7, r1
 800c90a:	4620      	mov	r0, r4
 800c90c:	4629      	mov	r1, r5
 800c90e:	f7f3 fe73 	bl	80005f8 <__aeabi_dmul>
 800c912:	4602      	mov	r2, r0
 800c914:	460b      	mov	r3, r1
 800c916:	4630      	mov	r0, r6
 800c918:	4639      	mov	r1, r7
 800c91a:	f7f3 fcb7 	bl	800028c <__adddf3>
 800c91e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800c920:	4b38      	ldr	r3, [pc, #224]	; (800ca04 <__ieee754_pow+0x75c>)
 800c922:	4413      	add	r3, r2
 800c924:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c928:	f7f3 fcb0 	bl	800028c <__adddf3>
 800c92c:	4682      	mov	sl, r0
 800c92e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c930:	468b      	mov	fp, r1
 800c932:	f7f3 fdf7 	bl	8000524 <__aeabi_i2d>
 800c936:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800c938:	4b33      	ldr	r3, [pc, #204]	; (800ca08 <__ieee754_pow+0x760>)
 800c93a:	4413      	add	r3, r2
 800c93c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800c940:	4606      	mov	r6, r0
 800c942:	460f      	mov	r7, r1
 800c944:	4652      	mov	r2, sl
 800c946:	465b      	mov	r3, fp
 800c948:	ec51 0b18 	vmov	r0, r1, d8
 800c94c:	f7f3 fc9e 	bl	800028c <__adddf3>
 800c950:	4642      	mov	r2, r8
 800c952:	464b      	mov	r3, r9
 800c954:	f7f3 fc9a 	bl	800028c <__adddf3>
 800c958:	4632      	mov	r2, r6
 800c95a:	463b      	mov	r3, r7
 800c95c:	f7f3 fc96 	bl	800028c <__adddf3>
 800c960:	9c04      	ldr	r4, [sp, #16]
 800c962:	4632      	mov	r2, r6
 800c964:	463b      	mov	r3, r7
 800c966:	4620      	mov	r0, r4
 800c968:	460d      	mov	r5, r1
 800c96a:	f7f3 fc8d 	bl	8000288 <__aeabi_dsub>
 800c96e:	4642      	mov	r2, r8
 800c970:	464b      	mov	r3, r9
 800c972:	f7f3 fc89 	bl	8000288 <__aeabi_dsub>
 800c976:	ec53 2b18 	vmov	r2, r3, d8
 800c97a:	f7f3 fc85 	bl	8000288 <__aeabi_dsub>
 800c97e:	4602      	mov	r2, r0
 800c980:	460b      	mov	r3, r1
 800c982:	4650      	mov	r0, sl
 800c984:	4659      	mov	r1, fp
 800c986:	e606      	b.n	800c596 <__ieee754_pow+0x2ee>
 800c988:	2401      	movs	r4, #1
 800c98a:	e6a0      	b.n	800c6ce <__ieee754_pow+0x426>
 800c98c:	ed9f 7b14 	vldr	d7, [pc, #80]	; 800c9e0 <__ieee754_pow+0x738>
 800c990:	e60d      	b.n	800c5ae <__ieee754_pow+0x306>
 800c992:	bf00      	nop
 800c994:	f3af 8000 	nop.w
 800c998:	4a454eef 	.word	0x4a454eef
 800c99c:	3fca7e28 	.word	0x3fca7e28
 800c9a0:	93c9db65 	.word	0x93c9db65
 800c9a4:	3fcd864a 	.word	0x3fcd864a
 800c9a8:	a91d4101 	.word	0xa91d4101
 800c9ac:	3fd17460 	.word	0x3fd17460
 800c9b0:	518f264d 	.word	0x518f264d
 800c9b4:	3fd55555 	.word	0x3fd55555
 800c9b8:	db6fabff 	.word	0xdb6fabff
 800c9bc:	3fdb6db6 	.word	0x3fdb6db6
 800c9c0:	33333303 	.word	0x33333303
 800c9c4:	3fe33333 	.word	0x3fe33333
 800c9c8:	e0000000 	.word	0xe0000000
 800c9cc:	3feec709 	.word	0x3feec709
 800c9d0:	dc3a03fd 	.word	0xdc3a03fd
 800c9d4:	3feec709 	.word	0x3feec709
 800c9d8:	145b01f5 	.word	0x145b01f5
 800c9dc:	be3e2fe0 	.word	0xbe3e2fe0
 800c9e0:	00000000 	.word	0x00000000
 800c9e4:	3ff00000 	.word	0x3ff00000
 800c9e8:	7ff00000 	.word	0x7ff00000
 800c9ec:	43400000 	.word	0x43400000
 800c9f0:	0003988e 	.word	0x0003988e
 800c9f4:	000bb679 	.word	0x000bb679
 800c9f8:	0800d6e0 	.word	0x0800d6e0
 800c9fc:	3ff00000 	.word	0x3ff00000
 800ca00:	40080000 	.word	0x40080000
 800ca04:	0800d700 	.word	0x0800d700
 800ca08:	0800d6f0 	.word	0x0800d6f0
 800ca0c:	a3b5      	add	r3, pc, #724	; (adr r3, 800cce4 <__ieee754_pow+0xa3c>)
 800ca0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca12:	4640      	mov	r0, r8
 800ca14:	4649      	mov	r1, r9
 800ca16:	f7f3 fc39 	bl	800028c <__adddf3>
 800ca1a:	4622      	mov	r2, r4
 800ca1c:	ec41 0b1a 	vmov	d10, r0, r1
 800ca20:	462b      	mov	r3, r5
 800ca22:	4630      	mov	r0, r6
 800ca24:	4639      	mov	r1, r7
 800ca26:	f7f3 fc2f 	bl	8000288 <__aeabi_dsub>
 800ca2a:	4602      	mov	r2, r0
 800ca2c:	460b      	mov	r3, r1
 800ca2e:	ec51 0b1a 	vmov	r0, r1, d10
 800ca32:	f7f4 f871 	bl	8000b18 <__aeabi_dcmpgt>
 800ca36:	2800      	cmp	r0, #0
 800ca38:	f47f adf8 	bne.w	800c62c <__ieee754_pow+0x384>
 800ca3c:	4aa4      	ldr	r2, [pc, #656]	; (800ccd0 <__ieee754_pow+0xa28>)
 800ca3e:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800ca42:	4293      	cmp	r3, r2
 800ca44:	f340 810b 	ble.w	800cc5e <__ieee754_pow+0x9b6>
 800ca48:	151b      	asrs	r3, r3, #20
 800ca4a:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800ca4e:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800ca52:	fa4a f303 	asr.w	r3, sl, r3
 800ca56:	445b      	add	r3, fp
 800ca58:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800ca5c:	4e9d      	ldr	r6, [pc, #628]	; (800ccd4 <__ieee754_pow+0xa2c>)
 800ca5e:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800ca62:	4116      	asrs	r6, r2
 800ca64:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800ca68:	2000      	movs	r0, #0
 800ca6a:	ea23 0106 	bic.w	r1, r3, r6
 800ca6e:	f1c2 0214 	rsb	r2, r2, #20
 800ca72:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800ca76:	fa4a fa02 	asr.w	sl, sl, r2
 800ca7a:	f1bb 0f00 	cmp.w	fp, #0
 800ca7e:	4602      	mov	r2, r0
 800ca80:	460b      	mov	r3, r1
 800ca82:	4620      	mov	r0, r4
 800ca84:	4629      	mov	r1, r5
 800ca86:	bfb8      	it	lt
 800ca88:	f1ca 0a00 	rsblt	sl, sl, #0
 800ca8c:	f7f3 fbfc 	bl	8000288 <__aeabi_dsub>
 800ca90:	ec41 0b19 	vmov	d9, r0, r1
 800ca94:	4642      	mov	r2, r8
 800ca96:	464b      	mov	r3, r9
 800ca98:	ec51 0b19 	vmov	r0, r1, d9
 800ca9c:	f7f3 fbf6 	bl	800028c <__adddf3>
 800caa0:	2400      	movs	r4, #0
 800caa2:	a379      	add	r3, pc, #484	; (adr r3, 800cc88 <__ieee754_pow+0x9e0>)
 800caa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800caa8:	4620      	mov	r0, r4
 800caaa:	460d      	mov	r5, r1
 800caac:	f7f3 fda4 	bl	80005f8 <__aeabi_dmul>
 800cab0:	ec53 2b19 	vmov	r2, r3, d9
 800cab4:	4606      	mov	r6, r0
 800cab6:	460f      	mov	r7, r1
 800cab8:	4620      	mov	r0, r4
 800caba:	4629      	mov	r1, r5
 800cabc:	f7f3 fbe4 	bl	8000288 <__aeabi_dsub>
 800cac0:	4602      	mov	r2, r0
 800cac2:	460b      	mov	r3, r1
 800cac4:	4640      	mov	r0, r8
 800cac6:	4649      	mov	r1, r9
 800cac8:	f7f3 fbde 	bl	8000288 <__aeabi_dsub>
 800cacc:	a370      	add	r3, pc, #448	; (adr r3, 800cc90 <__ieee754_pow+0x9e8>)
 800cace:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cad2:	f7f3 fd91 	bl	80005f8 <__aeabi_dmul>
 800cad6:	a370      	add	r3, pc, #448	; (adr r3, 800cc98 <__ieee754_pow+0x9f0>)
 800cad8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cadc:	4680      	mov	r8, r0
 800cade:	4689      	mov	r9, r1
 800cae0:	4620      	mov	r0, r4
 800cae2:	4629      	mov	r1, r5
 800cae4:	f7f3 fd88 	bl	80005f8 <__aeabi_dmul>
 800cae8:	4602      	mov	r2, r0
 800caea:	460b      	mov	r3, r1
 800caec:	4640      	mov	r0, r8
 800caee:	4649      	mov	r1, r9
 800caf0:	f7f3 fbcc 	bl	800028c <__adddf3>
 800caf4:	4604      	mov	r4, r0
 800caf6:	460d      	mov	r5, r1
 800caf8:	4602      	mov	r2, r0
 800cafa:	460b      	mov	r3, r1
 800cafc:	4630      	mov	r0, r6
 800cafe:	4639      	mov	r1, r7
 800cb00:	f7f3 fbc4 	bl	800028c <__adddf3>
 800cb04:	4632      	mov	r2, r6
 800cb06:	463b      	mov	r3, r7
 800cb08:	4680      	mov	r8, r0
 800cb0a:	4689      	mov	r9, r1
 800cb0c:	f7f3 fbbc 	bl	8000288 <__aeabi_dsub>
 800cb10:	4602      	mov	r2, r0
 800cb12:	460b      	mov	r3, r1
 800cb14:	4620      	mov	r0, r4
 800cb16:	4629      	mov	r1, r5
 800cb18:	f7f3 fbb6 	bl	8000288 <__aeabi_dsub>
 800cb1c:	4642      	mov	r2, r8
 800cb1e:	4606      	mov	r6, r0
 800cb20:	460f      	mov	r7, r1
 800cb22:	464b      	mov	r3, r9
 800cb24:	4640      	mov	r0, r8
 800cb26:	4649      	mov	r1, r9
 800cb28:	f7f3 fd66 	bl	80005f8 <__aeabi_dmul>
 800cb2c:	a35c      	add	r3, pc, #368	; (adr r3, 800cca0 <__ieee754_pow+0x9f8>)
 800cb2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb32:	4604      	mov	r4, r0
 800cb34:	460d      	mov	r5, r1
 800cb36:	f7f3 fd5f 	bl	80005f8 <__aeabi_dmul>
 800cb3a:	a35b      	add	r3, pc, #364	; (adr r3, 800cca8 <__ieee754_pow+0xa00>)
 800cb3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb40:	f7f3 fba2 	bl	8000288 <__aeabi_dsub>
 800cb44:	4622      	mov	r2, r4
 800cb46:	462b      	mov	r3, r5
 800cb48:	f7f3 fd56 	bl	80005f8 <__aeabi_dmul>
 800cb4c:	a358      	add	r3, pc, #352	; (adr r3, 800ccb0 <__ieee754_pow+0xa08>)
 800cb4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb52:	f7f3 fb9b 	bl	800028c <__adddf3>
 800cb56:	4622      	mov	r2, r4
 800cb58:	462b      	mov	r3, r5
 800cb5a:	f7f3 fd4d 	bl	80005f8 <__aeabi_dmul>
 800cb5e:	a356      	add	r3, pc, #344	; (adr r3, 800ccb8 <__ieee754_pow+0xa10>)
 800cb60:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb64:	f7f3 fb90 	bl	8000288 <__aeabi_dsub>
 800cb68:	4622      	mov	r2, r4
 800cb6a:	462b      	mov	r3, r5
 800cb6c:	f7f3 fd44 	bl	80005f8 <__aeabi_dmul>
 800cb70:	a353      	add	r3, pc, #332	; (adr r3, 800ccc0 <__ieee754_pow+0xa18>)
 800cb72:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb76:	f7f3 fb89 	bl	800028c <__adddf3>
 800cb7a:	4622      	mov	r2, r4
 800cb7c:	462b      	mov	r3, r5
 800cb7e:	f7f3 fd3b 	bl	80005f8 <__aeabi_dmul>
 800cb82:	4602      	mov	r2, r0
 800cb84:	460b      	mov	r3, r1
 800cb86:	4640      	mov	r0, r8
 800cb88:	4649      	mov	r1, r9
 800cb8a:	f7f3 fb7d 	bl	8000288 <__aeabi_dsub>
 800cb8e:	4604      	mov	r4, r0
 800cb90:	460d      	mov	r5, r1
 800cb92:	4602      	mov	r2, r0
 800cb94:	460b      	mov	r3, r1
 800cb96:	4640      	mov	r0, r8
 800cb98:	4649      	mov	r1, r9
 800cb9a:	f7f3 fd2d 	bl	80005f8 <__aeabi_dmul>
 800cb9e:	2200      	movs	r2, #0
 800cba0:	ec41 0b19 	vmov	d9, r0, r1
 800cba4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800cba8:	4620      	mov	r0, r4
 800cbaa:	4629      	mov	r1, r5
 800cbac:	f7f3 fb6c 	bl	8000288 <__aeabi_dsub>
 800cbb0:	4602      	mov	r2, r0
 800cbb2:	460b      	mov	r3, r1
 800cbb4:	ec51 0b19 	vmov	r0, r1, d9
 800cbb8:	f7f3 fe48 	bl	800084c <__aeabi_ddiv>
 800cbbc:	4632      	mov	r2, r6
 800cbbe:	4604      	mov	r4, r0
 800cbc0:	460d      	mov	r5, r1
 800cbc2:	463b      	mov	r3, r7
 800cbc4:	4640      	mov	r0, r8
 800cbc6:	4649      	mov	r1, r9
 800cbc8:	f7f3 fd16 	bl	80005f8 <__aeabi_dmul>
 800cbcc:	4632      	mov	r2, r6
 800cbce:	463b      	mov	r3, r7
 800cbd0:	f7f3 fb5c 	bl	800028c <__adddf3>
 800cbd4:	4602      	mov	r2, r0
 800cbd6:	460b      	mov	r3, r1
 800cbd8:	4620      	mov	r0, r4
 800cbda:	4629      	mov	r1, r5
 800cbdc:	f7f3 fb54 	bl	8000288 <__aeabi_dsub>
 800cbe0:	4642      	mov	r2, r8
 800cbe2:	464b      	mov	r3, r9
 800cbe4:	f7f3 fb50 	bl	8000288 <__aeabi_dsub>
 800cbe8:	460b      	mov	r3, r1
 800cbea:	4602      	mov	r2, r0
 800cbec:	493a      	ldr	r1, [pc, #232]	; (800ccd8 <__ieee754_pow+0xa30>)
 800cbee:	2000      	movs	r0, #0
 800cbf0:	f7f3 fb4a 	bl	8000288 <__aeabi_dsub>
 800cbf4:	e9cd 0100 	strd	r0, r1, [sp]
 800cbf8:	9b01      	ldr	r3, [sp, #4]
 800cbfa:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800cbfe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800cc02:	da2f      	bge.n	800cc64 <__ieee754_pow+0x9bc>
 800cc04:	4650      	mov	r0, sl
 800cc06:	ed9d 0b00 	vldr	d0, [sp]
 800cc0a:	f000 f9cd 	bl	800cfa8 <scalbn>
 800cc0e:	ec51 0b10 	vmov	r0, r1, d0
 800cc12:	ec53 2b18 	vmov	r2, r3, d8
 800cc16:	f7ff bbe0 	b.w	800c3da <__ieee754_pow+0x132>
 800cc1a:	4b30      	ldr	r3, [pc, #192]	; (800ccdc <__ieee754_pow+0xa34>)
 800cc1c:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800cc20:	429e      	cmp	r6, r3
 800cc22:	f77f af0b 	ble.w	800ca3c <__ieee754_pow+0x794>
 800cc26:	4b2e      	ldr	r3, [pc, #184]	; (800cce0 <__ieee754_pow+0xa38>)
 800cc28:	440b      	add	r3, r1
 800cc2a:	4303      	orrs	r3, r0
 800cc2c:	d00b      	beq.n	800cc46 <__ieee754_pow+0x99e>
 800cc2e:	a326      	add	r3, pc, #152	; (adr r3, 800ccc8 <__ieee754_pow+0xa20>)
 800cc30:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc34:	ec51 0b18 	vmov	r0, r1, d8
 800cc38:	f7f3 fcde 	bl	80005f8 <__aeabi_dmul>
 800cc3c:	a322      	add	r3, pc, #136	; (adr r3, 800ccc8 <__ieee754_pow+0xa20>)
 800cc3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc42:	f7ff bbca 	b.w	800c3da <__ieee754_pow+0x132>
 800cc46:	4622      	mov	r2, r4
 800cc48:	462b      	mov	r3, r5
 800cc4a:	f7f3 fb1d 	bl	8000288 <__aeabi_dsub>
 800cc4e:	4642      	mov	r2, r8
 800cc50:	464b      	mov	r3, r9
 800cc52:	f7f3 ff57 	bl	8000b04 <__aeabi_dcmpge>
 800cc56:	2800      	cmp	r0, #0
 800cc58:	f43f aef0 	beq.w	800ca3c <__ieee754_pow+0x794>
 800cc5c:	e7e7      	b.n	800cc2e <__ieee754_pow+0x986>
 800cc5e:	f04f 0a00 	mov.w	sl, #0
 800cc62:	e717      	b.n	800ca94 <__ieee754_pow+0x7ec>
 800cc64:	e9dd 0100 	ldrd	r0, r1, [sp]
 800cc68:	4619      	mov	r1, r3
 800cc6a:	e7d2      	b.n	800cc12 <__ieee754_pow+0x96a>
 800cc6c:	491a      	ldr	r1, [pc, #104]	; (800ccd8 <__ieee754_pow+0xa30>)
 800cc6e:	2000      	movs	r0, #0
 800cc70:	f7ff bb9e 	b.w	800c3b0 <__ieee754_pow+0x108>
 800cc74:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cc78:	f7ff bb9a 	b.w	800c3b0 <__ieee754_pow+0x108>
 800cc7c:	9000      	str	r0, [sp, #0]
 800cc7e:	f7ff bb76 	b.w	800c36e <__ieee754_pow+0xc6>
 800cc82:	2100      	movs	r1, #0
 800cc84:	f7ff bb60 	b.w	800c348 <__ieee754_pow+0xa0>
 800cc88:	00000000 	.word	0x00000000
 800cc8c:	3fe62e43 	.word	0x3fe62e43
 800cc90:	fefa39ef 	.word	0xfefa39ef
 800cc94:	3fe62e42 	.word	0x3fe62e42
 800cc98:	0ca86c39 	.word	0x0ca86c39
 800cc9c:	be205c61 	.word	0xbe205c61
 800cca0:	72bea4d0 	.word	0x72bea4d0
 800cca4:	3e663769 	.word	0x3e663769
 800cca8:	c5d26bf1 	.word	0xc5d26bf1
 800ccac:	3ebbbd41 	.word	0x3ebbbd41
 800ccb0:	af25de2c 	.word	0xaf25de2c
 800ccb4:	3f11566a 	.word	0x3f11566a
 800ccb8:	16bebd93 	.word	0x16bebd93
 800ccbc:	3f66c16c 	.word	0x3f66c16c
 800ccc0:	5555553e 	.word	0x5555553e
 800ccc4:	3fc55555 	.word	0x3fc55555
 800ccc8:	c2f8f359 	.word	0xc2f8f359
 800cccc:	01a56e1f 	.word	0x01a56e1f
 800ccd0:	3fe00000 	.word	0x3fe00000
 800ccd4:	000fffff 	.word	0x000fffff
 800ccd8:	3ff00000 	.word	0x3ff00000
 800ccdc:	4090cbff 	.word	0x4090cbff
 800cce0:	3f6f3400 	.word	0x3f6f3400
 800cce4:	652b82fe 	.word	0x652b82fe
 800cce8:	3c971547 	.word	0x3c971547

0800ccec <__ieee754_sqrt>:
 800ccec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ccf0:	ec55 4b10 	vmov	r4, r5, d0
 800ccf4:	4e56      	ldr	r6, [pc, #344]	; (800ce50 <__ieee754_sqrt+0x164>)
 800ccf6:	43ae      	bics	r6, r5
 800ccf8:	ee10 0a10 	vmov	r0, s0
 800ccfc:	ee10 3a10 	vmov	r3, s0
 800cd00:	4629      	mov	r1, r5
 800cd02:	462a      	mov	r2, r5
 800cd04:	d110      	bne.n	800cd28 <__ieee754_sqrt+0x3c>
 800cd06:	ee10 2a10 	vmov	r2, s0
 800cd0a:	462b      	mov	r3, r5
 800cd0c:	f7f3 fc74 	bl	80005f8 <__aeabi_dmul>
 800cd10:	4602      	mov	r2, r0
 800cd12:	460b      	mov	r3, r1
 800cd14:	4620      	mov	r0, r4
 800cd16:	4629      	mov	r1, r5
 800cd18:	f7f3 fab8 	bl	800028c <__adddf3>
 800cd1c:	4604      	mov	r4, r0
 800cd1e:	460d      	mov	r5, r1
 800cd20:	ec45 4b10 	vmov	d0, r4, r5
 800cd24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cd28:	2d00      	cmp	r5, #0
 800cd2a:	dc10      	bgt.n	800cd4e <__ieee754_sqrt+0x62>
 800cd2c:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800cd30:	4330      	orrs	r0, r6
 800cd32:	d0f5      	beq.n	800cd20 <__ieee754_sqrt+0x34>
 800cd34:	b15d      	cbz	r5, 800cd4e <__ieee754_sqrt+0x62>
 800cd36:	ee10 2a10 	vmov	r2, s0
 800cd3a:	462b      	mov	r3, r5
 800cd3c:	ee10 0a10 	vmov	r0, s0
 800cd40:	f7f3 faa2 	bl	8000288 <__aeabi_dsub>
 800cd44:	4602      	mov	r2, r0
 800cd46:	460b      	mov	r3, r1
 800cd48:	f7f3 fd80 	bl	800084c <__aeabi_ddiv>
 800cd4c:	e7e6      	b.n	800cd1c <__ieee754_sqrt+0x30>
 800cd4e:	1509      	asrs	r1, r1, #20
 800cd50:	d076      	beq.n	800ce40 <__ieee754_sqrt+0x154>
 800cd52:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800cd56:	07ce      	lsls	r6, r1, #31
 800cd58:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 800cd5c:	bf5e      	ittt	pl
 800cd5e:	0fda      	lsrpl	r2, r3, #31
 800cd60:	005b      	lslpl	r3, r3, #1
 800cd62:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 800cd66:	0fda      	lsrs	r2, r3, #31
 800cd68:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 800cd6c:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 800cd70:	2000      	movs	r0, #0
 800cd72:	106d      	asrs	r5, r5, #1
 800cd74:	005b      	lsls	r3, r3, #1
 800cd76:	f04f 0e16 	mov.w	lr, #22
 800cd7a:	4684      	mov	ip, r0
 800cd7c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800cd80:	eb0c 0401 	add.w	r4, ip, r1
 800cd84:	4294      	cmp	r4, r2
 800cd86:	bfde      	ittt	le
 800cd88:	1b12      	suble	r2, r2, r4
 800cd8a:	eb04 0c01 	addle.w	ip, r4, r1
 800cd8e:	1840      	addle	r0, r0, r1
 800cd90:	0052      	lsls	r2, r2, #1
 800cd92:	f1be 0e01 	subs.w	lr, lr, #1
 800cd96:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800cd9a:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800cd9e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800cda2:	d1ed      	bne.n	800cd80 <__ieee754_sqrt+0x94>
 800cda4:	4671      	mov	r1, lr
 800cda6:	2720      	movs	r7, #32
 800cda8:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800cdac:	4562      	cmp	r2, ip
 800cdae:	eb04 060e 	add.w	r6, r4, lr
 800cdb2:	dc02      	bgt.n	800cdba <__ieee754_sqrt+0xce>
 800cdb4:	d113      	bne.n	800cdde <__ieee754_sqrt+0xf2>
 800cdb6:	429e      	cmp	r6, r3
 800cdb8:	d811      	bhi.n	800cdde <__ieee754_sqrt+0xf2>
 800cdba:	2e00      	cmp	r6, #0
 800cdbc:	eb06 0e04 	add.w	lr, r6, r4
 800cdc0:	da43      	bge.n	800ce4a <__ieee754_sqrt+0x15e>
 800cdc2:	f1be 0f00 	cmp.w	lr, #0
 800cdc6:	db40      	blt.n	800ce4a <__ieee754_sqrt+0x15e>
 800cdc8:	f10c 0801 	add.w	r8, ip, #1
 800cdcc:	eba2 020c 	sub.w	r2, r2, ip
 800cdd0:	429e      	cmp	r6, r3
 800cdd2:	bf88      	it	hi
 800cdd4:	f102 32ff 	addhi.w	r2, r2, #4294967295
 800cdd8:	1b9b      	subs	r3, r3, r6
 800cdda:	4421      	add	r1, r4
 800cddc:	46c4      	mov	ip, r8
 800cdde:	0052      	lsls	r2, r2, #1
 800cde0:	3f01      	subs	r7, #1
 800cde2:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800cde6:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800cdea:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800cdee:	d1dd      	bne.n	800cdac <__ieee754_sqrt+0xc0>
 800cdf0:	4313      	orrs	r3, r2
 800cdf2:	d006      	beq.n	800ce02 <__ieee754_sqrt+0x116>
 800cdf4:	1c4c      	adds	r4, r1, #1
 800cdf6:	bf13      	iteet	ne
 800cdf8:	3101      	addne	r1, #1
 800cdfa:	3001      	addeq	r0, #1
 800cdfc:	4639      	moveq	r1, r7
 800cdfe:	f021 0101 	bicne.w	r1, r1, #1
 800ce02:	1043      	asrs	r3, r0, #1
 800ce04:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800ce08:	0849      	lsrs	r1, r1, #1
 800ce0a:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800ce0e:	07c2      	lsls	r2, r0, #31
 800ce10:	bf48      	it	mi
 800ce12:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 800ce16:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 800ce1a:	460c      	mov	r4, r1
 800ce1c:	463d      	mov	r5, r7
 800ce1e:	e77f      	b.n	800cd20 <__ieee754_sqrt+0x34>
 800ce20:	0ada      	lsrs	r2, r3, #11
 800ce22:	3815      	subs	r0, #21
 800ce24:	055b      	lsls	r3, r3, #21
 800ce26:	2a00      	cmp	r2, #0
 800ce28:	d0fa      	beq.n	800ce20 <__ieee754_sqrt+0x134>
 800ce2a:	02d7      	lsls	r7, r2, #11
 800ce2c:	d50a      	bpl.n	800ce44 <__ieee754_sqrt+0x158>
 800ce2e:	f1c1 0420 	rsb	r4, r1, #32
 800ce32:	fa23 f404 	lsr.w	r4, r3, r4
 800ce36:	1e4d      	subs	r5, r1, #1
 800ce38:	408b      	lsls	r3, r1
 800ce3a:	4322      	orrs	r2, r4
 800ce3c:	1b41      	subs	r1, r0, r5
 800ce3e:	e788      	b.n	800cd52 <__ieee754_sqrt+0x66>
 800ce40:	4608      	mov	r0, r1
 800ce42:	e7f0      	b.n	800ce26 <__ieee754_sqrt+0x13a>
 800ce44:	0052      	lsls	r2, r2, #1
 800ce46:	3101      	adds	r1, #1
 800ce48:	e7ef      	b.n	800ce2a <__ieee754_sqrt+0x13e>
 800ce4a:	46e0      	mov	r8, ip
 800ce4c:	e7be      	b.n	800cdcc <__ieee754_sqrt+0xe0>
 800ce4e:	bf00      	nop
 800ce50:	7ff00000 	.word	0x7ff00000

0800ce54 <fabs>:
 800ce54:	ec51 0b10 	vmov	r0, r1, d0
 800ce58:	ee10 2a10 	vmov	r2, s0
 800ce5c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800ce60:	ec43 2b10 	vmov	d0, r2, r3
 800ce64:	4770      	bx	lr

0800ce66 <finite>:
 800ce66:	b082      	sub	sp, #8
 800ce68:	ed8d 0b00 	vstr	d0, [sp]
 800ce6c:	9801      	ldr	r0, [sp, #4]
 800ce6e:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800ce72:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800ce76:	0fc0      	lsrs	r0, r0, #31
 800ce78:	b002      	add	sp, #8
 800ce7a:	4770      	bx	lr
 800ce7c:	0000      	movs	r0, r0
	...

0800ce80 <nan>:
 800ce80:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800ce88 <nan+0x8>
 800ce84:	4770      	bx	lr
 800ce86:	bf00      	nop
 800ce88:	00000000 	.word	0x00000000
 800ce8c:	7ff80000 	.word	0x7ff80000

0800ce90 <rint>:
 800ce90:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ce92:	ec51 0b10 	vmov	r0, r1, d0
 800ce96:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800ce9a:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 800ce9e:	2e13      	cmp	r6, #19
 800cea0:	ee10 4a10 	vmov	r4, s0
 800cea4:	460b      	mov	r3, r1
 800cea6:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 800ceaa:	dc58      	bgt.n	800cf5e <rint+0xce>
 800ceac:	2e00      	cmp	r6, #0
 800ceae:	da2b      	bge.n	800cf08 <rint+0x78>
 800ceb0:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 800ceb4:	4302      	orrs	r2, r0
 800ceb6:	d023      	beq.n	800cf00 <rint+0x70>
 800ceb8:	f3c1 0213 	ubfx	r2, r1, #0, #20
 800cebc:	4302      	orrs	r2, r0
 800cebe:	4254      	negs	r4, r2
 800cec0:	4314      	orrs	r4, r2
 800cec2:	0c4b      	lsrs	r3, r1, #17
 800cec4:	0b24      	lsrs	r4, r4, #12
 800cec6:	045b      	lsls	r3, r3, #17
 800cec8:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 800cecc:	ea44 0103 	orr.w	r1, r4, r3
 800ced0:	4b32      	ldr	r3, [pc, #200]	; (800cf9c <rint+0x10c>)
 800ced2:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800ced6:	e9d3 6700 	ldrd	r6, r7, [r3]
 800ceda:	4602      	mov	r2, r0
 800cedc:	460b      	mov	r3, r1
 800cede:	4630      	mov	r0, r6
 800cee0:	4639      	mov	r1, r7
 800cee2:	f7f3 f9d3 	bl	800028c <__adddf3>
 800cee6:	e9cd 0100 	strd	r0, r1, [sp]
 800ceea:	463b      	mov	r3, r7
 800ceec:	e9dd 0100 	ldrd	r0, r1, [sp]
 800cef0:	4632      	mov	r2, r6
 800cef2:	f7f3 f9c9 	bl	8000288 <__aeabi_dsub>
 800cef6:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800cefa:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 800cefe:	4639      	mov	r1, r7
 800cf00:	ec41 0b10 	vmov	d0, r0, r1
 800cf04:	b003      	add	sp, #12
 800cf06:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cf08:	4a25      	ldr	r2, [pc, #148]	; (800cfa0 <rint+0x110>)
 800cf0a:	4132      	asrs	r2, r6
 800cf0c:	ea01 0702 	and.w	r7, r1, r2
 800cf10:	4307      	orrs	r7, r0
 800cf12:	d0f5      	beq.n	800cf00 <rint+0x70>
 800cf14:	0851      	lsrs	r1, r2, #1
 800cf16:	ea03 0252 	and.w	r2, r3, r2, lsr #1
 800cf1a:	4314      	orrs	r4, r2
 800cf1c:	d00c      	beq.n	800cf38 <rint+0xa8>
 800cf1e:	ea23 0201 	bic.w	r2, r3, r1
 800cf22:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800cf26:	2e13      	cmp	r6, #19
 800cf28:	fa43 f606 	asr.w	r6, r3, r6
 800cf2c:	bf0c      	ite	eq
 800cf2e:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 800cf32:	2400      	movne	r4, #0
 800cf34:	ea42 0306 	orr.w	r3, r2, r6
 800cf38:	4918      	ldr	r1, [pc, #96]	; (800cf9c <rint+0x10c>)
 800cf3a:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 800cf3e:	4622      	mov	r2, r4
 800cf40:	e9d5 4500 	ldrd	r4, r5, [r5]
 800cf44:	4620      	mov	r0, r4
 800cf46:	4629      	mov	r1, r5
 800cf48:	f7f3 f9a0 	bl	800028c <__adddf3>
 800cf4c:	e9cd 0100 	strd	r0, r1, [sp]
 800cf50:	e9dd 0100 	ldrd	r0, r1, [sp]
 800cf54:	4622      	mov	r2, r4
 800cf56:	462b      	mov	r3, r5
 800cf58:	f7f3 f996 	bl	8000288 <__aeabi_dsub>
 800cf5c:	e7d0      	b.n	800cf00 <rint+0x70>
 800cf5e:	2e33      	cmp	r6, #51	; 0x33
 800cf60:	dd07      	ble.n	800cf72 <rint+0xe2>
 800cf62:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800cf66:	d1cb      	bne.n	800cf00 <rint+0x70>
 800cf68:	ee10 2a10 	vmov	r2, s0
 800cf6c:	f7f3 f98e 	bl	800028c <__adddf3>
 800cf70:	e7c6      	b.n	800cf00 <rint+0x70>
 800cf72:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 800cf76:	f04f 36ff 	mov.w	r6, #4294967295
 800cf7a:	40d6      	lsrs	r6, r2
 800cf7c:	4230      	tst	r0, r6
 800cf7e:	d0bf      	beq.n	800cf00 <rint+0x70>
 800cf80:	ea14 0056 	ands.w	r0, r4, r6, lsr #1
 800cf84:	ea4f 0156 	mov.w	r1, r6, lsr #1
 800cf88:	bf1f      	itttt	ne
 800cf8a:	ea24 0101 	bicne.w	r1, r4, r1
 800cf8e:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 800cf92:	fa44 f202 	asrne.w	r2, r4, r2
 800cf96:	ea41 0402 	orrne.w	r4, r1, r2
 800cf9a:	e7cd      	b.n	800cf38 <rint+0xa8>
 800cf9c:	0800d710 	.word	0x0800d710
 800cfa0:	000fffff 	.word	0x000fffff
 800cfa4:	00000000 	.word	0x00000000

0800cfa8 <scalbn>:
 800cfa8:	b570      	push	{r4, r5, r6, lr}
 800cfaa:	ec55 4b10 	vmov	r4, r5, d0
 800cfae:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800cfb2:	4606      	mov	r6, r0
 800cfb4:	462b      	mov	r3, r5
 800cfb6:	b99a      	cbnz	r2, 800cfe0 <scalbn+0x38>
 800cfb8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800cfbc:	4323      	orrs	r3, r4
 800cfbe:	d036      	beq.n	800d02e <scalbn+0x86>
 800cfc0:	4b39      	ldr	r3, [pc, #228]	; (800d0a8 <scalbn+0x100>)
 800cfc2:	4629      	mov	r1, r5
 800cfc4:	ee10 0a10 	vmov	r0, s0
 800cfc8:	2200      	movs	r2, #0
 800cfca:	f7f3 fb15 	bl	80005f8 <__aeabi_dmul>
 800cfce:	4b37      	ldr	r3, [pc, #220]	; (800d0ac <scalbn+0x104>)
 800cfd0:	429e      	cmp	r6, r3
 800cfd2:	4604      	mov	r4, r0
 800cfd4:	460d      	mov	r5, r1
 800cfd6:	da10      	bge.n	800cffa <scalbn+0x52>
 800cfd8:	a32b      	add	r3, pc, #172	; (adr r3, 800d088 <scalbn+0xe0>)
 800cfda:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cfde:	e03a      	b.n	800d056 <scalbn+0xae>
 800cfe0:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800cfe4:	428a      	cmp	r2, r1
 800cfe6:	d10c      	bne.n	800d002 <scalbn+0x5a>
 800cfe8:	ee10 2a10 	vmov	r2, s0
 800cfec:	4620      	mov	r0, r4
 800cfee:	4629      	mov	r1, r5
 800cff0:	f7f3 f94c 	bl	800028c <__adddf3>
 800cff4:	4604      	mov	r4, r0
 800cff6:	460d      	mov	r5, r1
 800cff8:	e019      	b.n	800d02e <scalbn+0x86>
 800cffa:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800cffe:	460b      	mov	r3, r1
 800d000:	3a36      	subs	r2, #54	; 0x36
 800d002:	4432      	add	r2, r6
 800d004:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800d008:	428a      	cmp	r2, r1
 800d00a:	dd08      	ble.n	800d01e <scalbn+0x76>
 800d00c:	2d00      	cmp	r5, #0
 800d00e:	a120      	add	r1, pc, #128	; (adr r1, 800d090 <scalbn+0xe8>)
 800d010:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d014:	da1c      	bge.n	800d050 <scalbn+0xa8>
 800d016:	a120      	add	r1, pc, #128	; (adr r1, 800d098 <scalbn+0xf0>)
 800d018:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d01c:	e018      	b.n	800d050 <scalbn+0xa8>
 800d01e:	2a00      	cmp	r2, #0
 800d020:	dd08      	ble.n	800d034 <scalbn+0x8c>
 800d022:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800d026:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800d02a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800d02e:	ec45 4b10 	vmov	d0, r4, r5
 800d032:	bd70      	pop	{r4, r5, r6, pc}
 800d034:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800d038:	da19      	bge.n	800d06e <scalbn+0xc6>
 800d03a:	f24c 3350 	movw	r3, #50000	; 0xc350
 800d03e:	429e      	cmp	r6, r3
 800d040:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800d044:	dd0a      	ble.n	800d05c <scalbn+0xb4>
 800d046:	a112      	add	r1, pc, #72	; (adr r1, 800d090 <scalbn+0xe8>)
 800d048:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d04c:	2b00      	cmp	r3, #0
 800d04e:	d1e2      	bne.n	800d016 <scalbn+0x6e>
 800d050:	a30f      	add	r3, pc, #60	; (adr r3, 800d090 <scalbn+0xe8>)
 800d052:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d056:	f7f3 facf 	bl	80005f8 <__aeabi_dmul>
 800d05a:	e7cb      	b.n	800cff4 <scalbn+0x4c>
 800d05c:	a10a      	add	r1, pc, #40	; (adr r1, 800d088 <scalbn+0xe0>)
 800d05e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d062:	2b00      	cmp	r3, #0
 800d064:	d0b8      	beq.n	800cfd8 <scalbn+0x30>
 800d066:	a10e      	add	r1, pc, #56	; (adr r1, 800d0a0 <scalbn+0xf8>)
 800d068:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d06c:	e7b4      	b.n	800cfd8 <scalbn+0x30>
 800d06e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800d072:	3236      	adds	r2, #54	; 0x36
 800d074:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800d078:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800d07c:	4620      	mov	r0, r4
 800d07e:	4b0c      	ldr	r3, [pc, #48]	; (800d0b0 <scalbn+0x108>)
 800d080:	2200      	movs	r2, #0
 800d082:	e7e8      	b.n	800d056 <scalbn+0xae>
 800d084:	f3af 8000 	nop.w
 800d088:	c2f8f359 	.word	0xc2f8f359
 800d08c:	01a56e1f 	.word	0x01a56e1f
 800d090:	8800759c 	.word	0x8800759c
 800d094:	7e37e43c 	.word	0x7e37e43c
 800d098:	8800759c 	.word	0x8800759c
 800d09c:	fe37e43c 	.word	0xfe37e43c
 800d0a0:	c2f8f359 	.word	0xc2f8f359
 800d0a4:	81a56e1f 	.word	0x81a56e1f
 800d0a8:	43500000 	.word	0x43500000
 800d0ac:	ffff3cb0 	.word	0xffff3cb0
 800d0b0:	3c900000 	.word	0x3c900000

0800d0b4 <_init>:
 800d0b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d0b6:	bf00      	nop
 800d0b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d0ba:	bc08      	pop	{r3}
 800d0bc:	469e      	mov	lr, r3
 800d0be:	4770      	bx	lr

0800d0c0 <_fini>:
 800d0c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d0c2:	bf00      	nop
 800d0c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d0c6:	bc08      	pop	{r3}
 800d0c8:	469e      	mov	lr, r3
 800d0ca:	4770      	bx	lr
