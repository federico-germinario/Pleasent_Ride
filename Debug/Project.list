
Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003f80  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001f8  08004110  08004110  00014110  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004308  08004308  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08004308  08004308  00014308  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004310  08004310  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004310  08004310  00014310  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004314  08004314  00014314  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004318  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
 10 .bss          00000154  20000070  20000070  00020070  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200001c4  200001c4  00020070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000e8b5  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001c5d  00000000  00000000  0002e955  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000be8  00000000  00000000  000305b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000b40  00000000  00000000  000311a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002155e  00000000  00000000  00031ce0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000d80f  00000000  00000000  0005323e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cb801  00000000  00000000  00060a4d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0012c24e  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003bd0  00000000  00000000  0012c2a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080040f8 	.word	0x080040f8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	080040f8 	.word	0x080040f8

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96e 	b.w	8000574 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468c      	mov	ip, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	f040 8083 	bne.w	80003c6 <__udivmoddi4+0x116>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d947      	bls.n	8000356 <__udivmoddi4+0xa6>
 80002c6:	fab2 f282 	clz	r2, r2
 80002ca:	b142      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002cc:	f1c2 0020 	rsb	r0, r2, #32
 80002d0:	fa24 f000 	lsr.w	r0, r4, r0
 80002d4:	4091      	lsls	r1, r2
 80002d6:	4097      	lsls	r7, r2
 80002d8:	ea40 0c01 	orr.w	ip, r0, r1
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbbc f6f8 	udiv	r6, ip, r8
 80002e8:	fa1f fe87 	uxth.w	lr, r7
 80002ec:	fb08 c116 	mls	r1, r8, r6, ip
 80002f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f4:	fb06 f10e 	mul.w	r1, r6, lr
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18fb      	adds	r3, r7, r3
 80002fe:	f106 30ff 	add.w	r0, r6, #4294967295
 8000302:	f080 8119 	bcs.w	8000538 <__udivmoddi4+0x288>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8116 	bls.w	8000538 <__udivmoddi4+0x288>
 800030c:	3e02      	subs	r6, #2
 800030e:	443b      	add	r3, r7
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0f8 	udiv	r0, r3, r8
 8000318:	fb08 3310 	mls	r3, r8, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fe0e 	mul.w	lr, r0, lr
 8000324:	45a6      	cmp	lr, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	193c      	adds	r4, r7, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	f080 8105 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000332:	45a6      	cmp	lr, r4
 8000334:	f240 8102 	bls.w	800053c <__udivmoddi4+0x28c>
 8000338:	3802      	subs	r0, #2
 800033a:	443c      	add	r4, r7
 800033c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000340:	eba4 040e 	sub.w	r4, r4, lr
 8000344:	2600      	movs	r6, #0
 8000346:	b11d      	cbz	r5, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c5 4300 	strd	r4, r3, [r5]
 8000350:	4631      	mov	r1, r6
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	b902      	cbnz	r2, 800035a <__udivmoddi4+0xaa>
 8000358:	deff      	udf	#255	; 0xff
 800035a:	fab2 f282 	clz	r2, r2
 800035e:	2a00      	cmp	r2, #0
 8000360:	d150      	bne.n	8000404 <__udivmoddi4+0x154>
 8000362:	1bcb      	subs	r3, r1, r7
 8000364:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	2601      	movs	r6, #1
 800036e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000372:	0c21      	lsrs	r1, r4, #16
 8000374:	fb0e 331c 	mls	r3, lr, ip, r3
 8000378:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800037c:	fb08 f30c 	mul.w	r3, r8, ip
 8000380:	428b      	cmp	r3, r1
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0xe4>
 8000384:	1879      	adds	r1, r7, r1
 8000386:	f10c 30ff 	add.w	r0, ip, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0xe2>
 800038c:	428b      	cmp	r3, r1
 800038e:	f200 80e9 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 8000392:	4684      	mov	ip, r0
 8000394:	1ac9      	subs	r1, r1, r3
 8000396:	b2a3      	uxth	r3, r4
 8000398:	fbb1 f0fe 	udiv	r0, r1, lr
 800039c:	fb0e 1110 	mls	r1, lr, r0, r1
 80003a0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003a4:	fb08 f800 	mul.w	r8, r8, r0
 80003a8:	45a0      	cmp	r8, r4
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x10c>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x10a>
 80003b4:	45a0      	cmp	r8, r4
 80003b6:	f200 80d9 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003ba:	4618      	mov	r0, r3
 80003bc:	eba4 0408 	sub.w	r4, r4, r8
 80003c0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003c4:	e7bf      	b.n	8000346 <__udivmoddi4+0x96>
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0x12e>
 80003ca:	2d00      	cmp	r5, #0
 80003cc:	f000 80b1 	beq.w	8000532 <__udivmoddi4+0x282>
 80003d0:	2600      	movs	r6, #0
 80003d2:	e9c5 0100 	strd	r0, r1, [r5]
 80003d6:	4630      	mov	r0, r6
 80003d8:	4631      	mov	r1, r6
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f683 	clz	r6, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d14a      	bne.n	800047c <__udivmoddi4+0x1cc>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0x140>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80b8 	bhi.w	8000560 <__udivmoddi4+0x2b0>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0103 	sbc.w	r1, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	468c      	mov	ip, r1
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	d0a8      	beq.n	8000350 <__udivmoddi4+0xa0>
 80003fe:	e9c5 4c00 	strd	r4, ip, [r5]
 8000402:	e7a5      	b.n	8000350 <__udivmoddi4+0xa0>
 8000404:	f1c2 0320 	rsb	r3, r2, #32
 8000408:	fa20 f603 	lsr.w	r6, r0, r3
 800040c:	4097      	lsls	r7, r2
 800040e:	fa01 f002 	lsl.w	r0, r1, r2
 8000412:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000416:	40d9      	lsrs	r1, r3
 8000418:	4330      	orrs	r0, r6
 800041a:	0c03      	lsrs	r3, r0, #16
 800041c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000420:	fa1f f887 	uxth.w	r8, r7
 8000424:	fb0e 1116 	mls	r1, lr, r6, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb06 f108 	mul.w	r1, r6, r8
 8000430:	4299      	cmp	r1, r3
 8000432:	fa04 f402 	lsl.w	r4, r4, r2
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x19c>
 8000438:	18fb      	adds	r3, r7, r3
 800043a:	f106 3cff 	add.w	ip, r6, #4294967295
 800043e:	f080 808d 	bcs.w	800055c <__udivmoddi4+0x2ac>
 8000442:	4299      	cmp	r1, r3
 8000444:	f240 808a 	bls.w	800055c <__udivmoddi4+0x2ac>
 8000448:	3e02      	subs	r6, #2
 800044a:	443b      	add	r3, r7
 800044c:	1a5b      	subs	r3, r3, r1
 800044e:	b281      	uxth	r1, r0
 8000450:	fbb3 f0fe 	udiv	r0, r3, lr
 8000454:	fb0e 3310 	mls	r3, lr, r0, r3
 8000458:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045c:	fb00 f308 	mul.w	r3, r0, r8
 8000460:	428b      	cmp	r3, r1
 8000462:	d907      	bls.n	8000474 <__udivmoddi4+0x1c4>
 8000464:	1879      	adds	r1, r7, r1
 8000466:	f100 3cff 	add.w	ip, r0, #4294967295
 800046a:	d273      	bcs.n	8000554 <__udivmoddi4+0x2a4>
 800046c:	428b      	cmp	r3, r1
 800046e:	d971      	bls.n	8000554 <__udivmoddi4+0x2a4>
 8000470:	3802      	subs	r0, #2
 8000472:	4439      	add	r1, r7
 8000474:	1acb      	subs	r3, r1, r3
 8000476:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800047a:	e778      	b.n	800036e <__udivmoddi4+0xbe>
 800047c:	f1c6 0c20 	rsb	ip, r6, #32
 8000480:	fa03 f406 	lsl.w	r4, r3, r6
 8000484:	fa22 f30c 	lsr.w	r3, r2, ip
 8000488:	431c      	orrs	r4, r3
 800048a:	fa20 f70c 	lsr.w	r7, r0, ip
 800048e:	fa01 f306 	lsl.w	r3, r1, r6
 8000492:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000496:	fa21 f10c 	lsr.w	r1, r1, ip
 800049a:	431f      	orrs	r7, r3
 800049c:	0c3b      	lsrs	r3, r7, #16
 800049e:	fbb1 f9fe 	udiv	r9, r1, lr
 80004a2:	fa1f f884 	uxth.w	r8, r4
 80004a6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004aa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ae:	fb09 fa08 	mul.w	sl, r9, r8
 80004b2:	458a      	cmp	sl, r1
 80004b4:	fa02 f206 	lsl.w	r2, r2, r6
 80004b8:	fa00 f306 	lsl.w	r3, r0, r6
 80004bc:	d908      	bls.n	80004d0 <__udivmoddi4+0x220>
 80004be:	1861      	adds	r1, r4, r1
 80004c0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004c4:	d248      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 80004c6:	458a      	cmp	sl, r1
 80004c8:	d946      	bls.n	8000558 <__udivmoddi4+0x2a8>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4421      	add	r1, r4
 80004d0:	eba1 010a 	sub.w	r1, r1, sl
 80004d4:	b2bf      	uxth	r7, r7
 80004d6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004da:	fb0e 1110 	mls	r1, lr, r0, r1
 80004de:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004e2:	fb00 f808 	mul.w	r8, r0, r8
 80004e6:	45b8      	cmp	r8, r7
 80004e8:	d907      	bls.n	80004fa <__udivmoddi4+0x24a>
 80004ea:	19e7      	adds	r7, r4, r7
 80004ec:	f100 31ff 	add.w	r1, r0, #4294967295
 80004f0:	d22e      	bcs.n	8000550 <__udivmoddi4+0x2a0>
 80004f2:	45b8      	cmp	r8, r7
 80004f4:	d92c      	bls.n	8000550 <__udivmoddi4+0x2a0>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4427      	add	r7, r4
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	eba7 0708 	sub.w	r7, r7, r8
 8000502:	fba0 8902 	umull	r8, r9, r0, r2
 8000506:	454f      	cmp	r7, r9
 8000508:	46c6      	mov	lr, r8
 800050a:	4649      	mov	r1, r9
 800050c:	d31a      	bcc.n	8000544 <__udivmoddi4+0x294>
 800050e:	d017      	beq.n	8000540 <__udivmoddi4+0x290>
 8000510:	b15d      	cbz	r5, 800052a <__udivmoddi4+0x27a>
 8000512:	ebb3 020e 	subs.w	r2, r3, lr
 8000516:	eb67 0701 	sbc.w	r7, r7, r1
 800051a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800051e:	40f2      	lsrs	r2, r6
 8000520:	ea4c 0202 	orr.w	r2, ip, r2
 8000524:	40f7      	lsrs	r7, r6
 8000526:	e9c5 2700 	strd	r2, r7, [r5]
 800052a:	2600      	movs	r6, #0
 800052c:	4631      	mov	r1, r6
 800052e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e70b      	b.n	8000350 <__udivmoddi4+0xa0>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e9      	b.n	8000310 <__udivmoddi4+0x60>
 800053c:	4618      	mov	r0, r3
 800053e:	e6fd      	b.n	800033c <__udivmoddi4+0x8c>
 8000540:	4543      	cmp	r3, r8
 8000542:	d2e5      	bcs.n	8000510 <__udivmoddi4+0x260>
 8000544:	ebb8 0e02 	subs.w	lr, r8, r2
 8000548:	eb69 0104 	sbc.w	r1, r9, r4
 800054c:	3801      	subs	r0, #1
 800054e:	e7df      	b.n	8000510 <__udivmoddi4+0x260>
 8000550:	4608      	mov	r0, r1
 8000552:	e7d2      	b.n	80004fa <__udivmoddi4+0x24a>
 8000554:	4660      	mov	r0, ip
 8000556:	e78d      	b.n	8000474 <__udivmoddi4+0x1c4>
 8000558:	4681      	mov	r9, r0
 800055a:	e7b9      	b.n	80004d0 <__udivmoddi4+0x220>
 800055c:	4666      	mov	r6, ip
 800055e:	e775      	b.n	800044c <__udivmoddi4+0x19c>
 8000560:	4630      	mov	r0, r6
 8000562:	e74a      	b.n	80003fa <__udivmoddi4+0x14a>
 8000564:	f1ac 0c02 	sub.w	ip, ip, #2
 8000568:	4439      	add	r1, r7
 800056a:	e713      	b.n	8000394 <__udivmoddi4+0xe4>
 800056c:	3802      	subs	r0, #2
 800056e:	443c      	add	r4, r7
 8000570:	e724      	b.n	80003bc <__udivmoddi4+0x10c>
 8000572:	bf00      	nop

08000574 <__aeabi_idiv0>:
 8000574:	4770      	bx	lr
 8000576:	bf00      	nop

08000578 <RetargetInit>:
#define STDOUT_FILENO 1
#define STDERR_FILENO 2

UART_HandleTypeDef* gHuart;

void  RetargetInit(UART_HandleTypeDef *huart){
 8000578:	b580      	push	{r7, lr}
 800057a:	b082      	sub	sp, #8
 800057c:	af00      	add	r7, sp, #0
 800057e:	6078      	str	r0, [r7, #4]
	gHuart=huart;
 8000580:	4a07      	ldr	r2, [pc, #28]	; (80005a0 <RetargetInit+0x28>)
 8000582:	687b      	ldr	r3, [r7, #4]
 8000584:	6013      	str	r3, [r2, #0]

	setvbuf(stdout, NULL, _IONBF, 0);
 8000586:	4b07      	ldr	r3, [pc, #28]	; (80005a4 <RetargetInit+0x2c>)
 8000588:	681b      	ldr	r3, [r3, #0]
 800058a:	6898      	ldr	r0, [r3, #8]
 800058c:	2300      	movs	r3, #0
 800058e:	2202      	movs	r2, #2
 8000590:	2100      	movs	r1, #0
 8000592:	f002 fbd3 	bl	8002d3c <setvbuf>
}
 8000596:	bf00      	nop
 8000598:	3708      	adds	r7, #8
 800059a:	46bd      	mov	sp, r7
 800059c:	bd80      	pop	{r7, pc}
 800059e:	bf00      	nop
 80005a0:	20000098 	.word	0x20000098
 80005a4:	2000000c 	.word	0x2000000c

080005a8 <_isatty>:

int _isatty(int fd){
 80005a8:	b580      	push	{r7, lr}
 80005aa:	b082      	sub	sp, #8
 80005ac:	af00      	add	r7, sp, #0
 80005ae:	6078      	str	r0, [r7, #4]
	if(fd>=STDIN_FILENO && fd<=STDERR_FILENO){
 80005b0:	687b      	ldr	r3, [r7, #4]
 80005b2:	2b00      	cmp	r3, #0
 80005b4:	db04      	blt.n	80005c0 <_isatty+0x18>
 80005b6:	687b      	ldr	r3, [r7, #4]
 80005b8:	2b02      	cmp	r3, #2
 80005ba:	dc01      	bgt.n	80005c0 <_isatty+0x18>
		return 1;
 80005bc:	2301      	movs	r3, #1
 80005be:	e005      	b.n	80005cc <_isatty+0x24>
	}

	errno = EBADF;
 80005c0:	f002 fafc 	bl	8002bbc <__errno>
 80005c4:	4603      	mov	r3, r0
 80005c6:	2209      	movs	r2, #9
 80005c8:	601a      	str	r2, [r3, #0]
	return 0;
 80005ca:	2300      	movs	r3, #0
}
 80005cc:	4618      	mov	r0, r3
 80005ce:	3708      	adds	r7, #8
 80005d0:	46bd      	mov	sp, r7
 80005d2:	bd80      	pop	{r7, pc}

080005d4 <_write>:

int _write(int fd, char* ptr, int len) {
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b086      	sub	sp, #24
 80005d8:	af00      	add	r7, sp, #0
 80005da:	60f8      	str	r0, [r7, #12]
 80005dc:	60b9      	str	r1, [r7, #8]
 80005de:	607a      	str	r2, [r7, #4]
	HAL_StatusTypeDef hstatus;

	if (fd == STDOUT_FILENO || fd == STDERR_FILENO) {
 80005e0:	68fb      	ldr	r3, [r7, #12]
 80005e2:	2b01      	cmp	r3, #1
 80005e4:	d002      	beq.n	80005ec <_write+0x18>
 80005e6:	68fb      	ldr	r3, [r7, #12]
 80005e8:	2b02      	cmp	r3, #2
 80005ea:	d111      	bne.n	8000610 <_write+0x3c>
		hstatus = HAL_UART_Transmit(gHuart, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 80005ec:	4b0e      	ldr	r3, [pc, #56]	; (8000628 <_write+0x54>)
 80005ee:	6818      	ldr	r0, [r3, #0]
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	b29a      	uxth	r2, r3
 80005f4:	f04f 33ff 	mov.w	r3, #4294967295
 80005f8:	68b9      	ldr	r1, [r7, #8]
 80005fa:	f001 ff74 	bl	80024e6 <HAL_UART_Transmit>
 80005fe:	4603      	mov	r3, r0
 8000600:	75fb      	strb	r3, [r7, #23]
		if (hstatus == HAL_OK)
 8000602:	7dfb      	ldrb	r3, [r7, #23]
 8000604:	2b00      	cmp	r3, #0
 8000606:	d101      	bne.n	800060c <_write+0x38>
			return len;
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	e008      	b.n	800061e <_write+0x4a>
		else
			return EIO;
 800060c:	2305      	movs	r3, #5
 800060e:	e006      	b.n	800061e <_write+0x4a>
	}
	errno = EBADF;
 8000610:	f002 fad4 	bl	8002bbc <__errno>
 8000614:	4603      	mov	r3, r0
 8000616:	2209      	movs	r2, #9
 8000618:	601a      	str	r2, [r3, #0]
	return -1;
 800061a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800061e:	4618      	mov	r0, r3
 8000620:	3718      	adds	r7, #24
 8000622:	46bd      	mov	sp, r7
 8000624:	bd80      	pop	{r7, pc}
 8000626:	bf00      	nop
 8000628:	20000098 	.word	0x20000098

0800062c <_close>:

int _close(int fd) {
 800062c:	b580      	push	{r7, lr}
 800062e:	b082      	sub	sp, #8
 8000630:	af00      	add	r7, sp, #0
 8000632:	6078      	str	r0, [r7, #4]
	if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	2b00      	cmp	r3, #0
 8000638:	db04      	blt.n	8000644 <_close+0x18>
 800063a:	687b      	ldr	r3, [r7, #4]
 800063c:	2b02      	cmp	r3, #2
 800063e:	dc01      	bgt.n	8000644 <_close+0x18>
		return 0;
 8000640:	2300      	movs	r3, #0
 8000642:	e006      	b.n	8000652 <_close+0x26>

	errno = EBADF;
 8000644:	f002 faba 	bl	8002bbc <__errno>
 8000648:	4603      	mov	r3, r0
 800064a:	2209      	movs	r2, #9
 800064c:	601a      	str	r2, [r3, #0]
	return -1;
 800064e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000652:	4618      	mov	r0, r3
 8000654:	3708      	adds	r7, #8
 8000656:	46bd      	mov	sp, r7
 8000658:	bd80      	pop	{r7, pc}

0800065a <_lseek>:

int _lseek(int fd, int ptr, int dir) {
 800065a:	b580      	push	{r7, lr}
 800065c:	b084      	sub	sp, #16
 800065e:	af00      	add	r7, sp, #0
 8000660:	60f8      	str	r0, [r7, #12]
 8000662:	60b9      	str	r1, [r7, #8]
 8000664:	607a      	str	r2, [r7, #4]
	(void) fd;
	(void) ptr;
	(void) dir;

	errno = EBADF;
 8000666:	f002 faa9 	bl	8002bbc <__errno>
 800066a:	4603      	mov	r3, r0
 800066c:	2209      	movs	r2, #9
 800066e:	601a      	str	r2, [r3, #0]
	return -1;
 8000670:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000674:	4618      	mov	r0, r3
 8000676:	3710      	adds	r7, #16
 8000678:	46bd      	mov	sp, r7
 800067a:	bd80      	pop	{r7, pc}

0800067c <_read>:

int _read(int fd, char* ptr, int len) {
 800067c:	b580      	push	{r7, lr}
 800067e:	b086      	sub	sp, #24
 8000680:	af00      	add	r7, sp, #0
 8000682:	60f8      	str	r0, [r7, #12]
 8000684:	60b9      	str	r1, [r7, #8]
 8000686:	607a      	str	r2, [r7, #4]
	HAL_StatusTypeDef hstatus;

	if (fd == STDIN_FILENO) {
 8000688:	68fb      	ldr	r3, [r7, #12]
 800068a:	2b00      	cmp	r3, #0
 800068c:	d110      	bne.n	80006b0 <_read+0x34>
		hstatus = HAL_UART_Receive(gHuart, (uint8_t *) ptr, 1, HAL_MAX_DELAY);
 800068e:	4b0e      	ldr	r3, [pc, #56]	; (80006c8 <_read+0x4c>)
 8000690:	6818      	ldr	r0, [r3, #0]
 8000692:	f04f 33ff 	mov.w	r3, #4294967295
 8000696:	2201      	movs	r2, #1
 8000698:	68b9      	ldr	r1, [r7, #8]
 800069a:	f001 ffb6 	bl	800260a <HAL_UART_Receive>
 800069e:	4603      	mov	r3, r0
 80006a0:	75fb      	strb	r3, [r7, #23]
		if (hstatus == HAL_OK)
 80006a2:	7dfb      	ldrb	r3, [r7, #23]
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d101      	bne.n	80006ac <_read+0x30>
			return 1;
 80006a8:	2301      	movs	r3, #1
 80006aa:	e008      	b.n	80006be <_read+0x42>
		else
			return EIO;
 80006ac:	2305      	movs	r3, #5
 80006ae:	e006      	b.n	80006be <_read+0x42>
	}

	errno = EBADF;
 80006b0:	f002 fa84 	bl	8002bbc <__errno>
 80006b4:	4603      	mov	r3, r0
 80006b6:	2209      	movs	r2, #9
 80006b8:	601a      	str	r2, [r3, #0]
	return -1;
 80006ba:	f04f 33ff 	mov.w	r3, #4294967295
}
 80006be:	4618      	mov	r0, r3
 80006c0:	3718      	adds	r7, #24
 80006c2:	46bd      	mov	sp, r7
 80006c4:	bd80      	pop	{r7, pc}
 80006c6:	bf00      	nop
 80006c8:	20000098 	.word	0x20000098

080006cc <_fstat>:

int _fstat(int fd, struct stat* st) {
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b082      	sub	sp, #8
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	6078      	str	r0, [r7, #4]
 80006d4:	6039      	str	r1, [r7, #0]
	if (fd >= STDIN_FILENO && fd <= STDERR_FILENO) {
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	2b00      	cmp	r3, #0
 80006da:	db08      	blt.n	80006ee <_fstat+0x22>
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	2b02      	cmp	r3, #2
 80006e0:	dc05      	bgt.n	80006ee <_fstat+0x22>
		st->st_mode = S_IFCHR;
 80006e2:	683b      	ldr	r3, [r7, #0]
 80006e4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80006e8:	605a      	str	r2, [r3, #4]
		return 0;
 80006ea:	2300      	movs	r3, #0
 80006ec:	e005      	b.n	80006fa <_fstat+0x2e>
	}

	errno = EBADF;
 80006ee:	f002 fa65 	bl	8002bbc <__errno>
 80006f2:	4603      	mov	r3, r0
 80006f4:	2209      	movs	r2, #9
 80006f6:	601a      	str	r2, [r3, #0]
	return 0;
 80006f8:	2300      	movs	r3, #0

}
 80006fa:	4618      	mov	r0, r3
 80006fc:	3708      	adds	r7, #8
 80006fe:	46bd      	mov	sp, r7
 8000700:	bd80      	pop	{r7, pc}
	...

08000704 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	b0ce      	sub	sp, #312	; 0x138
 8000708:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800070a:	f000 fc67 	bl	8000fdc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800070e:	f000 f95f 	bl	80009d0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000712:	f000 fa45 	bl	8000ba0 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000716:	f000 f9c5 	bl	8000aa4 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 800071a:	f000 f9ed 	bl	8000af8 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 800071e:	f000 fa15 	bl	8000b4c <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

  //pulizia terminale
   //HAL_UART_Transmit(&huart2, (uint8_t*)"\027[2J", strlen("\027[2J"), HAL_MAX_DELAY);

   RetargetInit(&huart2);
 8000722:	4897      	ldr	r0, [pc, #604]	; (8000980 <main+0x27c>)
 8000724:	f7ff ff28 	bl	8000578 <RetargetInit>

   //setvbuf(stdout, NULL, _IONBF, 0);
   printf("Init done\n\r");
 8000728:	4896      	ldr	r0, [pc, #600]	; (8000984 <main+0x280>)
 800072a:	f002 fa79 	bl	8002c20 <iprintf>
   //setvbuf(stdout, NULL, _IONBF, 0);

   char buf[100];
   memset(buf, 0, sizeof(buf));
 800072e:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000732:	2264      	movs	r2, #100	; 0x64
 8000734:	2100      	movs	r1, #0
 8000736:	4618      	mov	r0, r3
 8000738:	f002 fa6a 	bl	8002c10 <memset>

   /////RST

   HAL_UART_Transmit(&huart3, (uint8_t*) ("AT+RST\r\n"), strlen("AT+RST\r\n"), 1000);
 800073c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000740:	2208      	movs	r2, #8
 8000742:	4991      	ldr	r1, [pc, #580]	; (8000988 <main+0x284>)
 8000744:	4891      	ldr	r0, [pc, #580]	; (800098c <main+0x288>)
 8000746:	f001 fece 	bl	80024e6 <HAL_UART_Transmit>

   //HAL_UART_Receive(&huart3, (uint8_t *) buf, sizeof(buf), 1000);
   //printf("reset: %s\r\n", buf);
   printf("RESET\r\n");
 800074a:	4891      	ldr	r0, [pc, #580]	; (8000990 <main+0x28c>)
 800074c:	f002 faee 	bl	8002d2c <puts>
   //setvbuf(stdout, NULL, _IONBF, 0);
   HAL_Delay(3000);
 8000750:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000754:	f000 fc84 	bl	8001060 <HAL_Delay>

   /////AT

   HAL_UART_Transmit(&huart3, (uint8_t*) ("AT\r\n"), strlen("AT\r\n"), 1000);
 8000758:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800075c:	2204      	movs	r2, #4
 800075e:	498d      	ldr	r1, [pc, #564]	; (8000994 <main+0x290>)
 8000760:	488a      	ldr	r0, [pc, #552]	; (800098c <main+0x288>)
 8000762:	f001 fec0 	bl	80024e6 <HAL_UART_Transmit>

   HAL_UART_Receive(&huart3, (uint8_t *) (buf), sizeof(buf), 1000);
 8000766:	f107 01c4 	add.w	r1, r7, #196	; 0xc4
 800076a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800076e:	2264      	movs	r2, #100	; 0x64
 8000770:	4886      	ldr	r0, [pc, #536]	; (800098c <main+0x288>)
 8000772:	f001 ff4a 	bl	800260a <HAL_UART_Receive>
   HAL_UART_Transmit(&huart2, (uint8_t*) (buf), sizeof(buf), 1000);
 8000776:	f107 01c4 	add.w	r1, r7, #196	; 0xc4
 800077a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800077e:	2264      	movs	r2, #100	; 0x64
 8000780:	487f      	ldr	r0, [pc, #508]	; (8000980 <main+0x27c>)
 8000782:	f001 feb0 	bl	80024e6 <HAL_UART_Transmit>

   printf("AT: %s\r\n", buf);
 8000786:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800078a:	4619      	mov	r1, r3
 800078c:	4882      	ldr	r0, [pc, #520]	; (8000998 <main+0x294>)
 800078e:	f002 fa47 	bl	8002c20 <iprintf>
   //setvbuf(stdout, NULL, _IONBF, 0);
   memset(buf, 0, sizeof(buf));
 8000792:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000796:	2264      	movs	r2, #100	; 0x64
 8000798:	2100      	movs	r1, #0
 800079a:	4618      	mov	r0, r3
 800079c:	f002 fa38 	bl	8002c10 <memset>
   HAL_Delay(2000);
 80007a0:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80007a4:	f000 fc5c 	bl	8001060 <HAL_Delay>

   /////CWMODE

   HAL_UART_Transmit(&huart3, (uint8_t*) ("AT+CWMODE=1\r\n"), strlen("AT+CWMODE=1\r\n"), 1000);
 80007a8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007ac:	220d      	movs	r2, #13
 80007ae:	497b      	ldr	r1, [pc, #492]	; (800099c <main+0x298>)
 80007b0:	4876      	ldr	r0, [pc, #472]	; (800098c <main+0x288>)
 80007b2:	f001 fe98 	bl	80024e6 <HAL_UART_Transmit>
   HAL_UART_Receive(&huart3, (uint8_t *) buf, sizeof(buf), 1000);
 80007b6:	f107 01c4 	add.w	r1, r7, #196	; 0xc4
 80007ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007be:	2264      	movs	r2, #100	; 0x64
 80007c0:	4872      	ldr	r0, [pc, #456]	; (800098c <main+0x288>)
 80007c2:	f001 ff22 	bl	800260a <HAL_UART_Receive>

   printf("AT+CWMODE=1: %s\r\n", buf);
 80007c6:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80007ca:	4619      	mov	r1, r3
 80007cc:	4874      	ldr	r0, [pc, #464]	; (80009a0 <main+0x29c>)
 80007ce:	f002 fa27 	bl	8002c20 <iprintf>
   //setvbuf(stdout, NULL, _IONBF, 0);
   memset(buf, 0, sizeof(buf));
 80007d2:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80007d6:	2264      	movs	r2, #100	; 0x64
 80007d8:	2100      	movs	r1, #0
 80007da:	4618      	mov	r0, r3
 80007dc:	f002 fa18 	bl	8002c10 <memset>

   ///CWJAP

   char data[60];
   memset(data, 0, sizeof(data));
 80007e0:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80007e4:	223c      	movs	r2, #60	; 0x3c
 80007e6:	2100      	movs	r1, #0
 80007e8:	4618      	mov	r0, r3
 80007ea:	f002 fa11 	bl	8002c10 <memset>
   sprintf (data, "AT+CWJAP=\"jackhuai\",\"laborra2\"\r\n");
 80007ee:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80007f2:	496c      	ldr	r1, [pc, #432]	; (80009a4 <main+0x2a0>)
 80007f4:	4618      	mov	r0, r3
 80007f6:	f002 fb67 	bl	8002ec8 <siprintf>
   //sprintf (data, "AT+CWJAP=\"iPhone di Federico\",\"12345678\"\r\n");
   HAL_UART_Transmit(&huart3, (uint8_t *) (data), sizeof(data), 1000);
 80007fa:	f107 0188 	add.w	r1, r7, #136	; 0x88
 80007fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000802:	223c      	movs	r2, #60	; 0x3c
 8000804:	4861      	ldr	r0, [pc, #388]	; (800098c <main+0x288>)
 8000806:	f001 fe6e 	bl	80024e6 <HAL_UART_Transmit>

   HAL_UART_Receive(&huart3, (uint8_t *) buf, sizeof(buf), 1000);
 800080a:	f107 01c4 	add.w	r1, r7, #196	; 0xc4
 800080e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000812:	2264      	movs	r2, #100	; 0x64
 8000814:	485d      	ldr	r0, [pc, #372]	; (800098c <main+0x288>)
 8000816:	f001 fef8 	bl	800260a <HAL_UART_Receive>
   printf("AT+CWJAP: %s\r\n", buf);
 800081a:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800081e:	4619      	mov	r1, r3
 8000820:	4861      	ldr	r0, [pc, #388]	; (80009a8 <main+0x2a4>)
 8000822:	f002 f9fd 	bl	8002c20 <iprintf>
   //setvbuf(stdout, NULL, _IONBF, 0);
   memset(buf, 0, sizeof(buf));
 8000826:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800082a:	2264      	movs	r2, #100	; 0x64
 800082c:	2100      	movs	r1, #0
 800082e:	4618      	mov	r0, r3
 8000830:	f002 f9ee 	bl	8002c10 <memset>
   ///CIPMUX
   HAL_UART_Transmit(&huart3, (uint8_t*) ("AT+CIPMUX=0\r\n"), strlen("AT+CIPMUX=0\r\n"), 1000);
 8000834:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000838:	220d      	movs	r2, #13
 800083a:	495c      	ldr	r1, [pc, #368]	; (80009ac <main+0x2a8>)
 800083c:	4853      	ldr	r0, [pc, #332]	; (800098c <main+0x288>)
 800083e:	f001 fe52 	bl	80024e6 <HAL_UART_Transmit>
   HAL_UART_Receive(&huart3, (uint8_t *) buf, sizeof(buf), 1000);
 8000842:	f107 01c4 	add.w	r1, r7, #196	; 0xc4
 8000846:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800084a:	2264      	movs	r2, #100	; 0x64
 800084c:	484f      	ldr	r0, [pc, #316]	; (800098c <main+0x288>)
 800084e:	f001 fedc 	bl	800260a <HAL_UART_Receive>
   printf("AT+CIPMUX=0: %s\r\n", buf);
 8000852:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000856:	4619      	mov	r1, r3
 8000858:	4855      	ldr	r0, [pc, #340]	; (80009b0 <main+0x2ac>)
 800085a:	f002 f9e1 	bl	8002c20 <iprintf>
   //setvbuf(stdout, NULL, _IONBF, 0);
   memset(buf, 0, sizeof(buf));
 800085e:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000862:	2264      	movs	r2, #100	; 0x64
 8000864:	2100      	movs	r1, #0
 8000866:	4618      	mov	r0, r3
 8000868:	f002 f9d2 	bl	8002c10 <memset>

   printf("Setup end\n\r");
 800086c:	4851      	ldr	r0, [pc, #324]	; (80009b4 <main+0x2b0>)
 800086e:	f002 f9d7 	bl	8002c20 <iprintf>
   //setvbuf(stdout, NULL, _IONBF, 0);

   HAL_Delay(5000);
 8000872:	f241 3088 	movw	r0, #5000	; 0x1388
 8000876:	f000 fbf3 	bl	8001060 <HAL_Delay>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  uint16_t counter = 0;
 800087a:	2300      	movs	r3, #0
 800087c:	f8a7 312e 	strh.w	r3, [r7, #302]	; 0x12e
  while (1){

	  HAL_UART_Transmit(&huart3, (uint8_t*) ("AT+CIPSTART=\"TCP\",\"api.thingspeak.com\",80\r\n"), strlen("AT+CIPSTART=\"TCP\",\"api.thingspeak.com\",80\r\n"), 1000);
 8000880:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000884:	222b      	movs	r2, #43	; 0x2b
 8000886:	494c      	ldr	r1, [pc, #304]	; (80009b8 <main+0x2b4>)
 8000888:	4840      	ldr	r0, [pc, #256]	; (800098c <main+0x288>)
 800088a:	f001 fe2c 	bl	80024e6 <HAL_UART_Transmit>
	  HAL_UART_Receive(&huart3, (uint8_t *) buf, sizeof(buf), 1000);
 800088e:	f107 01c4 	add.w	r1, r7, #196	; 0xc4
 8000892:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000896:	2264      	movs	r2, #100	; 0x64
 8000898:	483c      	ldr	r0, [pc, #240]	; (800098c <main+0x288>)
 800089a:	f001 feb6 	bl	800260a <HAL_UART_Receive>
	  printf("%s\r\n", buf);
 800089e:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80008a2:	4619      	mov	r1, r3
 80008a4:	4845      	ldr	r0, [pc, #276]	; (80009bc <main+0x2b8>)
 80008a6:	f002 f9bb 	bl	8002c20 <iprintf>

	  char local_buf[100] = {0};
 80008aa:	1d3b      	adds	r3, r7, #4
 80008ac:	2200      	movs	r2, #0
 80008ae:	601a      	str	r2, [r3, #0]
 80008b0:	3304      	adds	r3, #4
 80008b2:	2260      	movs	r2, #96	; 0x60
 80008b4:	2100      	movs	r1, #0
 80008b6:	4618      	mov	r0, r3
 80008b8:	f002 f9aa 	bl	8002c10 <memset>
	  char local_buf2[30] = {0};
 80008bc:	2300      	movs	r3, #0
 80008be:	66bb      	str	r3, [r7, #104]	; 0x68
 80008c0:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80008c4:	2200      	movs	r2, #0
 80008c6:	601a      	str	r2, [r3, #0]
 80008c8:	605a      	str	r2, [r3, #4]
 80008ca:	609a      	str	r2, [r3, #8]
 80008cc:	60da      	str	r2, [r3, #12]
 80008ce:	611a      	str	r2, [r3, #16]
 80008d0:	615a      	str	r2, [r3, #20]
 80008d2:	831a      	strh	r2, [r3, #24]
	  HAL_UART_Receive(&huart3, (uint8_t *) buf, sizeof(buf), 3000);
 80008d4:	f107 01c4 	add.w	r1, r7, #196	; 0xc4
 80008d8:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80008dc:	2264      	movs	r2, #100	; 0x64
 80008de:	482b      	ldr	r0, [pc, #172]	; (800098c <main+0x288>)
 80008e0:	f001 fe93 	bl	800260a <HAL_UART_Receive>
	  printf("%s\r\n", buf);
 80008e4:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80008e8:	4619      	mov	r1, r3
 80008ea:	4834      	ldr	r0, [pc, #208]	; (80009bc <main+0x2b8>)
 80008ec:	f002 f998 	bl	8002c20 <iprintf>
	  memset(buf, 0, sizeof(buf));
 80008f0:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80008f4:	2264      	movs	r2, #100	; 0x64
 80008f6:	2100      	movs	r1, #0
 80008f8:	4618      	mov	r0, r3
 80008fa:	f002 f989 	bl	8002c10 <memset>

	  sprintf (local_buf, "GET /update?api_key=%s&field%d=%u\r\n", "MK77FV2ZF1VMIUYQ", 1, counter);
 80008fe:	f8b7 312e 	ldrh.w	r3, [r7, #302]	; 0x12e
 8000902:	1d38      	adds	r0, r7, #4
 8000904:	9300      	str	r3, [sp, #0]
 8000906:	2301      	movs	r3, #1
 8000908:	4a2d      	ldr	r2, [pc, #180]	; (80009c0 <main+0x2bc>)
 800090a:	492e      	ldr	r1, [pc, #184]	; (80009c4 <main+0x2c0>)
 800090c:	f002 fadc 	bl	8002ec8 <siprintf>
	  counter = counter +1;
 8000910:	f8b7 312e 	ldrh.w	r3, [r7, #302]	; 0x12e
 8000914:	3301      	adds	r3, #1
 8000916:	f8a7 312e 	strh.w	r3, [r7, #302]	; 0x12e
	  int len = strlen (local_buf);
 800091a:	1d3b      	adds	r3, r7, #4
 800091c:	4618      	mov	r0, r3
 800091e:	f7ff fc57 	bl	80001d0 <strlen>
 8000922:	4603      	mov	r3, r0
 8000924:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128

	  sprintf (local_buf2, "AT+CIPSEND=%d\r\n", len);
 8000928:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800092c:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8000930:	4925      	ldr	r1, [pc, #148]	; (80009c8 <main+0x2c4>)
 8000932:	4618      	mov	r0, r3
 8000934:	f002 fac8 	bl	8002ec8 <siprintf>
	  HAL_UART_Transmit(&huart3, (uint8_t *) local_buf2, sizeof(local_buf2), 1000);
 8000938:	f107 0168 	add.w	r1, r7, #104	; 0x68
 800093c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000940:	221e      	movs	r2, #30
 8000942:	4812      	ldr	r0, [pc, #72]	; (800098c <main+0x288>)
 8000944:	f001 fdcf 	bl	80024e6 <HAL_UART_Transmit>

	  HAL_Delay(1000);
 8000948:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800094c:	f000 fb88 	bl	8001060 <HAL_Delay>

	  HAL_UART_Transmit(&huart3, (uint8_t *) local_buf, sizeof(local_buf), 1000);
 8000950:	1d39      	adds	r1, r7, #4
 8000952:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000956:	2264      	movs	r2, #100	; 0x64
 8000958:	480c      	ldr	r0, [pc, #48]	; (800098c <main+0x288>)
 800095a:	f001 fdc4 	bl	80024e6 <HAL_UART_Transmit>

	  HAL_Delay(1000);
 800095e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000962:	f000 fb7d 	bl	8001060 <HAL_Delay>

	  HAL_UART_Transmit(&huart3, (uint8_t*) ("AT+CIPCLOSE\r\n"), strlen("AT+CIPCLOSE\r\n"), 1000);
 8000966:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800096a:	220d      	movs	r2, #13
 800096c:	4917      	ldr	r1, [pc, #92]	; (80009cc <main+0x2c8>)
 800096e:	4807      	ldr	r0, [pc, #28]	; (800098c <main+0x288>)
 8000970:	f001 fdb9 	bl	80024e6 <HAL_UART_Transmit>
	  HAL_Delay(22000);
 8000974:	f245 50f0 	movw	r0, #22000	; 0x55f0
 8000978:	f000 fb72 	bl	8001060 <HAL_Delay>
  while (1){
 800097c:	e780      	b.n	8000880 <main+0x17c>
 800097e:	bf00      	nop
 8000980:	20000124 	.word	0x20000124
 8000984:	08004110 	.word	0x08004110
 8000988:	0800411c 	.word	0x0800411c
 800098c:	2000009c 	.word	0x2000009c
 8000990:	08004128 	.word	0x08004128
 8000994:	08004130 	.word	0x08004130
 8000998:	08004138 	.word	0x08004138
 800099c:	08004144 	.word	0x08004144
 80009a0:	08004154 	.word	0x08004154
 80009a4:	08004168 	.word	0x08004168
 80009a8:	0800418c 	.word	0x0800418c
 80009ac:	0800419c 	.word	0x0800419c
 80009b0:	080041ac 	.word	0x080041ac
 80009b4:	080041c0 	.word	0x080041c0
 80009b8:	080041cc 	.word	0x080041cc
 80009bc:	080041f8 	.word	0x080041f8
 80009c0:	08004200 	.word	0x08004200
 80009c4:	08004214 	.word	0x08004214
 80009c8:	08004238 	.word	0x08004238
 80009cc:	08004248 	.word	0x08004248

080009d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b094      	sub	sp, #80	; 0x50
 80009d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009d6:	f107 0320 	add.w	r3, r7, #32
 80009da:	2230      	movs	r2, #48	; 0x30
 80009dc:	2100      	movs	r1, #0
 80009de:	4618      	mov	r0, r3
 80009e0:	f002 f916 	bl	8002c10 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009e4:	f107 030c 	add.w	r3, r7, #12
 80009e8:	2200      	movs	r2, #0
 80009ea:	601a      	str	r2, [r3, #0]
 80009ec:	605a      	str	r2, [r3, #4]
 80009ee:	609a      	str	r2, [r3, #8]
 80009f0:	60da      	str	r2, [r3, #12]
 80009f2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80009f4:	2300      	movs	r3, #0
 80009f6:	60bb      	str	r3, [r7, #8]
 80009f8:	4b28      	ldr	r3, [pc, #160]	; (8000a9c <SystemClock_Config+0xcc>)
 80009fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009fc:	4a27      	ldr	r2, [pc, #156]	; (8000a9c <SystemClock_Config+0xcc>)
 80009fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a02:	6413      	str	r3, [r2, #64]	; 0x40
 8000a04:	4b25      	ldr	r3, [pc, #148]	; (8000a9c <SystemClock_Config+0xcc>)
 8000a06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a08:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a0c:	60bb      	str	r3, [r7, #8]
 8000a0e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000a10:	2300      	movs	r3, #0
 8000a12:	607b      	str	r3, [r7, #4]
 8000a14:	4b22      	ldr	r3, [pc, #136]	; (8000aa0 <SystemClock_Config+0xd0>)
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	4a21      	ldr	r2, [pc, #132]	; (8000aa0 <SystemClock_Config+0xd0>)
 8000a1a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a1e:	6013      	str	r3, [r2, #0]
 8000a20:	4b1f      	ldr	r3, [pc, #124]	; (8000aa0 <SystemClock_Config+0xd0>)
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a28:	607b      	str	r3, [r7, #4]
 8000a2a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000a2c:	2302      	movs	r3, #2
 8000a2e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a30:	2301      	movs	r3, #1
 8000a32:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a34:	2310      	movs	r3, #16
 8000a36:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a38:	2302      	movs	r3, #2
 8000a3a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000a40:	2308      	movs	r3, #8
 8000a42:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 8000a44:	2332      	movs	r3, #50	; 0x32
 8000a46:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000a48:	2302      	movs	r3, #2
 8000a4a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000a4c:	2307      	movs	r3, #7
 8000a4e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a50:	f107 0320 	add.w	r3, r7, #32
 8000a54:	4618      	mov	r0, r3
 8000a56:	f000 fda5 	bl	80015a4 <HAL_RCC_OscConfig>
 8000a5a:	4603      	mov	r3, r0
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d001      	beq.n	8000a64 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000a60:	f000 f8d8 	bl	8000c14 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a64:	230f      	movs	r3, #15
 8000a66:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a68:	2302      	movs	r3, #2
 8000a6a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000a70:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000a74:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000a76:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a7a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000a7c:	f107 030c 	add.w	r3, r7, #12
 8000a80:	2101      	movs	r1, #1
 8000a82:	4618      	mov	r0, r3
 8000a84:	f001 f806 	bl	8001a94 <HAL_RCC_ClockConfig>
 8000a88:	4603      	mov	r3, r0
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d001      	beq.n	8000a92 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000a8e:	f000 f8c1 	bl	8000c14 <Error_Handler>
  }
}
 8000a92:	bf00      	nop
 8000a94:	3750      	adds	r7, #80	; 0x50
 8000a96:	46bd      	mov	sp, r7
 8000a98:	bd80      	pop	{r7, pc}
 8000a9a:	bf00      	nop
 8000a9c:	40023800 	.word	0x40023800
 8000aa0:	40007000 	.word	0x40007000

08000aa4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000aa8:	4b11      	ldr	r3, [pc, #68]	; (8000af0 <MX_USART1_UART_Init+0x4c>)
 8000aaa:	4a12      	ldr	r2, [pc, #72]	; (8000af4 <MX_USART1_UART_Init+0x50>)
 8000aac:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000aae:	4b10      	ldr	r3, [pc, #64]	; (8000af0 <MX_USART1_UART_Init+0x4c>)
 8000ab0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ab4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000ab6:	4b0e      	ldr	r3, [pc, #56]	; (8000af0 <MX_USART1_UART_Init+0x4c>)
 8000ab8:	2200      	movs	r2, #0
 8000aba:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000abc:	4b0c      	ldr	r3, [pc, #48]	; (8000af0 <MX_USART1_UART_Init+0x4c>)
 8000abe:	2200      	movs	r2, #0
 8000ac0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000ac2:	4b0b      	ldr	r3, [pc, #44]	; (8000af0 <MX_USART1_UART_Init+0x4c>)
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000ac8:	4b09      	ldr	r3, [pc, #36]	; (8000af0 <MX_USART1_UART_Init+0x4c>)
 8000aca:	220c      	movs	r2, #12
 8000acc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ace:	4b08      	ldr	r3, [pc, #32]	; (8000af0 <MX_USART1_UART_Init+0x4c>)
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ad4:	4b06      	ldr	r3, [pc, #24]	; (8000af0 <MX_USART1_UART_Init+0x4c>)
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000ada:	4805      	ldr	r0, [pc, #20]	; (8000af0 <MX_USART1_UART_Init+0x4c>)
 8000adc:	f001 fcb6 	bl	800244c <HAL_UART_Init>
 8000ae0:	4603      	mov	r3, r0
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	d001      	beq.n	8000aea <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000ae6:	f000 f895 	bl	8000c14 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000aea:	bf00      	nop
 8000aec:	bd80      	pop	{r7, pc}
 8000aee:	bf00      	nop
 8000af0:	200000e0 	.word	0x200000e0
 8000af4:	40011000 	.word	0x40011000

08000af8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000afc:	4b11      	ldr	r3, [pc, #68]	; (8000b44 <MX_USART2_UART_Init+0x4c>)
 8000afe:	4a12      	ldr	r2, [pc, #72]	; (8000b48 <MX_USART2_UART_Init+0x50>)
 8000b00:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000b02:	4b10      	ldr	r3, [pc, #64]	; (8000b44 <MX_USART2_UART_Init+0x4c>)
 8000b04:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b08:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000b0a:	4b0e      	ldr	r3, [pc, #56]	; (8000b44 <MX_USART2_UART_Init+0x4c>)
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000b10:	4b0c      	ldr	r3, [pc, #48]	; (8000b44 <MX_USART2_UART_Init+0x4c>)
 8000b12:	2200      	movs	r2, #0
 8000b14:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000b16:	4b0b      	ldr	r3, [pc, #44]	; (8000b44 <MX_USART2_UART_Init+0x4c>)
 8000b18:	2200      	movs	r2, #0
 8000b1a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000b1c:	4b09      	ldr	r3, [pc, #36]	; (8000b44 <MX_USART2_UART_Init+0x4c>)
 8000b1e:	220c      	movs	r2, #12
 8000b20:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b22:	4b08      	ldr	r3, [pc, #32]	; (8000b44 <MX_USART2_UART_Init+0x4c>)
 8000b24:	2200      	movs	r2, #0
 8000b26:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b28:	4b06      	ldr	r3, [pc, #24]	; (8000b44 <MX_USART2_UART_Init+0x4c>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000b2e:	4805      	ldr	r0, [pc, #20]	; (8000b44 <MX_USART2_UART_Init+0x4c>)
 8000b30:	f001 fc8c 	bl	800244c <HAL_UART_Init>
 8000b34:	4603      	mov	r3, r0
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d001      	beq.n	8000b3e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000b3a:	f000 f86b 	bl	8000c14 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000b3e:	bf00      	nop
 8000b40:	bd80      	pop	{r7, pc}
 8000b42:	bf00      	nop
 8000b44:	20000124 	.word	0x20000124
 8000b48:	40004400 	.word	0x40004400

08000b4c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000b50:	4b11      	ldr	r3, [pc, #68]	; (8000b98 <MX_USART3_UART_Init+0x4c>)
 8000b52:	4a12      	ldr	r2, [pc, #72]	; (8000b9c <MX_USART3_UART_Init+0x50>)
 8000b54:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000b56:	4b10      	ldr	r3, [pc, #64]	; (8000b98 <MX_USART3_UART_Init+0x4c>)
 8000b58:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b5c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000b5e:	4b0e      	ldr	r3, [pc, #56]	; (8000b98 <MX_USART3_UART_Init+0x4c>)
 8000b60:	2200      	movs	r2, #0
 8000b62:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000b64:	4b0c      	ldr	r3, [pc, #48]	; (8000b98 <MX_USART3_UART_Init+0x4c>)
 8000b66:	2200      	movs	r2, #0
 8000b68:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000b6a:	4b0b      	ldr	r3, [pc, #44]	; (8000b98 <MX_USART3_UART_Init+0x4c>)
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000b70:	4b09      	ldr	r3, [pc, #36]	; (8000b98 <MX_USART3_UART_Init+0x4c>)
 8000b72:	220c      	movs	r2, #12
 8000b74:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b76:	4b08      	ldr	r3, [pc, #32]	; (8000b98 <MX_USART3_UART_Init+0x4c>)
 8000b78:	2200      	movs	r2, #0
 8000b7a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b7c:	4b06      	ldr	r3, [pc, #24]	; (8000b98 <MX_USART3_UART_Init+0x4c>)
 8000b7e:	2200      	movs	r2, #0
 8000b80:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000b82:	4805      	ldr	r0, [pc, #20]	; (8000b98 <MX_USART3_UART_Init+0x4c>)
 8000b84:	f001 fc62 	bl	800244c <HAL_UART_Init>
 8000b88:	4603      	mov	r3, r0
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d001      	beq.n	8000b92 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000b8e:	f000 f841 	bl	8000c14 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000b92:	bf00      	nop
 8000b94:	bd80      	pop	{r7, pc}
 8000b96:	bf00      	nop
 8000b98:	2000009c 	.word	0x2000009c
 8000b9c:	40004800 	.word	0x40004800

08000ba0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	b083      	sub	sp, #12
 8000ba4:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	607b      	str	r3, [r7, #4]
 8000baa:	4b10      	ldr	r3, [pc, #64]	; (8000bec <MX_GPIO_Init+0x4c>)
 8000bac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bae:	4a0f      	ldr	r2, [pc, #60]	; (8000bec <MX_GPIO_Init+0x4c>)
 8000bb0:	f043 0301 	orr.w	r3, r3, #1
 8000bb4:	6313      	str	r3, [r2, #48]	; 0x30
 8000bb6:	4b0d      	ldr	r3, [pc, #52]	; (8000bec <MX_GPIO_Init+0x4c>)
 8000bb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bba:	f003 0301 	and.w	r3, r3, #1
 8000bbe:	607b      	str	r3, [r7, #4]
 8000bc0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	603b      	str	r3, [r7, #0]
 8000bc6:	4b09      	ldr	r3, [pc, #36]	; (8000bec <MX_GPIO_Init+0x4c>)
 8000bc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bca:	4a08      	ldr	r2, [pc, #32]	; (8000bec <MX_GPIO_Init+0x4c>)
 8000bcc:	f043 0302 	orr.w	r3, r3, #2
 8000bd0:	6313      	str	r3, [r2, #48]	; 0x30
 8000bd2:	4b06      	ldr	r3, [pc, #24]	; (8000bec <MX_GPIO_Init+0x4c>)
 8000bd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bd6:	f003 0302 	and.w	r3, r3, #2
 8000bda:	603b      	str	r3, [r7, #0]
 8000bdc:	683b      	ldr	r3, [r7, #0]

}
 8000bde:	bf00      	nop
 8000be0:	370c      	adds	r7, #12
 8000be2:	46bd      	mov	sp, r7
 8000be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be8:	4770      	bx	lr
 8000bea:	bf00      	nop
 8000bec:	40023800 	.word	0x40023800

08000bf0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b082      	sub	sp, #8
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	4a04      	ldr	r2, [pc, #16]	; (8000c10 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000bfe:	4293      	cmp	r3, r2
 8000c00:	d101      	bne.n	8000c06 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000c02:	f000 fa0d 	bl	8001020 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000c06:	bf00      	nop
 8000c08:	3708      	adds	r7, #8
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	bd80      	pop	{r7, pc}
 8000c0e:	bf00      	nop
 8000c10:	40010000 	.word	0x40010000

08000c14 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c14:	b480      	push	{r7}
 8000c16:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c18:	b672      	cpsid	i
}
 8000c1a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c1c:	e7fe      	b.n	8000c1c <Error_Handler+0x8>
	...

08000c20 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b082      	sub	sp, #8
 8000c24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c26:	2300      	movs	r3, #0
 8000c28:	607b      	str	r3, [r7, #4]
 8000c2a:	4b10      	ldr	r3, [pc, #64]	; (8000c6c <HAL_MspInit+0x4c>)
 8000c2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c2e:	4a0f      	ldr	r2, [pc, #60]	; (8000c6c <HAL_MspInit+0x4c>)
 8000c30:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c34:	6453      	str	r3, [r2, #68]	; 0x44
 8000c36:	4b0d      	ldr	r3, [pc, #52]	; (8000c6c <HAL_MspInit+0x4c>)
 8000c38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c3a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c3e:	607b      	str	r3, [r7, #4]
 8000c40:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c42:	2300      	movs	r3, #0
 8000c44:	603b      	str	r3, [r7, #0]
 8000c46:	4b09      	ldr	r3, [pc, #36]	; (8000c6c <HAL_MspInit+0x4c>)
 8000c48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c4a:	4a08      	ldr	r2, [pc, #32]	; (8000c6c <HAL_MspInit+0x4c>)
 8000c4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c50:	6413      	str	r3, [r2, #64]	; 0x40
 8000c52:	4b06      	ldr	r3, [pc, #24]	; (8000c6c <HAL_MspInit+0x4c>)
 8000c54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c5a:	603b      	str	r3, [r7, #0]
 8000c5c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000c5e:	2007      	movs	r0, #7
 8000c60:	f000 facf 	bl	8001202 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c64:	bf00      	nop
 8000c66:	3708      	adds	r7, #8
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	bd80      	pop	{r7, pc}
 8000c6c:	40023800 	.word	0x40023800

08000c70 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b08e      	sub	sp, #56	; 0x38
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c78:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	601a      	str	r2, [r3, #0]
 8000c80:	605a      	str	r2, [r3, #4]
 8000c82:	609a      	str	r2, [r3, #8]
 8000c84:	60da      	str	r2, [r3, #12]
 8000c86:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	4a4c      	ldr	r2, [pc, #304]	; (8000dc0 <HAL_UART_MspInit+0x150>)
 8000c8e:	4293      	cmp	r3, r2
 8000c90:	d12d      	bne.n	8000cee <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000c92:	2300      	movs	r3, #0
 8000c94:	623b      	str	r3, [r7, #32]
 8000c96:	4b4b      	ldr	r3, [pc, #300]	; (8000dc4 <HAL_UART_MspInit+0x154>)
 8000c98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c9a:	4a4a      	ldr	r2, [pc, #296]	; (8000dc4 <HAL_UART_MspInit+0x154>)
 8000c9c:	f043 0310 	orr.w	r3, r3, #16
 8000ca0:	6453      	str	r3, [r2, #68]	; 0x44
 8000ca2:	4b48      	ldr	r3, [pc, #288]	; (8000dc4 <HAL_UART_MspInit+0x154>)
 8000ca4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ca6:	f003 0310 	and.w	r3, r3, #16
 8000caa:	623b      	str	r3, [r7, #32]
 8000cac:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cae:	2300      	movs	r3, #0
 8000cb0:	61fb      	str	r3, [r7, #28]
 8000cb2:	4b44      	ldr	r3, [pc, #272]	; (8000dc4 <HAL_UART_MspInit+0x154>)
 8000cb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cb6:	4a43      	ldr	r2, [pc, #268]	; (8000dc4 <HAL_UART_MspInit+0x154>)
 8000cb8:	f043 0301 	orr.w	r3, r3, #1
 8000cbc:	6313      	str	r3, [r2, #48]	; 0x30
 8000cbe:	4b41      	ldr	r3, [pc, #260]	; (8000dc4 <HAL_UART_MspInit+0x154>)
 8000cc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cc2:	f003 0301 	and.w	r3, r3, #1
 8000cc6:	61fb      	str	r3, [r7, #28]
 8000cc8:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000cca:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000cce:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cd0:	2302      	movs	r3, #2
 8000cd2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cd8:	2303      	movs	r3, #3
 8000cda:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000cdc:	2307      	movs	r3, #7
 8000cde:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ce0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ce4:	4619      	mov	r1, r3
 8000ce6:	4838      	ldr	r0, [pc, #224]	; (8000dc8 <HAL_UART_MspInit+0x158>)
 8000ce8:	f000 fac0 	bl	800126c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000cec:	e063      	b.n	8000db6 <HAL_UART_MspInit+0x146>
  else if(huart->Instance==USART2)
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	4a36      	ldr	r2, [pc, #216]	; (8000dcc <HAL_UART_MspInit+0x15c>)
 8000cf4:	4293      	cmp	r3, r2
 8000cf6:	d12c      	bne.n	8000d52 <HAL_UART_MspInit+0xe2>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	61bb      	str	r3, [r7, #24]
 8000cfc:	4b31      	ldr	r3, [pc, #196]	; (8000dc4 <HAL_UART_MspInit+0x154>)
 8000cfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d00:	4a30      	ldr	r2, [pc, #192]	; (8000dc4 <HAL_UART_MspInit+0x154>)
 8000d02:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d06:	6413      	str	r3, [r2, #64]	; 0x40
 8000d08:	4b2e      	ldr	r3, [pc, #184]	; (8000dc4 <HAL_UART_MspInit+0x154>)
 8000d0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d10:	61bb      	str	r3, [r7, #24]
 8000d12:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d14:	2300      	movs	r3, #0
 8000d16:	617b      	str	r3, [r7, #20]
 8000d18:	4b2a      	ldr	r3, [pc, #168]	; (8000dc4 <HAL_UART_MspInit+0x154>)
 8000d1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d1c:	4a29      	ldr	r2, [pc, #164]	; (8000dc4 <HAL_UART_MspInit+0x154>)
 8000d1e:	f043 0301 	orr.w	r3, r3, #1
 8000d22:	6313      	str	r3, [r2, #48]	; 0x30
 8000d24:	4b27      	ldr	r3, [pc, #156]	; (8000dc4 <HAL_UART_MspInit+0x154>)
 8000d26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d28:	f003 0301 	and.w	r3, r3, #1
 8000d2c:	617b      	str	r3, [r7, #20]
 8000d2e:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000d30:	230c      	movs	r3, #12
 8000d32:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d34:	2302      	movs	r3, #2
 8000d36:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d38:	2300      	movs	r3, #0
 8000d3a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d3c:	2303      	movs	r3, #3
 8000d3e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000d40:	2307      	movs	r3, #7
 8000d42:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d44:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d48:	4619      	mov	r1, r3
 8000d4a:	481f      	ldr	r0, [pc, #124]	; (8000dc8 <HAL_UART_MspInit+0x158>)
 8000d4c:	f000 fa8e 	bl	800126c <HAL_GPIO_Init>
}
 8000d50:	e031      	b.n	8000db6 <HAL_UART_MspInit+0x146>
  else if(huart->Instance==USART3)
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	4a1e      	ldr	r2, [pc, #120]	; (8000dd0 <HAL_UART_MspInit+0x160>)
 8000d58:	4293      	cmp	r3, r2
 8000d5a:	d12c      	bne.n	8000db6 <HAL_UART_MspInit+0x146>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	613b      	str	r3, [r7, #16]
 8000d60:	4b18      	ldr	r3, [pc, #96]	; (8000dc4 <HAL_UART_MspInit+0x154>)
 8000d62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d64:	4a17      	ldr	r2, [pc, #92]	; (8000dc4 <HAL_UART_MspInit+0x154>)
 8000d66:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000d6a:	6413      	str	r3, [r2, #64]	; 0x40
 8000d6c:	4b15      	ldr	r3, [pc, #84]	; (8000dc4 <HAL_UART_MspInit+0x154>)
 8000d6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d70:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000d74:	613b      	str	r3, [r7, #16]
 8000d76:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d78:	2300      	movs	r3, #0
 8000d7a:	60fb      	str	r3, [r7, #12]
 8000d7c:	4b11      	ldr	r3, [pc, #68]	; (8000dc4 <HAL_UART_MspInit+0x154>)
 8000d7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d80:	4a10      	ldr	r2, [pc, #64]	; (8000dc4 <HAL_UART_MspInit+0x154>)
 8000d82:	f043 0302 	orr.w	r3, r3, #2
 8000d86:	6313      	str	r3, [r2, #48]	; 0x30
 8000d88:	4b0e      	ldr	r3, [pc, #56]	; (8000dc4 <HAL_UART_MspInit+0x154>)
 8000d8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d8c:	f003 0302 	and.w	r3, r3, #2
 8000d90:	60fb      	str	r3, [r7, #12]
 8000d92:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000d94:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000d98:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d9a:	2302      	movs	r3, #2
 8000d9c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d9e:	2300      	movs	r3, #0
 8000da0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000da2:	2303      	movs	r3, #3
 8000da4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000da6:	2307      	movs	r3, #7
 8000da8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000daa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000dae:	4619      	mov	r1, r3
 8000db0:	4808      	ldr	r0, [pc, #32]	; (8000dd4 <HAL_UART_MspInit+0x164>)
 8000db2:	f000 fa5b 	bl	800126c <HAL_GPIO_Init>
}
 8000db6:	bf00      	nop
 8000db8:	3738      	adds	r7, #56	; 0x38
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	bd80      	pop	{r7, pc}
 8000dbe:	bf00      	nop
 8000dc0:	40011000 	.word	0x40011000
 8000dc4:	40023800 	.word	0x40023800
 8000dc8:	40020000 	.word	0x40020000
 8000dcc:	40004400 	.word	0x40004400
 8000dd0:	40004800 	.word	0x40004800
 8000dd4:	40020400 	.word	0x40020400

08000dd8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b08c      	sub	sp, #48	; 0x30
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000de0:	2300      	movs	r3, #0
 8000de2:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000de4:	2300      	movs	r3, #0
 8000de6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 8000de8:	2200      	movs	r2, #0
 8000dea:	6879      	ldr	r1, [r7, #4]
 8000dec:	2019      	movs	r0, #25
 8000dee:	f000 fa13 	bl	8001218 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000df2:	2019      	movs	r0, #25
 8000df4:	f000 fa2c 	bl	8001250 <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000df8:	2300      	movs	r3, #0
 8000dfa:	60fb      	str	r3, [r7, #12]
 8000dfc:	4b1f      	ldr	r3, [pc, #124]	; (8000e7c <HAL_InitTick+0xa4>)
 8000dfe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e00:	4a1e      	ldr	r2, [pc, #120]	; (8000e7c <HAL_InitTick+0xa4>)
 8000e02:	f043 0301 	orr.w	r3, r3, #1
 8000e06:	6453      	str	r3, [r2, #68]	; 0x44
 8000e08:	4b1c      	ldr	r3, [pc, #112]	; (8000e7c <HAL_InitTick+0xa4>)
 8000e0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e0c:	f003 0301 	and.w	r3, r3, #1
 8000e10:	60fb      	str	r3, [r7, #12]
 8000e12:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000e14:	f107 0210 	add.w	r2, r7, #16
 8000e18:	f107 0314 	add.w	r3, r7, #20
 8000e1c:	4611      	mov	r1, r2
 8000e1e:	4618      	mov	r0, r3
 8000e20:	f001 f834 	bl	8001e8c <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8000e24:	f001 f81e 	bl	8001e64 <HAL_RCC_GetPCLK2Freq>
 8000e28:	4603      	mov	r3, r0
 8000e2a:	005b      	lsls	r3, r3, #1
 8000e2c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000e2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e30:	4a13      	ldr	r2, [pc, #76]	; (8000e80 <HAL_InitTick+0xa8>)
 8000e32:	fba2 2303 	umull	r2, r3, r2, r3
 8000e36:	0c9b      	lsrs	r3, r3, #18
 8000e38:	3b01      	subs	r3, #1
 8000e3a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000e3c:	4b11      	ldr	r3, [pc, #68]	; (8000e84 <HAL_InitTick+0xac>)
 8000e3e:	4a12      	ldr	r2, [pc, #72]	; (8000e88 <HAL_InitTick+0xb0>)
 8000e40:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000e42:	4b10      	ldr	r3, [pc, #64]	; (8000e84 <HAL_InitTick+0xac>)
 8000e44:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000e48:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000e4a:	4a0e      	ldr	r2, [pc, #56]	; (8000e84 <HAL_InitTick+0xac>)
 8000e4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e4e:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000e50:	4b0c      	ldr	r3, [pc, #48]	; (8000e84 <HAL_InitTick+0xac>)
 8000e52:	2200      	movs	r2, #0
 8000e54:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e56:	4b0b      	ldr	r3, [pc, #44]	; (8000e84 <HAL_InitTick+0xac>)
 8000e58:	2200      	movs	r2, #0
 8000e5a:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8000e5c:	4809      	ldr	r0, [pc, #36]	; (8000e84 <HAL_InitTick+0xac>)
 8000e5e:	f001 f847 	bl	8001ef0 <HAL_TIM_Base_Init>
 8000e62:	4603      	mov	r3, r0
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d104      	bne.n	8000e72 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8000e68:	4806      	ldr	r0, [pc, #24]	; (8000e84 <HAL_InitTick+0xac>)
 8000e6a:	f001 f89b 	bl	8001fa4 <HAL_TIM_Base_Start_IT>
 8000e6e:	4603      	mov	r3, r0
 8000e70:	e000      	b.n	8000e74 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8000e72:	2301      	movs	r3, #1
}
 8000e74:	4618      	mov	r0, r3
 8000e76:	3730      	adds	r7, #48	; 0x30
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	bd80      	pop	{r7, pc}
 8000e7c:	40023800 	.word	0x40023800
 8000e80:	431bde83 	.word	0x431bde83
 8000e84:	20000168 	.word	0x20000168
 8000e88:	40010000 	.word	0x40010000

08000e8c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e8c:	b480      	push	{r7}
 8000e8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e90:	e7fe      	b.n	8000e90 <NMI_Handler+0x4>

08000e92 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e92:	b480      	push	{r7}
 8000e94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e96:	e7fe      	b.n	8000e96 <HardFault_Handler+0x4>

08000e98 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e9c:	e7fe      	b.n	8000e9c <MemManage_Handler+0x4>

08000e9e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e9e:	b480      	push	{r7}
 8000ea0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ea2:	e7fe      	b.n	8000ea2 <BusFault_Handler+0x4>

08000ea4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ea8:	e7fe      	b.n	8000ea8 <UsageFault_Handler+0x4>

08000eaa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000eaa:	b480      	push	{r7}
 8000eac:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000eae:	bf00      	nop
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb6:	4770      	bx	lr

08000eb8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000eb8:	b480      	push	{r7}
 8000eba:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ebc:	bf00      	nop
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec4:	4770      	bx	lr

08000ec6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ec6:	b480      	push	{r7}
 8000ec8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000eca:	bf00      	nop
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed2:	4770      	bx	lr

08000ed4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ed8:	bf00      	nop
 8000eda:	46bd      	mov	sp, r7
 8000edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee0:	4770      	bx	lr
	...

08000ee4 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000ee8:	4802      	ldr	r0, [pc, #8]	; (8000ef4 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000eea:	f001 f8cb 	bl	8002084 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000eee:	bf00      	nop
 8000ef0:	bd80      	pop	{r7, pc}
 8000ef2:	bf00      	nop
 8000ef4:	20000168 	.word	0x20000168

08000ef8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b086      	sub	sp, #24
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f00:	4a14      	ldr	r2, [pc, #80]	; (8000f54 <_sbrk+0x5c>)
 8000f02:	4b15      	ldr	r3, [pc, #84]	; (8000f58 <_sbrk+0x60>)
 8000f04:	1ad3      	subs	r3, r2, r3
 8000f06:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f08:	697b      	ldr	r3, [r7, #20]
 8000f0a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f0c:	4b13      	ldr	r3, [pc, #76]	; (8000f5c <_sbrk+0x64>)
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d102      	bne.n	8000f1a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f14:	4b11      	ldr	r3, [pc, #68]	; (8000f5c <_sbrk+0x64>)
 8000f16:	4a12      	ldr	r2, [pc, #72]	; (8000f60 <_sbrk+0x68>)
 8000f18:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f1a:	4b10      	ldr	r3, [pc, #64]	; (8000f5c <_sbrk+0x64>)
 8000f1c:	681a      	ldr	r2, [r3, #0]
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	4413      	add	r3, r2
 8000f22:	693a      	ldr	r2, [r7, #16]
 8000f24:	429a      	cmp	r2, r3
 8000f26:	d207      	bcs.n	8000f38 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f28:	f001 fe48 	bl	8002bbc <__errno>
 8000f2c:	4603      	mov	r3, r0
 8000f2e:	220c      	movs	r2, #12
 8000f30:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f32:	f04f 33ff 	mov.w	r3, #4294967295
 8000f36:	e009      	b.n	8000f4c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f38:	4b08      	ldr	r3, [pc, #32]	; (8000f5c <_sbrk+0x64>)
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f3e:	4b07      	ldr	r3, [pc, #28]	; (8000f5c <_sbrk+0x64>)
 8000f40:	681a      	ldr	r2, [r3, #0]
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	4413      	add	r3, r2
 8000f46:	4a05      	ldr	r2, [pc, #20]	; (8000f5c <_sbrk+0x64>)
 8000f48:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f4a:	68fb      	ldr	r3, [r7, #12]
}
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	3718      	adds	r7, #24
 8000f50:	46bd      	mov	sp, r7
 8000f52:	bd80      	pop	{r7, pc}
 8000f54:	20020000 	.word	0x20020000
 8000f58:	00000400 	.word	0x00000400
 8000f5c:	2000008c 	.word	0x2000008c
 8000f60:	200001c8 	.word	0x200001c8

08000f64 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f64:	b480      	push	{r7}
 8000f66:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f68:	4b06      	ldr	r3, [pc, #24]	; (8000f84 <SystemInit+0x20>)
 8000f6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f6e:	4a05      	ldr	r2, [pc, #20]	; (8000f84 <SystemInit+0x20>)
 8000f70:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f74:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f78:	bf00      	nop
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f80:	4770      	bx	lr
 8000f82:	bf00      	nop
 8000f84:	e000ed00 	.word	0xe000ed00

08000f88 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000f88:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000fc0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000f8c:	480d      	ldr	r0, [pc, #52]	; (8000fc4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000f8e:	490e      	ldr	r1, [pc, #56]	; (8000fc8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000f90:	4a0e      	ldr	r2, [pc, #56]	; (8000fcc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000f92:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f94:	e002      	b.n	8000f9c <LoopCopyDataInit>

08000f96 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f96:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f98:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f9a:	3304      	adds	r3, #4

08000f9c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f9c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f9e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000fa0:	d3f9      	bcc.n	8000f96 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000fa2:	4a0b      	ldr	r2, [pc, #44]	; (8000fd0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000fa4:	4c0b      	ldr	r4, [pc, #44]	; (8000fd4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000fa6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000fa8:	e001      	b.n	8000fae <LoopFillZerobss>

08000faa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000faa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000fac:	3204      	adds	r2, #4

08000fae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000fae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000fb0:	d3fb      	bcc.n	8000faa <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000fb2:	f7ff ffd7 	bl	8000f64 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000fb6:	f001 fe07 	bl	8002bc8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000fba:	f7ff fba3 	bl	8000704 <main>
  bx  lr    
 8000fbe:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000fc0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000fc4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000fc8:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000fcc:	08004318 	.word	0x08004318
  ldr r2, =_sbss
 8000fd0:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000fd4:	200001c4 	.word	0x200001c4

08000fd8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000fd8:	e7fe      	b.n	8000fd8 <ADC_IRQHandler>
	...

08000fdc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000fe0:	4b0e      	ldr	r3, [pc, #56]	; (800101c <HAL_Init+0x40>)
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	4a0d      	ldr	r2, [pc, #52]	; (800101c <HAL_Init+0x40>)
 8000fe6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000fea:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000fec:	4b0b      	ldr	r3, [pc, #44]	; (800101c <HAL_Init+0x40>)
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	4a0a      	ldr	r2, [pc, #40]	; (800101c <HAL_Init+0x40>)
 8000ff2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000ff6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ff8:	4b08      	ldr	r3, [pc, #32]	; (800101c <HAL_Init+0x40>)
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	4a07      	ldr	r2, [pc, #28]	; (800101c <HAL_Init+0x40>)
 8000ffe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001002:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001004:	2003      	movs	r0, #3
 8001006:	f000 f8fc 	bl	8001202 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800100a:	2000      	movs	r0, #0
 800100c:	f7ff fee4 	bl	8000dd8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001010:	f7ff fe06 	bl	8000c20 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001014:	2300      	movs	r3, #0
}
 8001016:	4618      	mov	r0, r3
 8001018:	bd80      	pop	{r7, pc}
 800101a:	bf00      	nop
 800101c:	40023c00 	.word	0x40023c00

08001020 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001020:	b480      	push	{r7}
 8001022:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001024:	4b06      	ldr	r3, [pc, #24]	; (8001040 <HAL_IncTick+0x20>)
 8001026:	781b      	ldrb	r3, [r3, #0]
 8001028:	461a      	mov	r2, r3
 800102a:	4b06      	ldr	r3, [pc, #24]	; (8001044 <HAL_IncTick+0x24>)
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	4413      	add	r3, r2
 8001030:	4a04      	ldr	r2, [pc, #16]	; (8001044 <HAL_IncTick+0x24>)
 8001032:	6013      	str	r3, [r2, #0]
}
 8001034:	bf00      	nop
 8001036:	46bd      	mov	sp, r7
 8001038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103c:	4770      	bx	lr
 800103e:	bf00      	nop
 8001040:	20000008 	.word	0x20000008
 8001044:	200001b0 	.word	0x200001b0

08001048 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001048:	b480      	push	{r7}
 800104a:	af00      	add	r7, sp, #0
  return uwTick;
 800104c:	4b03      	ldr	r3, [pc, #12]	; (800105c <HAL_GetTick+0x14>)
 800104e:	681b      	ldr	r3, [r3, #0]
}
 8001050:	4618      	mov	r0, r3
 8001052:	46bd      	mov	sp, r7
 8001054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001058:	4770      	bx	lr
 800105a:	bf00      	nop
 800105c:	200001b0 	.word	0x200001b0

08001060 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b084      	sub	sp, #16
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001068:	f7ff ffee 	bl	8001048 <HAL_GetTick>
 800106c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001072:	68fb      	ldr	r3, [r7, #12]
 8001074:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001078:	d005      	beq.n	8001086 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800107a:	4b0a      	ldr	r3, [pc, #40]	; (80010a4 <HAL_Delay+0x44>)
 800107c:	781b      	ldrb	r3, [r3, #0]
 800107e:	461a      	mov	r2, r3
 8001080:	68fb      	ldr	r3, [r7, #12]
 8001082:	4413      	add	r3, r2
 8001084:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001086:	bf00      	nop
 8001088:	f7ff ffde 	bl	8001048 <HAL_GetTick>
 800108c:	4602      	mov	r2, r0
 800108e:	68bb      	ldr	r3, [r7, #8]
 8001090:	1ad3      	subs	r3, r2, r3
 8001092:	68fa      	ldr	r2, [r7, #12]
 8001094:	429a      	cmp	r2, r3
 8001096:	d8f7      	bhi.n	8001088 <HAL_Delay+0x28>
  {
  }
}
 8001098:	bf00      	nop
 800109a:	bf00      	nop
 800109c:	3710      	adds	r7, #16
 800109e:	46bd      	mov	sp, r7
 80010a0:	bd80      	pop	{r7, pc}
 80010a2:	bf00      	nop
 80010a4:	20000008 	.word	0x20000008

080010a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010a8:	b480      	push	{r7}
 80010aa:	b085      	sub	sp, #20
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	f003 0307 	and.w	r3, r3, #7
 80010b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010b8:	4b0c      	ldr	r3, [pc, #48]	; (80010ec <__NVIC_SetPriorityGrouping+0x44>)
 80010ba:	68db      	ldr	r3, [r3, #12]
 80010bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010be:	68ba      	ldr	r2, [r7, #8]
 80010c0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80010c4:	4013      	ands	r3, r2
 80010c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80010c8:	68fb      	ldr	r3, [r7, #12]
 80010ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010cc:	68bb      	ldr	r3, [r7, #8]
 80010ce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80010d0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80010d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010da:	4a04      	ldr	r2, [pc, #16]	; (80010ec <__NVIC_SetPriorityGrouping+0x44>)
 80010dc:	68bb      	ldr	r3, [r7, #8]
 80010de:	60d3      	str	r3, [r2, #12]
}
 80010e0:	bf00      	nop
 80010e2:	3714      	adds	r7, #20
 80010e4:	46bd      	mov	sp, r7
 80010e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ea:	4770      	bx	lr
 80010ec:	e000ed00 	.word	0xe000ed00

080010f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80010f0:	b480      	push	{r7}
 80010f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010f4:	4b04      	ldr	r3, [pc, #16]	; (8001108 <__NVIC_GetPriorityGrouping+0x18>)
 80010f6:	68db      	ldr	r3, [r3, #12]
 80010f8:	0a1b      	lsrs	r3, r3, #8
 80010fa:	f003 0307 	and.w	r3, r3, #7
}
 80010fe:	4618      	mov	r0, r3
 8001100:	46bd      	mov	sp, r7
 8001102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001106:	4770      	bx	lr
 8001108:	e000ed00 	.word	0xe000ed00

0800110c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800110c:	b480      	push	{r7}
 800110e:	b083      	sub	sp, #12
 8001110:	af00      	add	r7, sp, #0
 8001112:	4603      	mov	r3, r0
 8001114:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001116:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800111a:	2b00      	cmp	r3, #0
 800111c:	db0b      	blt.n	8001136 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800111e:	79fb      	ldrb	r3, [r7, #7]
 8001120:	f003 021f 	and.w	r2, r3, #31
 8001124:	4907      	ldr	r1, [pc, #28]	; (8001144 <__NVIC_EnableIRQ+0x38>)
 8001126:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800112a:	095b      	lsrs	r3, r3, #5
 800112c:	2001      	movs	r0, #1
 800112e:	fa00 f202 	lsl.w	r2, r0, r2
 8001132:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001136:	bf00      	nop
 8001138:	370c      	adds	r7, #12
 800113a:	46bd      	mov	sp, r7
 800113c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001140:	4770      	bx	lr
 8001142:	bf00      	nop
 8001144:	e000e100 	.word	0xe000e100

08001148 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001148:	b480      	push	{r7}
 800114a:	b083      	sub	sp, #12
 800114c:	af00      	add	r7, sp, #0
 800114e:	4603      	mov	r3, r0
 8001150:	6039      	str	r1, [r7, #0]
 8001152:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001154:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001158:	2b00      	cmp	r3, #0
 800115a:	db0a      	blt.n	8001172 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800115c:	683b      	ldr	r3, [r7, #0]
 800115e:	b2da      	uxtb	r2, r3
 8001160:	490c      	ldr	r1, [pc, #48]	; (8001194 <__NVIC_SetPriority+0x4c>)
 8001162:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001166:	0112      	lsls	r2, r2, #4
 8001168:	b2d2      	uxtb	r2, r2
 800116a:	440b      	add	r3, r1
 800116c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001170:	e00a      	b.n	8001188 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001172:	683b      	ldr	r3, [r7, #0]
 8001174:	b2da      	uxtb	r2, r3
 8001176:	4908      	ldr	r1, [pc, #32]	; (8001198 <__NVIC_SetPriority+0x50>)
 8001178:	79fb      	ldrb	r3, [r7, #7]
 800117a:	f003 030f 	and.w	r3, r3, #15
 800117e:	3b04      	subs	r3, #4
 8001180:	0112      	lsls	r2, r2, #4
 8001182:	b2d2      	uxtb	r2, r2
 8001184:	440b      	add	r3, r1
 8001186:	761a      	strb	r2, [r3, #24]
}
 8001188:	bf00      	nop
 800118a:	370c      	adds	r7, #12
 800118c:	46bd      	mov	sp, r7
 800118e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001192:	4770      	bx	lr
 8001194:	e000e100 	.word	0xe000e100
 8001198:	e000ed00 	.word	0xe000ed00

0800119c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800119c:	b480      	push	{r7}
 800119e:	b089      	sub	sp, #36	; 0x24
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	60f8      	str	r0, [r7, #12]
 80011a4:	60b9      	str	r1, [r7, #8]
 80011a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011a8:	68fb      	ldr	r3, [r7, #12]
 80011aa:	f003 0307 	and.w	r3, r3, #7
 80011ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011b0:	69fb      	ldr	r3, [r7, #28]
 80011b2:	f1c3 0307 	rsb	r3, r3, #7
 80011b6:	2b04      	cmp	r3, #4
 80011b8:	bf28      	it	cs
 80011ba:	2304      	movcs	r3, #4
 80011bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011be:	69fb      	ldr	r3, [r7, #28]
 80011c0:	3304      	adds	r3, #4
 80011c2:	2b06      	cmp	r3, #6
 80011c4:	d902      	bls.n	80011cc <NVIC_EncodePriority+0x30>
 80011c6:	69fb      	ldr	r3, [r7, #28]
 80011c8:	3b03      	subs	r3, #3
 80011ca:	e000      	b.n	80011ce <NVIC_EncodePriority+0x32>
 80011cc:	2300      	movs	r3, #0
 80011ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011d0:	f04f 32ff 	mov.w	r2, #4294967295
 80011d4:	69bb      	ldr	r3, [r7, #24]
 80011d6:	fa02 f303 	lsl.w	r3, r2, r3
 80011da:	43da      	mvns	r2, r3
 80011dc:	68bb      	ldr	r3, [r7, #8]
 80011de:	401a      	ands	r2, r3
 80011e0:	697b      	ldr	r3, [r7, #20]
 80011e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011e4:	f04f 31ff 	mov.w	r1, #4294967295
 80011e8:	697b      	ldr	r3, [r7, #20]
 80011ea:	fa01 f303 	lsl.w	r3, r1, r3
 80011ee:	43d9      	mvns	r1, r3
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011f4:	4313      	orrs	r3, r2
         );
}
 80011f6:	4618      	mov	r0, r3
 80011f8:	3724      	adds	r7, #36	; 0x24
 80011fa:	46bd      	mov	sp, r7
 80011fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001200:	4770      	bx	lr

08001202 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001202:	b580      	push	{r7, lr}
 8001204:	b082      	sub	sp, #8
 8001206:	af00      	add	r7, sp, #0
 8001208:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800120a:	6878      	ldr	r0, [r7, #4]
 800120c:	f7ff ff4c 	bl	80010a8 <__NVIC_SetPriorityGrouping>
}
 8001210:	bf00      	nop
 8001212:	3708      	adds	r7, #8
 8001214:	46bd      	mov	sp, r7
 8001216:	bd80      	pop	{r7, pc}

08001218 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001218:	b580      	push	{r7, lr}
 800121a:	b086      	sub	sp, #24
 800121c:	af00      	add	r7, sp, #0
 800121e:	4603      	mov	r3, r0
 8001220:	60b9      	str	r1, [r7, #8]
 8001222:	607a      	str	r2, [r7, #4]
 8001224:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001226:	2300      	movs	r3, #0
 8001228:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800122a:	f7ff ff61 	bl	80010f0 <__NVIC_GetPriorityGrouping>
 800122e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001230:	687a      	ldr	r2, [r7, #4]
 8001232:	68b9      	ldr	r1, [r7, #8]
 8001234:	6978      	ldr	r0, [r7, #20]
 8001236:	f7ff ffb1 	bl	800119c <NVIC_EncodePriority>
 800123a:	4602      	mov	r2, r0
 800123c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001240:	4611      	mov	r1, r2
 8001242:	4618      	mov	r0, r3
 8001244:	f7ff ff80 	bl	8001148 <__NVIC_SetPriority>
}
 8001248:	bf00      	nop
 800124a:	3718      	adds	r7, #24
 800124c:	46bd      	mov	sp, r7
 800124e:	bd80      	pop	{r7, pc}

08001250 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b082      	sub	sp, #8
 8001254:	af00      	add	r7, sp, #0
 8001256:	4603      	mov	r3, r0
 8001258:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800125a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800125e:	4618      	mov	r0, r3
 8001260:	f7ff ff54 	bl	800110c <__NVIC_EnableIRQ>
}
 8001264:	bf00      	nop
 8001266:	3708      	adds	r7, #8
 8001268:	46bd      	mov	sp, r7
 800126a:	bd80      	pop	{r7, pc}

0800126c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800126c:	b480      	push	{r7}
 800126e:	b089      	sub	sp, #36	; 0x24
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
 8001274:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001276:	2300      	movs	r3, #0
 8001278:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800127a:	2300      	movs	r3, #0
 800127c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800127e:	2300      	movs	r3, #0
 8001280:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001282:	2300      	movs	r3, #0
 8001284:	61fb      	str	r3, [r7, #28]
 8001286:	e16b      	b.n	8001560 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001288:	2201      	movs	r2, #1
 800128a:	69fb      	ldr	r3, [r7, #28]
 800128c:	fa02 f303 	lsl.w	r3, r2, r3
 8001290:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001292:	683b      	ldr	r3, [r7, #0]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	697a      	ldr	r2, [r7, #20]
 8001298:	4013      	ands	r3, r2
 800129a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800129c:	693a      	ldr	r2, [r7, #16]
 800129e:	697b      	ldr	r3, [r7, #20]
 80012a0:	429a      	cmp	r2, r3
 80012a2:	f040 815a 	bne.w	800155a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80012a6:	683b      	ldr	r3, [r7, #0]
 80012a8:	685b      	ldr	r3, [r3, #4]
 80012aa:	f003 0303 	and.w	r3, r3, #3
 80012ae:	2b01      	cmp	r3, #1
 80012b0:	d005      	beq.n	80012be <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80012b2:	683b      	ldr	r3, [r7, #0]
 80012b4:	685b      	ldr	r3, [r3, #4]
 80012b6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80012ba:	2b02      	cmp	r3, #2
 80012bc:	d130      	bne.n	8001320 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	689b      	ldr	r3, [r3, #8]
 80012c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80012c4:	69fb      	ldr	r3, [r7, #28]
 80012c6:	005b      	lsls	r3, r3, #1
 80012c8:	2203      	movs	r2, #3
 80012ca:	fa02 f303 	lsl.w	r3, r2, r3
 80012ce:	43db      	mvns	r3, r3
 80012d0:	69ba      	ldr	r2, [r7, #24]
 80012d2:	4013      	ands	r3, r2
 80012d4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80012d6:	683b      	ldr	r3, [r7, #0]
 80012d8:	68da      	ldr	r2, [r3, #12]
 80012da:	69fb      	ldr	r3, [r7, #28]
 80012dc:	005b      	lsls	r3, r3, #1
 80012de:	fa02 f303 	lsl.w	r3, r2, r3
 80012e2:	69ba      	ldr	r2, [r7, #24]
 80012e4:	4313      	orrs	r3, r2
 80012e6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	69ba      	ldr	r2, [r7, #24]
 80012ec:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	685b      	ldr	r3, [r3, #4]
 80012f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80012f4:	2201      	movs	r2, #1
 80012f6:	69fb      	ldr	r3, [r7, #28]
 80012f8:	fa02 f303 	lsl.w	r3, r2, r3
 80012fc:	43db      	mvns	r3, r3
 80012fe:	69ba      	ldr	r2, [r7, #24]
 8001300:	4013      	ands	r3, r2
 8001302:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001304:	683b      	ldr	r3, [r7, #0]
 8001306:	685b      	ldr	r3, [r3, #4]
 8001308:	091b      	lsrs	r3, r3, #4
 800130a:	f003 0201 	and.w	r2, r3, #1
 800130e:	69fb      	ldr	r3, [r7, #28]
 8001310:	fa02 f303 	lsl.w	r3, r2, r3
 8001314:	69ba      	ldr	r2, [r7, #24]
 8001316:	4313      	orrs	r3, r2
 8001318:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	69ba      	ldr	r2, [r7, #24]
 800131e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001320:	683b      	ldr	r3, [r7, #0]
 8001322:	685b      	ldr	r3, [r3, #4]
 8001324:	f003 0303 	and.w	r3, r3, #3
 8001328:	2b03      	cmp	r3, #3
 800132a:	d017      	beq.n	800135c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	68db      	ldr	r3, [r3, #12]
 8001330:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001332:	69fb      	ldr	r3, [r7, #28]
 8001334:	005b      	lsls	r3, r3, #1
 8001336:	2203      	movs	r2, #3
 8001338:	fa02 f303 	lsl.w	r3, r2, r3
 800133c:	43db      	mvns	r3, r3
 800133e:	69ba      	ldr	r2, [r7, #24]
 8001340:	4013      	ands	r3, r2
 8001342:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001344:	683b      	ldr	r3, [r7, #0]
 8001346:	689a      	ldr	r2, [r3, #8]
 8001348:	69fb      	ldr	r3, [r7, #28]
 800134a:	005b      	lsls	r3, r3, #1
 800134c:	fa02 f303 	lsl.w	r3, r2, r3
 8001350:	69ba      	ldr	r2, [r7, #24]
 8001352:	4313      	orrs	r3, r2
 8001354:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	69ba      	ldr	r2, [r7, #24]
 800135a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800135c:	683b      	ldr	r3, [r7, #0]
 800135e:	685b      	ldr	r3, [r3, #4]
 8001360:	f003 0303 	and.w	r3, r3, #3
 8001364:	2b02      	cmp	r3, #2
 8001366:	d123      	bne.n	80013b0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001368:	69fb      	ldr	r3, [r7, #28]
 800136a:	08da      	lsrs	r2, r3, #3
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	3208      	adds	r2, #8
 8001370:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001374:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001376:	69fb      	ldr	r3, [r7, #28]
 8001378:	f003 0307 	and.w	r3, r3, #7
 800137c:	009b      	lsls	r3, r3, #2
 800137e:	220f      	movs	r2, #15
 8001380:	fa02 f303 	lsl.w	r3, r2, r3
 8001384:	43db      	mvns	r3, r3
 8001386:	69ba      	ldr	r2, [r7, #24]
 8001388:	4013      	ands	r3, r2
 800138a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800138c:	683b      	ldr	r3, [r7, #0]
 800138e:	691a      	ldr	r2, [r3, #16]
 8001390:	69fb      	ldr	r3, [r7, #28]
 8001392:	f003 0307 	and.w	r3, r3, #7
 8001396:	009b      	lsls	r3, r3, #2
 8001398:	fa02 f303 	lsl.w	r3, r2, r3
 800139c:	69ba      	ldr	r2, [r7, #24]
 800139e:	4313      	orrs	r3, r2
 80013a0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80013a2:	69fb      	ldr	r3, [r7, #28]
 80013a4:	08da      	lsrs	r2, r3, #3
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	3208      	adds	r2, #8
 80013aa:	69b9      	ldr	r1, [r7, #24]
 80013ac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80013b6:	69fb      	ldr	r3, [r7, #28]
 80013b8:	005b      	lsls	r3, r3, #1
 80013ba:	2203      	movs	r2, #3
 80013bc:	fa02 f303 	lsl.w	r3, r2, r3
 80013c0:	43db      	mvns	r3, r3
 80013c2:	69ba      	ldr	r2, [r7, #24]
 80013c4:	4013      	ands	r3, r2
 80013c6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80013c8:	683b      	ldr	r3, [r7, #0]
 80013ca:	685b      	ldr	r3, [r3, #4]
 80013cc:	f003 0203 	and.w	r2, r3, #3
 80013d0:	69fb      	ldr	r3, [r7, #28]
 80013d2:	005b      	lsls	r3, r3, #1
 80013d4:	fa02 f303 	lsl.w	r3, r2, r3
 80013d8:	69ba      	ldr	r2, [r7, #24]
 80013da:	4313      	orrs	r3, r2
 80013dc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	69ba      	ldr	r2, [r7, #24]
 80013e2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80013e4:	683b      	ldr	r3, [r7, #0]
 80013e6:	685b      	ldr	r3, [r3, #4]
 80013e8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	f000 80b4 	beq.w	800155a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013f2:	2300      	movs	r3, #0
 80013f4:	60fb      	str	r3, [r7, #12]
 80013f6:	4b60      	ldr	r3, [pc, #384]	; (8001578 <HAL_GPIO_Init+0x30c>)
 80013f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013fa:	4a5f      	ldr	r2, [pc, #380]	; (8001578 <HAL_GPIO_Init+0x30c>)
 80013fc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001400:	6453      	str	r3, [r2, #68]	; 0x44
 8001402:	4b5d      	ldr	r3, [pc, #372]	; (8001578 <HAL_GPIO_Init+0x30c>)
 8001404:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001406:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800140a:	60fb      	str	r3, [r7, #12]
 800140c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800140e:	4a5b      	ldr	r2, [pc, #364]	; (800157c <HAL_GPIO_Init+0x310>)
 8001410:	69fb      	ldr	r3, [r7, #28]
 8001412:	089b      	lsrs	r3, r3, #2
 8001414:	3302      	adds	r3, #2
 8001416:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800141a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800141c:	69fb      	ldr	r3, [r7, #28]
 800141e:	f003 0303 	and.w	r3, r3, #3
 8001422:	009b      	lsls	r3, r3, #2
 8001424:	220f      	movs	r2, #15
 8001426:	fa02 f303 	lsl.w	r3, r2, r3
 800142a:	43db      	mvns	r3, r3
 800142c:	69ba      	ldr	r2, [r7, #24]
 800142e:	4013      	ands	r3, r2
 8001430:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	4a52      	ldr	r2, [pc, #328]	; (8001580 <HAL_GPIO_Init+0x314>)
 8001436:	4293      	cmp	r3, r2
 8001438:	d02b      	beq.n	8001492 <HAL_GPIO_Init+0x226>
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	4a51      	ldr	r2, [pc, #324]	; (8001584 <HAL_GPIO_Init+0x318>)
 800143e:	4293      	cmp	r3, r2
 8001440:	d025      	beq.n	800148e <HAL_GPIO_Init+0x222>
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	4a50      	ldr	r2, [pc, #320]	; (8001588 <HAL_GPIO_Init+0x31c>)
 8001446:	4293      	cmp	r3, r2
 8001448:	d01f      	beq.n	800148a <HAL_GPIO_Init+0x21e>
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	4a4f      	ldr	r2, [pc, #316]	; (800158c <HAL_GPIO_Init+0x320>)
 800144e:	4293      	cmp	r3, r2
 8001450:	d019      	beq.n	8001486 <HAL_GPIO_Init+0x21a>
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	4a4e      	ldr	r2, [pc, #312]	; (8001590 <HAL_GPIO_Init+0x324>)
 8001456:	4293      	cmp	r3, r2
 8001458:	d013      	beq.n	8001482 <HAL_GPIO_Init+0x216>
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	4a4d      	ldr	r2, [pc, #308]	; (8001594 <HAL_GPIO_Init+0x328>)
 800145e:	4293      	cmp	r3, r2
 8001460:	d00d      	beq.n	800147e <HAL_GPIO_Init+0x212>
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	4a4c      	ldr	r2, [pc, #304]	; (8001598 <HAL_GPIO_Init+0x32c>)
 8001466:	4293      	cmp	r3, r2
 8001468:	d007      	beq.n	800147a <HAL_GPIO_Init+0x20e>
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	4a4b      	ldr	r2, [pc, #300]	; (800159c <HAL_GPIO_Init+0x330>)
 800146e:	4293      	cmp	r3, r2
 8001470:	d101      	bne.n	8001476 <HAL_GPIO_Init+0x20a>
 8001472:	2307      	movs	r3, #7
 8001474:	e00e      	b.n	8001494 <HAL_GPIO_Init+0x228>
 8001476:	2308      	movs	r3, #8
 8001478:	e00c      	b.n	8001494 <HAL_GPIO_Init+0x228>
 800147a:	2306      	movs	r3, #6
 800147c:	e00a      	b.n	8001494 <HAL_GPIO_Init+0x228>
 800147e:	2305      	movs	r3, #5
 8001480:	e008      	b.n	8001494 <HAL_GPIO_Init+0x228>
 8001482:	2304      	movs	r3, #4
 8001484:	e006      	b.n	8001494 <HAL_GPIO_Init+0x228>
 8001486:	2303      	movs	r3, #3
 8001488:	e004      	b.n	8001494 <HAL_GPIO_Init+0x228>
 800148a:	2302      	movs	r3, #2
 800148c:	e002      	b.n	8001494 <HAL_GPIO_Init+0x228>
 800148e:	2301      	movs	r3, #1
 8001490:	e000      	b.n	8001494 <HAL_GPIO_Init+0x228>
 8001492:	2300      	movs	r3, #0
 8001494:	69fa      	ldr	r2, [r7, #28]
 8001496:	f002 0203 	and.w	r2, r2, #3
 800149a:	0092      	lsls	r2, r2, #2
 800149c:	4093      	lsls	r3, r2
 800149e:	69ba      	ldr	r2, [r7, #24]
 80014a0:	4313      	orrs	r3, r2
 80014a2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80014a4:	4935      	ldr	r1, [pc, #212]	; (800157c <HAL_GPIO_Init+0x310>)
 80014a6:	69fb      	ldr	r3, [r7, #28]
 80014a8:	089b      	lsrs	r3, r3, #2
 80014aa:	3302      	adds	r3, #2
 80014ac:	69ba      	ldr	r2, [r7, #24]
 80014ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80014b2:	4b3b      	ldr	r3, [pc, #236]	; (80015a0 <HAL_GPIO_Init+0x334>)
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014b8:	693b      	ldr	r3, [r7, #16]
 80014ba:	43db      	mvns	r3, r3
 80014bc:	69ba      	ldr	r2, [r7, #24]
 80014be:	4013      	ands	r3, r2
 80014c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80014c2:	683b      	ldr	r3, [r7, #0]
 80014c4:	685b      	ldr	r3, [r3, #4]
 80014c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d003      	beq.n	80014d6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80014ce:	69ba      	ldr	r2, [r7, #24]
 80014d0:	693b      	ldr	r3, [r7, #16]
 80014d2:	4313      	orrs	r3, r2
 80014d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80014d6:	4a32      	ldr	r2, [pc, #200]	; (80015a0 <HAL_GPIO_Init+0x334>)
 80014d8:	69bb      	ldr	r3, [r7, #24]
 80014da:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80014dc:	4b30      	ldr	r3, [pc, #192]	; (80015a0 <HAL_GPIO_Init+0x334>)
 80014de:	685b      	ldr	r3, [r3, #4]
 80014e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014e2:	693b      	ldr	r3, [r7, #16]
 80014e4:	43db      	mvns	r3, r3
 80014e6:	69ba      	ldr	r2, [r7, #24]
 80014e8:	4013      	ands	r3, r2
 80014ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80014ec:	683b      	ldr	r3, [r7, #0]
 80014ee:	685b      	ldr	r3, [r3, #4]
 80014f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d003      	beq.n	8001500 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80014f8:	69ba      	ldr	r2, [r7, #24]
 80014fa:	693b      	ldr	r3, [r7, #16]
 80014fc:	4313      	orrs	r3, r2
 80014fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001500:	4a27      	ldr	r2, [pc, #156]	; (80015a0 <HAL_GPIO_Init+0x334>)
 8001502:	69bb      	ldr	r3, [r7, #24]
 8001504:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001506:	4b26      	ldr	r3, [pc, #152]	; (80015a0 <HAL_GPIO_Init+0x334>)
 8001508:	689b      	ldr	r3, [r3, #8]
 800150a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800150c:	693b      	ldr	r3, [r7, #16]
 800150e:	43db      	mvns	r3, r3
 8001510:	69ba      	ldr	r2, [r7, #24]
 8001512:	4013      	ands	r3, r2
 8001514:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001516:	683b      	ldr	r3, [r7, #0]
 8001518:	685b      	ldr	r3, [r3, #4]
 800151a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800151e:	2b00      	cmp	r3, #0
 8001520:	d003      	beq.n	800152a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001522:	69ba      	ldr	r2, [r7, #24]
 8001524:	693b      	ldr	r3, [r7, #16]
 8001526:	4313      	orrs	r3, r2
 8001528:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800152a:	4a1d      	ldr	r2, [pc, #116]	; (80015a0 <HAL_GPIO_Init+0x334>)
 800152c:	69bb      	ldr	r3, [r7, #24]
 800152e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001530:	4b1b      	ldr	r3, [pc, #108]	; (80015a0 <HAL_GPIO_Init+0x334>)
 8001532:	68db      	ldr	r3, [r3, #12]
 8001534:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001536:	693b      	ldr	r3, [r7, #16]
 8001538:	43db      	mvns	r3, r3
 800153a:	69ba      	ldr	r2, [r7, #24]
 800153c:	4013      	ands	r3, r2
 800153e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001540:	683b      	ldr	r3, [r7, #0]
 8001542:	685b      	ldr	r3, [r3, #4]
 8001544:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001548:	2b00      	cmp	r3, #0
 800154a:	d003      	beq.n	8001554 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800154c:	69ba      	ldr	r2, [r7, #24]
 800154e:	693b      	ldr	r3, [r7, #16]
 8001550:	4313      	orrs	r3, r2
 8001552:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001554:	4a12      	ldr	r2, [pc, #72]	; (80015a0 <HAL_GPIO_Init+0x334>)
 8001556:	69bb      	ldr	r3, [r7, #24]
 8001558:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800155a:	69fb      	ldr	r3, [r7, #28]
 800155c:	3301      	adds	r3, #1
 800155e:	61fb      	str	r3, [r7, #28]
 8001560:	69fb      	ldr	r3, [r7, #28]
 8001562:	2b0f      	cmp	r3, #15
 8001564:	f67f ae90 	bls.w	8001288 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001568:	bf00      	nop
 800156a:	bf00      	nop
 800156c:	3724      	adds	r7, #36	; 0x24
 800156e:	46bd      	mov	sp, r7
 8001570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001574:	4770      	bx	lr
 8001576:	bf00      	nop
 8001578:	40023800 	.word	0x40023800
 800157c:	40013800 	.word	0x40013800
 8001580:	40020000 	.word	0x40020000
 8001584:	40020400 	.word	0x40020400
 8001588:	40020800 	.word	0x40020800
 800158c:	40020c00 	.word	0x40020c00
 8001590:	40021000 	.word	0x40021000
 8001594:	40021400 	.word	0x40021400
 8001598:	40021800 	.word	0x40021800
 800159c:	40021c00 	.word	0x40021c00
 80015a0:	40013c00 	.word	0x40013c00

080015a4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b086      	sub	sp, #24
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d101      	bne.n	80015b6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80015b2:	2301      	movs	r3, #1
 80015b4:	e264      	b.n	8001a80 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	f003 0301 	and.w	r3, r3, #1
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d075      	beq.n	80016ae <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80015c2:	4ba3      	ldr	r3, [pc, #652]	; (8001850 <HAL_RCC_OscConfig+0x2ac>)
 80015c4:	689b      	ldr	r3, [r3, #8]
 80015c6:	f003 030c 	and.w	r3, r3, #12
 80015ca:	2b04      	cmp	r3, #4
 80015cc:	d00c      	beq.n	80015e8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80015ce:	4ba0      	ldr	r3, [pc, #640]	; (8001850 <HAL_RCC_OscConfig+0x2ac>)
 80015d0:	689b      	ldr	r3, [r3, #8]
 80015d2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80015d6:	2b08      	cmp	r3, #8
 80015d8:	d112      	bne.n	8001600 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80015da:	4b9d      	ldr	r3, [pc, #628]	; (8001850 <HAL_RCC_OscConfig+0x2ac>)
 80015dc:	685b      	ldr	r3, [r3, #4]
 80015de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80015e2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80015e6:	d10b      	bne.n	8001600 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015e8:	4b99      	ldr	r3, [pc, #612]	; (8001850 <HAL_RCC_OscConfig+0x2ac>)
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d05b      	beq.n	80016ac <HAL_RCC_OscConfig+0x108>
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	685b      	ldr	r3, [r3, #4]
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d157      	bne.n	80016ac <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80015fc:	2301      	movs	r3, #1
 80015fe:	e23f      	b.n	8001a80 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	685b      	ldr	r3, [r3, #4]
 8001604:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001608:	d106      	bne.n	8001618 <HAL_RCC_OscConfig+0x74>
 800160a:	4b91      	ldr	r3, [pc, #580]	; (8001850 <HAL_RCC_OscConfig+0x2ac>)
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	4a90      	ldr	r2, [pc, #576]	; (8001850 <HAL_RCC_OscConfig+0x2ac>)
 8001610:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001614:	6013      	str	r3, [r2, #0]
 8001616:	e01d      	b.n	8001654 <HAL_RCC_OscConfig+0xb0>
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	685b      	ldr	r3, [r3, #4]
 800161c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001620:	d10c      	bne.n	800163c <HAL_RCC_OscConfig+0x98>
 8001622:	4b8b      	ldr	r3, [pc, #556]	; (8001850 <HAL_RCC_OscConfig+0x2ac>)
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	4a8a      	ldr	r2, [pc, #552]	; (8001850 <HAL_RCC_OscConfig+0x2ac>)
 8001628:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800162c:	6013      	str	r3, [r2, #0]
 800162e:	4b88      	ldr	r3, [pc, #544]	; (8001850 <HAL_RCC_OscConfig+0x2ac>)
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	4a87      	ldr	r2, [pc, #540]	; (8001850 <HAL_RCC_OscConfig+0x2ac>)
 8001634:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001638:	6013      	str	r3, [r2, #0]
 800163a:	e00b      	b.n	8001654 <HAL_RCC_OscConfig+0xb0>
 800163c:	4b84      	ldr	r3, [pc, #528]	; (8001850 <HAL_RCC_OscConfig+0x2ac>)
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	4a83      	ldr	r2, [pc, #524]	; (8001850 <HAL_RCC_OscConfig+0x2ac>)
 8001642:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001646:	6013      	str	r3, [r2, #0]
 8001648:	4b81      	ldr	r3, [pc, #516]	; (8001850 <HAL_RCC_OscConfig+0x2ac>)
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	4a80      	ldr	r2, [pc, #512]	; (8001850 <HAL_RCC_OscConfig+0x2ac>)
 800164e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001652:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	685b      	ldr	r3, [r3, #4]
 8001658:	2b00      	cmp	r3, #0
 800165a:	d013      	beq.n	8001684 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800165c:	f7ff fcf4 	bl	8001048 <HAL_GetTick>
 8001660:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001662:	e008      	b.n	8001676 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001664:	f7ff fcf0 	bl	8001048 <HAL_GetTick>
 8001668:	4602      	mov	r2, r0
 800166a:	693b      	ldr	r3, [r7, #16]
 800166c:	1ad3      	subs	r3, r2, r3
 800166e:	2b64      	cmp	r3, #100	; 0x64
 8001670:	d901      	bls.n	8001676 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001672:	2303      	movs	r3, #3
 8001674:	e204      	b.n	8001a80 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001676:	4b76      	ldr	r3, [pc, #472]	; (8001850 <HAL_RCC_OscConfig+0x2ac>)
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800167e:	2b00      	cmp	r3, #0
 8001680:	d0f0      	beq.n	8001664 <HAL_RCC_OscConfig+0xc0>
 8001682:	e014      	b.n	80016ae <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001684:	f7ff fce0 	bl	8001048 <HAL_GetTick>
 8001688:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800168a:	e008      	b.n	800169e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800168c:	f7ff fcdc 	bl	8001048 <HAL_GetTick>
 8001690:	4602      	mov	r2, r0
 8001692:	693b      	ldr	r3, [r7, #16]
 8001694:	1ad3      	subs	r3, r2, r3
 8001696:	2b64      	cmp	r3, #100	; 0x64
 8001698:	d901      	bls.n	800169e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800169a:	2303      	movs	r3, #3
 800169c:	e1f0      	b.n	8001a80 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800169e:	4b6c      	ldr	r3, [pc, #432]	; (8001850 <HAL_RCC_OscConfig+0x2ac>)
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d1f0      	bne.n	800168c <HAL_RCC_OscConfig+0xe8>
 80016aa:	e000      	b.n	80016ae <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016ac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	f003 0302 	and.w	r3, r3, #2
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d063      	beq.n	8001782 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80016ba:	4b65      	ldr	r3, [pc, #404]	; (8001850 <HAL_RCC_OscConfig+0x2ac>)
 80016bc:	689b      	ldr	r3, [r3, #8]
 80016be:	f003 030c 	and.w	r3, r3, #12
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d00b      	beq.n	80016de <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80016c6:	4b62      	ldr	r3, [pc, #392]	; (8001850 <HAL_RCC_OscConfig+0x2ac>)
 80016c8:	689b      	ldr	r3, [r3, #8]
 80016ca:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80016ce:	2b08      	cmp	r3, #8
 80016d0:	d11c      	bne.n	800170c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80016d2:	4b5f      	ldr	r3, [pc, #380]	; (8001850 <HAL_RCC_OscConfig+0x2ac>)
 80016d4:	685b      	ldr	r3, [r3, #4]
 80016d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d116      	bne.n	800170c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80016de:	4b5c      	ldr	r3, [pc, #368]	; (8001850 <HAL_RCC_OscConfig+0x2ac>)
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	f003 0302 	and.w	r3, r3, #2
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d005      	beq.n	80016f6 <HAL_RCC_OscConfig+0x152>
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	68db      	ldr	r3, [r3, #12]
 80016ee:	2b01      	cmp	r3, #1
 80016f0:	d001      	beq.n	80016f6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80016f2:	2301      	movs	r3, #1
 80016f4:	e1c4      	b.n	8001a80 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016f6:	4b56      	ldr	r3, [pc, #344]	; (8001850 <HAL_RCC_OscConfig+0x2ac>)
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	691b      	ldr	r3, [r3, #16]
 8001702:	00db      	lsls	r3, r3, #3
 8001704:	4952      	ldr	r1, [pc, #328]	; (8001850 <HAL_RCC_OscConfig+0x2ac>)
 8001706:	4313      	orrs	r3, r2
 8001708:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800170a:	e03a      	b.n	8001782 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	68db      	ldr	r3, [r3, #12]
 8001710:	2b00      	cmp	r3, #0
 8001712:	d020      	beq.n	8001756 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001714:	4b4f      	ldr	r3, [pc, #316]	; (8001854 <HAL_RCC_OscConfig+0x2b0>)
 8001716:	2201      	movs	r2, #1
 8001718:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800171a:	f7ff fc95 	bl	8001048 <HAL_GetTick>
 800171e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001720:	e008      	b.n	8001734 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001722:	f7ff fc91 	bl	8001048 <HAL_GetTick>
 8001726:	4602      	mov	r2, r0
 8001728:	693b      	ldr	r3, [r7, #16]
 800172a:	1ad3      	subs	r3, r2, r3
 800172c:	2b02      	cmp	r3, #2
 800172e:	d901      	bls.n	8001734 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001730:	2303      	movs	r3, #3
 8001732:	e1a5      	b.n	8001a80 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001734:	4b46      	ldr	r3, [pc, #280]	; (8001850 <HAL_RCC_OscConfig+0x2ac>)
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	f003 0302 	and.w	r3, r3, #2
 800173c:	2b00      	cmp	r3, #0
 800173e:	d0f0      	beq.n	8001722 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001740:	4b43      	ldr	r3, [pc, #268]	; (8001850 <HAL_RCC_OscConfig+0x2ac>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	691b      	ldr	r3, [r3, #16]
 800174c:	00db      	lsls	r3, r3, #3
 800174e:	4940      	ldr	r1, [pc, #256]	; (8001850 <HAL_RCC_OscConfig+0x2ac>)
 8001750:	4313      	orrs	r3, r2
 8001752:	600b      	str	r3, [r1, #0]
 8001754:	e015      	b.n	8001782 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001756:	4b3f      	ldr	r3, [pc, #252]	; (8001854 <HAL_RCC_OscConfig+0x2b0>)
 8001758:	2200      	movs	r2, #0
 800175a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800175c:	f7ff fc74 	bl	8001048 <HAL_GetTick>
 8001760:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001762:	e008      	b.n	8001776 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001764:	f7ff fc70 	bl	8001048 <HAL_GetTick>
 8001768:	4602      	mov	r2, r0
 800176a:	693b      	ldr	r3, [r7, #16]
 800176c:	1ad3      	subs	r3, r2, r3
 800176e:	2b02      	cmp	r3, #2
 8001770:	d901      	bls.n	8001776 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001772:	2303      	movs	r3, #3
 8001774:	e184      	b.n	8001a80 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001776:	4b36      	ldr	r3, [pc, #216]	; (8001850 <HAL_RCC_OscConfig+0x2ac>)
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	f003 0302 	and.w	r3, r3, #2
 800177e:	2b00      	cmp	r3, #0
 8001780:	d1f0      	bne.n	8001764 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	f003 0308 	and.w	r3, r3, #8
 800178a:	2b00      	cmp	r3, #0
 800178c:	d030      	beq.n	80017f0 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	695b      	ldr	r3, [r3, #20]
 8001792:	2b00      	cmp	r3, #0
 8001794:	d016      	beq.n	80017c4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001796:	4b30      	ldr	r3, [pc, #192]	; (8001858 <HAL_RCC_OscConfig+0x2b4>)
 8001798:	2201      	movs	r2, #1
 800179a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800179c:	f7ff fc54 	bl	8001048 <HAL_GetTick>
 80017a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80017a2:	e008      	b.n	80017b6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80017a4:	f7ff fc50 	bl	8001048 <HAL_GetTick>
 80017a8:	4602      	mov	r2, r0
 80017aa:	693b      	ldr	r3, [r7, #16]
 80017ac:	1ad3      	subs	r3, r2, r3
 80017ae:	2b02      	cmp	r3, #2
 80017b0:	d901      	bls.n	80017b6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80017b2:	2303      	movs	r3, #3
 80017b4:	e164      	b.n	8001a80 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80017b6:	4b26      	ldr	r3, [pc, #152]	; (8001850 <HAL_RCC_OscConfig+0x2ac>)
 80017b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80017ba:	f003 0302 	and.w	r3, r3, #2
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d0f0      	beq.n	80017a4 <HAL_RCC_OscConfig+0x200>
 80017c2:	e015      	b.n	80017f0 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80017c4:	4b24      	ldr	r3, [pc, #144]	; (8001858 <HAL_RCC_OscConfig+0x2b4>)
 80017c6:	2200      	movs	r2, #0
 80017c8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017ca:	f7ff fc3d 	bl	8001048 <HAL_GetTick>
 80017ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80017d0:	e008      	b.n	80017e4 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80017d2:	f7ff fc39 	bl	8001048 <HAL_GetTick>
 80017d6:	4602      	mov	r2, r0
 80017d8:	693b      	ldr	r3, [r7, #16]
 80017da:	1ad3      	subs	r3, r2, r3
 80017dc:	2b02      	cmp	r3, #2
 80017de:	d901      	bls.n	80017e4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80017e0:	2303      	movs	r3, #3
 80017e2:	e14d      	b.n	8001a80 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80017e4:	4b1a      	ldr	r3, [pc, #104]	; (8001850 <HAL_RCC_OscConfig+0x2ac>)
 80017e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80017e8:	f003 0302 	and.w	r3, r3, #2
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d1f0      	bne.n	80017d2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	f003 0304 	and.w	r3, r3, #4
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	f000 80a0 	beq.w	800193e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80017fe:	2300      	movs	r3, #0
 8001800:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001802:	4b13      	ldr	r3, [pc, #76]	; (8001850 <HAL_RCC_OscConfig+0x2ac>)
 8001804:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001806:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800180a:	2b00      	cmp	r3, #0
 800180c:	d10f      	bne.n	800182e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800180e:	2300      	movs	r3, #0
 8001810:	60bb      	str	r3, [r7, #8]
 8001812:	4b0f      	ldr	r3, [pc, #60]	; (8001850 <HAL_RCC_OscConfig+0x2ac>)
 8001814:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001816:	4a0e      	ldr	r2, [pc, #56]	; (8001850 <HAL_RCC_OscConfig+0x2ac>)
 8001818:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800181c:	6413      	str	r3, [r2, #64]	; 0x40
 800181e:	4b0c      	ldr	r3, [pc, #48]	; (8001850 <HAL_RCC_OscConfig+0x2ac>)
 8001820:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001822:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001826:	60bb      	str	r3, [r7, #8]
 8001828:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800182a:	2301      	movs	r3, #1
 800182c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800182e:	4b0b      	ldr	r3, [pc, #44]	; (800185c <HAL_RCC_OscConfig+0x2b8>)
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001836:	2b00      	cmp	r3, #0
 8001838:	d121      	bne.n	800187e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800183a:	4b08      	ldr	r3, [pc, #32]	; (800185c <HAL_RCC_OscConfig+0x2b8>)
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	4a07      	ldr	r2, [pc, #28]	; (800185c <HAL_RCC_OscConfig+0x2b8>)
 8001840:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001844:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001846:	f7ff fbff 	bl	8001048 <HAL_GetTick>
 800184a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800184c:	e011      	b.n	8001872 <HAL_RCC_OscConfig+0x2ce>
 800184e:	bf00      	nop
 8001850:	40023800 	.word	0x40023800
 8001854:	42470000 	.word	0x42470000
 8001858:	42470e80 	.word	0x42470e80
 800185c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001860:	f7ff fbf2 	bl	8001048 <HAL_GetTick>
 8001864:	4602      	mov	r2, r0
 8001866:	693b      	ldr	r3, [r7, #16]
 8001868:	1ad3      	subs	r3, r2, r3
 800186a:	2b02      	cmp	r3, #2
 800186c:	d901      	bls.n	8001872 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800186e:	2303      	movs	r3, #3
 8001870:	e106      	b.n	8001a80 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001872:	4b85      	ldr	r3, [pc, #532]	; (8001a88 <HAL_RCC_OscConfig+0x4e4>)
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800187a:	2b00      	cmp	r3, #0
 800187c:	d0f0      	beq.n	8001860 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	689b      	ldr	r3, [r3, #8]
 8001882:	2b01      	cmp	r3, #1
 8001884:	d106      	bne.n	8001894 <HAL_RCC_OscConfig+0x2f0>
 8001886:	4b81      	ldr	r3, [pc, #516]	; (8001a8c <HAL_RCC_OscConfig+0x4e8>)
 8001888:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800188a:	4a80      	ldr	r2, [pc, #512]	; (8001a8c <HAL_RCC_OscConfig+0x4e8>)
 800188c:	f043 0301 	orr.w	r3, r3, #1
 8001890:	6713      	str	r3, [r2, #112]	; 0x70
 8001892:	e01c      	b.n	80018ce <HAL_RCC_OscConfig+0x32a>
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	689b      	ldr	r3, [r3, #8]
 8001898:	2b05      	cmp	r3, #5
 800189a:	d10c      	bne.n	80018b6 <HAL_RCC_OscConfig+0x312>
 800189c:	4b7b      	ldr	r3, [pc, #492]	; (8001a8c <HAL_RCC_OscConfig+0x4e8>)
 800189e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018a0:	4a7a      	ldr	r2, [pc, #488]	; (8001a8c <HAL_RCC_OscConfig+0x4e8>)
 80018a2:	f043 0304 	orr.w	r3, r3, #4
 80018a6:	6713      	str	r3, [r2, #112]	; 0x70
 80018a8:	4b78      	ldr	r3, [pc, #480]	; (8001a8c <HAL_RCC_OscConfig+0x4e8>)
 80018aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018ac:	4a77      	ldr	r2, [pc, #476]	; (8001a8c <HAL_RCC_OscConfig+0x4e8>)
 80018ae:	f043 0301 	orr.w	r3, r3, #1
 80018b2:	6713      	str	r3, [r2, #112]	; 0x70
 80018b4:	e00b      	b.n	80018ce <HAL_RCC_OscConfig+0x32a>
 80018b6:	4b75      	ldr	r3, [pc, #468]	; (8001a8c <HAL_RCC_OscConfig+0x4e8>)
 80018b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018ba:	4a74      	ldr	r2, [pc, #464]	; (8001a8c <HAL_RCC_OscConfig+0x4e8>)
 80018bc:	f023 0301 	bic.w	r3, r3, #1
 80018c0:	6713      	str	r3, [r2, #112]	; 0x70
 80018c2:	4b72      	ldr	r3, [pc, #456]	; (8001a8c <HAL_RCC_OscConfig+0x4e8>)
 80018c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018c6:	4a71      	ldr	r2, [pc, #452]	; (8001a8c <HAL_RCC_OscConfig+0x4e8>)
 80018c8:	f023 0304 	bic.w	r3, r3, #4
 80018cc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	689b      	ldr	r3, [r3, #8]
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d015      	beq.n	8001902 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018d6:	f7ff fbb7 	bl	8001048 <HAL_GetTick>
 80018da:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80018dc:	e00a      	b.n	80018f4 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80018de:	f7ff fbb3 	bl	8001048 <HAL_GetTick>
 80018e2:	4602      	mov	r2, r0
 80018e4:	693b      	ldr	r3, [r7, #16]
 80018e6:	1ad3      	subs	r3, r2, r3
 80018e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80018ec:	4293      	cmp	r3, r2
 80018ee:	d901      	bls.n	80018f4 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80018f0:	2303      	movs	r3, #3
 80018f2:	e0c5      	b.n	8001a80 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80018f4:	4b65      	ldr	r3, [pc, #404]	; (8001a8c <HAL_RCC_OscConfig+0x4e8>)
 80018f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018f8:	f003 0302 	and.w	r3, r3, #2
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d0ee      	beq.n	80018de <HAL_RCC_OscConfig+0x33a>
 8001900:	e014      	b.n	800192c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001902:	f7ff fba1 	bl	8001048 <HAL_GetTick>
 8001906:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001908:	e00a      	b.n	8001920 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800190a:	f7ff fb9d 	bl	8001048 <HAL_GetTick>
 800190e:	4602      	mov	r2, r0
 8001910:	693b      	ldr	r3, [r7, #16]
 8001912:	1ad3      	subs	r3, r2, r3
 8001914:	f241 3288 	movw	r2, #5000	; 0x1388
 8001918:	4293      	cmp	r3, r2
 800191a:	d901      	bls.n	8001920 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800191c:	2303      	movs	r3, #3
 800191e:	e0af      	b.n	8001a80 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001920:	4b5a      	ldr	r3, [pc, #360]	; (8001a8c <HAL_RCC_OscConfig+0x4e8>)
 8001922:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001924:	f003 0302 	and.w	r3, r3, #2
 8001928:	2b00      	cmp	r3, #0
 800192a:	d1ee      	bne.n	800190a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800192c:	7dfb      	ldrb	r3, [r7, #23]
 800192e:	2b01      	cmp	r3, #1
 8001930:	d105      	bne.n	800193e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001932:	4b56      	ldr	r3, [pc, #344]	; (8001a8c <HAL_RCC_OscConfig+0x4e8>)
 8001934:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001936:	4a55      	ldr	r2, [pc, #340]	; (8001a8c <HAL_RCC_OscConfig+0x4e8>)
 8001938:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800193c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	699b      	ldr	r3, [r3, #24]
 8001942:	2b00      	cmp	r3, #0
 8001944:	f000 809b 	beq.w	8001a7e <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001948:	4b50      	ldr	r3, [pc, #320]	; (8001a8c <HAL_RCC_OscConfig+0x4e8>)
 800194a:	689b      	ldr	r3, [r3, #8]
 800194c:	f003 030c 	and.w	r3, r3, #12
 8001950:	2b08      	cmp	r3, #8
 8001952:	d05c      	beq.n	8001a0e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	699b      	ldr	r3, [r3, #24]
 8001958:	2b02      	cmp	r3, #2
 800195a:	d141      	bne.n	80019e0 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800195c:	4b4c      	ldr	r3, [pc, #304]	; (8001a90 <HAL_RCC_OscConfig+0x4ec>)
 800195e:	2200      	movs	r2, #0
 8001960:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001962:	f7ff fb71 	bl	8001048 <HAL_GetTick>
 8001966:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001968:	e008      	b.n	800197c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800196a:	f7ff fb6d 	bl	8001048 <HAL_GetTick>
 800196e:	4602      	mov	r2, r0
 8001970:	693b      	ldr	r3, [r7, #16]
 8001972:	1ad3      	subs	r3, r2, r3
 8001974:	2b02      	cmp	r3, #2
 8001976:	d901      	bls.n	800197c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001978:	2303      	movs	r3, #3
 800197a:	e081      	b.n	8001a80 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800197c:	4b43      	ldr	r3, [pc, #268]	; (8001a8c <HAL_RCC_OscConfig+0x4e8>)
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001984:	2b00      	cmp	r3, #0
 8001986:	d1f0      	bne.n	800196a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	69da      	ldr	r2, [r3, #28]
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	6a1b      	ldr	r3, [r3, #32]
 8001990:	431a      	orrs	r2, r3
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001996:	019b      	lsls	r3, r3, #6
 8001998:	431a      	orrs	r2, r3
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800199e:	085b      	lsrs	r3, r3, #1
 80019a0:	3b01      	subs	r3, #1
 80019a2:	041b      	lsls	r3, r3, #16
 80019a4:	431a      	orrs	r2, r3
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019aa:	061b      	lsls	r3, r3, #24
 80019ac:	4937      	ldr	r1, [pc, #220]	; (8001a8c <HAL_RCC_OscConfig+0x4e8>)
 80019ae:	4313      	orrs	r3, r2
 80019b0:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80019b2:	4b37      	ldr	r3, [pc, #220]	; (8001a90 <HAL_RCC_OscConfig+0x4ec>)
 80019b4:	2201      	movs	r2, #1
 80019b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019b8:	f7ff fb46 	bl	8001048 <HAL_GetTick>
 80019bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80019be:	e008      	b.n	80019d2 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80019c0:	f7ff fb42 	bl	8001048 <HAL_GetTick>
 80019c4:	4602      	mov	r2, r0
 80019c6:	693b      	ldr	r3, [r7, #16]
 80019c8:	1ad3      	subs	r3, r2, r3
 80019ca:	2b02      	cmp	r3, #2
 80019cc:	d901      	bls.n	80019d2 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80019ce:	2303      	movs	r3, #3
 80019d0:	e056      	b.n	8001a80 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80019d2:	4b2e      	ldr	r3, [pc, #184]	; (8001a8c <HAL_RCC_OscConfig+0x4e8>)
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d0f0      	beq.n	80019c0 <HAL_RCC_OscConfig+0x41c>
 80019de:	e04e      	b.n	8001a7e <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019e0:	4b2b      	ldr	r3, [pc, #172]	; (8001a90 <HAL_RCC_OscConfig+0x4ec>)
 80019e2:	2200      	movs	r2, #0
 80019e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019e6:	f7ff fb2f 	bl	8001048 <HAL_GetTick>
 80019ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80019ec:	e008      	b.n	8001a00 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80019ee:	f7ff fb2b 	bl	8001048 <HAL_GetTick>
 80019f2:	4602      	mov	r2, r0
 80019f4:	693b      	ldr	r3, [r7, #16]
 80019f6:	1ad3      	subs	r3, r2, r3
 80019f8:	2b02      	cmp	r3, #2
 80019fa:	d901      	bls.n	8001a00 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80019fc:	2303      	movs	r3, #3
 80019fe:	e03f      	b.n	8001a80 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a00:	4b22      	ldr	r3, [pc, #136]	; (8001a8c <HAL_RCC_OscConfig+0x4e8>)
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d1f0      	bne.n	80019ee <HAL_RCC_OscConfig+0x44a>
 8001a0c:	e037      	b.n	8001a7e <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	699b      	ldr	r3, [r3, #24]
 8001a12:	2b01      	cmp	r3, #1
 8001a14:	d101      	bne.n	8001a1a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8001a16:	2301      	movs	r3, #1
 8001a18:	e032      	b.n	8001a80 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001a1a:	4b1c      	ldr	r3, [pc, #112]	; (8001a8c <HAL_RCC_OscConfig+0x4e8>)
 8001a1c:	685b      	ldr	r3, [r3, #4]
 8001a1e:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	699b      	ldr	r3, [r3, #24]
 8001a24:	2b01      	cmp	r3, #1
 8001a26:	d028      	beq.n	8001a7a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001a32:	429a      	cmp	r2, r3
 8001a34:	d121      	bne.n	8001a7a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a40:	429a      	cmp	r2, r3
 8001a42:	d11a      	bne.n	8001a7a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001a44:	68fa      	ldr	r2, [r7, #12]
 8001a46:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001a4a:	4013      	ands	r3, r2
 8001a4c:	687a      	ldr	r2, [r7, #4]
 8001a4e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001a50:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001a52:	4293      	cmp	r3, r2
 8001a54:	d111      	bne.n	8001a7a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a60:	085b      	lsrs	r3, r3, #1
 8001a62:	3b01      	subs	r3, #1
 8001a64:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001a66:	429a      	cmp	r2, r3
 8001a68:	d107      	bne.n	8001a7a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a74:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001a76:	429a      	cmp	r2, r3
 8001a78:	d001      	beq.n	8001a7e <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8001a7a:	2301      	movs	r3, #1
 8001a7c:	e000      	b.n	8001a80 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8001a7e:	2300      	movs	r3, #0
}
 8001a80:	4618      	mov	r0, r3
 8001a82:	3718      	adds	r7, #24
 8001a84:	46bd      	mov	sp, r7
 8001a86:	bd80      	pop	{r7, pc}
 8001a88:	40007000 	.word	0x40007000
 8001a8c:	40023800 	.word	0x40023800
 8001a90:	42470060 	.word	0x42470060

08001a94 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b084      	sub	sp, #16
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
 8001a9c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d101      	bne.n	8001aa8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001aa4:	2301      	movs	r3, #1
 8001aa6:	e0cc      	b.n	8001c42 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001aa8:	4b68      	ldr	r3, [pc, #416]	; (8001c4c <HAL_RCC_ClockConfig+0x1b8>)
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	f003 0307 	and.w	r3, r3, #7
 8001ab0:	683a      	ldr	r2, [r7, #0]
 8001ab2:	429a      	cmp	r2, r3
 8001ab4:	d90c      	bls.n	8001ad0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ab6:	4b65      	ldr	r3, [pc, #404]	; (8001c4c <HAL_RCC_ClockConfig+0x1b8>)
 8001ab8:	683a      	ldr	r2, [r7, #0]
 8001aba:	b2d2      	uxtb	r2, r2
 8001abc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001abe:	4b63      	ldr	r3, [pc, #396]	; (8001c4c <HAL_RCC_ClockConfig+0x1b8>)
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	f003 0307 	and.w	r3, r3, #7
 8001ac6:	683a      	ldr	r2, [r7, #0]
 8001ac8:	429a      	cmp	r2, r3
 8001aca:	d001      	beq.n	8001ad0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001acc:	2301      	movs	r3, #1
 8001ace:	e0b8      	b.n	8001c42 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	f003 0302 	and.w	r3, r3, #2
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d020      	beq.n	8001b1e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	f003 0304 	and.w	r3, r3, #4
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d005      	beq.n	8001af4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001ae8:	4b59      	ldr	r3, [pc, #356]	; (8001c50 <HAL_RCC_ClockConfig+0x1bc>)
 8001aea:	689b      	ldr	r3, [r3, #8]
 8001aec:	4a58      	ldr	r2, [pc, #352]	; (8001c50 <HAL_RCC_ClockConfig+0x1bc>)
 8001aee:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001af2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	f003 0308 	and.w	r3, r3, #8
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d005      	beq.n	8001b0c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001b00:	4b53      	ldr	r3, [pc, #332]	; (8001c50 <HAL_RCC_ClockConfig+0x1bc>)
 8001b02:	689b      	ldr	r3, [r3, #8]
 8001b04:	4a52      	ldr	r2, [pc, #328]	; (8001c50 <HAL_RCC_ClockConfig+0x1bc>)
 8001b06:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001b0a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b0c:	4b50      	ldr	r3, [pc, #320]	; (8001c50 <HAL_RCC_ClockConfig+0x1bc>)
 8001b0e:	689b      	ldr	r3, [r3, #8]
 8001b10:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	689b      	ldr	r3, [r3, #8]
 8001b18:	494d      	ldr	r1, [pc, #308]	; (8001c50 <HAL_RCC_ClockConfig+0x1bc>)
 8001b1a:	4313      	orrs	r3, r2
 8001b1c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	f003 0301 	and.w	r3, r3, #1
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d044      	beq.n	8001bb4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	685b      	ldr	r3, [r3, #4]
 8001b2e:	2b01      	cmp	r3, #1
 8001b30:	d107      	bne.n	8001b42 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b32:	4b47      	ldr	r3, [pc, #284]	; (8001c50 <HAL_RCC_ClockConfig+0x1bc>)
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d119      	bne.n	8001b72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b3e:	2301      	movs	r3, #1
 8001b40:	e07f      	b.n	8001c42 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	685b      	ldr	r3, [r3, #4]
 8001b46:	2b02      	cmp	r3, #2
 8001b48:	d003      	beq.n	8001b52 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001b4e:	2b03      	cmp	r3, #3
 8001b50:	d107      	bne.n	8001b62 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b52:	4b3f      	ldr	r3, [pc, #252]	; (8001c50 <HAL_RCC_ClockConfig+0x1bc>)
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d109      	bne.n	8001b72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b5e:	2301      	movs	r3, #1
 8001b60:	e06f      	b.n	8001c42 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b62:	4b3b      	ldr	r3, [pc, #236]	; (8001c50 <HAL_RCC_ClockConfig+0x1bc>)
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	f003 0302 	and.w	r3, r3, #2
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d101      	bne.n	8001b72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b6e:	2301      	movs	r3, #1
 8001b70:	e067      	b.n	8001c42 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001b72:	4b37      	ldr	r3, [pc, #220]	; (8001c50 <HAL_RCC_ClockConfig+0x1bc>)
 8001b74:	689b      	ldr	r3, [r3, #8]
 8001b76:	f023 0203 	bic.w	r2, r3, #3
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	685b      	ldr	r3, [r3, #4]
 8001b7e:	4934      	ldr	r1, [pc, #208]	; (8001c50 <HAL_RCC_ClockConfig+0x1bc>)
 8001b80:	4313      	orrs	r3, r2
 8001b82:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001b84:	f7ff fa60 	bl	8001048 <HAL_GetTick>
 8001b88:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b8a:	e00a      	b.n	8001ba2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b8c:	f7ff fa5c 	bl	8001048 <HAL_GetTick>
 8001b90:	4602      	mov	r2, r0
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	1ad3      	subs	r3, r2, r3
 8001b96:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b9a:	4293      	cmp	r3, r2
 8001b9c:	d901      	bls.n	8001ba2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001b9e:	2303      	movs	r3, #3
 8001ba0:	e04f      	b.n	8001c42 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ba2:	4b2b      	ldr	r3, [pc, #172]	; (8001c50 <HAL_RCC_ClockConfig+0x1bc>)
 8001ba4:	689b      	ldr	r3, [r3, #8]
 8001ba6:	f003 020c 	and.w	r2, r3, #12
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	685b      	ldr	r3, [r3, #4]
 8001bae:	009b      	lsls	r3, r3, #2
 8001bb0:	429a      	cmp	r2, r3
 8001bb2:	d1eb      	bne.n	8001b8c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001bb4:	4b25      	ldr	r3, [pc, #148]	; (8001c4c <HAL_RCC_ClockConfig+0x1b8>)
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	f003 0307 	and.w	r3, r3, #7
 8001bbc:	683a      	ldr	r2, [r7, #0]
 8001bbe:	429a      	cmp	r2, r3
 8001bc0:	d20c      	bcs.n	8001bdc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bc2:	4b22      	ldr	r3, [pc, #136]	; (8001c4c <HAL_RCC_ClockConfig+0x1b8>)
 8001bc4:	683a      	ldr	r2, [r7, #0]
 8001bc6:	b2d2      	uxtb	r2, r2
 8001bc8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bca:	4b20      	ldr	r3, [pc, #128]	; (8001c4c <HAL_RCC_ClockConfig+0x1b8>)
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f003 0307 	and.w	r3, r3, #7
 8001bd2:	683a      	ldr	r2, [r7, #0]
 8001bd4:	429a      	cmp	r2, r3
 8001bd6:	d001      	beq.n	8001bdc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001bd8:	2301      	movs	r3, #1
 8001bda:	e032      	b.n	8001c42 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	f003 0304 	and.w	r3, r3, #4
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d008      	beq.n	8001bfa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001be8:	4b19      	ldr	r3, [pc, #100]	; (8001c50 <HAL_RCC_ClockConfig+0x1bc>)
 8001bea:	689b      	ldr	r3, [r3, #8]
 8001bec:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	68db      	ldr	r3, [r3, #12]
 8001bf4:	4916      	ldr	r1, [pc, #88]	; (8001c50 <HAL_RCC_ClockConfig+0x1bc>)
 8001bf6:	4313      	orrs	r3, r2
 8001bf8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	f003 0308 	and.w	r3, r3, #8
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d009      	beq.n	8001c1a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001c06:	4b12      	ldr	r3, [pc, #72]	; (8001c50 <HAL_RCC_ClockConfig+0x1bc>)
 8001c08:	689b      	ldr	r3, [r3, #8]
 8001c0a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	691b      	ldr	r3, [r3, #16]
 8001c12:	00db      	lsls	r3, r3, #3
 8001c14:	490e      	ldr	r1, [pc, #56]	; (8001c50 <HAL_RCC_ClockConfig+0x1bc>)
 8001c16:	4313      	orrs	r3, r2
 8001c18:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001c1a:	f000 f821 	bl	8001c60 <HAL_RCC_GetSysClockFreq>
 8001c1e:	4602      	mov	r2, r0
 8001c20:	4b0b      	ldr	r3, [pc, #44]	; (8001c50 <HAL_RCC_ClockConfig+0x1bc>)
 8001c22:	689b      	ldr	r3, [r3, #8]
 8001c24:	091b      	lsrs	r3, r3, #4
 8001c26:	f003 030f 	and.w	r3, r3, #15
 8001c2a:	490a      	ldr	r1, [pc, #40]	; (8001c54 <HAL_RCC_ClockConfig+0x1c0>)
 8001c2c:	5ccb      	ldrb	r3, [r1, r3]
 8001c2e:	fa22 f303 	lsr.w	r3, r2, r3
 8001c32:	4a09      	ldr	r2, [pc, #36]	; (8001c58 <HAL_RCC_ClockConfig+0x1c4>)
 8001c34:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001c36:	4b09      	ldr	r3, [pc, #36]	; (8001c5c <HAL_RCC_ClockConfig+0x1c8>)
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	f7ff f8cc 	bl	8000dd8 <HAL_InitTick>

  return HAL_OK;
 8001c40:	2300      	movs	r3, #0
}
 8001c42:	4618      	mov	r0, r3
 8001c44:	3710      	adds	r7, #16
 8001c46:	46bd      	mov	sp, r7
 8001c48:	bd80      	pop	{r7, pc}
 8001c4a:	bf00      	nop
 8001c4c:	40023c00 	.word	0x40023c00
 8001c50:	40023800 	.word	0x40023800
 8001c54:	08004258 	.word	0x08004258
 8001c58:	20000000 	.word	0x20000000
 8001c5c:	20000004 	.word	0x20000004

08001c60 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c60:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001c64:	b084      	sub	sp, #16
 8001c66:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001c68:	2300      	movs	r3, #0
 8001c6a:	607b      	str	r3, [r7, #4]
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	60fb      	str	r3, [r7, #12]
 8001c70:	2300      	movs	r3, #0
 8001c72:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8001c74:	2300      	movs	r3, #0
 8001c76:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001c78:	4b67      	ldr	r3, [pc, #412]	; (8001e18 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001c7a:	689b      	ldr	r3, [r3, #8]
 8001c7c:	f003 030c 	and.w	r3, r3, #12
 8001c80:	2b08      	cmp	r3, #8
 8001c82:	d00d      	beq.n	8001ca0 <HAL_RCC_GetSysClockFreq+0x40>
 8001c84:	2b08      	cmp	r3, #8
 8001c86:	f200 80bd 	bhi.w	8001e04 <HAL_RCC_GetSysClockFreq+0x1a4>
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d002      	beq.n	8001c94 <HAL_RCC_GetSysClockFreq+0x34>
 8001c8e:	2b04      	cmp	r3, #4
 8001c90:	d003      	beq.n	8001c9a <HAL_RCC_GetSysClockFreq+0x3a>
 8001c92:	e0b7      	b.n	8001e04 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001c94:	4b61      	ldr	r3, [pc, #388]	; (8001e1c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8001c96:	60bb      	str	r3, [r7, #8]
       break;
 8001c98:	e0b7      	b.n	8001e0a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001c9a:	4b61      	ldr	r3, [pc, #388]	; (8001e20 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8001c9c:	60bb      	str	r3, [r7, #8]
      break;
 8001c9e:	e0b4      	b.n	8001e0a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001ca0:	4b5d      	ldr	r3, [pc, #372]	; (8001e18 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001ca2:	685b      	ldr	r3, [r3, #4]
 8001ca4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001ca8:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001caa:	4b5b      	ldr	r3, [pc, #364]	; (8001e18 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001cac:	685b      	ldr	r3, [r3, #4]
 8001cae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d04d      	beq.n	8001d52 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001cb6:	4b58      	ldr	r3, [pc, #352]	; (8001e18 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001cb8:	685b      	ldr	r3, [r3, #4]
 8001cba:	099b      	lsrs	r3, r3, #6
 8001cbc:	461a      	mov	r2, r3
 8001cbe:	f04f 0300 	mov.w	r3, #0
 8001cc2:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001cc6:	f04f 0100 	mov.w	r1, #0
 8001cca:	ea02 0800 	and.w	r8, r2, r0
 8001cce:	ea03 0901 	and.w	r9, r3, r1
 8001cd2:	4640      	mov	r0, r8
 8001cd4:	4649      	mov	r1, r9
 8001cd6:	f04f 0200 	mov.w	r2, #0
 8001cda:	f04f 0300 	mov.w	r3, #0
 8001cde:	014b      	lsls	r3, r1, #5
 8001ce0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001ce4:	0142      	lsls	r2, r0, #5
 8001ce6:	4610      	mov	r0, r2
 8001ce8:	4619      	mov	r1, r3
 8001cea:	ebb0 0008 	subs.w	r0, r0, r8
 8001cee:	eb61 0109 	sbc.w	r1, r1, r9
 8001cf2:	f04f 0200 	mov.w	r2, #0
 8001cf6:	f04f 0300 	mov.w	r3, #0
 8001cfa:	018b      	lsls	r3, r1, #6
 8001cfc:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001d00:	0182      	lsls	r2, r0, #6
 8001d02:	1a12      	subs	r2, r2, r0
 8001d04:	eb63 0301 	sbc.w	r3, r3, r1
 8001d08:	f04f 0000 	mov.w	r0, #0
 8001d0c:	f04f 0100 	mov.w	r1, #0
 8001d10:	00d9      	lsls	r1, r3, #3
 8001d12:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001d16:	00d0      	lsls	r0, r2, #3
 8001d18:	4602      	mov	r2, r0
 8001d1a:	460b      	mov	r3, r1
 8001d1c:	eb12 0208 	adds.w	r2, r2, r8
 8001d20:	eb43 0309 	adc.w	r3, r3, r9
 8001d24:	f04f 0000 	mov.w	r0, #0
 8001d28:	f04f 0100 	mov.w	r1, #0
 8001d2c:	0259      	lsls	r1, r3, #9
 8001d2e:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8001d32:	0250      	lsls	r0, r2, #9
 8001d34:	4602      	mov	r2, r0
 8001d36:	460b      	mov	r3, r1
 8001d38:	4610      	mov	r0, r2
 8001d3a:	4619      	mov	r1, r3
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	461a      	mov	r2, r3
 8001d40:	f04f 0300 	mov.w	r3, #0
 8001d44:	f7fe fa9c 	bl	8000280 <__aeabi_uldivmod>
 8001d48:	4602      	mov	r2, r0
 8001d4a:	460b      	mov	r3, r1
 8001d4c:	4613      	mov	r3, r2
 8001d4e:	60fb      	str	r3, [r7, #12]
 8001d50:	e04a      	b.n	8001de8 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001d52:	4b31      	ldr	r3, [pc, #196]	; (8001e18 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001d54:	685b      	ldr	r3, [r3, #4]
 8001d56:	099b      	lsrs	r3, r3, #6
 8001d58:	461a      	mov	r2, r3
 8001d5a:	f04f 0300 	mov.w	r3, #0
 8001d5e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001d62:	f04f 0100 	mov.w	r1, #0
 8001d66:	ea02 0400 	and.w	r4, r2, r0
 8001d6a:	ea03 0501 	and.w	r5, r3, r1
 8001d6e:	4620      	mov	r0, r4
 8001d70:	4629      	mov	r1, r5
 8001d72:	f04f 0200 	mov.w	r2, #0
 8001d76:	f04f 0300 	mov.w	r3, #0
 8001d7a:	014b      	lsls	r3, r1, #5
 8001d7c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001d80:	0142      	lsls	r2, r0, #5
 8001d82:	4610      	mov	r0, r2
 8001d84:	4619      	mov	r1, r3
 8001d86:	1b00      	subs	r0, r0, r4
 8001d88:	eb61 0105 	sbc.w	r1, r1, r5
 8001d8c:	f04f 0200 	mov.w	r2, #0
 8001d90:	f04f 0300 	mov.w	r3, #0
 8001d94:	018b      	lsls	r3, r1, #6
 8001d96:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001d9a:	0182      	lsls	r2, r0, #6
 8001d9c:	1a12      	subs	r2, r2, r0
 8001d9e:	eb63 0301 	sbc.w	r3, r3, r1
 8001da2:	f04f 0000 	mov.w	r0, #0
 8001da6:	f04f 0100 	mov.w	r1, #0
 8001daa:	00d9      	lsls	r1, r3, #3
 8001dac:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001db0:	00d0      	lsls	r0, r2, #3
 8001db2:	4602      	mov	r2, r0
 8001db4:	460b      	mov	r3, r1
 8001db6:	1912      	adds	r2, r2, r4
 8001db8:	eb45 0303 	adc.w	r3, r5, r3
 8001dbc:	f04f 0000 	mov.w	r0, #0
 8001dc0:	f04f 0100 	mov.w	r1, #0
 8001dc4:	0299      	lsls	r1, r3, #10
 8001dc6:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8001dca:	0290      	lsls	r0, r2, #10
 8001dcc:	4602      	mov	r2, r0
 8001dce:	460b      	mov	r3, r1
 8001dd0:	4610      	mov	r0, r2
 8001dd2:	4619      	mov	r1, r3
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	461a      	mov	r2, r3
 8001dd8:	f04f 0300 	mov.w	r3, #0
 8001ddc:	f7fe fa50 	bl	8000280 <__aeabi_uldivmod>
 8001de0:	4602      	mov	r2, r0
 8001de2:	460b      	mov	r3, r1
 8001de4:	4613      	mov	r3, r2
 8001de6:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001de8:	4b0b      	ldr	r3, [pc, #44]	; (8001e18 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001dea:	685b      	ldr	r3, [r3, #4]
 8001dec:	0c1b      	lsrs	r3, r3, #16
 8001dee:	f003 0303 	and.w	r3, r3, #3
 8001df2:	3301      	adds	r3, #1
 8001df4:	005b      	lsls	r3, r3, #1
 8001df6:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001df8:	68fa      	ldr	r2, [r7, #12]
 8001dfa:	683b      	ldr	r3, [r7, #0]
 8001dfc:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e00:	60bb      	str	r3, [r7, #8]
      break;
 8001e02:	e002      	b.n	8001e0a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001e04:	4b05      	ldr	r3, [pc, #20]	; (8001e1c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8001e06:	60bb      	str	r3, [r7, #8]
      break;
 8001e08:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001e0a:	68bb      	ldr	r3, [r7, #8]
}
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	3710      	adds	r7, #16
 8001e10:	46bd      	mov	sp, r7
 8001e12:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001e16:	bf00      	nop
 8001e18:	40023800 	.word	0x40023800
 8001e1c:	00f42400 	.word	0x00f42400
 8001e20:	007a1200 	.word	0x007a1200

08001e24 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001e24:	b480      	push	{r7}
 8001e26:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001e28:	4b03      	ldr	r3, [pc, #12]	; (8001e38 <HAL_RCC_GetHCLKFreq+0x14>)
 8001e2a:	681b      	ldr	r3, [r3, #0]
}
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e34:	4770      	bx	lr
 8001e36:	bf00      	nop
 8001e38:	20000000 	.word	0x20000000

08001e3c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001e40:	f7ff fff0 	bl	8001e24 <HAL_RCC_GetHCLKFreq>
 8001e44:	4602      	mov	r2, r0
 8001e46:	4b05      	ldr	r3, [pc, #20]	; (8001e5c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001e48:	689b      	ldr	r3, [r3, #8]
 8001e4a:	0a9b      	lsrs	r3, r3, #10
 8001e4c:	f003 0307 	and.w	r3, r3, #7
 8001e50:	4903      	ldr	r1, [pc, #12]	; (8001e60 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001e52:	5ccb      	ldrb	r3, [r1, r3]
 8001e54:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e58:	4618      	mov	r0, r3
 8001e5a:	bd80      	pop	{r7, pc}
 8001e5c:	40023800 	.word	0x40023800
 8001e60:	08004268 	.word	0x08004268

08001e64 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001e68:	f7ff ffdc 	bl	8001e24 <HAL_RCC_GetHCLKFreq>
 8001e6c:	4602      	mov	r2, r0
 8001e6e:	4b05      	ldr	r3, [pc, #20]	; (8001e84 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001e70:	689b      	ldr	r3, [r3, #8]
 8001e72:	0b5b      	lsrs	r3, r3, #13
 8001e74:	f003 0307 	and.w	r3, r3, #7
 8001e78:	4903      	ldr	r1, [pc, #12]	; (8001e88 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001e7a:	5ccb      	ldrb	r3, [r1, r3]
 8001e7c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e80:	4618      	mov	r0, r3
 8001e82:	bd80      	pop	{r7, pc}
 8001e84:	40023800 	.word	0x40023800
 8001e88:	08004268 	.word	0x08004268

08001e8c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001e8c:	b480      	push	{r7}
 8001e8e:	b083      	sub	sp, #12
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
 8001e94:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	220f      	movs	r2, #15
 8001e9a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001e9c:	4b12      	ldr	r3, [pc, #72]	; (8001ee8 <HAL_RCC_GetClockConfig+0x5c>)
 8001e9e:	689b      	ldr	r3, [r3, #8]
 8001ea0:	f003 0203 	and.w	r2, r3, #3
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001ea8:	4b0f      	ldr	r3, [pc, #60]	; (8001ee8 <HAL_RCC_GetClockConfig+0x5c>)
 8001eaa:	689b      	ldr	r3, [r3, #8]
 8001eac:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001eb4:	4b0c      	ldr	r3, [pc, #48]	; (8001ee8 <HAL_RCC_GetClockConfig+0x5c>)
 8001eb6:	689b      	ldr	r3, [r3, #8]
 8001eb8:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001ec0:	4b09      	ldr	r3, [pc, #36]	; (8001ee8 <HAL_RCC_GetClockConfig+0x5c>)
 8001ec2:	689b      	ldr	r3, [r3, #8]
 8001ec4:	08db      	lsrs	r3, r3, #3
 8001ec6:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001ece:	4b07      	ldr	r3, [pc, #28]	; (8001eec <HAL_RCC_GetClockConfig+0x60>)
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f003 0207 	and.w	r2, r3, #7
 8001ed6:	683b      	ldr	r3, [r7, #0]
 8001ed8:	601a      	str	r2, [r3, #0]
}
 8001eda:	bf00      	nop
 8001edc:	370c      	adds	r7, #12
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee4:	4770      	bx	lr
 8001ee6:	bf00      	nop
 8001ee8:	40023800 	.word	0x40023800
 8001eec:	40023c00 	.word	0x40023c00

08001ef0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b082      	sub	sp, #8
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d101      	bne.n	8001f02 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001efe:	2301      	movs	r3, #1
 8001f00:	e041      	b.n	8001f86 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f08:	b2db      	uxtb	r3, r3
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d106      	bne.n	8001f1c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	2200      	movs	r2, #0
 8001f12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001f16:	6878      	ldr	r0, [r7, #4]
 8001f18:	f000 f839 	bl	8001f8e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	2202      	movs	r2, #2
 8001f20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681a      	ldr	r2, [r3, #0]
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	3304      	adds	r3, #4
 8001f2c:	4619      	mov	r1, r3
 8001f2e:	4610      	mov	r0, r2
 8001f30:	f000 f9d8 	bl	80022e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	2201      	movs	r2, #1
 8001f38:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	2201      	movs	r2, #1
 8001f40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	2201      	movs	r2, #1
 8001f48:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	2201      	movs	r2, #1
 8001f50:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	2201      	movs	r2, #1
 8001f58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	2201      	movs	r2, #1
 8001f60:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	2201      	movs	r2, #1
 8001f68:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	2201      	movs	r2, #1
 8001f70:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	2201      	movs	r2, #1
 8001f78:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	2201      	movs	r2, #1
 8001f80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001f84:	2300      	movs	r3, #0
}
 8001f86:	4618      	mov	r0, r3
 8001f88:	3708      	adds	r7, #8
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	bd80      	pop	{r7, pc}

08001f8e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001f8e:	b480      	push	{r7}
 8001f90:	b083      	sub	sp, #12
 8001f92:	af00      	add	r7, sp, #0
 8001f94:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001f96:	bf00      	nop
 8001f98:	370c      	adds	r7, #12
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa0:	4770      	bx	lr
	...

08001fa4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001fa4:	b480      	push	{r7}
 8001fa6:	b085      	sub	sp, #20
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001fb2:	b2db      	uxtb	r3, r3
 8001fb4:	2b01      	cmp	r3, #1
 8001fb6:	d001      	beq.n	8001fbc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001fb8:	2301      	movs	r3, #1
 8001fba:	e04e      	b.n	800205a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	2202      	movs	r2, #2
 8001fc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	68da      	ldr	r2, [r3, #12]
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f042 0201 	orr.w	r2, r2, #1
 8001fd2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	4a23      	ldr	r2, [pc, #140]	; (8002068 <HAL_TIM_Base_Start_IT+0xc4>)
 8001fda:	4293      	cmp	r3, r2
 8001fdc:	d022      	beq.n	8002024 <HAL_TIM_Base_Start_IT+0x80>
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001fe6:	d01d      	beq.n	8002024 <HAL_TIM_Base_Start_IT+0x80>
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	4a1f      	ldr	r2, [pc, #124]	; (800206c <HAL_TIM_Base_Start_IT+0xc8>)
 8001fee:	4293      	cmp	r3, r2
 8001ff0:	d018      	beq.n	8002024 <HAL_TIM_Base_Start_IT+0x80>
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	4a1e      	ldr	r2, [pc, #120]	; (8002070 <HAL_TIM_Base_Start_IT+0xcc>)
 8001ff8:	4293      	cmp	r3, r2
 8001ffa:	d013      	beq.n	8002024 <HAL_TIM_Base_Start_IT+0x80>
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	4a1c      	ldr	r2, [pc, #112]	; (8002074 <HAL_TIM_Base_Start_IT+0xd0>)
 8002002:	4293      	cmp	r3, r2
 8002004:	d00e      	beq.n	8002024 <HAL_TIM_Base_Start_IT+0x80>
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	4a1b      	ldr	r2, [pc, #108]	; (8002078 <HAL_TIM_Base_Start_IT+0xd4>)
 800200c:	4293      	cmp	r3, r2
 800200e:	d009      	beq.n	8002024 <HAL_TIM_Base_Start_IT+0x80>
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	4a19      	ldr	r2, [pc, #100]	; (800207c <HAL_TIM_Base_Start_IT+0xd8>)
 8002016:	4293      	cmp	r3, r2
 8002018:	d004      	beq.n	8002024 <HAL_TIM_Base_Start_IT+0x80>
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	4a18      	ldr	r2, [pc, #96]	; (8002080 <HAL_TIM_Base_Start_IT+0xdc>)
 8002020:	4293      	cmp	r3, r2
 8002022:	d111      	bne.n	8002048 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	689b      	ldr	r3, [r3, #8]
 800202a:	f003 0307 	and.w	r3, r3, #7
 800202e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	2b06      	cmp	r3, #6
 8002034:	d010      	beq.n	8002058 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	681a      	ldr	r2, [r3, #0]
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	f042 0201 	orr.w	r2, r2, #1
 8002044:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002046:	e007      	b.n	8002058 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	681a      	ldr	r2, [r3, #0]
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f042 0201 	orr.w	r2, r2, #1
 8002056:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002058:	2300      	movs	r3, #0
}
 800205a:	4618      	mov	r0, r3
 800205c:	3714      	adds	r7, #20
 800205e:	46bd      	mov	sp, r7
 8002060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002064:	4770      	bx	lr
 8002066:	bf00      	nop
 8002068:	40010000 	.word	0x40010000
 800206c:	40000400 	.word	0x40000400
 8002070:	40000800 	.word	0x40000800
 8002074:	40000c00 	.word	0x40000c00
 8002078:	40010400 	.word	0x40010400
 800207c:	40014000 	.word	0x40014000
 8002080:	40001800 	.word	0x40001800

08002084 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	b082      	sub	sp, #8
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	691b      	ldr	r3, [r3, #16]
 8002092:	f003 0302 	and.w	r3, r3, #2
 8002096:	2b02      	cmp	r3, #2
 8002098:	d122      	bne.n	80020e0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	68db      	ldr	r3, [r3, #12]
 80020a0:	f003 0302 	and.w	r3, r3, #2
 80020a4:	2b02      	cmp	r3, #2
 80020a6:	d11b      	bne.n	80020e0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f06f 0202 	mvn.w	r2, #2
 80020b0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	2201      	movs	r2, #1
 80020b6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	699b      	ldr	r3, [r3, #24]
 80020be:	f003 0303 	and.w	r3, r3, #3
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d003      	beq.n	80020ce <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80020c6:	6878      	ldr	r0, [r7, #4]
 80020c8:	f000 f8ee 	bl	80022a8 <HAL_TIM_IC_CaptureCallback>
 80020cc:	e005      	b.n	80020da <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80020ce:	6878      	ldr	r0, [r7, #4]
 80020d0:	f000 f8e0 	bl	8002294 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80020d4:	6878      	ldr	r0, [r7, #4]
 80020d6:	f000 f8f1 	bl	80022bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	2200      	movs	r2, #0
 80020de:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	691b      	ldr	r3, [r3, #16]
 80020e6:	f003 0304 	and.w	r3, r3, #4
 80020ea:	2b04      	cmp	r3, #4
 80020ec:	d122      	bne.n	8002134 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	68db      	ldr	r3, [r3, #12]
 80020f4:	f003 0304 	and.w	r3, r3, #4
 80020f8:	2b04      	cmp	r3, #4
 80020fa:	d11b      	bne.n	8002134 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f06f 0204 	mvn.w	r2, #4
 8002104:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	2202      	movs	r2, #2
 800210a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	699b      	ldr	r3, [r3, #24]
 8002112:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002116:	2b00      	cmp	r3, #0
 8002118:	d003      	beq.n	8002122 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800211a:	6878      	ldr	r0, [r7, #4]
 800211c:	f000 f8c4 	bl	80022a8 <HAL_TIM_IC_CaptureCallback>
 8002120:	e005      	b.n	800212e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002122:	6878      	ldr	r0, [r7, #4]
 8002124:	f000 f8b6 	bl	8002294 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002128:	6878      	ldr	r0, [r7, #4]
 800212a:	f000 f8c7 	bl	80022bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	2200      	movs	r2, #0
 8002132:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	691b      	ldr	r3, [r3, #16]
 800213a:	f003 0308 	and.w	r3, r3, #8
 800213e:	2b08      	cmp	r3, #8
 8002140:	d122      	bne.n	8002188 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	68db      	ldr	r3, [r3, #12]
 8002148:	f003 0308 	and.w	r3, r3, #8
 800214c:	2b08      	cmp	r3, #8
 800214e:	d11b      	bne.n	8002188 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f06f 0208 	mvn.w	r2, #8
 8002158:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	2204      	movs	r2, #4
 800215e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	69db      	ldr	r3, [r3, #28]
 8002166:	f003 0303 	and.w	r3, r3, #3
 800216a:	2b00      	cmp	r3, #0
 800216c:	d003      	beq.n	8002176 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800216e:	6878      	ldr	r0, [r7, #4]
 8002170:	f000 f89a 	bl	80022a8 <HAL_TIM_IC_CaptureCallback>
 8002174:	e005      	b.n	8002182 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002176:	6878      	ldr	r0, [r7, #4]
 8002178:	f000 f88c 	bl	8002294 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800217c:	6878      	ldr	r0, [r7, #4]
 800217e:	f000 f89d 	bl	80022bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	2200      	movs	r2, #0
 8002186:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	691b      	ldr	r3, [r3, #16]
 800218e:	f003 0310 	and.w	r3, r3, #16
 8002192:	2b10      	cmp	r3, #16
 8002194:	d122      	bne.n	80021dc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	68db      	ldr	r3, [r3, #12]
 800219c:	f003 0310 	and.w	r3, r3, #16
 80021a0:	2b10      	cmp	r3, #16
 80021a2:	d11b      	bne.n	80021dc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f06f 0210 	mvn.w	r2, #16
 80021ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	2208      	movs	r2, #8
 80021b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	69db      	ldr	r3, [r3, #28]
 80021ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d003      	beq.n	80021ca <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80021c2:	6878      	ldr	r0, [r7, #4]
 80021c4:	f000 f870 	bl	80022a8 <HAL_TIM_IC_CaptureCallback>
 80021c8:	e005      	b.n	80021d6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80021ca:	6878      	ldr	r0, [r7, #4]
 80021cc:	f000 f862 	bl	8002294 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80021d0:	6878      	ldr	r0, [r7, #4]
 80021d2:	f000 f873 	bl	80022bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	2200      	movs	r2, #0
 80021da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	691b      	ldr	r3, [r3, #16]
 80021e2:	f003 0301 	and.w	r3, r3, #1
 80021e6:	2b01      	cmp	r3, #1
 80021e8:	d10e      	bne.n	8002208 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	68db      	ldr	r3, [r3, #12]
 80021f0:	f003 0301 	and.w	r3, r3, #1
 80021f4:	2b01      	cmp	r3, #1
 80021f6:	d107      	bne.n	8002208 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f06f 0201 	mvn.w	r2, #1
 8002200:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002202:	6878      	ldr	r0, [r7, #4]
 8002204:	f7fe fcf4 	bl	8000bf0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	691b      	ldr	r3, [r3, #16]
 800220e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002212:	2b80      	cmp	r3, #128	; 0x80
 8002214:	d10e      	bne.n	8002234 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	68db      	ldr	r3, [r3, #12]
 800221c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002220:	2b80      	cmp	r3, #128	; 0x80
 8002222:	d107      	bne.n	8002234 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800222c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800222e:	6878      	ldr	r0, [r7, #4]
 8002230:	f000 f902 	bl	8002438 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	691b      	ldr	r3, [r3, #16]
 800223a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800223e:	2b40      	cmp	r3, #64	; 0x40
 8002240:	d10e      	bne.n	8002260 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	68db      	ldr	r3, [r3, #12]
 8002248:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800224c:	2b40      	cmp	r3, #64	; 0x40
 800224e:	d107      	bne.n	8002260 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002258:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800225a:	6878      	ldr	r0, [r7, #4]
 800225c:	f000 f838 	bl	80022d0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	691b      	ldr	r3, [r3, #16]
 8002266:	f003 0320 	and.w	r3, r3, #32
 800226a:	2b20      	cmp	r3, #32
 800226c:	d10e      	bne.n	800228c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	68db      	ldr	r3, [r3, #12]
 8002274:	f003 0320 	and.w	r3, r3, #32
 8002278:	2b20      	cmp	r3, #32
 800227a:	d107      	bne.n	800228c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f06f 0220 	mvn.w	r2, #32
 8002284:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002286:	6878      	ldr	r0, [r7, #4]
 8002288:	f000 f8cc 	bl	8002424 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800228c:	bf00      	nop
 800228e:	3708      	adds	r7, #8
 8002290:	46bd      	mov	sp, r7
 8002292:	bd80      	pop	{r7, pc}

08002294 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002294:	b480      	push	{r7}
 8002296:	b083      	sub	sp, #12
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800229c:	bf00      	nop
 800229e:	370c      	adds	r7, #12
 80022a0:	46bd      	mov	sp, r7
 80022a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a6:	4770      	bx	lr

080022a8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80022a8:	b480      	push	{r7}
 80022aa:	b083      	sub	sp, #12
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80022b0:	bf00      	nop
 80022b2:	370c      	adds	r7, #12
 80022b4:	46bd      	mov	sp, r7
 80022b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ba:	4770      	bx	lr

080022bc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80022bc:	b480      	push	{r7}
 80022be:	b083      	sub	sp, #12
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80022c4:	bf00      	nop
 80022c6:	370c      	adds	r7, #12
 80022c8:	46bd      	mov	sp, r7
 80022ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ce:	4770      	bx	lr

080022d0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80022d0:	b480      	push	{r7}
 80022d2:	b083      	sub	sp, #12
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80022d8:	bf00      	nop
 80022da:	370c      	adds	r7, #12
 80022dc:	46bd      	mov	sp, r7
 80022de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e2:	4770      	bx	lr

080022e4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80022e4:	b480      	push	{r7}
 80022e6:	b085      	sub	sp, #20
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
 80022ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	4a40      	ldr	r2, [pc, #256]	; (80023f8 <TIM_Base_SetConfig+0x114>)
 80022f8:	4293      	cmp	r3, r2
 80022fa:	d013      	beq.n	8002324 <TIM_Base_SetConfig+0x40>
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002302:	d00f      	beq.n	8002324 <TIM_Base_SetConfig+0x40>
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	4a3d      	ldr	r2, [pc, #244]	; (80023fc <TIM_Base_SetConfig+0x118>)
 8002308:	4293      	cmp	r3, r2
 800230a:	d00b      	beq.n	8002324 <TIM_Base_SetConfig+0x40>
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	4a3c      	ldr	r2, [pc, #240]	; (8002400 <TIM_Base_SetConfig+0x11c>)
 8002310:	4293      	cmp	r3, r2
 8002312:	d007      	beq.n	8002324 <TIM_Base_SetConfig+0x40>
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	4a3b      	ldr	r2, [pc, #236]	; (8002404 <TIM_Base_SetConfig+0x120>)
 8002318:	4293      	cmp	r3, r2
 800231a:	d003      	beq.n	8002324 <TIM_Base_SetConfig+0x40>
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	4a3a      	ldr	r2, [pc, #232]	; (8002408 <TIM_Base_SetConfig+0x124>)
 8002320:	4293      	cmp	r3, r2
 8002322:	d108      	bne.n	8002336 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800232a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800232c:	683b      	ldr	r3, [r7, #0]
 800232e:	685b      	ldr	r3, [r3, #4]
 8002330:	68fa      	ldr	r2, [r7, #12]
 8002332:	4313      	orrs	r3, r2
 8002334:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	4a2f      	ldr	r2, [pc, #188]	; (80023f8 <TIM_Base_SetConfig+0x114>)
 800233a:	4293      	cmp	r3, r2
 800233c:	d02b      	beq.n	8002396 <TIM_Base_SetConfig+0xb2>
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002344:	d027      	beq.n	8002396 <TIM_Base_SetConfig+0xb2>
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	4a2c      	ldr	r2, [pc, #176]	; (80023fc <TIM_Base_SetConfig+0x118>)
 800234a:	4293      	cmp	r3, r2
 800234c:	d023      	beq.n	8002396 <TIM_Base_SetConfig+0xb2>
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	4a2b      	ldr	r2, [pc, #172]	; (8002400 <TIM_Base_SetConfig+0x11c>)
 8002352:	4293      	cmp	r3, r2
 8002354:	d01f      	beq.n	8002396 <TIM_Base_SetConfig+0xb2>
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	4a2a      	ldr	r2, [pc, #168]	; (8002404 <TIM_Base_SetConfig+0x120>)
 800235a:	4293      	cmp	r3, r2
 800235c:	d01b      	beq.n	8002396 <TIM_Base_SetConfig+0xb2>
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	4a29      	ldr	r2, [pc, #164]	; (8002408 <TIM_Base_SetConfig+0x124>)
 8002362:	4293      	cmp	r3, r2
 8002364:	d017      	beq.n	8002396 <TIM_Base_SetConfig+0xb2>
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	4a28      	ldr	r2, [pc, #160]	; (800240c <TIM_Base_SetConfig+0x128>)
 800236a:	4293      	cmp	r3, r2
 800236c:	d013      	beq.n	8002396 <TIM_Base_SetConfig+0xb2>
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	4a27      	ldr	r2, [pc, #156]	; (8002410 <TIM_Base_SetConfig+0x12c>)
 8002372:	4293      	cmp	r3, r2
 8002374:	d00f      	beq.n	8002396 <TIM_Base_SetConfig+0xb2>
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	4a26      	ldr	r2, [pc, #152]	; (8002414 <TIM_Base_SetConfig+0x130>)
 800237a:	4293      	cmp	r3, r2
 800237c:	d00b      	beq.n	8002396 <TIM_Base_SetConfig+0xb2>
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	4a25      	ldr	r2, [pc, #148]	; (8002418 <TIM_Base_SetConfig+0x134>)
 8002382:	4293      	cmp	r3, r2
 8002384:	d007      	beq.n	8002396 <TIM_Base_SetConfig+0xb2>
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	4a24      	ldr	r2, [pc, #144]	; (800241c <TIM_Base_SetConfig+0x138>)
 800238a:	4293      	cmp	r3, r2
 800238c:	d003      	beq.n	8002396 <TIM_Base_SetConfig+0xb2>
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	4a23      	ldr	r2, [pc, #140]	; (8002420 <TIM_Base_SetConfig+0x13c>)
 8002392:	4293      	cmp	r3, r2
 8002394:	d108      	bne.n	80023a8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800239c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800239e:	683b      	ldr	r3, [r7, #0]
 80023a0:	68db      	ldr	r3, [r3, #12]
 80023a2:	68fa      	ldr	r2, [r7, #12]
 80023a4:	4313      	orrs	r3, r2
 80023a6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80023ae:	683b      	ldr	r3, [r7, #0]
 80023b0:	695b      	ldr	r3, [r3, #20]
 80023b2:	4313      	orrs	r3, r2
 80023b4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	68fa      	ldr	r2, [r7, #12]
 80023ba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80023bc:	683b      	ldr	r3, [r7, #0]
 80023be:	689a      	ldr	r2, [r3, #8]
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80023c4:	683b      	ldr	r3, [r7, #0]
 80023c6:	681a      	ldr	r2, [r3, #0]
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	4a0a      	ldr	r2, [pc, #40]	; (80023f8 <TIM_Base_SetConfig+0x114>)
 80023d0:	4293      	cmp	r3, r2
 80023d2:	d003      	beq.n	80023dc <TIM_Base_SetConfig+0xf8>
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	4a0c      	ldr	r2, [pc, #48]	; (8002408 <TIM_Base_SetConfig+0x124>)
 80023d8:	4293      	cmp	r3, r2
 80023da:	d103      	bne.n	80023e4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80023dc:	683b      	ldr	r3, [r7, #0]
 80023de:	691a      	ldr	r2, [r3, #16]
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	2201      	movs	r2, #1
 80023e8:	615a      	str	r2, [r3, #20]
}
 80023ea:	bf00      	nop
 80023ec:	3714      	adds	r7, #20
 80023ee:	46bd      	mov	sp, r7
 80023f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f4:	4770      	bx	lr
 80023f6:	bf00      	nop
 80023f8:	40010000 	.word	0x40010000
 80023fc:	40000400 	.word	0x40000400
 8002400:	40000800 	.word	0x40000800
 8002404:	40000c00 	.word	0x40000c00
 8002408:	40010400 	.word	0x40010400
 800240c:	40014000 	.word	0x40014000
 8002410:	40014400 	.word	0x40014400
 8002414:	40014800 	.word	0x40014800
 8002418:	40001800 	.word	0x40001800
 800241c:	40001c00 	.word	0x40001c00
 8002420:	40002000 	.word	0x40002000

08002424 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002424:	b480      	push	{r7}
 8002426:	b083      	sub	sp, #12
 8002428:	af00      	add	r7, sp, #0
 800242a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800242c:	bf00      	nop
 800242e:	370c      	adds	r7, #12
 8002430:	46bd      	mov	sp, r7
 8002432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002436:	4770      	bx	lr

08002438 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002438:	b480      	push	{r7}
 800243a:	b083      	sub	sp, #12
 800243c:	af00      	add	r7, sp, #0
 800243e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002440:	bf00      	nop
 8002442:	370c      	adds	r7, #12
 8002444:	46bd      	mov	sp, r7
 8002446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244a:	4770      	bx	lr

0800244c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800244c:	b580      	push	{r7, lr}
 800244e:	b082      	sub	sp, #8
 8002450:	af00      	add	r7, sp, #0
 8002452:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	2b00      	cmp	r3, #0
 8002458:	d101      	bne.n	800245e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800245a:	2301      	movs	r3, #1
 800245c:	e03f      	b.n	80024de <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002464:	b2db      	uxtb	r3, r3
 8002466:	2b00      	cmp	r3, #0
 8002468:	d106      	bne.n	8002478 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	2200      	movs	r2, #0
 800246e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002472:	6878      	ldr	r0, [r7, #4]
 8002474:	f7fe fbfc 	bl	8000c70 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	2224      	movs	r2, #36	; 0x24
 800247c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	68da      	ldr	r2, [r3, #12]
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800248e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002490:	6878      	ldr	r0, [r7, #4]
 8002492:	f000 f9cb 	bl	800282c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	691a      	ldr	r2, [r3, #16]
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80024a4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	695a      	ldr	r2, [r3, #20]
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80024b4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	68da      	ldr	r2, [r3, #12]
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80024c4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	2200      	movs	r2, #0
 80024ca:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	2220      	movs	r2, #32
 80024d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	2220      	movs	r2, #32
 80024d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80024dc:	2300      	movs	r3, #0
}
 80024de:	4618      	mov	r0, r3
 80024e0:	3708      	adds	r7, #8
 80024e2:	46bd      	mov	sp, r7
 80024e4:	bd80      	pop	{r7, pc}

080024e6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80024e6:	b580      	push	{r7, lr}
 80024e8:	b08a      	sub	sp, #40	; 0x28
 80024ea:	af02      	add	r7, sp, #8
 80024ec:	60f8      	str	r0, [r7, #12]
 80024ee:	60b9      	str	r1, [r7, #8]
 80024f0:	603b      	str	r3, [r7, #0]
 80024f2:	4613      	mov	r3, r2
 80024f4:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80024f6:	2300      	movs	r3, #0
 80024f8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002500:	b2db      	uxtb	r3, r3
 8002502:	2b20      	cmp	r3, #32
 8002504:	d17c      	bne.n	8002600 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002506:	68bb      	ldr	r3, [r7, #8]
 8002508:	2b00      	cmp	r3, #0
 800250a:	d002      	beq.n	8002512 <HAL_UART_Transmit+0x2c>
 800250c:	88fb      	ldrh	r3, [r7, #6]
 800250e:	2b00      	cmp	r3, #0
 8002510:	d101      	bne.n	8002516 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002512:	2301      	movs	r3, #1
 8002514:	e075      	b.n	8002602 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800251c:	2b01      	cmp	r3, #1
 800251e:	d101      	bne.n	8002524 <HAL_UART_Transmit+0x3e>
 8002520:	2302      	movs	r3, #2
 8002522:	e06e      	b.n	8002602 <HAL_UART_Transmit+0x11c>
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	2201      	movs	r2, #1
 8002528:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	2200      	movs	r2, #0
 8002530:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	2221      	movs	r2, #33	; 0x21
 8002536:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800253a:	f7fe fd85 	bl	8001048 <HAL_GetTick>
 800253e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	88fa      	ldrh	r2, [r7, #6]
 8002544:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	88fa      	ldrh	r2, [r7, #6]
 800254a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	689b      	ldr	r3, [r3, #8]
 8002550:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002554:	d108      	bne.n	8002568 <HAL_UART_Transmit+0x82>
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	691b      	ldr	r3, [r3, #16]
 800255a:	2b00      	cmp	r3, #0
 800255c:	d104      	bne.n	8002568 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800255e:	2300      	movs	r3, #0
 8002560:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002562:	68bb      	ldr	r3, [r7, #8]
 8002564:	61bb      	str	r3, [r7, #24]
 8002566:	e003      	b.n	8002570 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002568:	68bb      	ldr	r3, [r7, #8]
 800256a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800256c:	2300      	movs	r3, #0
 800256e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	2200      	movs	r2, #0
 8002574:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002578:	e02a      	b.n	80025d0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800257a:	683b      	ldr	r3, [r7, #0]
 800257c:	9300      	str	r3, [sp, #0]
 800257e:	697b      	ldr	r3, [r7, #20]
 8002580:	2200      	movs	r2, #0
 8002582:	2180      	movs	r1, #128	; 0x80
 8002584:	68f8      	ldr	r0, [r7, #12]
 8002586:	f000 f8e2 	bl	800274e <UART_WaitOnFlagUntilTimeout>
 800258a:	4603      	mov	r3, r0
 800258c:	2b00      	cmp	r3, #0
 800258e:	d001      	beq.n	8002594 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002590:	2303      	movs	r3, #3
 8002592:	e036      	b.n	8002602 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002594:	69fb      	ldr	r3, [r7, #28]
 8002596:	2b00      	cmp	r3, #0
 8002598:	d10b      	bne.n	80025b2 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800259a:	69bb      	ldr	r3, [r7, #24]
 800259c:	881b      	ldrh	r3, [r3, #0]
 800259e:	461a      	mov	r2, r3
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80025a8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80025aa:	69bb      	ldr	r3, [r7, #24]
 80025ac:	3302      	adds	r3, #2
 80025ae:	61bb      	str	r3, [r7, #24]
 80025b0:	e007      	b.n	80025c2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80025b2:	69fb      	ldr	r3, [r7, #28]
 80025b4:	781a      	ldrb	r2, [r3, #0]
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80025bc:	69fb      	ldr	r3, [r7, #28]
 80025be:	3301      	adds	r3, #1
 80025c0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80025c6:	b29b      	uxth	r3, r3
 80025c8:	3b01      	subs	r3, #1
 80025ca:	b29a      	uxth	r2, r3
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80025d4:	b29b      	uxth	r3, r3
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d1cf      	bne.n	800257a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80025da:	683b      	ldr	r3, [r7, #0]
 80025dc:	9300      	str	r3, [sp, #0]
 80025de:	697b      	ldr	r3, [r7, #20]
 80025e0:	2200      	movs	r2, #0
 80025e2:	2140      	movs	r1, #64	; 0x40
 80025e4:	68f8      	ldr	r0, [r7, #12]
 80025e6:	f000 f8b2 	bl	800274e <UART_WaitOnFlagUntilTimeout>
 80025ea:	4603      	mov	r3, r0
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d001      	beq.n	80025f4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80025f0:	2303      	movs	r3, #3
 80025f2:	e006      	b.n	8002602 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	2220      	movs	r2, #32
 80025f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80025fc:	2300      	movs	r3, #0
 80025fe:	e000      	b.n	8002602 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002600:	2302      	movs	r3, #2
  }
}
 8002602:	4618      	mov	r0, r3
 8002604:	3720      	adds	r7, #32
 8002606:	46bd      	mov	sp, r7
 8002608:	bd80      	pop	{r7, pc}

0800260a <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800260a:	b580      	push	{r7, lr}
 800260c:	b08a      	sub	sp, #40	; 0x28
 800260e:	af02      	add	r7, sp, #8
 8002610:	60f8      	str	r0, [r7, #12]
 8002612:	60b9      	str	r1, [r7, #8]
 8002614:	603b      	str	r3, [r7, #0]
 8002616:	4613      	mov	r3, r2
 8002618:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800261a:	2300      	movs	r3, #0
 800261c:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002624:	b2db      	uxtb	r3, r3
 8002626:	2b20      	cmp	r3, #32
 8002628:	f040 808c 	bne.w	8002744 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 800262c:	68bb      	ldr	r3, [r7, #8]
 800262e:	2b00      	cmp	r3, #0
 8002630:	d002      	beq.n	8002638 <HAL_UART_Receive+0x2e>
 8002632:	88fb      	ldrh	r3, [r7, #6]
 8002634:	2b00      	cmp	r3, #0
 8002636:	d101      	bne.n	800263c <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8002638:	2301      	movs	r3, #1
 800263a:	e084      	b.n	8002746 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002642:	2b01      	cmp	r3, #1
 8002644:	d101      	bne.n	800264a <HAL_UART_Receive+0x40>
 8002646:	2302      	movs	r3, #2
 8002648:	e07d      	b.n	8002746 <HAL_UART_Receive+0x13c>
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	2201      	movs	r2, #1
 800264e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	2200      	movs	r2, #0
 8002656:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	2222      	movs	r2, #34	; 0x22
 800265c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	2200      	movs	r2, #0
 8002664:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002666:	f7fe fcef 	bl	8001048 <HAL_GetTick>
 800266a:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	88fa      	ldrh	r2, [r7, #6]
 8002670:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	88fa      	ldrh	r2, [r7, #6]
 8002676:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	689b      	ldr	r3, [r3, #8]
 800267c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002680:	d108      	bne.n	8002694 <HAL_UART_Receive+0x8a>
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	691b      	ldr	r3, [r3, #16]
 8002686:	2b00      	cmp	r3, #0
 8002688:	d104      	bne.n	8002694 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 800268a:	2300      	movs	r3, #0
 800268c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800268e:	68bb      	ldr	r3, [r7, #8]
 8002690:	61bb      	str	r3, [r7, #24]
 8002692:	e003      	b.n	800269c <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8002694:	68bb      	ldr	r3, [r7, #8]
 8002696:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002698:	2300      	movs	r3, #0
 800269a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	2200      	movs	r2, #0
 80026a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 80026a4:	e043      	b.n	800272e <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80026a6:	683b      	ldr	r3, [r7, #0]
 80026a8:	9300      	str	r3, [sp, #0]
 80026aa:	697b      	ldr	r3, [r7, #20]
 80026ac:	2200      	movs	r2, #0
 80026ae:	2120      	movs	r1, #32
 80026b0:	68f8      	ldr	r0, [r7, #12]
 80026b2:	f000 f84c 	bl	800274e <UART_WaitOnFlagUntilTimeout>
 80026b6:	4603      	mov	r3, r0
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d001      	beq.n	80026c0 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 80026bc:	2303      	movs	r3, #3
 80026be:	e042      	b.n	8002746 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 80026c0:	69fb      	ldr	r3, [r7, #28]
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d10c      	bne.n	80026e0 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	685b      	ldr	r3, [r3, #4]
 80026cc:	b29b      	uxth	r3, r3
 80026ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80026d2:	b29a      	uxth	r2, r3
 80026d4:	69bb      	ldr	r3, [r7, #24]
 80026d6:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80026d8:	69bb      	ldr	r3, [r7, #24]
 80026da:	3302      	adds	r3, #2
 80026dc:	61bb      	str	r3, [r7, #24]
 80026de:	e01f      	b.n	8002720 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	689b      	ldr	r3, [r3, #8]
 80026e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80026e8:	d007      	beq.n	80026fa <HAL_UART_Receive+0xf0>
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	689b      	ldr	r3, [r3, #8]
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d10a      	bne.n	8002708 <HAL_UART_Receive+0xfe>
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	691b      	ldr	r3, [r3, #16]
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d106      	bne.n	8002708 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	685b      	ldr	r3, [r3, #4]
 8002700:	b2da      	uxtb	r2, r3
 8002702:	69fb      	ldr	r3, [r7, #28]
 8002704:	701a      	strb	r2, [r3, #0]
 8002706:	e008      	b.n	800271a <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	685b      	ldr	r3, [r3, #4]
 800270e:	b2db      	uxtb	r3, r3
 8002710:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002714:	b2da      	uxtb	r2, r3
 8002716:	69fb      	ldr	r3, [r7, #28]
 8002718:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 800271a:	69fb      	ldr	r3, [r7, #28]
 800271c:	3301      	adds	r3, #1
 800271e:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002724:	b29b      	uxth	r3, r3
 8002726:	3b01      	subs	r3, #1
 8002728:	b29a      	uxth	r2, r3
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002732:	b29b      	uxth	r3, r3
 8002734:	2b00      	cmp	r3, #0
 8002736:	d1b6      	bne.n	80026a6 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	2220      	movs	r2, #32
 800273c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8002740:	2300      	movs	r3, #0
 8002742:	e000      	b.n	8002746 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8002744:	2302      	movs	r3, #2
  }
}
 8002746:	4618      	mov	r0, r3
 8002748:	3720      	adds	r7, #32
 800274a:	46bd      	mov	sp, r7
 800274c:	bd80      	pop	{r7, pc}

0800274e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800274e:	b580      	push	{r7, lr}
 8002750:	b090      	sub	sp, #64	; 0x40
 8002752:	af00      	add	r7, sp, #0
 8002754:	60f8      	str	r0, [r7, #12]
 8002756:	60b9      	str	r1, [r7, #8]
 8002758:	603b      	str	r3, [r7, #0]
 800275a:	4613      	mov	r3, r2
 800275c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800275e:	e050      	b.n	8002802 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002760:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002762:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002766:	d04c      	beq.n	8002802 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002768:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800276a:	2b00      	cmp	r3, #0
 800276c:	d007      	beq.n	800277e <UART_WaitOnFlagUntilTimeout+0x30>
 800276e:	f7fe fc6b 	bl	8001048 <HAL_GetTick>
 8002772:	4602      	mov	r2, r0
 8002774:	683b      	ldr	r3, [r7, #0]
 8002776:	1ad3      	subs	r3, r2, r3
 8002778:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800277a:	429a      	cmp	r2, r3
 800277c:	d241      	bcs.n	8002802 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	330c      	adds	r3, #12
 8002784:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002786:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002788:	e853 3f00 	ldrex	r3, [r3]
 800278c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800278e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002790:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002794:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	330c      	adds	r3, #12
 800279c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800279e:	637a      	str	r2, [r7, #52]	; 0x34
 80027a0:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80027a2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80027a4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80027a6:	e841 2300 	strex	r3, r2, [r1]
 80027aa:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80027ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d1e5      	bne.n	800277e <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	3314      	adds	r3, #20
 80027b8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80027ba:	697b      	ldr	r3, [r7, #20]
 80027bc:	e853 3f00 	ldrex	r3, [r3]
 80027c0:	613b      	str	r3, [r7, #16]
   return(result);
 80027c2:	693b      	ldr	r3, [r7, #16]
 80027c4:	f023 0301 	bic.w	r3, r3, #1
 80027c8:	63bb      	str	r3, [r7, #56]	; 0x38
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	3314      	adds	r3, #20
 80027d0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80027d2:	623a      	str	r2, [r7, #32]
 80027d4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80027d6:	69f9      	ldr	r1, [r7, #28]
 80027d8:	6a3a      	ldr	r2, [r7, #32]
 80027da:	e841 2300 	strex	r3, r2, [r1]
 80027de:	61bb      	str	r3, [r7, #24]
   return(result);
 80027e0:	69bb      	ldr	r3, [r7, #24]
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d1e5      	bne.n	80027b2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	2220      	movs	r2, #32
 80027ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	2220      	movs	r2, #32
 80027f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	2200      	movs	r2, #0
 80027fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80027fe:	2303      	movs	r3, #3
 8002800:	e00f      	b.n	8002822 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	681a      	ldr	r2, [r3, #0]
 8002808:	68bb      	ldr	r3, [r7, #8]
 800280a:	4013      	ands	r3, r2
 800280c:	68ba      	ldr	r2, [r7, #8]
 800280e:	429a      	cmp	r2, r3
 8002810:	bf0c      	ite	eq
 8002812:	2301      	moveq	r3, #1
 8002814:	2300      	movne	r3, #0
 8002816:	b2db      	uxtb	r3, r3
 8002818:	461a      	mov	r2, r3
 800281a:	79fb      	ldrb	r3, [r7, #7]
 800281c:	429a      	cmp	r2, r3
 800281e:	d09f      	beq.n	8002760 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002820:	2300      	movs	r3, #0
}
 8002822:	4618      	mov	r0, r3
 8002824:	3740      	adds	r7, #64	; 0x40
 8002826:	46bd      	mov	sp, r7
 8002828:	bd80      	pop	{r7, pc}
	...

0800282c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800282c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002830:	b09f      	sub	sp, #124	; 0x7c
 8002832:	af00      	add	r7, sp, #0
 8002834:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002836:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	691b      	ldr	r3, [r3, #16]
 800283c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002840:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002842:	68d9      	ldr	r1, [r3, #12]
 8002844:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002846:	681a      	ldr	r2, [r3, #0]
 8002848:	ea40 0301 	orr.w	r3, r0, r1
 800284c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800284e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002850:	689a      	ldr	r2, [r3, #8]
 8002852:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002854:	691b      	ldr	r3, [r3, #16]
 8002856:	431a      	orrs	r2, r3
 8002858:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800285a:	695b      	ldr	r3, [r3, #20]
 800285c:	431a      	orrs	r2, r3
 800285e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002860:	69db      	ldr	r3, [r3, #28]
 8002862:	4313      	orrs	r3, r2
 8002864:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8002866:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	68db      	ldr	r3, [r3, #12]
 800286c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002870:	f021 010c 	bic.w	r1, r1, #12
 8002874:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002876:	681a      	ldr	r2, [r3, #0]
 8002878:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800287a:	430b      	orrs	r3, r1
 800287c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800287e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	695b      	ldr	r3, [r3, #20]
 8002884:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002888:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800288a:	6999      	ldr	r1, [r3, #24]
 800288c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800288e:	681a      	ldr	r2, [r3, #0]
 8002890:	ea40 0301 	orr.w	r3, r0, r1
 8002894:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002896:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002898:	681a      	ldr	r2, [r3, #0]
 800289a:	4bc5      	ldr	r3, [pc, #788]	; (8002bb0 <UART_SetConfig+0x384>)
 800289c:	429a      	cmp	r2, r3
 800289e:	d004      	beq.n	80028aa <UART_SetConfig+0x7e>
 80028a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80028a2:	681a      	ldr	r2, [r3, #0]
 80028a4:	4bc3      	ldr	r3, [pc, #780]	; (8002bb4 <UART_SetConfig+0x388>)
 80028a6:	429a      	cmp	r2, r3
 80028a8:	d103      	bne.n	80028b2 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80028aa:	f7ff fadb 	bl	8001e64 <HAL_RCC_GetPCLK2Freq>
 80028ae:	6778      	str	r0, [r7, #116]	; 0x74
 80028b0:	e002      	b.n	80028b8 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80028b2:	f7ff fac3 	bl	8001e3c <HAL_RCC_GetPCLK1Freq>
 80028b6:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80028b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80028ba:	69db      	ldr	r3, [r3, #28]
 80028bc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80028c0:	f040 80b6 	bne.w	8002a30 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80028c4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80028c6:	461c      	mov	r4, r3
 80028c8:	f04f 0500 	mov.w	r5, #0
 80028cc:	4622      	mov	r2, r4
 80028ce:	462b      	mov	r3, r5
 80028d0:	1891      	adds	r1, r2, r2
 80028d2:	6439      	str	r1, [r7, #64]	; 0x40
 80028d4:	415b      	adcs	r3, r3
 80028d6:	647b      	str	r3, [r7, #68]	; 0x44
 80028d8:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80028dc:	1912      	adds	r2, r2, r4
 80028de:	eb45 0303 	adc.w	r3, r5, r3
 80028e2:	f04f 0000 	mov.w	r0, #0
 80028e6:	f04f 0100 	mov.w	r1, #0
 80028ea:	00d9      	lsls	r1, r3, #3
 80028ec:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80028f0:	00d0      	lsls	r0, r2, #3
 80028f2:	4602      	mov	r2, r0
 80028f4:	460b      	mov	r3, r1
 80028f6:	1911      	adds	r1, r2, r4
 80028f8:	6639      	str	r1, [r7, #96]	; 0x60
 80028fa:	416b      	adcs	r3, r5
 80028fc:	667b      	str	r3, [r7, #100]	; 0x64
 80028fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002900:	685b      	ldr	r3, [r3, #4]
 8002902:	461a      	mov	r2, r3
 8002904:	f04f 0300 	mov.w	r3, #0
 8002908:	1891      	adds	r1, r2, r2
 800290a:	63b9      	str	r1, [r7, #56]	; 0x38
 800290c:	415b      	adcs	r3, r3
 800290e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002910:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002914:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8002918:	f7fd fcb2 	bl	8000280 <__aeabi_uldivmod>
 800291c:	4602      	mov	r2, r0
 800291e:	460b      	mov	r3, r1
 8002920:	4ba5      	ldr	r3, [pc, #660]	; (8002bb8 <UART_SetConfig+0x38c>)
 8002922:	fba3 2302 	umull	r2, r3, r3, r2
 8002926:	095b      	lsrs	r3, r3, #5
 8002928:	011e      	lsls	r6, r3, #4
 800292a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800292c:	461c      	mov	r4, r3
 800292e:	f04f 0500 	mov.w	r5, #0
 8002932:	4622      	mov	r2, r4
 8002934:	462b      	mov	r3, r5
 8002936:	1891      	adds	r1, r2, r2
 8002938:	6339      	str	r1, [r7, #48]	; 0x30
 800293a:	415b      	adcs	r3, r3
 800293c:	637b      	str	r3, [r7, #52]	; 0x34
 800293e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002942:	1912      	adds	r2, r2, r4
 8002944:	eb45 0303 	adc.w	r3, r5, r3
 8002948:	f04f 0000 	mov.w	r0, #0
 800294c:	f04f 0100 	mov.w	r1, #0
 8002950:	00d9      	lsls	r1, r3, #3
 8002952:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002956:	00d0      	lsls	r0, r2, #3
 8002958:	4602      	mov	r2, r0
 800295a:	460b      	mov	r3, r1
 800295c:	1911      	adds	r1, r2, r4
 800295e:	65b9      	str	r1, [r7, #88]	; 0x58
 8002960:	416b      	adcs	r3, r5
 8002962:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002964:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002966:	685b      	ldr	r3, [r3, #4]
 8002968:	461a      	mov	r2, r3
 800296a:	f04f 0300 	mov.w	r3, #0
 800296e:	1891      	adds	r1, r2, r2
 8002970:	62b9      	str	r1, [r7, #40]	; 0x28
 8002972:	415b      	adcs	r3, r3
 8002974:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002976:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800297a:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800297e:	f7fd fc7f 	bl	8000280 <__aeabi_uldivmod>
 8002982:	4602      	mov	r2, r0
 8002984:	460b      	mov	r3, r1
 8002986:	4b8c      	ldr	r3, [pc, #560]	; (8002bb8 <UART_SetConfig+0x38c>)
 8002988:	fba3 1302 	umull	r1, r3, r3, r2
 800298c:	095b      	lsrs	r3, r3, #5
 800298e:	2164      	movs	r1, #100	; 0x64
 8002990:	fb01 f303 	mul.w	r3, r1, r3
 8002994:	1ad3      	subs	r3, r2, r3
 8002996:	00db      	lsls	r3, r3, #3
 8002998:	3332      	adds	r3, #50	; 0x32
 800299a:	4a87      	ldr	r2, [pc, #540]	; (8002bb8 <UART_SetConfig+0x38c>)
 800299c:	fba2 2303 	umull	r2, r3, r2, r3
 80029a0:	095b      	lsrs	r3, r3, #5
 80029a2:	005b      	lsls	r3, r3, #1
 80029a4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80029a8:	441e      	add	r6, r3
 80029aa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80029ac:	4618      	mov	r0, r3
 80029ae:	f04f 0100 	mov.w	r1, #0
 80029b2:	4602      	mov	r2, r0
 80029b4:	460b      	mov	r3, r1
 80029b6:	1894      	adds	r4, r2, r2
 80029b8:	623c      	str	r4, [r7, #32]
 80029ba:	415b      	adcs	r3, r3
 80029bc:	627b      	str	r3, [r7, #36]	; 0x24
 80029be:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80029c2:	1812      	adds	r2, r2, r0
 80029c4:	eb41 0303 	adc.w	r3, r1, r3
 80029c8:	f04f 0400 	mov.w	r4, #0
 80029cc:	f04f 0500 	mov.w	r5, #0
 80029d0:	00dd      	lsls	r5, r3, #3
 80029d2:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80029d6:	00d4      	lsls	r4, r2, #3
 80029d8:	4622      	mov	r2, r4
 80029da:	462b      	mov	r3, r5
 80029dc:	1814      	adds	r4, r2, r0
 80029de:	653c      	str	r4, [r7, #80]	; 0x50
 80029e0:	414b      	adcs	r3, r1
 80029e2:	657b      	str	r3, [r7, #84]	; 0x54
 80029e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80029e6:	685b      	ldr	r3, [r3, #4]
 80029e8:	461a      	mov	r2, r3
 80029ea:	f04f 0300 	mov.w	r3, #0
 80029ee:	1891      	adds	r1, r2, r2
 80029f0:	61b9      	str	r1, [r7, #24]
 80029f2:	415b      	adcs	r3, r3
 80029f4:	61fb      	str	r3, [r7, #28]
 80029f6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80029fa:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80029fe:	f7fd fc3f 	bl	8000280 <__aeabi_uldivmod>
 8002a02:	4602      	mov	r2, r0
 8002a04:	460b      	mov	r3, r1
 8002a06:	4b6c      	ldr	r3, [pc, #432]	; (8002bb8 <UART_SetConfig+0x38c>)
 8002a08:	fba3 1302 	umull	r1, r3, r3, r2
 8002a0c:	095b      	lsrs	r3, r3, #5
 8002a0e:	2164      	movs	r1, #100	; 0x64
 8002a10:	fb01 f303 	mul.w	r3, r1, r3
 8002a14:	1ad3      	subs	r3, r2, r3
 8002a16:	00db      	lsls	r3, r3, #3
 8002a18:	3332      	adds	r3, #50	; 0x32
 8002a1a:	4a67      	ldr	r2, [pc, #412]	; (8002bb8 <UART_SetConfig+0x38c>)
 8002a1c:	fba2 2303 	umull	r2, r3, r2, r3
 8002a20:	095b      	lsrs	r3, r3, #5
 8002a22:	f003 0207 	and.w	r2, r3, #7
 8002a26:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	4432      	add	r2, r6
 8002a2c:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002a2e:	e0b9      	b.n	8002ba4 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002a30:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002a32:	461c      	mov	r4, r3
 8002a34:	f04f 0500 	mov.w	r5, #0
 8002a38:	4622      	mov	r2, r4
 8002a3a:	462b      	mov	r3, r5
 8002a3c:	1891      	adds	r1, r2, r2
 8002a3e:	6139      	str	r1, [r7, #16]
 8002a40:	415b      	adcs	r3, r3
 8002a42:	617b      	str	r3, [r7, #20]
 8002a44:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002a48:	1912      	adds	r2, r2, r4
 8002a4a:	eb45 0303 	adc.w	r3, r5, r3
 8002a4e:	f04f 0000 	mov.w	r0, #0
 8002a52:	f04f 0100 	mov.w	r1, #0
 8002a56:	00d9      	lsls	r1, r3, #3
 8002a58:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002a5c:	00d0      	lsls	r0, r2, #3
 8002a5e:	4602      	mov	r2, r0
 8002a60:	460b      	mov	r3, r1
 8002a62:	eb12 0804 	adds.w	r8, r2, r4
 8002a66:	eb43 0905 	adc.w	r9, r3, r5
 8002a6a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a6c:	685b      	ldr	r3, [r3, #4]
 8002a6e:	4618      	mov	r0, r3
 8002a70:	f04f 0100 	mov.w	r1, #0
 8002a74:	f04f 0200 	mov.w	r2, #0
 8002a78:	f04f 0300 	mov.w	r3, #0
 8002a7c:	008b      	lsls	r3, r1, #2
 8002a7e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8002a82:	0082      	lsls	r2, r0, #2
 8002a84:	4640      	mov	r0, r8
 8002a86:	4649      	mov	r1, r9
 8002a88:	f7fd fbfa 	bl	8000280 <__aeabi_uldivmod>
 8002a8c:	4602      	mov	r2, r0
 8002a8e:	460b      	mov	r3, r1
 8002a90:	4b49      	ldr	r3, [pc, #292]	; (8002bb8 <UART_SetConfig+0x38c>)
 8002a92:	fba3 2302 	umull	r2, r3, r3, r2
 8002a96:	095b      	lsrs	r3, r3, #5
 8002a98:	011e      	lsls	r6, r3, #4
 8002a9a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002a9c:	4618      	mov	r0, r3
 8002a9e:	f04f 0100 	mov.w	r1, #0
 8002aa2:	4602      	mov	r2, r0
 8002aa4:	460b      	mov	r3, r1
 8002aa6:	1894      	adds	r4, r2, r2
 8002aa8:	60bc      	str	r4, [r7, #8]
 8002aaa:	415b      	adcs	r3, r3
 8002aac:	60fb      	str	r3, [r7, #12]
 8002aae:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002ab2:	1812      	adds	r2, r2, r0
 8002ab4:	eb41 0303 	adc.w	r3, r1, r3
 8002ab8:	f04f 0400 	mov.w	r4, #0
 8002abc:	f04f 0500 	mov.w	r5, #0
 8002ac0:	00dd      	lsls	r5, r3, #3
 8002ac2:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8002ac6:	00d4      	lsls	r4, r2, #3
 8002ac8:	4622      	mov	r2, r4
 8002aca:	462b      	mov	r3, r5
 8002acc:	1814      	adds	r4, r2, r0
 8002ace:	64bc      	str	r4, [r7, #72]	; 0x48
 8002ad0:	414b      	adcs	r3, r1
 8002ad2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002ad4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ad6:	685b      	ldr	r3, [r3, #4]
 8002ad8:	4618      	mov	r0, r3
 8002ada:	f04f 0100 	mov.w	r1, #0
 8002ade:	f04f 0200 	mov.w	r2, #0
 8002ae2:	f04f 0300 	mov.w	r3, #0
 8002ae6:	008b      	lsls	r3, r1, #2
 8002ae8:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8002aec:	0082      	lsls	r2, r0, #2
 8002aee:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8002af2:	f7fd fbc5 	bl	8000280 <__aeabi_uldivmod>
 8002af6:	4602      	mov	r2, r0
 8002af8:	460b      	mov	r3, r1
 8002afa:	4b2f      	ldr	r3, [pc, #188]	; (8002bb8 <UART_SetConfig+0x38c>)
 8002afc:	fba3 1302 	umull	r1, r3, r3, r2
 8002b00:	095b      	lsrs	r3, r3, #5
 8002b02:	2164      	movs	r1, #100	; 0x64
 8002b04:	fb01 f303 	mul.w	r3, r1, r3
 8002b08:	1ad3      	subs	r3, r2, r3
 8002b0a:	011b      	lsls	r3, r3, #4
 8002b0c:	3332      	adds	r3, #50	; 0x32
 8002b0e:	4a2a      	ldr	r2, [pc, #168]	; (8002bb8 <UART_SetConfig+0x38c>)
 8002b10:	fba2 2303 	umull	r2, r3, r2, r3
 8002b14:	095b      	lsrs	r3, r3, #5
 8002b16:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002b1a:	441e      	add	r6, r3
 8002b1c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002b1e:	4618      	mov	r0, r3
 8002b20:	f04f 0100 	mov.w	r1, #0
 8002b24:	4602      	mov	r2, r0
 8002b26:	460b      	mov	r3, r1
 8002b28:	1894      	adds	r4, r2, r2
 8002b2a:	603c      	str	r4, [r7, #0]
 8002b2c:	415b      	adcs	r3, r3
 8002b2e:	607b      	str	r3, [r7, #4]
 8002b30:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002b34:	1812      	adds	r2, r2, r0
 8002b36:	eb41 0303 	adc.w	r3, r1, r3
 8002b3a:	f04f 0400 	mov.w	r4, #0
 8002b3e:	f04f 0500 	mov.w	r5, #0
 8002b42:	00dd      	lsls	r5, r3, #3
 8002b44:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8002b48:	00d4      	lsls	r4, r2, #3
 8002b4a:	4622      	mov	r2, r4
 8002b4c:	462b      	mov	r3, r5
 8002b4e:	eb12 0a00 	adds.w	sl, r2, r0
 8002b52:	eb43 0b01 	adc.w	fp, r3, r1
 8002b56:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b58:	685b      	ldr	r3, [r3, #4]
 8002b5a:	4618      	mov	r0, r3
 8002b5c:	f04f 0100 	mov.w	r1, #0
 8002b60:	f04f 0200 	mov.w	r2, #0
 8002b64:	f04f 0300 	mov.w	r3, #0
 8002b68:	008b      	lsls	r3, r1, #2
 8002b6a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8002b6e:	0082      	lsls	r2, r0, #2
 8002b70:	4650      	mov	r0, sl
 8002b72:	4659      	mov	r1, fp
 8002b74:	f7fd fb84 	bl	8000280 <__aeabi_uldivmod>
 8002b78:	4602      	mov	r2, r0
 8002b7a:	460b      	mov	r3, r1
 8002b7c:	4b0e      	ldr	r3, [pc, #56]	; (8002bb8 <UART_SetConfig+0x38c>)
 8002b7e:	fba3 1302 	umull	r1, r3, r3, r2
 8002b82:	095b      	lsrs	r3, r3, #5
 8002b84:	2164      	movs	r1, #100	; 0x64
 8002b86:	fb01 f303 	mul.w	r3, r1, r3
 8002b8a:	1ad3      	subs	r3, r2, r3
 8002b8c:	011b      	lsls	r3, r3, #4
 8002b8e:	3332      	adds	r3, #50	; 0x32
 8002b90:	4a09      	ldr	r2, [pc, #36]	; (8002bb8 <UART_SetConfig+0x38c>)
 8002b92:	fba2 2303 	umull	r2, r3, r2, r3
 8002b96:	095b      	lsrs	r3, r3, #5
 8002b98:	f003 020f 	and.w	r2, r3, #15
 8002b9c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	4432      	add	r2, r6
 8002ba2:	609a      	str	r2, [r3, #8]
}
 8002ba4:	bf00      	nop
 8002ba6:	377c      	adds	r7, #124	; 0x7c
 8002ba8:	46bd      	mov	sp, r7
 8002baa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002bae:	bf00      	nop
 8002bb0:	40011000 	.word	0x40011000
 8002bb4:	40011400 	.word	0x40011400
 8002bb8:	51eb851f 	.word	0x51eb851f

08002bbc <__errno>:
 8002bbc:	4b01      	ldr	r3, [pc, #4]	; (8002bc4 <__errno+0x8>)
 8002bbe:	6818      	ldr	r0, [r3, #0]
 8002bc0:	4770      	bx	lr
 8002bc2:	bf00      	nop
 8002bc4:	2000000c 	.word	0x2000000c

08002bc8 <__libc_init_array>:
 8002bc8:	b570      	push	{r4, r5, r6, lr}
 8002bca:	4d0d      	ldr	r5, [pc, #52]	; (8002c00 <__libc_init_array+0x38>)
 8002bcc:	4c0d      	ldr	r4, [pc, #52]	; (8002c04 <__libc_init_array+0x3c>)
 8002bce:	1b64      	subs	r4, r4, r5
 8002bd0:	10a4      	asrs	r4, r4, #2
 8002bd2:	2600      	movs	r6, #0
 8002bd4:	42a6      	cmp	r6, r4
 8002bd6:	d109      	bne.n	8002bec <__libc_init_array+0x24>
 8002bd8:	4d0b      	ldr	r5, [pc, #44]	; (8002c08 <__libc_init_array+0x40>)
 8002bda:	4c0c      	ldr	r4, [pc, #48]	; (8002c0c <__libc_init_array+0x44>)
 8002bdc:	f001 fa8c 	bl	80040f8 <_init>
 8002be0:	1b64      	subs	r4, r4, r5
 8002be2:	10a4      	asrs	r4, r4, #2
 8002be4:	2600      	movs	r6, #0
 8002be6:	42a6      	cmp	r6, r4
 8002be8:	d105      	bne.n	8002bf6 <__libc_init_array+0x2e>
 8002bea:	bd70      	pop	{r4, r5, r6, pc}
 8002bec:	f855 3b04 	ldr.w	r3, [r5], #4
 8002bf0:	4798      	blx	r3
 8002bf2:	3601      	adds	r6, #1
 8002bf4:	e7ee      	b.n	8002bd4 <__libc_init_array+0xc>
 8002bf6:	f855 3b04 	ldr.w	r3, [r5], #4
 8002bfa:	4798      	blx	r3
 8002bfc:	3601      	adds	r6, #1
 8002bfe:	e7f2      	b.n	8002be6 <__libc_init_array+0x1e>
 8002c00:	08004310 	.word	0x08004310
 8002c04:	08004310 	.word	0x08004310
 8002c08:	08004310 	.word	0x08004310
 8002c0c:	08004314 	.word	0x08004314

08002c10 <memset>:
 8002c10:	4402      	add	r2, r0
 8002c12:	4603      	mov	r3, r0
 8002c14:	4293      	cmp	r3, r2
 8002c16:	d100      	bne.n	8002c1a <memset+0xa>
 8002c18:	4770      	bx	lr
 8002c1a:	f803 1b01 	strb.w	r1, [r3], #1
 8002c1e:	e7f9      	b.n	8002c14 <memset+0x4>

08002c20 <iprintf>:
 8002c20:	b40f      	push	{r0, r1, r2, r3}
 8002c22:	4b0a      	ldr	r3, [pc, #40]	; (8002c4c <iprintf+0x2c>)
 8002c24:	b513      	push	{r0, r1, r4, lr}
 8002c26:	681c      	ldr	r4, [r3, #0]
 8002c28:	b124      	cbz	r4, 8002c34 <iprintf+0x14>
 8002c2a:	69a3      	ldr	r3, [r4, #24]
 8002c2c:	b913      	cbnz	r3, 8002c34 <iprintf+0x14>
 8002c2e:	4620      	mov	r0, r4
 8002c30:	f000 fb44 	bl	80032bc <__sinit>
 8002c34:	ab05      	add	r3, sp, #20
 8002c36:	9a04      	ldr	r2, [sp, #16]
 8002c38:	68a1      	ldr	r1, [r4, #8]
 8002c3a:	9301      	str	r3, [sp, #4]
 8002c3c:	4620      	mov	r0, r4
 8002c3e:	f000 fe79 	bl	8003934 <_vfiprintf_r>
 8002c42:	b002      	add	sp, #8
 8002c44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002c48:	b004      	add	sp, #16
 8002c4a:	4770      	bx	lr
 8002c4c:	2000000c 	.word	0x2000000c

08002c50 <_puts_r>:
 8002c50:	b570      	push	{r4, r5, r6, lr}
 8002c52:	460e      	mov	r6, r1
 8002c54:	4605      	mov	r5, r0
 8002c56:	b118      	cbz	r0, 8002c60 <_puts_r+0x10>
 8002c58:	6983      	ldr	r3, [r0, #24]
 8002c5a:	b90b      	cbnz	r3, 8002c60 <_puts_r+0x10>
 8002c5c:	f000 fb2e 	bl	80032bc <__sinit>
 8002c60:	69ab      	ldr	r3, [r5, #24]
 8002c62:	68ac      	ldr	r4, [r5, #8]
 8002c64:	b913      	cbnz	r3, 8002c6c <_puts_r+0x1c>
 8002c66:	4628      	mov	r0, r5
 8002c68:	f000 fb28 	bl	80032bc <__sinit>
 8002c6c:	4b2c      	ldr	r3, [pc, #176]	; (8002d20 <_puts_r+0xd0>)
 8002c6e:	429c      	cmp	r4, r3
 8002c70:	d120      	bne.n	8002cb4 <_puts_r+0x64>
 8002c72:	686c      	ldr	r4, [r5, #4]
 8002c74:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002c76:	07db      	lsls	r3, r3, #31
 8002c78:	d405      	bmi.n	8002c86 <_puts_r+0x36>
 8002c7a:	89a3      	ldrh	r3, [r4, #12]
 8002c7c:	0598      	lsls	r0, r3, #22
 8002c7e:	d402      	bmi.n	8002c86 <_puts_r+0x36>
 8002c80:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002c82:	f000 fbb9 	bl	80033f8 <__retarget_lock_acquire_recursive>
 8002c86:	89a3      	ldrh	r3, [r4, #12]
 8002c88:	0719      	lsls	r1, r3, #28
 8002c8a:	d51d      	bpl.n	8002cc8 <_puts_r+0x78>
 8002c8c:	6923      	ldr	r3, [r4, #16]
 8002c8e:	b1db      	cbz	r3, 8002cc8 <_puts_r+0x78>
 8002c90:	3e01      	subs	r6, #1
 8002c92:	68a3      	ldr	r3, [r4, #8]
 8002c94:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8002c98:	3b01      	subs	r3, #1
 8002c9a:	60a3      	str	r3, [r4, #8]
 8002c9c:	bb39      	cbnz	r1, 8002cee <_puts_r+0x9e>
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	da38      	bge.n	8002d14 <_puts_r+0xc4>
 8002ca2:	4622      	mov	r2, r4
 8002ca4:	210a      	movs	r1, #10
 8002ca6:	4628      	mov	r0, r5
 8002ca8:	f000 f92e 	bl	8002f08 <__swbuf_r>
 8002cac:	3001      	adds	r0, #1
 8002cae:	d011      	beq.n	8002cd4 <_puts_r+0x84>
 8002cb0:	250a      	movs	r5, #10
 8002cb2:	e011      	b.n	8002cd8 <_puts_r+0x88>
 8002cb4:	4b1b      	ldr	r3, [pc, #108]	; (8002d24 <_puts_r+0xd4>)
 8002cb6:	429c      	cmp	r4, r3
 8002cb8:	d101      	bne.n	8002cbe <_puts_r+0x6e>
 8002cba:	68ac      	ldr	r4, [r5, #8]
 8002cbc:	e7da      	b.n	8002c74 <_puts_r+0x24>
 8002cbe:	4b1a      	ldr	r3, [pc, #104]	; (8002d28 <_puts_r+0xd8>)
 8002cc0:	429c      	cmp	r4, r3
 8002cc2:	bf08      	it	eq
 8002cc4:	68ec      	ldreq	r4, [r5, #12]
 8002cc6:	e7d5      	b.n	8002c74 <_puts_r+0x24>
 8002cc8:	4621      	mov	r1, r4
 8002cca:	4628      	mov	r0, r5
 8002ccc:	f000 f96e 	bl	8002fac <__swsetup_r>
 8002cd0:	2800      	cmp	r0, #0
 8002cd2:	d0dd      	beq.n	8002c90 <_puts_r+0x40>
 8002cd4:	f04f 35ff 	mov.w	r5, #4294967295
 8002cd8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002cda:	07da      	lsls	r2, r3, #31
 8002cdc:	d405      	bmi.n	8002cea <_puts_r+0x9a>
 8002cde:	89a3      	ldrh	r3, [r4, #12]
 8002ce0:	059b      	lsls	r3, r3, #22
 8002ce2:	d402      	bmi.n	8002cea <_puts_r+0x9a>
 8002ce4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002ce6:	f000 fb88 	bl	80033fa <__retarget_lock_release_recursive>
 8002cea:	4628      	mov	r0, r5
 8002cec:	bd70      	pop	{r4, r5, r6, pc}
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	da04      	bge.n	8002cfc <_puts_r+0xac>
 8002cf2:	69a2      	ldr	r2, [r4, #24]
 8002cf4:	429a      	cmp	r2, r3
 8002cf6:	dc06      	bgt.n	8002d06 <_puts_r+0xb6>
 8002cf8:	290a      	cmp	r1, #10
 8002cfa:	d004      	beq.n	8002d06 <_puts_r+0xb6>
 8002cfc:	6823      	ldr	r3, [r4, #0]
 8002cfe:	1c5a      	adds	r2, r3, #1
 8002d00:	6022      	str	r2, [r4, #0]
 8002d02:	7019      	strb	r1, [r3, #0]
 8002d04:	e7c5      	b.n	8002c92 <_puts_r+0x42>
 8002d06:	4622      	mov	r2, r4
 8002d08:	4628      	mov	r0, r5
 8002d0a:	f000 f8fd 	bl	8002f08 <__swbuf_r>
 8002d0e:	3001      	adds	r0, #1
 8002d10:	d1bf      	bne.n	8002c92 <_puts_r+0x42>
 8002d12:	e7df      	b.n	8002cd4 <_puts_r+0x84>
 8002d14:	6823      	ldr	r3, [r4, #0]
 8002d16:	250a      	movs	r5, #10
 8002d18:	1c5a      	adds	r2, r3, #1
 8002d1a:	6022      	str	r2, [r4, #0]
 8002d1c:	701d      	strb	r5, [r3, #0]
 8002d1e:	e7db      	b.n	8002cd8 <_puts_r+0x88>
 8002d20:	08004294 	.word	0x08004294
 8002d24:	080042b4 	.word	0x080042b4
 8002d28:	08004274 	.word	0x08004274

08002d2c <puts>:
 8002d2c:	4b02      	ldr	r3, [pc, #8]	; (8002d38 <puts+0xc>)
 8002d2e:	4601      	mov	r1, r0
 8002d30:	6818      	ldr	r0, [r3, #0]
 8002d32:	f7ff bf8d 	b.w	8002c50 <_puts_r>
 8002d36:	bf00      	nop
 8002d38:	2000000c 	.word	0x2000000c

08002d3c <setvbuf>:
 8002d3c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8002d40:	461d      	mov	r5, r3
 8002d42:	4b5d      	ldr	r3, [pc, #372]	; (8002eb8 <setvbuf+0x17c>)
 8002d44:	681f      	ldr	r7, [r3, #0]
 8002d46:	4604      	mov	r4, r0
 8002d48:	460e      	mov	r6, r1
 8002d4a:	4690      	mov	r8, r2
 8002d4c:	b127      	cbz	r7, 8002d58 <setvbuf+0x1c>
 8002d4e:	69bb      	ldr	r3, [r7, #24]
 8002d50:	b913      	cbnz	r3, 8002d58 <setvbuf+0x1c>
 8002d52:	4638      	mov	r0, r7
 8002d54:	f000 fab2 	bl	80032bc <__sinit>
 8002d58:	4b58      	ldr	r3, [pc, #352]	; (8002ebc <setvbuf+0x180>)
 8002d5a:	429c      	cmp	r4, r3
 8002d5c:	d167      	bne.n	8002e2e <setvbuf+0xf2>
 8002d5e:	687c      	ldr	r4, [r7, #4]
 8002d60:	f1b8 0f02 	cmp.w	r8, #2
 8002d64:	d006      	beq.n	8002d74 <setvbuf+0x38>
 8002d66:	f1b8 0f01 	cmp.w	r8, #1
 8002d6a:	f200 809f 	bhi.w	8002eac <setvbuf+0x170>
 8002d6e:	2d00      	cmp	r5, #0
 8002d70:	f2c0 809c 	blt.w	8002eac <setvbuf+0x170>
 8002d74:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002d76:	07db      	lsls	r3, r3, #31
 8002d78:	d405      	bmi.n	8002d86 <setvbuf+0x4a>
 8002d7a:	89a3      	ldrh	r3, [r4, #12]
 8002d7c:	0598      	lsls	r0, r3, #22
 8002d7e:	d402      	bmi.n	8002d86 <setvbuf+0x4a>
 8002d80:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002d82:	f000 fb39 	bl	80033f8 <__retarget_lock_acquire_recursive>
 8002d86:	4621      	mov	r1, r4
 8002d88:	4638      	mov	r0, r7
 8002d8a:	f000 fa03 	bl	8003194 <_fflush_r>
 8002d8e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002d90:	b141      	cbz	r1, 8002da4 <setvbuf+0x68>
 8002d92:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002d96:	4299      	cmp	r1, r3
 8002d98:	d002      	beq.n	8002da0 <setvbuf+0x64>
 8002d9a:	4638      	mov	r0, r7
 8002d9c:	f000 fb9a 	bl	80034d4 <_free_r>
 8002da0:	2300      	movs	r3, #0
 8002da2:	6363      	str	r3, [r4, #52]	; 0x34
 8002da4:	2300      	movs	r3, #0
 8002da6:	61a3      	str	r3, [r4, #24]
 8002da8:	6063      	str	r3, [r4, #4]
 8002daa:	89a3      	ldrh	r3, [r4, #12]
 8002dac:	0619      	lsls	r1, r3, #24
 8002dae:	d503      	bpl.n	8002db8 <setvbuf+0x7c>
 8002db0:	6921      	ldr	r1, [r4, #16]
 8002db2:	4638      	mov	r0, r7
 8002db4:	f000 fb8e 	bl	80034d4 <_free_r>
 8002db8:	89a3      	ldrh	r3, [r4, #12]
 8002dba:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 8002dbe:	f023 0303 	bic.w	r3, r3, #3
 8002dc2:	f1b8 0f02 	cmp.w	r8, #2
 8002dc6:	81a3      	strh	r3, [r4, #12]
 8002dc8:	d06c      	beq.n	8002ea4 <setvbuf+0x168>
 8002dca:	ab01      	add	r3, sp, #4
 8002dcc:	466a      	mov	r2, sp
 8002dce:	4621      	mov	r1, r4
 8002dd0:	4638      	mov	r0, r7
 8002dd2:	f000 fb13 	bl	80033fc <__swhatbuf_r>
 8002dd6:	89a3      	ldrh	r3, [r4, #12]
 8002dd8:	4318      	orrs	r0, r3
 8002dda:	81a0      	strh	r0, [r4, #12]
 8002ddc:	2d00      	cmp	r5, #0
 8002dde:	d130      	bne.n	8002e42 <setvbuf+0x106>
 8002de0:	9d00      	ldr	r5, [sp, #0]
 8002de2:	4628      	mov	r0, r5
 8002de4:	f000 fb6e 	bl	80034c4 <malloc>
 8002de8:	4606      	mov	r6, r0
 8002dea:	2800      	cmp	r0, #0
 8002dec:	d155      	bne.n	8002e9a <setvbuf+0x15e>
 8002dee:	f8dd 9000 	ldr.w	r9, [sp]
 8002df2:	45a9      	cmp	r9, r5
 8002df4:	d14a      	bne.n	8002e8c <setvbuf+0x150>
 8002df6:	f04f 35ff 	mov.w	r5, #4294967295
 8002dfa:	2200      	movs	r2, #0
 8002dfc:	60a2      	str	r2, [r4, #8]
 8002dfe:	f104 0247 	add.w	r2, r4, #71	; 0x47
 8002e02:	6022      	str	r2, [r4, #0]
 8002e04:	6122      	str	r2, [r4, #16]
 8002e06:	2201      	movs	r2, #1
 8002e08:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002e0c:	6162      	str	r2, [r4, #20]
 8002e0e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8002e10:	f043 0302 	orr.w	r3, r3, #2
 8002e14:	07d2      	lsls	r2, r2, #31
 8002e16:	81a3      	strh	r3, [r4, #12]
 8002e18:	d405      	bmi.n	8002e26 <setvbuf+0xea>
 8002e1a:	f413 7f00 	tst.w	r3, #512	; 0x200
 8002e1e:	d102      	bne.n	8002e26 <setvbuf+0xea>
 8002e20:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002e22:	f000 faea 	bl	80033fa <__retarget_lock_release_recursive>
 8002e26:	4628      	mov	r0, r5
 8002e28:	b003      	add	sp, #12
 8002e2a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002e2e:	4b24      	ldr	r3, [pc, #144]	; (8002ec0 <setvbuf+0x184>)
 8002e30:	429c      	cmp	r4, r3
 8002e32:	d101      	bne.n	8002e38 <setvbuf+0xfc>
 8002e34:	68bc      	ldr	r4, [r7, #8]
 8002e36:	e793      	b.n	8002d60 <setvbuf+0x24>
 8002e38:	4b22      	ldr	r3, [pc, #136]	; (8002ec4 <setvbuf+0x188>)
 8002e3a:	429c      	cmp	r4, r3
 8002e3c:	bf08      	it	eq
 8002e3e:	68fc      	ldreq	r4, [r7, #12]
 8002e40:	e78e      	b.n	8002d60 <setvbuf+0x24>
 8002e42:	2e00      	cmp	r6, #0
 8002e44:	d0cd      	beq.n	8002de2 <setvbuf+0xa6>
 8002e46:	69bb      	ldr	r3, [r7, #24]
 8002e48:	b913      	cbnz	r3, 8002e50 <setvbuf+0x114>
 8002e4a:	4638      	mov	r0, r7
 8002e4c:	f000 fa36 	bl	80032bc <__sinit>
 8002e50:	f1b8 0f01 	cmp.w	r8, #1
 8002e54:	bf08      	it	eq
 8002e56:	89a3      	ldrheq	r3, [r4, #12]
 8002e58:	6026      	str	r6, [r4, #0]
 8002e5a:	bf04      	itt	eq
 8002e5c:	f043 0301 	orreq.w	r3, r3, #1
 8002e60:	81a3      	strheq	r3, [r4, #12]
 8002e62:	89a2      	ldrh	r2, [r4, #12]
 8002e64:	f012 0308 	ands.w	r3, r2, #8
 8002e68:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8002e6c:	d01c      	beq.n	8002ea8 <setvbuf+0x16c>
 8002e6e:	07d3      	lsls	r3, r2, #31
 8002e70:	bf41      	itttt	mi
 8002e72:	2300      	movmi	r3, #0
 8002e74:	426d      	negmi	r5, r5
 8002e76:	60a3      	strmi	r3, [r4, #8]
 8002e78:	61a5      	strmi	r5, [r4, #24]
 8002e7a:	bf58      	it	pl
 8002e7c:	60a5      	strpl	r5, [r4, #8]
 8002e7e:	6e65      	ldr	r5, [r4, #100]	; 0x64
 8002e80:	f015 0501 	ands.w	r5, r5, #1
 8002e84:	d115      	bne.n	8002eb2 <setvbuf+0x176>
 8002e86:	f412 7f00 	tst.w	r2, #512	; 0x200
 8002e8a:	e7c8      	b.n	8002e1e <setvbuf+0xe2>
 8002e8c:	4648      	mov	r0, r9
 8002e8e:	f000 fb19 	bl	80034c4 <malloc>
 8002e92:	4606      	mov	r6, r0
 8002e94:	2800      	cmp	r0, #0
 8002e96:	d0ae      	beq.n	8002df6 <setvbuf+0xba>
 8002e98:	464d      	mov	r5, r9
 8002e9a:	89a3      	ldrh	r3, [r4, #12]
 8002e9c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002ea0:	81a3      	strh	r3, [r4, #12]
 8002ea2:	e7d0      	b.n	8002e46 <setvbuf+0x10a>
 8002ea4:	2500      	movs	r5, #0
 8002ea6:	e7a8      	b.n	8002dfa <setvbuf+0xbe>
 8002ea8:	60a3      	str	r3, [r4, #8]
 8002eaa:	e7e8      	b.n	8002e7e <setvbuf+0x142>
 8002eac:	f04f 35ff 	mov.w	r5, #4294967295
 8002eb0:	e7b9      	b.n	8002e26 <setvbuf+0xea>
 8002eb2:	2500      	movs	r5, #0
 8002eb4:	e7b7      	b.n	8002e26 <setvbuf+0xea>
 8002eb6:	bf00      	nop
 8002eb8:	2000000c 	.word	0x2000000c
 8002ebc:	08004294 	.word	0x08004294
 8002ec0:	080042b4 	.word	0x080042b4
 8002ec4:	08004274 	.word	0x08004274

08002ec8 <siprintf>:
 8002ec8:	b40e      	push	{r1, r2, r3}
 8002eca:	b500      	push	{lr}
 8002ecc:	b09c      	sub	sp, #112	; 0x70
 8002ece:	ab1d      	add	r3, sp, #116	; 0x74
 8002ed0:	9002      	str	r0, [sp, #8]
 8002ed2:	9006      	str	r0, [sp, #24]
 8002ed4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8002ed8:	4809      	ldr	r0, [pc, #36]	; (8002f00 <siprintf+0x38>)
 8002eda:	9107      	str	r1, [sp, #28]
 8002edc:	9104      	str	r1, [sp, #16]
 8002ede:	4909      	ldr	r1, [pc, #36]	; (8002f04 <siprintf+0x3c>)
 8002ee0:	f853 2b04 	ldr.w	r2, [r3], #4
 8002ee4:	9105      	str	r1, [sp, #20]
 8002ee6:	6800      	ldr	r0, [r0, #0]
 8002ee8:	9301      	str	r3, [sp, #4]
 8002eea:	a902      	add	r1, sp, #8
 8002eec:	f000 fbf8 	bl	80036e0 <_svfiprintf_r>
 8002ef0:	9b02      	ldr	r3, [sp, #8]
 8002ef2:	2200      	movs	r2, #0
 8002ef4:	701a      	strb	r2, [r3, #0]
 8002ef6:	b01c      	add	sp, #112	; 0x70
 8002ef8:	f85d eb04 	ldr.w	lr, [sp], #4
 8002efc:	b003      	add	sp, #12
 8002efe:	4770      	bx	lr
 8002f00:	2000000c 	.word	0x2000000c
 8002f04:	ffff0208 	.word	0xffff0208

08002f08 <__swbuf_r>:
 8002f08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f0a:	460e      	mov	r6, r1
 8002f0c:	4614      	mov	r4, r2
 8002f0e:	4605      	mov	r5, r0
 8002f10:	b118      	cbz	r0, 8002f1a <__swbuf_r+0x12>
 8002f12:	6983      	ldr	r3, [r0, #24]
 8002f14:	b90b      	cbnz	r3, 8002f1a <__swbuf_r+0x12>
 8002f16:	f000 f9d1 	bl	80032bc <__sinit>
 8002f1a:	4b21      	ldr	r3, [pc, #132]	; (8002fa0 <__swbuf_r+0x98>)
 8002f1c:	429c      	cmp	r4, r3
 8002f1e:	d12b      	bne.n	8002f78 <__swbuf_r+0x70>
 8002f20:	686c      	ldr	r4, [r5, #4]
 8002f22:	69a3      	ldr	r3, [r4, #24]
 8002f24:	60a3      	str	r3, [r4, #8]
 8002f26:	89a3      	ldrh	r3, [r4, #12]
 8002f28:	071a      	lsls	r2, r3, #28
 8002f2a:	d52f      	bpl.n	8002f8c <__swbuf_r+0x84>
 8002f2c:	6923      	ldr	r3, [r4, #16]
 8002f2e:	b36b      	cbz	r3, 8002f8c <__swbuf_r+0x84>
 8002f30:	6923      	ldr	r3, [r4, #16]
 8002f32:	6820      	ldr	r0, [r4, #0]
 8002f34:	1ac0      	subs	r0, r0, r3
 8002f36:	6963      	ldr	r3, [r4, #20]
 8002f38:	b2f6      	uxtb	r6, r6
 8002f3a:	4283      	cmp	r3, r0
 8002f3c:	4637      	mov	r7, r6
 8002f3e:	dc04      	bgt.n	8002f4a <__swbuf_r+0x42>
 8002f40:	4621      	mov	r1, r4
 8002f42:	4628      	mov	r0, r5
 8002f44:	f000 f926 	bl	8003194 <_fflush_r>
 8002f48:	bb30      	cbnz	r0, 8002f98 <__swbuf_r+0x90>
 8002f4a:	68a3      	ldr	r3, [r4, #8]
 8002f4c:	3b01      	subs	r3, #1
 8002f4e:	60a3      	str	r3, [r4, #8]
 8002f50:	6823      	ldr	r3, [r4, #0]
 8002f52:	1c5a      	adds	r2, r3, #1
 8002f54:	6022      	str	r2, [r4, #0]
 8002f56:	701e      	strb	r6, [r3, #0]
 8002f58:	6963      	ldr	r3, [r4, #20]
 8002f5a:	3001      	adds	r0, #1
 8002f5c:	4283      	cmp	r3, r0
 8002f5e:	d004      	beq.n	8002f6a <__swbuf_r+0x62>
 8002f60:	89a3      	ldrh	r3, [r4, #12]
 8002f62:	07db      	lsls	r3, r3, #31
 8002f64:	d506      	bpl.n	8002f74 <__swbuf_r+0x6c>
 8002f66:	2e0a      	cmp	r6, #10
 8002f68:	d104      	bne.n	8002f74 <__swbuf_r+0x6c>
 8002f6a:	4621      	mov	r1, r4
 8002f6c:	4628      	mov	r0, r5
 8002f6e:	f000 f911 	bl	8003194 <_fflush_r>
 8002f72:	b988      	cbnz	r0, 8002f98 <__swbuf_r+0x90>
 8002f74:	4638      	mov	r0, r7
 8002f76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002f78:	4b0a      	ldr	r3, [pc, #40]	; (8002fa4 <__swbuf_r+0x9c>)
 8002f7a:	429c      	cmp	r4, r3
 8002f7c:	d101      	bne.n	8002f82 <__swbuf_r+0x7a>
 8002f7e:	68ac      	ldr	r4, [r5, #8]
 8002f80:	e7cf      	b.n	8002f22 <__swbuf_r+0x1a>
 8002f82:	4b09      	ldr	r3, [pc, #36]	; (8002fa8 <__swbuf_r+0xa0>)
 8002f84:	429c      	cmp	r4, r3
 8002f86:	bf08      	it	eq
 8002f88:	68ec      	ldreq	r4, [r5, #12]
 8002f8a:	e7ca      	b.n	8002f22 <__swbuf_r+0x1a>
 8002f8c:	4621      	mov	r1, r4
 8002f8e:	4628      	mov	r0, r5
 8002f90:	f000 f80c 	bl	8002fac <__swsetup_r>
 8002f94:	2800      	cmp	r0, #0
 8002f96:	d0cb      	beq.n	8002f30 <__swbuf_r+0x28>
 8002f98:	f04f 37ff 	mov.w	r7, #4294967295
 8002f9c:	e7ea      	b.n	8002f74 <__swbuf_r+0x6c>
 8002f9e:	bf00      	nop
 8002fa0:	08004294 	.word	0x08004294
 8002fa4:	080042b4 	.word	0x080042b4
 8002fa8:	08004274 	.word	0x08004274

08002fac <__swsetup_r>:
 8002fac:	4b32      	ldr	r3, [pc, #200]	; (8003078 <__swsetup_r+0xcc>)
 8002fae:	b570      	push	{r4, r5, r6, lr}
 8002fb0:	681d      	ldr	r5, [r3, #0]
 8002fb2:	4606      	mov	r6, r0
 8002fb4:	460c      	mov	r4, r1
 8002fb6:	b125      	cbz	r5, 8002fc2 <__swsetup_r+0x16>
 8002fb8:	69ab      	ldr	r3, [r5, #24]
 8002fba:	b913      	cbnz	r3, 8002fc2 <__swsetup_r+0x16>
 8002fbc:	4628      	mov	r0, r5
 8002fbe:	f000 f97d 	bl	80032bc <__sinit>
 8002fc2:	4b2e      	ldr	r3, [pc, #184]	; (800307c <__swsetup_r+0xd0>)
 8002fc4:	429c      	cmp	r4, r3
 8002fc6:	d10f      	bne.n	8002fe8 <__swsetup_r+0x3c>
 8002fc8:	686c      	ldr	r4, [r5, #4]
 8002fca:	89a3      	ldrh	r3, [r4, #12]
 8002fcc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002fd0:	0719      	lsls	r1, r3, #28
 8002fd2:	d42c      	bmi.n	800302e <__swsetup_r+0x82>
 8002fd4:	06dd      	lsls	r5, r3, #27
 8002fd6:	d411      	bmi.n	8002ffc <__swsetup_r+0x50>
 8002fd8:	2309      	movs	r3, #9
 8002fda:	6033      	str	r3, [r6, #0]
 8002fdc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8002fe0:	81a3      	strh	r3, [r4, #12]
 8002fe2:	f04f 30ff 	mov.w	r0, #4294967295
 8002fe6:	e03e      	b.n	8003066 <__swsetup_r+0xba>
 8002fe8:	4b25      	ldr	r3, [pc, #148]	; (8003080 <__swsetup_r+0xd4>)
 8002fea:	429c      	cmp	r4, r3
 8002fec:	d101      	bne.n	8002ff2 <__swsetup_r+0x46>
 8002fee:	68ac      	ldr	r4, [r5, #8]
 8002ff0:	e7eb      	b.n	8002fca <__swsetup_r+0x1e>
 8002ff2:	4b24      	ldr	r3, [pc, #144]	; (8003084 <__swsetup_r+0xd8>)
 8002ff4:	429c      	cmp	r4, r3
 8002ff6:	bf08      	it	eq
 8002ff8:	68ec      	ldreq	r4, [r5, #12]
 8002ffa:	e7e6      	b.n	8002fca <__swsetup_r+0x1e>
 8002ffc:	0758      	lsls	r0, r3, #29
 8002ffe:	d512      	bpl.n	8003026 <__swsetup_r+0x7a>
 8003000:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003002:	b141      	cbz	r1, 8003016 <__swsetup_r+0x6a>
 8003004:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003008:	4299      	cmp	r1, r3
 800300a:	d002      	beq.n	8003012 <__swsetup_r+0x66>
 800300c:	4630      	mov	r0, r6
 800300e:	f000 fa61 	bl	80034d4 <_free_r>
 8003012:	2300      	movs	r3, #0
 8003014:	6363      	str	r3, [r4, #52]	; 0x34
 8003016:	89a3      	ldrh	r3, [r4, #12]
 8003018:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800301c:	81a3      	strh	r3, [r4, #12]
 800301e:	2300      	movs	r3, #0
 8003020:	6063      	str	r3, [r4, #4]
 8003022:	6923      	ldr	r3, [r4, #16]
 8003024:	6023      	str	r3, [r4, #0]
 8003026:	89a3      	ldrh	r3, [r4, #12]
 8003028:	f043 0308 	orr.w	r3, r3, #8
 800302c:	81a3      	strh	r3, [r4, #12]
 800302e:	6923      	ldr	r3, [r4, #16]
 8003030:	b94b      	cbnz	r3, 8003046 <__swsetup_r+0x9a>
 8003032:	89a3      	ldrh	r3, [r4, #12]
 8003034:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003038:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800303c:	d003      	beq.n	8003046 <__swsetup_r+0x9a>
 800303e:	4621      	mov	r1, r4
 8003040:	4630      	mov	r0, r6
 8003042:	f000 f9ff 	bl	8003444 <__smakebuf_r>
 8003046:	89a0      	ldrh	r0, [r4, #12]
 8003048:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800304c:	f010 0301 	ands.w	r3, r0, #1
 8003050:	d00a      	beq.n	8003068 <__swsetup_r+0xbc>
 8003052:	2300      	movs	r3, #0
 8003054:	60a3      	str	r3, [r4, #8]
 8003056:	6963      	ldr	r3, [r4, #20]
 8003058:	425b      	negs	r3, r3
 800305a:	61a3      	str	r3, [r4, #24]
 800305c:	6923      	ldr	r3, [r4, #16]
 800305e:	b943      	cbnz	r3, 8003072 <__swsetup_r+0xc6>
 8003060:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8003064:	d1ba      	bne.n	8002fdc <__swsetup_r+0x30>
 8003066:	bd70      	pop	{r4, r5, r6, pc}
 8003068:	0781      	lsls	r1, r0, #30
 800306a:	bf58      	it	pl
 800306c:	6963      	ldrpl	r3, [r4, #20]
 800306e:	60a3      	str	r3, [r4, #8]
 8003070:	e7f4      	b.n	800305c <__swsetup_r+0xb0>
 8003072:	2000      	movs	r0, #0
 8003074:	e7f7      	b.n	8003066 <__swsetup_r+0xba>
 8003076:	bf00      	nop
 8003078:	2000000c 	.word	0x2000000c
 800307c:	08004294 	.word	0x08004294
 8003080:	080042b4 	.word	0x080042b4
 8003084:	08004274 	.word	0x08004274

08003088 <__sflush_r>:
 8003088:	898a      	ldrh	r2, [r1, #12]
 800308a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800308e:	4605      	mov	r5, r0
 8003090:	0710      	lsls	r0, r2, #28
 8003092:	460c      	mov	r4, r1
 8003094:	d458      	bmi.n	8003148 <__sflush_r+0xc0>
 8003096:	684b      	ldr	r3, [r1, #4]
 8003098:	2b00      	cmp	r3, #0
 800309a:	dc05      	bgt.n	80030a8 <__sflush_r+0x20>
 800309c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800309e:	2b00      	cmp	r3, #0
 80030a0:	dc02      	bgt.n	80030a8 <__sflush_r+0x20>
 80030a2:	2000      	movs	r0, #0
 80030a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80030a8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80030aa:	2e00      	cmp	r6, #0
 80030ac:	d0f9      	beq.n	80030a2 <__sflush_r+0x1a>
 80030ae:	2300      	movs	r3, #0
 80030b0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80030b4:	682f      	ldr	r7, [r5, #0]
 80030b6:	602b      	str	r3, [r5, #0]
 80030b8:	d032      	beq.n	8003120 <__sflush_r+0x98>
 80030ba:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80030bc:	89a3      	ldrh	r3, [r4, #12]
 80030be:	075a      	lsls	r2, r3, #29
 80030c0:	d505      	bpl.n	80030ce <__sflush_r+0x46>
 80030c2:	6863      	ldr	r3, [r4, #4]
 80030c4:	1ac0      	subs	r0, r0, r3
 80030c6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80030c8:	b10b      	cbz	r3, 80030ce <__sflush_r+0x46>
 80030ca:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80030cc:	1ac0      	subs	r0, r0, r3
 80030ce:	2300      	movs	r3, #0
 80030d0:	4602      	mov	r2, r0
 80030d2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80030d4:	6a21      	ldr	r1, [r4, #32]
 80030d6:	4628      	mov	r0, r5
 80030d8:	47b0      	blx	r6
 80030da:	1c43      	adds	r3, r0, #1
 80030dc:	89a3      	ldrh	r3, [r4, #12]
 80030de:	d106      	bne.n	80030ee <__sflush_r+0x66>
 80030e0:	6829      	ldr	r1, [r5, #0]
 80030e2:	291d      	cmp	r1, #29
 80030e4:	d82c      	bhi.n	8003140 <__sflush_r+0xb8>
 80030e6:	4a2a      	ldr	r2, [pc, #168]	; (8003190 <__sflush_r+0x108>)
 80030e8:	40ca      	lsrs	r2, r1
 80030ea:	07d6      	lsls	r6, r2, #31
 80030ec:	d528      	bpl.n	8003140 <__sflush_r+0xb8>
 80030ee:	2200      	movs	r2, #0
 80030f0:	6062      	str	r2, [r4, #4]
 80030f2:	04d9      	lsls	r1, r3, #19
 80030f4:	6922      	ldr	r2, [r4, #16]
 80030f6:	6022      	str	r2, [r4, #0]
 80030f8:	d504      	bpl.n	8003104 <__sflush_r+0x7c>
 80030fa:	1c42      	adds	r2, r0, #1
 80030fc:	d101      	bne.n	8003102 <__sflush_r+0x7a>
 80030fe:	682b      	ldr	r3, [r5, #0]
 8003100:	b903      	cbnz	r3, 8003104 <__sflush_r+0x7c>
 8003102:	6560      	str	r0, [r4, #84]	; 0x54
 8003104:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003106:	602f      	str	r7, [r5, #0]
 8003108:	2900      	cmp	r1, #0
 800310a:	d0ca      	beq.n	80030a2 <__sflush_r+0x1a>
 800310c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003110:	4299      	cmp	r1, r3
 8003112:	d002      	beq.n	800311a <__sflush_r+0x92>
 8003114:	4628      	mov	r0, r5
 8003116:	f000 f9dd 	bl	80034d4 <_free_r>
 800311a:	2000      	movs	r0, #0
 800311c:	6360      	str	r0, [r4, #52]	; 0x34
 800311e:	e7c1      	b.n	80030a4 <__sflush_r+0x1c>
 8003120:	6a21      	ldr	r1, [r4, #32]
 8003122:	2301      	movs	r3, #1
 8003124:	4628      	mov	r0, r5
 8003126:	47b0      	blx	r6
 8003128:	1c41      	adds	r1, r0, #1
 800312a:	d1c7      	bne.n	80030bc <__sflush_r+0x34>
 800312c:	682b      	ldr	r3, [r5, #0]
 800312e:	2b00      	cmp	r3, #0
 8003130:	d0c4      	beq.n	80030bc <__sflush_r+0x34>
 8003132:	2b1d      	cmp	r3, #29
 8003134:	d001      	beq.n	800313a <__sflush_r+0xb2>
 8003136:	2b16      	cmp	r3, #22
 8003138:	d101      	bne.n	800313e <__sflush_r+0xb6>
 800313a:	602f      	str	r7, [r5, #0]
 800313c:	e7b1      	b.n	80030a2 <__sflush_r+0x1a>
 800313e:	89a3      	ldrh	r3, [r4, #12]
 8003140:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003144:	81a3      	strh	r3, [r4, #12]
 8003146:	e7ad      	b.n	80030a4 <__sflush_r+0x1c>
 8003148:	690f      	ldr	r7, [r1, #16]
 800314a:	2f00      	cmp	r7, #0
 800314c:	d0a9      	beq.n	80030a2 <__sflush_r+0x1a>
 800314e:	0793      	lsls	r3, r2, #30
 8003150:	680e      	ldr	r6, [r1, #0]
 8003152:	bf08      	it	eq
 8003154:	694b      	ldreq	r3, [r1, #20]
 8003156:	600f      	str	r7, [r1, #0]
 8003158:	bf18      	it	ne
 800315a:	2300      	movne	r3, #0
 800315c:	eba6 0807 	sub.w	r8, r6, r7
 8003160:	608b      	str	r3, [r1, #8]
 8003162:	f1b8 0f00 	cmp.w	r8, #0
 8003166:	dd9c      	ble.n	80030a2 <__sflush_r+0x1a>
 8003168:	6a21      	ldr	r1, [r4, #32]
 800316a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800316c:	4643      	mov	r3, r8
 800316e:	463a      	mov	r2, r7
 8003170:	4628      	mov	r0, r5
 8003172:	47b0      	blx	r6
 8003174:	2800      	cmp	r0, #0
 8003176:	dc06      	bgt.n	8003186 <__sflush_r+0xfe>
 8003178:	89a3      	ldrh	r3, [r4, #12]
 800317a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800317e:	81a3      	strh	r3, [r4, #12]
 8003180:	f04f 30ff 	mov.w	r0, #4294967295
 8003184:	e78e      	b.n	80030a4 <__sflush_r+0x1c>
 8003186:	4407      	add	r7, r0
 8003188:	eba8 0800 	sub.w	r8, r8, r0
 800318c:	e7e9      	b.n	8003162 <__sflush_r+0xda>
 800318e:	bf00      	nop
 8003190:	20400001 	.word	0x20400001

08003194 <_fflush_r>:
 8003194:	b538      	push	{r3, r4, r5, lr}
 8003196:	690b      	ldr	r3, [r1, #16]
 8003198:	4605      	mov	r5, r0
 800319a:	460c      	mov	r4, r1
 800319c:	b913      	cbnz	r3, 80031a4 <_fflush_r+0x10>
 800319e:	2500      	movs	r5, #0
 80031a0:	4628      	mov	r0, r5
 80031a2:	bd38      	pop	{r3, r4, r5, pc}
 80031a4:	b118      	cbz	r0, 80031ae <_fflush_r+0x1a>
 80031a6:	6983      	ldr	r3, [r0, #24]
 80031a8:	b90b      	cbnz	r3, 80031ae <_fflush_r+0x1a>
 80031aa:	f000 f887 	bl	80032bc <__sinit>
 80031ae:	4b14      	ldr	r3, [pc, #80]	; (8003200 <_fflush_r+0x6c>)
 80031b0:	429c      	cmp	r4, r3
 80031b2:	d11b      	bne.n	80031ec <_fflush_r+0x58>
 80031b4:	686c      	ldr	r4, [r5, #4]
 80031b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d0ef      	beq.n	800319e <_fflush_r+0xa>
 80031be:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80031c0:	07d0      	lsls	r0, r2, #31
 80031c2:	d404      	bmi.n	80031ce <_fflush_r+0x3a>
 80031c4:	0599      	lsls	r1, r3, #22
 80031c6:	d402      	bmi.n	80031ce <_fflush_r+0x3a>
 80031c8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80031ca:	f000 f915 	bl	80033f8 <__retarget_lock_acquire_recursive>
 80031ce:	4628      	mov	r0, r5
 80031d0:	4621      	mov	r1, r4
 80031d2:	f7ff ff59 	bl	8003088 <__sflush_r>
 80031d6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80031d8:	07da      	lsls	r2, r3, #31
 80031da:	4605      	mov	r5, r0
 80031dc:	d4e0      	bmi.n	80031a0 <_fflush_r+0xc>
 80031de:	89a3      	ldrh	r3, [r4, #12]
 80031e0:	059b      	lsls	r3, r3, #22
 80031e2:	d4dd      	bmi.n	80031a0 <_fflush_r+0xc>
 80031e4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80031e6:	f000 f908 	bl	80033fa <__retarget_lock_release_recursive>
 80031ea:	e7d9      	b.n	80031a0 <_fflush_r+0xc>
 80031ec:	4b05      	ldr	r3, [pc, #20]	; (8003204 <_fflush_r+0x70>)
 80031ee:	429c      	cmp	r4, r3
 80031f0:	d101      	bne.n	80031f6 <_fflush_r+0x62>
 80031f2:	68ac      	ldr	r4, [r5, #8]
 80031f4:	e7df      	b.n	80031b6 <_fflush_r+0x22>
 80031f6:	4b04      	ldr	r3, [pc, #16]	; (8003208 <_fflush_r+0x74>)
 80031f8:	429c      	cmp	r4, r3
 80031fa:	bf08      	it	eq
 80031fc:	68ec      	ldreq	r4, [r5, #12]
 80031fe:	e7da      	b.n	80031b6 <_fflush_r+0x22>
 8003200:	08004294 	.word	0x08004294
 8003204:	080042b4 	.word	0x080042b4
 8003208:	08004274 	.word	0x08004274

0800320c <std>:
 800320c:	2300      	movs	r3, #0
 800320e:	b510      	push	{r4, lr}
 8003210:	4604      	mov	r4, r0
 8003212:	e9c0 3300 	strd	r3, r3, [r0]
 8003216:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800321a:	6083      	str	r3, [r0, #8]
 800321c:	8181      	strh	r1, [r0, #12]
 800321e:	6643      	str	r3, [r0, #100]	; 0x64
 8003220:	81c2      	strh	r2, [r0, #14]
 8003222:	6183      	str	r3, [r0, #24]
 8003224:	4619      	mov	r1, r3
 8003226:	2208      	movs	r2, #8
 8003228:	305c      	adds	r0, #92	; 0x5c
 800322a:	f7ff fcf1 	bl	8002c10 <memset>
 800322e:	4b05      	ldr	r3, [pc, #20]	; (8003244 <std+0x38>)
 8003230:	6263      	str	r3, [r4, #36]	; 0x24
 8003232:	4b05      	ldr	r3, [pc, #20]	; (8003248 <std+0x3c>)
 8003234:	62a3      	str	r3, [r4, #40]	; 0x28
 8003236:	4b05      	ldr	r3, [pc, #20]	; (800324c <std+0x40>)
 8003238:	62e3      	str	r3, [r4, #44]	; 0x2c
 800323a:	4b05      	ldr	r3, [pc, #20]	; (8003250 <std+0x44>)
 800323c:	6224      	str	r4, [r4, #32]
 800323e:	6323      	str	r3, [r4, #48]	; 0x30
 8003240:	bd10      	pop	{r4, pc}
 8003242:	bf00      	nop
 8003244:	08003edd 	.word	0x08003edd
 8003248:	08003eff 	.word	0x08003eff
 800324c:	08003f37 	.word	0x08003f37
 8003250:	08003f5b 	.word	0x08003f5b

08003254 <_cleanup_r>:
 8003254:	4901      	ldr	r1, [pc, #4]	; (800325c <_cleanup_r+0x8>)
 8003256:	f000 b8af 	b.w	80033b8 <_fwalk_reent>
 800325a:	bf00      	nop
 800325c:	08003195 	.word	0x08003195

08003260 <__sfmoreglue>:
 8003260:	b570      	push	{r4, r5, r6, lr}
 8003262:	1e4a      	subs	r2, r1, #1
 8003264:	2568      	movs	r5, #104	; 0x68
 8003266:	4355      	muls	r5, r2
 8003268:	460e      	mov	r6, r1
 800326a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800326e:	f000 f981 	bl	8003574 <_malloc_r>
 8003272:	4604      	mov	r4, r0
 8003274:	b140      	cbz	r0, 8003288 <__sfmoreglue+0x28>
 8003276:	2100      	movs	r1, #0
 8003278:	e9c0 1600 	strd	r1, r6, [r0]
 800327c:	300c      	adds	r0, #12
 800327e:	60a0      	str	r0, [r4, #8]
 8003280:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8003284:	f7ff fcc4 	bl	8002c10 <memset>
 8003288:	4620      	mov	r0, r4
 800328a:	bd70      	pop	{r4, r5, r6, pc}

0800328c <__sfp_lock_acquire>:
 800328c:	4801      	ldr	r0, [pc, #4]	; (8003294 <__sfp_lock_acquire+0x8>)
 800328e:	f000 b8b3 	b.w	80033f8 <__retarget_lock_acquire_recursive>
 8003292:	bf00      	nop
 8003294:	200001bc 	.word	0x200001bc

08003298 <__sfp_lock_release>:
 8003298:	4801      	ldr	r0, [pc, #4]	; (80032a0 <__sfp_lock_release+0x8>)
 800329a:	f000 b8ae 	b.w	80033fa <__retarget_lock_release_recursive>
 800329e:	bf00      	nop
 80032a0:	200001bc 	.word	0x200001bc

080032a4 <__sinit_lock_acquire>:
 80032a4:	4801      	ldr	r0, [pc, #4]	; (80032ac <__sinit_lock_acquire+0x8>)
 80032a6:	f000 b8a7 	b.w	80033f8 <__retarget_lock_acquire_recursive>
 80032aa:	bf00      	nop
 80032ac:	200001b7 	.word	0x200001b7

080032b0 <__sinit_lock_release>:
 80032b0:	4801      	ldr	r0, [pc, #4]	; (80032b8 <__sinit_lock_release+0x8>)
 80032b2:	f000 b8a2 	b.w	80033fa <__retarget_lock_release_recursive>
 80032b6:	bf00      	nop
 80032b8:	200001b7 	.word	0x200001b7

080032bc <__sinit>:
 80032bc:	b510      	push	{r4, lr}
 80032be:	4604      	mov	r4, r0
 80032c0:	f7ff fff0 	bl	80032a4 <__sinit_lock_acquire>
 80032c4:	69a3      	ldr	r3, [r4, #24]
 80032c6:	b11b      	cbz	r3, 80032d0 <__sinit+0x14>
 80032c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80032cc:	f7ff bff0 	b.w	80032b0 <__sinit_lock_release>
 80032d0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80032d4:	6523      	str	r3, [r4, #80]	; 0x50
 80032d6:	4b13      	ldr	r3, [pc, #76]	; (8003324 <__sinit+0x68>)
 80032d8:	4a13      	ldr	r2, [pc, #76]	; (8003328 <__sinit+0x6c>)
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	62a2      	str	r2, [r4, #40]	; 0x28
 80032de:	42a3      	cmp	r3, r4
 80032e0:	bf04      	itt	eq
 80032e2:	2301      	moveq	r3, #1
 80032e4:	61a3      	streq	r3, [r4, #24]
 80032e6:	4620      	mov	r0, r4
 80032e8:	f000 f820 	bl	800332c <__sfp>
 80032ec:	6060      	str	r0, [r4, #4]
 80032ee:	4620      	mov	r0, r4
 80032f0:	f000 f81c 	bl	800332c <__sfp>
 80032f4:	60a0      	str	r0, [r4, #8]
 80032f6:	4620      	mov	r0, r4
 80032f8:	f000 f818 	bl	800332c <__sfp>
 80032fc:	2200      	movs	r2, #0
 80032fe:	60e0      	str	r0, [r4, #12]
 8003300:	2104      	movs	r1, #4
 8003302:	6860      	ldr	r0, [r4, #4]
 8003304:	f7ff ff82 	bl	800320c <std>
 8003308:	68a0      	ldr	r0, [r4, #8]
 800330a:	2201      	movs	r2, #1
 800330c:	2109      	movs	r1, #9
 800330e:	f7ff ff7d 	bl	800320c <std>
 8003312:	68e0      	ldr	r0, [r4, #12]
 8003314:	2202      	movs	r2, #2
 8003316:	2112      	movs	r1, #18
 8003318:	f7ff ff78 	bl	800320c <std>
 800331c:	2301      	movs	r3, #1
 800331e:	61a3      	str	r3, [r4, #24]
 8003320:	e7d2      	b.n	80032c8 <__sinit+0xc>
 8003322:	bf00      	nop
 8003324:	08004270 	.word	0x08004270
 8003328:	08003255 	.word	0x08003255

0800332c <__sfp>:
 800332c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800332e:	4607      	mov	r7, r0
 8003330:	f7ff ffac 	bl	800328c <__sfp_lock_acquire>
 8003334:	4b1e      	ldr	r3, [pc, #120]	; (80033b0 <__sfp+0x84>)
 8003336:	681e      	ldr	r6, [r3, #0]
 8003338:	69b3      	ldr	r3, [r6, #24]
 800333a:	b913      	cbnz	r3, 8003342 <__sfp+0x16>
 800333c:	4630      	mov	r0, r6
 800333e:	f7ff ffbd 	bl	80032bc <__sinit>
 8003342:	3648      	adds	r6, #72	; 0x48
 8003344:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8003348:	3b01      	subs	r3, #1
 800334a:	d503      	bpl.n	8003354 <__sfp+0x28>
 800334c:	6833      	ldr	r3, [r6, #0]
 800334e:	b30b      	cbz	r3, 8003394 <__sfp+0x68>
 8003350:	6836      	ldr	r6, [r6, #0]
 8003352:	e7f7      	b.n	8003344 <__sfp+0x18>
 8003354:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8003358:	b9d5      	cbnz	r5, 8003390 <__sfp+0x64>
 800335a:	4b16      	ldr	r3, [pc, #88]	; (80033b4 <__sfp+0x88>)
 800335c:	60e3      	str	r3, [r4, #12]
 800335e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8003362:	6665      	str	r5, [r4, #100]	; 0x64
 8003364:	f000 f847 	bl	80033f6 <__retarget_lock_init_recursive>
 8003368:	f7ff ff96 	bl	8003298 <__sfp_lock_release>
 800336c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8003370:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8003374:	6025      	str	r5, [r4, #0]
 8003376:	61a5      	str	r5, [r4, #24]
 8003378:	2208      	movs	r2, #8
 800337a:	4629      	mov	r1, r5
 800337c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003380:	f7ff fc46 	bl	8002c10 <memset>
 8003384:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8003388:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800338c:	4620      	mov	r0, r4
 800338e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003390:	3468      	adds	r4, #104	; 0x68
 8003392:	e7d9      	b.n	8003348 <__sfp+0x1c>
 8003394:	2104      	movs	r1, #4
 8003396:	4638      	mov	r0, r7
 8003398:	f7ff ff62 	bl	8003260 <__sfmoreglue>
 800339c:	4604      	mov	r4, r0
 800339e:	6030      	str	r0, [r6, #0]
 80033a0:	2800      	cmp	r0, #0
 80033a2:	d1d5      	bne.n	8003350 <__sfp+0x24>
 80033a4:	f7ff ff78 	bl	8003298 <__sfp_lock_release>
 80033a8:	230c      	movs	r3, #12
 80033aa:	603b      	str	r3, [r7, #0]
 80033ac:	e7ee      	b.n	800338c <__sfp+0x60>
 80033ae:	bf00      	nop
 80033b0:	08004270 	.word	0x08004270
 80033b4:	ffff0001 	.word	0xffff0001

080033b8 <_fwalk_reent>:
 80033b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80033bc:	4606      	mov	r6, r0
 80033be:	4688      	mov	r8, r1
 80033c0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80033c4:	2700      	movs	r7, #0
 80033c6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80033ca:	f1b9 0901 	subs.w	r9, r9, #1
 80033ce:	d505      	bpl.n	80033dc <_fwalk_reent+0x24>
 80033d0:	6824      	ldr	r4, [r4, #0]
 80033d2:	2c00      	cmp	r4, #0
 80033d4:	d1f7      	bne.n	80033c6 <_fwalk_reent+0xe>
 80033d6:	4638      	mov	r0, r7
 80033d8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80033dc:	89ab      	ldrh	r3, [r5, #12]
 80033de:	2b01      	cmp	r3, #1
 80033e0:	d907      	bls.n	80033f2 <_fwalk_reent+0x3a>
 80033e2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80033e6:	3301      	adds	r3, #1
 80033e8:	d003      	beq.n	80033f2 <_fwalk_reent+0x3a>
 80033ea:	4629      	mov	r1, r5
 80033ec:	4630      	mov	r0, r6
 80033ee:	47c0      	blx	r8
 80033f0:	4307      	orrs	r7, r0
 80033f2:	3568      	adds	r5, #104	; 0x68
 80033f4:	e7e9      	b.n	80033ca <_fwalk_reent+0x12>

080033f6 <__retarget_lock_init_recursive>:
 80033f6:	4770      	bx	lr

080033f8 <__retarget_lock_acquire_recursive>:
 80033f8:	4770      	bx	lr

080033fa <__retarget_lock_release_recursive>:
 80033fa:	4770      	bx	lr

080033fc <__swhatbuf_r>:
 80033fc:	b570      	push	{r4, r5, r6, lr}
 80033fe:	460e      	mov	r6, r1
 8003400:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003404:	2900      	cmp	r1, #0
 8003406:	b096      	sub	sp, #88	; 0x58
 8003408:	4614      	mov	r4, r2
 800340a:	461d      	mov	r5, r3
 800340c:	da07      	bge.n	800341e <__swhatbuf_r+0x22>
 800340e:	2300      	movs	r3, #0
 8003410:	602b      	str	r3, [r5, #0]
 8003412:	89b3      	ldrh	r3, [r6, #12]
 8003414:	061a      	lsls	r2, r3, #24
 8003416:	d410      	bmi.n	800343a <__swhatbuf_r+0x3e>
 8003418:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800341c:	e00e      	b.n	800343c <__swhatbuf_r+0x40>
 800341e:	466a      	mov	r2, sp
 8003420:	f000 fdc2 	bl	8003fa8 <_fstat_r>
 8003424:	2800      	cmp	r0, #0
 8003426:	dbf2      	blt.n	800340e <__swhatbuf_r+0x12>
 8003428:	9a01      	ldr	r2, [sp, #4]
 800342a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800342e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8003432:	425a      	negs	r2, r3
 8003434:	415a      	adcs	r2, r3
 8003436:	602a      	str	r2, [r5, #0]
 8003438:	e7ee      	b.n	8003418 <__swhatbuf_r+0x1c>
 800343a:	2340      	movs	r3, #64	; 0x40
 800343c:	2000      	movs	r0, #0
 800343e:	6023      	str	r3, [r4, #0]
 8003440:	b016      	add	sp, #88	; 0x58
 8003442:	bd70      	pop	{r4, r5, r6, pc}

08003444 <__smakebuf_r>:
 8003444:	898b      	ldrh	r3, [r1, #12]
 8003446:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003448:	079d      	lsls	r5, r3, #30
 800344a:	4606      	mov	r6, r0
 800344c:	460c      	mov	r4, r1
 800344e:	d507      	bpl.n	8003460 <__smakebuf_r+0x1c>
 8003450:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003454:	6023      	str	r3, [r4, #0]
 8003456:	6123      	str	r3, [r4, #16]
 8003458:	2301      	movs	r3, #1
 800345a:	6163      	str	r3, [r4, #20]
 800345c:	b002      	add	sp, #8
 800345e:	bd70      	pop	{r4, r5, r6, pc}
 8003460:	ab01      	add	r3, sp, #4
 8003462:	466a      	mov	r2, sp
 8003464:	f7ff ffca 	bl	80033fc <__swhatbuf_r>
 8003468:	9900      	ldr	r1, [sp, #0]
 800346a:	4605      	mov	r5, r0
 800346c:	4630      	mov	r0, r6
 800346e:	f000 f881 	bl	8003574 <_malloc_r>
 8003472:	b948      	cbnz	r0, 8003488 <__smakebuf_r+0x44>
 8003474:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003478:	059a      	lsls	r2, r3, #22
 800347a:	d4ef      	bmi.n	800345c <__smakebuf_r+0x18>
 800347c:	f023 0303 	bic.w	r3, r3, #3
 8003480:	f043 0302 	orr.w	r3, r3, #2
 8003484:	81a3      	strh	r3, [r4, #12]
 8003486:	e7e3      	b.n	8003450 <__smakebuf_r+0xc>
 8003488:	4b0d      	ldr	r3, [pc, #52]	; (80034c0 <__smakebuf_r+0x7c>)
 800348a:	62b3      	str	r3, [r6, #40]	; 0x28
 800348c:	89a3      	ldrh	r3, [r4, #12]
 800348e:	6020      	str	r0, [r4, #0]
 8003490:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003494:	81a3      	strh	r3, [r4, #12]
 8003496:	9b00      	ldr	r3, [sp, #0]
 8003498:	6163      	str	r3, [r4, #20]
 800349a:	9b01      	ldr	r3, [sp, #4]
 800349c:	6120      	str	r0, [r4, #16]
 800349e:	b15b      	cbz	r3, 80034b8 <__smakebuf_r+0x74>
 80034a0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80034a4:	4630      	mov	r0, r6
 80034a6:	f000 fd91 	bl	8003fcc <_isatty_r>
 80034aa:	b128      	cbz	r0, 80034b8 <__smakebuf_r+0x74>
 80034ac:	89a3      	ldrh	r3, [r4, #12]
 80034ae:	f023 0303 	bic.w	r3, r3, #3
 80034b2:	f043 0301 	orr.w	r3, r3, #1
 80034b6:	81a3      	strh	r3, [r4, #12]
 80034b8:	89a0      	ldrh	r0, [r4, #12]
 80034ba:	4305      	orrs	r5, r0
 80034bc:	81a5      	strh	r5, [r4, #12]
 80034be:	e7cd      	b.n	800345c <__smakebuf_r+0x18>
 80034c0:	08003255 	.word	0x08003255

080034c4 <malloc>:
 80034c4:	4b02      	ldr	r3, [pc, #8]	; (80034d0 <malloc+0xc>)
 80034c6:	4601      	mov	r1, r0
 80034c8:	6818      	ldr	r0, [r3, #0]
 80034ca:	f000 b853 	b.w	8003574 <_malloc_r>
 80034ce:	bf00      	nop
 80034d0:	2000000c 	.word	0x2000000c

080034d4 <_free_r>:
 80034d4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80034d6:	2900      	cmp	r1, #0
 80034d8:	d048      	beq.n	800356c <_free_r+0x98>
 80034da:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80034de:	9001      	str	r0, [sp, #4]
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	f1a1 0404 	sub.w	r4, r1, #4
 80034e6:	bfb8      	it	lt
 80034e8:	18e4      	addlt	r4, r4, r3
 80034ea:	f000 fdb9 	bl	8004060 <__malloc_lock>
 80034ee:	4a20      	ldr	r2, [pc, #128]	; (8003570 <_free_r+0x9c>)
 80034f0:	9801      	ldr	r0, [sp, #4]
 80034f2:	6813      	ldr	r3, [r2, #0]
 80034f4:	4615      	mov	r5, r2
 80034f6:	b933      	cbnz	r3, 8003506 <_free_r+0x32>
 80034f8:	6063      	str	r3, [r4, #4]
 80034fa:	6014      	str	r4, [r2, #0]
 80034fc:	b003      	add	sp, #12
 80034fe:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003502:	f000 bdb3 	b.w	800406c <__malloc_unlock>
 8003506:	42a3      	cmp	r3, r4
 8003508:	d90b      	bls.n	8003522 <_free_r+0x4e>
 800350a:	6821      	ldr	r1, [r4, #0]
 800350c:	1862      	adds	r2, r4, r1
 800350e:	4293      	cmp	r3, r2
 8003510:	bf04      	itt	eq
 8003512:	681a      	ldreq	r2, [r3, #0]
 8003514:	685b      	ldreq	r3, [r3, #4]
 8003516:	6063      	str	r3, [r4, #4]
 8003518:	bf04      	itt	eq
 800351a:	1852      	addeq	r2, r2, r1
 800351c:	6022      	streq	r2, [r4, #0]
 800351e:	602c      	str	r4, [r5, #0]
 8003520:	e7ec      	b.n	80034fc <_free_r+0x28>
 8003522:	461a      	mov	r2, r3
 8003524:	685b      	ldr	r3, [r3, #4]
 8003526:	b10b      	cbz	r3, 800352c <_free_r+0x58>
 8003528:	42a3      	cmp	r3, r4
 800352a:	d9fa      	bls.n	8003522 <_free_r+0x4e>
 800352c:	6811      	ldr	r1, [r2, #0]
 800352e:	1855      	adds	r5, r2, r1
 8003530:	42a5      	cmp	r5, r4
 8003532:	d10b      	bne.n	800354c <_free_r+0x78>
 8003534:	6824      	ldr	r4, [r4, #0]
 8003536:	4421      	add	r1, r4
 8003538:	1854      	adds	r4, r2, r1
 800353a:	42a3      	cmp	r3, r4
 800353c:	6011      	str	r1, [r2, #0]
 800353e:	d1dd      	bne.n	80034fc <_free_r+0x28>
 8003540:	681c      	ldr	r4, [r3, #0]
 8003542:	685b      	ldr	r3, [r3, #4]
 8003544:	6053      	str	r3, [r2, #4]
 8003546:	4421      	add	r1, r4
 8003548:	6011      	str	r1, [r2, #0]
 800354a:	e7d7      	b.n	80034fc <_free_r+0x28>
 800354c:	d902      	bls.n	8003554 <_free_r+0x80>
 800354e:	230c      	movs	r3, #12
 8003550:	6003      	str	r3, [r0, #0]
 8003552:	e7d3      	b.n	80034fc <_free_r+0x28>
 8003554:	6825      	ldr	r5, [r4, #0]
 8003556:	1961      	adds	r1, r4, r5
 8003558:	428b      	cmp	r3, r1
 800355a:	bf04      	itt	eq
 800355c:	6819      	ldreq	r1, [r3, #0]
 800355e:	685b      	ldreq	r3, [r3, #4]
 8003560:	6063      	str	r3, [r4, #4]
 8003562:	bf04      	itt	eq
 8003564:	1949      	addeq	r1, r1, r5
 8003566:	6021      	streq	r1, [r4, #0]
 8003568:	6054      	str	r4, [r2, #4]
 800356a:	e7c7      	b.n	80034fc <_free_r+0x28>
 800356c:	b003      	add	sp, #12
 800356e:	bd30      	pop	{r4, r5, pc}
 8003570:	20000090 	.word	0x20000090

08003574 <_malloc_r>:
 8003574:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003576:	1ccd      	adds	r5, r1, #3
 8003578:	f025 0503 	bic.w	r5, r5, #3
 800357c:	3508      	adds	r5, #8
 800357e:	2d0c      	cmp	r5, #12
 8003580:	bf38      	it	cc
 8003582:	250c      	movcc	r5, #12
 8003584:	2d00      	cmp	r5, #0
 8003586:	4606      	mov	r6, r0
 8003588:	db01      	blt.n	800358e <_malloc_r+0x1a>
 800358a:	42a9      	cmp	r1, r5
 800358c:	d903      	bls.n	8003596 <_malloc_r+0x22>
 800358e:	230c      	movs	r3, #12
 8003590:	6033      	str	r3, [r6, #0]
 8003592:	2000      	movs	r0, #0
 8003594:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003596:	f000 fd63 	bl	8004060 <__malloc_lock>
 800359a:	4921      	ldr	r1, [pc, #132]	; (8003620 <_malloc_r+0xac>)
 800359c:	680a      	ldr	r2, [r1, #0]
 800359e:	4614      	mov	r4, r2
 80035a0:	b99c      	cbnz	r4, 80035ca <_malloc_r+0x56>
 80035a2:	4f20      	ldr	r7, [pc, #128]	; (8003624 <_malloc_r+0xb0>)
 80035a4:	683b      	ldr	r3, [r7, #0]
 80035a6:	b923      	cbnz	r3, 80035b2 <_malloc_r+0x3e>
 80035a8:	4621      	mov	r1, r4
 80035aa:	4630      	mov	r0, r6
 80035ac:	f000 fc86 	bl	8003ebc <_sbrk_r>
 80035b0:	6038      	str	r0, [r7, #0]
 80035b2:	4629      	mov	r1, r5
 80035b4:	4630      	mov	r0, r6
 80035b6:	f000 fc81 	bl	8003ebc <_sbrk_r>
 80035ba:	1c43      	adds	r3, r0, #1
 80035bc:	d123      	bne.n	8003606 <_malloc_r+0x92>
 80035be:	230c      	movs	r3, #12
 80035c0:	6033      	str	r3, [r6, #0]
 80035c2:	4630      	mov	r0, r6
 80035c4:	f000 fd52 	bl	800406c <__malloc_unlock>
 80035c8:	e7e3      	b.n	8003592 <_malloc_r+0x1e>
 80035ca:	6823      	ldr	r3, [r4, #0]
 80035cc:	1b5b      	subs	r3, r3, r5
 80035ce:	d417      	bmi.n	8003600 <_malloc_r+0x8c>
 80035d0:	2b0b      	cmp	r3, #11
 80035d2:	d903      	bls.n	80035dc <_malloc_r+0x68>
 80035d4:	6023      	str	r3, [r4, #0]
 80035d6:	441c      	add	r4, r3
 80035d8:	6025      	str	r5, [r4, #0]
 80035da:	e004      	b.n	80035e6 <_malloc_r+0x72>
 80035dc:	6863      	ldr	r3, [r4, #4]
 80035de:	42a2      	cmp	r2, r4
 80035e0:	bf0c      	ite	eq
 80035e2:	600b      	streq	r3, [r1, #0]
 80035e4:	6053      	strne	r3, [r2, #4]
 80035e6:	4630      	mov	r0, r6
 80035e8:	f000 fd40 	bl	800406c <__malloc_unlock>
 80035ec:	f104 000b 	add.w	r0, r4, #11
 80035f0:	1d23      	adds	r3, r4, #4
 80035f2:	f020 0007 	bic.w	r0, r0, #7
 80035f6:	1ac2      	subs	r2, r0, r3
 80035f8:	d0cc      	beq.n	8003594 <_malloc_r+0x20>
 80035fa:	1a1b      	subs	r3, r3, r0
 80035fc:	50a3      	str	r3, [r4, r2]
 80035fe:	e7c9      	b.n	8003594 <_malloc_r+0x20>
 8003600:	4622      	mov	r2, r4
 8003602:	6864      	ldr	r4, [r4, #4]
 8003604:	e7cc      	b.n	80035a0 <_malloc_r+0x2c>
 8003606:	1cc4      	adds	r4, r0, #3
 8003608:	f024 0403 	bic.w	r4, r4, #3
 800360c:	42a0      	cmp	r0, r4
 800360e:	d0e3      	beq.n	80035d8 <_malloc_r+0x64>
 8003610:	1a21      	subs	r1, r4, r0
 8003612:	4630      	mov	r0, r6
 8003614:	f000 fc52 	bl	8003ebc <_sbrk_r>
 8003618:	3001      	adds	r0, #1
 800361a:	d1dd      	bne.n	80035d8 <_malloc_r+0x64>
 800361c:	e7cf      	b.n	80035be <_malloc_r+0x4a>
 800361e:	bf00      	nop
 8003620:	20000090 	.word	0x20000090
 8003624:	20000094 	.word	0x20000094

08003628 <__ssputs_r>:
 8003628:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800362c:	688e      	ldr	r6, [r1, #8]
 800362e:	429e      	cmp	r6, r3
 8003630:	4682      	mov	sl, r0
 8003632:	460c      	mov	r4, r1
 8003634:	4690      	mov	r8, r2
 8003636:	461f      	mov	r7, r3
 8003638:	d838      	bhi.n	80036ac <__ssputs_r+0x84>
 800363a:	898a      	ldrh	r2, [r1, #12]
 800363c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003640:	d032      	beq.n	80036a8 <__ssputs_r+0x80>
 8003642:	6825      	ldr	r5, [r4, #0]
 8003644:	6909      	ldr	r1, [r1, #16]
 8003646:	eba5 0901 	sub.w	r9, r5, r1
 800364a:	6965      	ldr	r5, [r4, #20]
 800364c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003650:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003654:	3301      	adds	r3, #1
 8003656:	444b      	add	r3, r9
 8003658:	106d      	asrs	r5, r5, #1
 800365a:	429d      	cmp	r5, r3
 800365c:	bf38      	it	cc
 800365e:	461d      	movcc	r5, r3
 8003660:	0553      	lsls	r3, r2, #21
 8003662:	d531      	bpl.n	80036c8 <__ssputs_r+0xa0>
 8003664:	4629      	mov	r1, r5
 8003666:	f7ff ff85 	bl	8003574 <_malloc_r>
 800366a:	4606      	mov	r6, r0
 800366c:	b950      	cbnz	r0, 8003684 <__ssputs_r+0x5c>
 800366e:	230c      	movs	r3, #12
 8003670:	f8ca 3000 	str.w	r3, [sl]
 8003674:	89a3      	ldrh	r3, [r4, #12]
 8003676:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800367a:	81a3      	strh	r3, [r4, #12]
 800367c:	f04f 30ff 	mov.w	r0, #4294967295
 8003680:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003684:	6921      	ldr	r1, [r4, #16]
 8003686:	464a      	mov	r2, r9
 8003688:	f000 fcc2 	bl	8004010 <memcpy>
 800368c:	89a3      	ldrh	r3, [r4, #12]
 800368e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003692:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003696:	81a3      	strh	r3, [r4, #12]
 8003698:	6126      	str	r6, [r4, #16]
 800369a:	6165      	str	r5, [r4, #20]
 800369c:	444e      	add	r6, r9
 800369e:	eba5 0509 	sub.w	r5, r5, r9
 80036a2:	6026      	str	r6, [r4, #0]
 80036a4:	60a5      	str	r5, [r4, #8]
 80036a6:	463e      	mov	r6, r7
 80036a8:	42be      	cmp	r6, r7
 80036aa:	d900      	bls.n	80036ae <__ssputs_r+0x86>
 80036ac:	463e      	mov	r6, r7
 80036ae:	4632      	mov	r2, r6
 80036b0:	6820      	ldr	r0, [r4, #0]
 80036b2:	4641      	mov	r1, r8
 80036b4:	f000 fcba 	bl	800402c <memmove>
 80036b8:	68a3      	ldr	r3, [r4, #8]
 80036ba:	6822      	ldr	r2, [r4, #0]
 80036bc:	1b9b      	subs	r3, r3, r6
 80036be:	4432      	add	r2, r6
 80036c0:	60a3      	str	r3, [r4, #8]
 80036c2:	6022      	str	r2, [r4, #0]
 80036c4:	2000      	movs	r0, #0
 80036c6:	e7db      	b.n	8003680 <__ssputs_r+0x58>
 80036c8:	462a      	mov	r2, r5
 80036ca:	f000 fcd5 	bl	8004078 <_realloc_r>
 80036ce:	4606      	mov	r6, r0
 80036d0:	2800      	cmp	r0, #0
 80036d2:	d1e1      	bne.n	8003698 <__ssputs_r+0x70>
 80036d4:	6921      	ldr	r1, [r4, #16]
 80036d6:	4650      	mov	r0, sl
 80036d8:	f7ff fefc 	bl	80034d4 <_free_r>
 80036dc:	e7c7      	b.n	800366e <__ssputs_r+0x46>
	...

080036e0 <_svfiprintf_r>:
 80036e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80036e4:	4698      	mov	r8, r3
 80036e6:	898b      	ldrh	r3, [r1, #12]
 80036e8:	061b      	lsls	r3, r3, #24
 80036ea:	b09d      	sub	sp, #116	; 0x74
 80036ec:	4607      	mov	r7, r0
 80036ee:	460d      	mov	r5, r1
 80036f0:	4614      	mov	r4, r2
 80036f2:	d50e      	bpl.n	8003712 <_svfiprintf_r+0x32>
 80036f4:	690b      	ldr	r3, [r1, #16]
 80036f6:	b963      	cbnz	r3, 8003712 <_svfiprintf_r+0x32>
 80036f8:	2140      	movs	r1, #64	; 0x40
 80036fa:	f7ff ff3b 	bl	8003574 <_malloc_r>
 80036fe:	6028      	str	r0, [r5, #0]
 8003700:	6128      	str	r0, [r5, #16]
 8003702:	b920      	cbnz	r0, 800370e <_svfiprintf_r+0x2e>
 8003704:	230c      	movs	r3, #12
 8003706:	603b      	str	r3, [r7, #0]
 8003708:	f04f 30ff 	mov.w	r0, #4294967295
 800370c:	e0d1      	b.n	80038b2 <_svfiprintf_r+0x1d2>
 800370e:	2340      	movs	r3, #64	; 0x40
 8003710:	616b      	str	r3, [r5, #20]
 8003712:	2300      	movs	r3, #0
 8003714:	9309      	str	r3, [sp, #36]	; 0x24
 8003716:	2320      	movs	r3, #32
 8003718:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800371c:	f8cd 800c 	str.w	r8, [sp, #12]
 8003720:	2330      	movs	r3, #48	; 0x30
 8003722:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80038cc <_svfiprintf_r+0x1ec>
 8003726:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800372a:	f04f 0901 	mov.w	r9, #1
 800372e:	4623      	mov	r3, r4
 8003730:	469a      	mov	sl, r3
 8003732:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003736:	b10a      	cbz	r2, 800373c <_svfiprintf_r+0x5c>
 8003738:	2a25      	cmp	r2, #37	; 0x25
 800373a:	d1f9      	bne.n	8003730 <_svfiprintf_r+0x50>
 800373c:	ebba 0b04 	subs.w	fp, sl, r4
 8003740:	d00b      	beq.n	800375a <_svfiprintf_r+0x7a>
 8003742:	465b      	mov	r3, fp
 8003744:	4622      	mov	r2, r4
 8003746:	4629      	mov	r1, r5
 8003748:	4638      	mov	r0, r7
 800374a:	f7ff ff6d 	bl	8003628 <__ssputs_r>
 800374e:	3001      	adds	r0, #1
 8003750:	f000 80aa 	beq.w	80038a8 <_svfiprintf_r+0x1c8>
 8003754:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003756:	445a      	add	r2, fp
 8003758:	9209      	str	r2, [sp, #36]	; 0x24
 800375a:	f89a 3000 	ldrb.w	r3, [sl]
 800375e:	2b00      	cmp	r3, #0
 8003760:	f000 80a2 	beq.w	80038a8 <_svfiprintf_r+0x1c8>
 8003764:	2300      	movs	r3, #0
 8003766:	f04f 32ff 	mov.w	r2, #4294967295
 800376a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800376e:	f10a 0a01 	add.w	sl, sl, #1
 8003772:	9304      	str	r3, [sp, #16]
 8003774:	9307      	str	r3, [sp, #28]
 8003776:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800377a:	931a      	str	r3, [sp, #104]	; 0x68
 800377c:	4654      	mov	r4, sl
 800377e:	2205      	movs	r2, #5
 8003780:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003784:	4851      	ldr	r0, [pc, #324]	; (80038cc <_svfiprintf_r+0x1ec>)
 8003786:	f7fc fd2b 	bl	80001e0 <memchr>
 800378a:	9a04      	ldr	r2, [sp, #16]
 800378c:	b9d8      	cbnz	r0, 80037c6 <_svfiprintf_r+0xe6>
 800378e:	06d0      	lsls	r0, r2, #27
 8003790:	bf44      	itt	mi
 8003792:	2320      	movmi	r3, #32
 8003794:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003798:	0711      	lsls	r1, r2, #28
 800379a:	bf44      	itt	mi
 800379c:	232b      	movmi	r3, #43	; 0x2b
 800379e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80037a2:	f89a 3000 	ldrb.w	r3, [sl]
 80037a6:	2b2a      	cmp	r3, #42	; 0x2a
 80037a8:	d015      	beq.n	80037d6 <_svfiprintf_r+0xf6>
 80037aa:	9a07      	ldr	r2, [sp, #28]
 80037ac:	4654      	mov	r4, sl
 80037ae:	2000      	movs	r0, #0
 80037b0:	f04f 0c0a 	mov.w	ip, #10
 80037b4:	4621      	mov	r1, r4
 80037b6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80037ba:	3b30      	subs	r3, #48	; 0x30
 80037bc:	2b09      	cmp	r3, #9
 80037be:	d94e      	bls.n	800385e <_svfiprintf_r+0x17e>
 80037c0:	b1b0      	cbz	r0, 80037f0 <_svfiprintf_r+0x110>
 80037c2:	9207      	str	r2, [sp, #28]
 80037c4:	e014      	b.n	80037f0 <_svfiprintf_r+0x110>
 80037c6:	eba0 0308 	sub.w	r3, r0, r8
 80037ca:	fa09 f303 	lsl.w	r3, r9, r3
 80037ce:	4313      	orrs	r3, r2
 80037d0:	9304      	str	r3, [sp, #16]
 80037d2:	46a2      	mov	sl, r4
 80037d4:	e7d2      	b.n	800377c <_svfiprintf_r+0x9c>
 80037d6:	9b03      	ldr	r3, [sp, #12]
 80037d8:	1d19      	adds	r1, r3, #4
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	9103      	str	r1, [sp, #12]
 80037de:	2b00      	cmp	r3, #0
 80037e0:	bfbb      	ittet	lt
 80037e2:	425b      	neglt	r3, r3
 80037e4:	f042 0202 	orrlt.w	r2, r2, #2
 80037e8:	9307      	strge	r3, [sp, #28]
 80037ea:	9307      	strlt	r3, [sp, #28]
 80037ec:	bfb8      	it	lt
 80037ee:	9204      	strlt	r2, [sp, #16]
 80037f0:	7823      	ldrb	r3, [r4, #0]
 80037f2:	2b2e      	cmp	r3, #46	; 0x2e
 80037f4:	d10c      	bne.n	8003810 <_svfiprintf_r+0x130>
 80037f6:	7863      	ldrb	r3, [r4, #1]
 80037f8:	2b2a      	cmp	r3, #42	; 0x2a
 80037fa:	d135      	bne.n	8003868 <_svfiprintf_r+0x188>
 80037fc:	9b03      	ldr	r3, [sp, #12]
 80037fe:	1d1a      	adds	r2, r3, #4
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	9203      	str	r2, [sp, #12]
 8003804:	2b00      	cmp	r3, #0
 8003806:	bfb8      	it	lt
 8003808:	f04f 33ff 	movlt.w	r3, #4294967295
 800380c:	3402      	adds	r4, #2
 800380e:	9305      	str	r3, [sp, #20]
 8003810:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80038dc <_svfiprintf_r+0x1fc>
 8003814:	7821      	ldrb	r1, [r4, #0]
 8003816:	2203      	movs	r2, #3
 8003818:	4650      	mov	r0, sl
 800381a:	f7fc fce1 	bl	80001e0 <memchr>
 800381e:	b140      	cbz	r0, 8003832 <_svfiprintf_r+0x152>
 8003820:	2340      	movs	r3, #64	; 0x40
 8003822:	eba0 000a 	sub.w	r0, r0, sl
 8003826:	fa03 f000 	lsl.w	r0, r3, r0
 800382a:	9b04      	ldr	r3, [sp, #16]
 800382c:	4303      	orrs	r3, r0
 800382e:	3401      	adds	r4, #1
 8003830:	9304      	str	r3, [sp, #16]
 8003832:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003836:	4826      	ldr	r0, [pc, #152]	; (80038d0 <_svfiprintf_r+0x1f0>)
 8003838:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800383c:	2206      	movs	r2, #6
 800383e:	f7fc fccf 	bl	80001e0 <memchr>
 8003842:	2800      	cmp	r0, #0
 8003844:	d038      	beq.n	80038b8 <_svfiprintf_r+0x1d8>
 8003846:	4b23      	ldr	r3, [pc, #140]	; (80038d4 <_svfiprintf_r+0x1f4>)
 8003848:	bb1b      	cbnz	r3, 8003892 <_svfiprintf_r+0x1b2>
 800384a:	9b03      	ldr	r3, [sp, #12]
 800384c:	3307      	adds	r3, #7
 800384e:	f023 0307 	bic.w	r3, r3, #7
 8003852:	3308      	adds	r3, #8
 8003854:	9303      	str	r3, [sp, #12]
 8003856:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003858:	4433      	add	r3, r6
 800385a:	9309      	str	r3, [sp, #36]	; 0x24
 800385c:	e767      	b.n	800372e <_svfiprintf_r+0x4e>
 800385e:	fb0c 3202 	mla	r2, ip, r2, r3
 8003862:	460c      	mov	r4, r1
 8003864:	2001      	movs	r0, #1
 8003866:	e7a5      	b.n	80037b4 <_svfiprintf_r+0xd4>
 8003868:	2300      	movs	r3, #0
 800386a:	3401      	adds	r4, #1
 800386c:	9305      	str	r3, [sp, #20]
 800386e:	4619      	mov	r1, r3
 8003870:	f04f 0c0a 	mov.w	ip, #10
 8003874:	4620      	mov	r0, r4
 8003876:	f810 2b01 	ldrb.w	r2, [r0], #1
 800387a:	3a30      	subs	r2, #48	; 0x30
 800387c:	2a09      	cmp	r2, #9
 800387e:	d903      	bls.n	8003888 <_svfiprintf_r+0x1a8>
 8003880:	2b00      	cmp	r3, #0
 8003882:	d0c5      	beq.n	8003810 <_svfiprintf_r+0x130>
 8003884:	9105      	str	r1, [sp, #20]
 8003886:	e7c3      	b.n	8003810 <_svfiprintf_r+0x130>
 8003888:	fb0c 2101 	mla	r1, ip, r1, r2
 800388c:	4604      	mov	r4, r0
 800388e:	2301      	movs	r3, #1
 8003890:	e7f0      	b.n	8003874 <_svfiprintf_r+0x194>
 8003892:	ab03      	add	r3, sp, #12
 8003894:	9300      	str	r3, [sp, #0]
 8003896:	462a      	mov	r2, r5
 8003898:	4b0f      	ldr	r3, [pc, #60]	; (80038d8 <_svfiprintf_r+0x1f8>)
 800389a:	a904      	add	r1, sp, #16
 800389c:	4638      	mov	r0, r7
 800389e:	f3af 8000 	nop.w
 80038a2:	1c42      	adds	r2, r0, #1
 80038a4:	4606      	mov	r6, r0
 80038a6:	d1d6      	bne.n	8003856 <_svfiprintf_r+0x176>
 80038a8:	89ab      	ldrh	r3, [r5, #12]
 80038aa:	065b      	lsls	r3, r3, #25
 80038ac:	f53f af2c 	bmi.w	8003708 <_svfiprintf_r+0x28>
 80038b0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80038b2:	b01d      	add	sp, #116	; 0x74
 80038b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80038b8:	ab03      	add	r3, sp, #12
 80038ba:	9300      	str	r3, [sp, #0]
 80038bc:	462a      	mov	r2, r5
 80038be:	4b06      	ldr	r3, [pc, #24]	; (80038d8 <_svfiprintf_r+0x1f8>)
 80038c0:	a904      	add	r1, sp, #16
 80038c2:	4638      	mov	r0, r7
 80038c4:	f000 f9d4 	bl	8003c70 <_printf_i>
 80038c8:	e7eb      	b.n	80038a2 <_svfiprintf_r+0x1c2>
 80038ca:	bf00      	nop
 80038cc:	080042d4 	.word	0x080042d4
 80038d0:	080042de 	.word	0x080042de
 80038d4:	00000000 	.word	0x00000000
 80038d8:	08003629 	.word	0x08003629
 80038dc:	080042da 	.word	0x080042da

080038e0 <__sfputc_r>:
 80038e0:	6893      	ldr	r3, [r2, #8]
 80038e2:	3b01      	subs	r3, #1
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	b410      	push	{r4}
 80038e8:	6093      	str	r3, [r2, #8]
 80038ea:	da08      	bge.n	80038fe <__sfputc_r+0x1e>
 80038ec:	6994      	ldr	r4, [r2, #24]
 80038ee:	42a3      	cmp	r3, r4
 80038f0:	db01      	blt.n	80038f6 <__sfputc_r+0x16>
 80038f2:	290a      	cmp	r1, #10
 80038f4:	d103      	bne.n	80038fe <__sfputc_r+0x1e>
 80038f6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80038fa:	f7ff bb05 	b.w	8002f08 <__swbuf_r>
 80038fe:	6813      	ldr	r3, [r2, #0]
 8003900:	1c58      	adds	r0, r3, #1
 8003902:	6010      	str	r0, [r2, #0]
 8003904:	7019      	strb	r1, [r3, #0]
 8003906:	4608      	mov	r0, r1
 8003908:	f85d 4b04 	ldr.w	r4, [sp], #4
 800390c:	4770      	bx	lr

0800390e <__sfputs_r>:
 800390e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003910:	4606      	mov	r6, r0
 8003912:	460f      	mov	r7, r1
 8003914:	4614      	mov	r4, r2
 8003916:	18d5      	adds	r5, r2, r3
 8003918:	42ac      	cmp	r4, r5
 800391a:	d101      	bne.n	8003920 <__sfputs_r+0x12>
 800391c:	2000      	movs	r0, #0
 800391e:	e007      	b.n	8003930 <__sfputs_r+0x22>
 8003920:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003924:	463a      	mov	r2, r7
 8003926:	4630      	mov	r0, r6
 8003928:	f7ff ffda 	bl	80038e0 <__sfputc_r>
 800392c:	1c43      	adds	r3, r0, #1
 800392e:	d1f3      	bne.n	8003918 <__sfputs_r+0xa>
 8003930:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003934 <_vfiprintf_r>:
 8003934:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003938:	460d      	mov	r5, r1
 800393a:	b09d      	sub	sp, #116	; 0x74
 800393c:	4614      	mov	r4, r2
 800393e:	4698      	mov	r8, r3
 8003940:	4606      	mov	r6, r0
 8003942:	b118      	cbz	r0, 800394c <_vfiprintf_r+0x18>
 8003944:	6983      	ldr	r3, [r0, #24]
 8003946:	b90b      	cbnz	r3, 800394c <_vfiprintf_r+0x18>
 8003948:	f7ff fcb8 	bl	80032bc <__sinit>
 800394c:	4b89      	ldr	r3, [pc, #548]	; (8003b74 <_vfiprintf_r+0x240>)
 800394e:	429d      	cmp	r5, r3
 8003950:	d11b      	bne.n	800398a <_vfiprintf_r+0x56>
 8003952:	6875      	ldr	r5, [r6, #4]
 8003954:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003956:	07d9      	lsls	r1, r3, #31
 8003958:	d405      	bmi.n	8003966 <_vfiprintf_r+0x32>
 800395a:	89ab      	ldrh	r3, [r5, #12]
 800395c:	059a      	lsls	r2, r3, #22
 800395e:	d402      	bmi.n	8003966 <_vfiprintf_r+0x32>
 8003960:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003962:	f7ff fd49 	bl	80033f8 <__retarget_lock_acquire_recursive>
 8003966:	89ab      	ldrh	r3, [r5, #12]
 8003968:	071b      	lsls	r3, r3, #28
 800396a:	d501      	bpl.n	8003970 <_vfiprintf_r+0x3c>
 800396c:	692b      	ldr	r3, [r5, #16]
 800396e:	b9eb      	cbnz	r3, 80039ac <_vfiprintf_r+0x78>
 8003970:	4629      	mov	r1, r5
 8003972:	4630      	mov	r0, r6
 8003974:	f7ff fb1a 	bl	8002fac <__swsetup_r>
 8003978:	b1c0      	cbz	r0, 80039ac <_vfiprintf_r+0x78>
 800397a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800397c:	07dc      	lsls	r4, r3, #31
 800397e:	d50e      	bpl.n	800399e <_vfiprintf_r+0x6a>
 8003980:	f04f 30ff 	mov.w	r0, #4294967295
 8003984:	b01d      	add	sp, #116	; 0x74
 8003986:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800398a:	4b7b      	ldr	r3, [pc, #492]	; (8003b78 <_vfiprintf_r+0x244>)
 800398c:	429d      	cmp	r5, r3
 800398e:	d101      	bne.n	8003994 <_vfiprintf_r+0x60>
 8003990:	68b5      	ldr	r5, [r6, #8]
 8003992:	e7df      	b.n	8003954 <_vfiprintf_r+0x20>
 8003994:	4b79      	ldr	r3, [pc, #484]	; (8003b7c <_vfiprintf_r+0x248>)
 8003996:	429d      	cmp	r5, r3
 8003998:	bf08      	it	eq
 800399a:	68f5      	ldreq	r5, [r6, #12]
 800399c:	e7da      	b.n	8003954 <_vfiprintf_r+0x20>
 800399e:	89ab      	ldrh	r3, [r5, #12]
 80039a0:	0598      	lsls	r0, r3, #22
 80039a2:	d4ed      	bmi.n	8003980 <_vfiprintf_r+0x4c>
 80039a4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80039a6:	f7ff fd28 	bl	80033fa <__retarget_lock_release_recursive>
 80039aa:	e7e9      	b.n	8003980 <_vfiprintf_r+0x4c>
 80039ac:	2300      	movs	r3, #0
 80039ae:	9309      	str	r3, [sp, #36]	; 0x24
 80039b0:	2320      	movs	r3, #32
 80039b2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80039b6:	f8cd 800c 	str.w	r8, [sp, #12]
 80039ba:	2330      	movs	r3, #48	; 0x30
 80039bc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8003b80 <_vfiprintf_r+0x24c>
 80039c0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80039c4:	f04f 0901 	mov.w	r9, #1
 80039c8:	4623      	mov	r3, r4
 80039ca:	469a      	mov	sl, r3
 80039cc:	f813 2b01 	ldrb.w	r2, [r3], #1
 80039d0:	b10a      	cbz	r2, 80039d6 <_vfiprintf_r+0xa2>
 80039d2:	2a25      	cmp	r2, #37	; 0x25
 80039d4:	d1f9      	bne.n	80039ca <_vfiprintf_r+0x96>
 80039d6:	ebba 0b04 	subs.w	fp, sl, r4
 80039da:	d00b      	beq.n	80039f4 <_vfiprintf_r+0xc0>
 80039dc:	465b      	mov	r3, fp
 80039de:	4622      	mov	r2, r4
 80039e0:	4629      	mov	r1, r5
 80039e2:	4630      	mov	r0, r6
 80039e4:	f7ff ff93 	bl	800390e <__sfputs_r>
 80039e8:	3001      	adds	r0, #1
 80039ea:	f000 80aa 	beq.w	8003b42 <_vfiprintf_r+0x20e>
 80039ee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80039f0:	445a      	add	r2, fp
 80039f2:	9209      	str	r2, [sp, #36]	; 0x24
 80039f4:	f89a 3000 	ldrb.w	r3, [sl]
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	f000 80a2 	beq.w	8003b42 <_vfiprintf_r+0x20e>
 80039fe:	2300      	movs	r3, #0
 8003a00:	f04f 32ff 	mov.w	r2, #4294967295
 8003a04:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003a08:	f10a 0a01 	add.w	sl, sl, #1
 8003a0c:	9304      	str	r3, [sp, #16]
 8003a0e:	9307      	str	r3, [sp, #28]
 8003a10:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003a14:	931a      	str	r3, [sp, #104]	; 0x68
 8003a16:	4654      	mov	r4, sl
 8003a18:	2205      	movs	r2, #5
 8003a1a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003a1e:	4858      	ldr	r0, [pc, #352]	; (8003b80 <_vfiprintf_r+0x24c>)
 8003a20:	f7fc fbde 	bl	80001e0 <memchr>
 8003a24:	9a04      	ldr	r2, [sp, #16]
 8003a26:	b9d8      	cbnz	r0, 8003a60 <_vfiprintf_r+0x12c>
 8003a28:	06d1      	lsls	r1, r2, #27
 8003a2a:	bf44      	itt	mi
 8003a2c:	2320      	movmi	r3, #32
 8003a2e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003a32:	0713      	lsls	r3, r2, #28
 8003a34:	bf44      	itt	mi
 8003a36:	232b      	movmi	r3, #43	; 0x2b
 8003a38:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003a3c:	f89a 3000 	ldrb.w	r3, [sl]
 8003a40:	2b2a      	cmp	r3, #42	; 0x2a
 8003a42:	d015      	beq.n	8003a70 <_vfiprintf_r+0x13c>
 8003a44:	9a07      	ldr	r2, [sp, #28]
 8003a46:	4654      	mov	r4, sl
 8003a48:	2000      	movs	r0, #0
 8003a4a:	f04f 0c0a 	mov.w	ip, #10
 8003a4e:	4621      	mov	r1, r4
 8003a50:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003a54:	3b30      	subs	r3, #48	; 0x30
 8003a56:	2b09      	cmp	r3, #9
 8003a58:	d94e      	bls.n	8003af8 <_vfiprintf_r+0x1c4>
 8003a5a:	b1b0      	cbz	r0, 8003a8a <_vfiprintf_r+0x156>
 8003a5c:	9207      	str	r2, [sp, #28]
 8003a5e:	e014      	b.n	8003a8a <_vfiprintf_r+0x156>
 8003a60:	eba0 0308 	sub.w	r3, r0, r8
 8003a64:	fa09 f303 	lsl.w	r3, r9, r3
 8003a68:	4313      	orrs	r3, r2
 8003a6a:	9304      	str	r3, [sp, #16]
 8003a6c:	46a2      	mov	sl, r4
 8003a6e:	e7d2      	b.n	8003a16 <_vfiprintf_r+0xe2>
 8003a70:	9b03      	ldr	r3, [sp, #12]
 8003a72:	1d19      	adds	r1, r3, #4
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	9103      	str	r1, [sp, #12]
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	bfbb      	ittet	lt
 8003a7c:	425b      	neglt	r3, r3
 8003a7e:	f042 0202 	orrlt.w	r2, r2, #2
 8003a82:	9307      	strge	r3, [sp, #28]
 8003a84:	9307      	strlt	r3, [sp, #28]
 8003a86:	bfb8      	it	lt
 8003a88:	9204      	strlt	r2, [sp, #16]
 8003a8a:	7823      	ldrb	r3, [r4, #0]
 8003a8c:	2b2e      	cmp	r3, #46	; 0x2e
 8003a8e:	d10c      	bne.n	8003aaa <_vfiprintf_r+0x176>
 8003a90:	7863      	ldrb	r3, [r4, #1]
 8003a92:	2b2a      	cmp	r3, #42	; 0x2a
 8003a94:	d135      	bne.n	8003b02 <_vfiprintf_r+0x1ce>
 8003a96:	9b03      	ldr	r3, [sp, #12]
 8003a98:	1d1a      	adds	r2, r3, #4
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	9203      	str	r2, [sp, #12]
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	bfb8      	it	lt
 8003aa2:	f04f 33ff 	movlt.w	r3, #4294967295
 8003aa6:	3402      	adds	r4, #2
 8003aa8:	9305      	str	r3, [sp, #20]
 8003aaa:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8003b90 <_vfiprintf_r+0x25c>
 8003aae:	7821      	ldrb	r1, [r4, #0]
 8003ab0:	2203      	movs	r2, #3
 8003ab2:	4650      	mov	r0, sl
 8003ab4:	f7fc fb94 	bl	80001e0 <memchr>
 8003ab8:	b140      	cbz	r0, 8003acc <_vfiprintf_r+0x198>
 8003aba:	2340      	movs	r3, #64	; 0x40
 8003abc:	eba0 000a 	sub.w	r0, r0, sl
 8003ac0:	fa03 f000 	lsl.w	r0, r3, r0
 8003ac4:	9b04      	ldr	r3, [sp, #16]
 8003ac6:	4303      	orrs	r3, r0
 8003ac8:	3401      	adds	r4, #1
 8003aca:	9304      	str	r3, [sp, #16]
 8003acc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003ad0:	482c      	ldr	r0, [pc, #176]	; (8003b84 <_vfiprintf_r+0x250>)
 8003ad2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003ad6:	2206      	movs	r2, #6
 8003ad8:	f7fc fb82 	bl	80001e0 <memchr>
 8003adc:	2800      	cmp	r0, #0
 8003ade:	d03f      	beq.n	8003b60 <_vfiprintf_r+0x22c>
 8003ae0:	4b29      	ldr	r3, [pc, #164]	; (8003b88 <_vfiprintf_r+0x254>)
 8003ae2:	bb1b      	cbnz	r3, 8003b2c <_vfiprintf_r+0x1f8>
 8003ae4:	9b03      	ldr	r3, [sp, #12]
 8003ae6:	3307      	adds	r3, #7
 8003ae8:	f023 0307 	bic.w	r3, r3, #7
 8003aec:	3308      	adds	r3, #8
 8003aee:	9303      	str	r3, [sp, #12]
 8003af0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003af2:	443b      	add	r3, r7
 8003af4:	9309      	str	r3, [sp, #36]	; 0x24
 8003af6:	e767      	b.n	80039c8 <_vfiprintf_r+0x94>
 8003af8:	fb0c 3202 	mla	r2, ip, r2, r3
 8003afc:	460c      	mov	r4, r1
 8003afe:	2001      	movs	r0, #1
 8003b00:	e7a5      	b.n	8003a4e <_vfiprintf_r+0x11a>
 8003b02:	2300      	movs	r3, #0
 8003b04:	3401      	adds	r4, #1
 8003b06:	9305      	str	r3, [sp, #20]
 8003b08:	4619      	mov	r1, r3
 8003b0a:	f04f 0c0a 	mov.w	ip, #10
 8003b0e:	4620      	mov	r0, r4
 8003b10:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003b14:	3a30      	subs	r2, #48	; 0x30
 8003b16:	2a09      	cmp	r2, #9
 8003b18:	d903      	bls.n	8003b22 <_vfiprintf_r+0x1ee>
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d0c5      	beq.n	8003aaa <_vfiprintf_r+0x176>
 8003b1e:	9105      	str	r1, [sp, #20]
 8003b20:	e7c3      	b.n	8003aaa <_vfiprintf_r+0x176>
 8003b22:	fb0c 2101 	mla	r1, ip, r1, r2
 8003b26:	4604      	mov	r4, r0
 8003b28:	2301      	movs	r3, #1
 8003b2a:	e7f0      	b.n	8003b0e <_vfiprintf_r+0x1da>
 8003b2c:	ab03      	add	r3, sp, #12
 8003b2e:	9300      	str	r3, [sp, #0]
 8003b30:	462a      	mov	r2, r5
 8003b32:	4b16      	ldr	r3, [pc, #88]	; (8003b8c <_vfiprintf_r+0x258>)
 8003b34:	a904      	add	r1, sp, #16
 8003b36:	4630      	mov	r0, r6
 8003b38:	f3af 8000 	nop.w
 8003b3c:	4607      	mov	r7, r0
 8003b3e:	1c78      	adds	r0, r7, #1
 8003b40:	d1d6      	bne.n	8003af0 <_vfiprintf_r+0x1bc>
 8003b42:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003b44:	07d9      	lsls	r1, r3, #31
 8003b46:	d405      	bmi.n	8003b54 <_vfiprintf_r+0x220>
 8003b48:	89ab      	ldrh	r3, [r5, #12]
 8003b4a:	059a      	lsls	r2, r3, #22
 8003b4c:	d402      	bmi.n	8003b54 <_vfiprintf_r+0x220>
 8003b4e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003b50:	f7ff fc53 	bl	80033fa <__retarget_lock_release_recursive>
 8003b54:	89ab      	ldrh	r3, [r5, #12]
 8003b56:	065b      	lsls	r3, r3, #25
 8003b58:	f53f af12 	bmi.w	8003980 <_vfiprintf_r+0x4c>
 8003b5c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003b5e:	e711      	b.n	8003984 <_vfiprintf_r+0x50>
 8003b60:	ab03      	add	r3, sp, #12
 8003b62:	9300      	str	r3, [sp, #0]
 8003b64:	462a      	mov	r2, r5
 8003b66:	4b09      	ldr	r3, [pc, #36]	; (8003b8c <_vfiprintf_r+0x258>)
 8003b68:	a904      	add	r1, sp, #16
 8003b6a:	4630      	mov	r0, r6
 8003b6c:	f000 f880 	bl	8003c70 <_printf_i>
 8003b70:	e7e4      	b.n	8003b3c <_vfiprintf_r+0x208>
 8003b72:	bf00      	nop
 8003b74:	08004294 	.word	0x08004294
 8003b78:	080042b4 	.word	0x080042b4
 8003b7c:	08004274 	.word	0x08004274
 8003b80:	080042d4 	.word	0x080042d4
 8003b84:	080042de 	.word	0x080042de
 8003b88:	00000000 	.word	0x00000000
 8003b8c:	0800390f 	.word	0x0800390f
 8003b90:	080042da 	.word	0x080042da

08003b94 <_printf_common>:
 8003b94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003b98:	4616      	mov	r6, r2
 8003b9a:	4699      	mov	r9, r3
 8003b9c:	688a      	ldr	r2, [r1, #8]
 8003b9e:	690b      	ldr	r3, [r1, #16]
 8003ba0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003ba4:	4293      	cmp	r3, r2
 8003ba6:	bfb8      	it	lt
 8003ba8:	4613      	movlt	r3, r2
 8003baa:	6033      	str	r3, [r6, #0]
 8003bac:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003bb0:	4607      	mov	r7, r0
 8003bb2:	460c      	mov	r4, r1
 8003bb4:	b10a      	cbz	r2, 8003bba <_printf_common+0x26>
 8003bb6:	3301      	adds	r3, #1
 8003bb8:	6033      	str	r3, [r6, #0]
 8003bba:	6823      	ldr	r3, [r4, #0]
 8003bbc:	0699      	lsls	r1, r3, #26
 8003bbe:	bf42      	ittt	mi
 8003bc0:	6833      	ldrmi	r3, [r6, #0]
 8003bc2:	3302      	addmi	r3, #2
 8003bc4:	6033      	strmi	r3, [r6, #0]
 8003bc6:	6825      	ldr	r5, [r4, #0]
 8003bc8:	f015 0506 	ands.w	r5, r5, #6
 8003bcc:	d106      	bne.n	8003bdc <_printf_common+0x48>
 8003bce:	f104 0a19 	add.w	sl, r4, #25
 8003bd2:	68e3      	ldr	r3, [r4, #12]
 8003bd4:	6832      	ldr	r2, [r6, #0]
 8003bd6:	1a9b      	subs	r3, r3, r2
 8003bd8:	42ab      	cmp	r3, r5
 8003bda:	dc26      	bgt.n	8003c2a <_printf_common+0x96>
 8003bdc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003be0:	1e13      	subs	r3, r2, #0
 8003be2:	6822      	ldr	r2, [r4, #0]
 8003be4:	bf18      	it	ne
 8003be6:	2301      	movne	r3, #1
 8003be8:	0692      	lsls	r2, r2, #26
 8003bea:	d42b      	bmi.n	8003c44 <_printf_common+0xb0>
 8003bec:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003bf0:	4649      	mov	r1, r9
 8003bf2:	4638      	mov	r0, r7
 8003bf4:	47c0      	blx	r8
 8003bf6:	3001      	adds	r0, #1
 8003bf8:	d01e      	beq.n	8003c38 <_printf_common+0xa4>
 8003bfa:	6823      	ldr	r3, [r4, #0]
 8003bfc:	68e5      	ldr	r5, [r4, #12]
 8003bfe:	6832      	ldr	r2, [r6, #0]
 8003c00:	f003 0306 	and.w	r3, r3, #6
 8003c04:	2b04      	cmp	r3, #4
 8003c06:	bf08      	it	eq
 8003c08:	1aad      	subeq	r5, r5, r2
 8003c0a:	68a3      	ldr	r3, [r4, #8]
 8003c0c:	6922      	ldr	r2, [r4, #16]
 8003c0e:	bf0c      	ite	eq
 8003c10:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003c14:	2500      	movne	r5, #0
 8003c16:	4293      	cmp	r3, r2
 8003c18:	bfc4      	itt	gt
 8003c1a:	1a9b      	subgt	r3, r3, r2
 8003c1c:	18ed      	addgt	r5, r5, r3
 8003c1e:	2600      	movs	r6, #0
 8003c20:	341a      	adds	r4, #26
 8003c22:	42b5      	cmp	r5, r6
 8003c24:	d11a      	bne.n	8003c5c <_printf_common+0xc8>
 8003c26:	2000      	movs	r0, #0
 8003c28:	e008      	b.n	8003c3c <_printf_common+0xa8>
 8003c2a:	2301      	movs	r3, #1
 8003c2c:	4652      	mov	r2, sl
 8003c2e:	4649      	mov	r1, r9
 8003c30:	4638      	mov	r0, r7
 8003c32:	47c0      	blx	r8
 8003c34:	3001      	adds	r0, #1
 8003c36:	d103      	bne.n	8003c40 <_printf_common+0xac>
 8003c38:	f04f 30ff 	mov.w	r0, #4294967295
 8003c3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003c40:	3501      	adds	r5, #1
 8003c42:	e7c6      	b.n	8003bd2 <_printf_common+0x3e>
 8003c44:	18e1      	adds	r1, r4, r3
 8003c46:	1c5a      	adds	r2, r3, #1
 8003c48:	2030      	movs	r0, #48	; 0x30
 8003c4a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003c4e:	4422      	add	r2, r4
 8003c50:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003c54:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003c58:	3302      	adds	r3, #2
 8003c5a:	e7c7      	b.n	8003bec <_printf_common+0x58>
 8003c5c:	2301      	movs	r3, #1
 8003c5e:	4622      	mov	r2, r4
 8003c60:	4649      	mov	r1, r9
 8003c62:	4638      	mov	r0, r7
 8003c64:	47c0      	blx	r8
 8003c66:	3001      	adds	r0, #1
 8003c68:	d0e6      	beq.n	8003c38 <_printf_common+0xa4>
 8003c6a:	3601      	adds	r6, #1
 8003c6c:	e7d9      	b.n	8003c22 <_printf_common+0x8e>
	...

08003c70 <_printf_i>:
 8003c70:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003c74:	460c      	mov	r4, r1
 8003c76:	4691      	mov	r9, r2
 8003c78:	7e27      	ldrb	r7, [r4, #24]
 8003c7a:	990c      	ldr	r1, [sp, #48]	; 0x30
 8003c7c:	2f78      	cmp	r7, #120	; 0x78
 8003c7e:	4680      	mov	r8, r0
 8003c80:	469a      	mov	sl, r3
 8003c82:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003c86:	d807      	bhi.n	8003c98 <_printf_i+0x28>
 8003c88:	2f62      	cmp	r7, #98	; 0x62
 8003c8a:	d80a      	bhi.n	8003ca2 <_printf_i+0x32>
 8003c8c:	2f00      	cmp	r7, #0
 8003c8e:	f000 80d8 	beq.w	8003e42 <_printf_i+0x1d2>
 8003c92:	2f58      	cmp	r7, #88	; 0x58
 8003c94:	f000 80a3 	beq.w	8003dde <_printf_i+0x16e>
 8003c98:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003c9c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003ca0:	e03a      	b.n	8003d18 <_printf_i+0xa8>
 8003ca2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003ca6:	2b15      	cmp	r3, #21
 8003ca8:	d8f6      	bhi.n	8003c98 <_printf_i+0x28>
 8003caa:	a001      	add	r0, pc, #4	; (adr r0, 8003cb0 <_printf_i+0x40>)
 8003cac:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8003cb0:	08003d09 	.word	0x08003d09
 8003cb4:	08003d1d 	.word	0x08003d1d
 8003cb8:	08003c99 	.word	0x08003c99
 8003cbc:	08003c99 	.word	0x08003c99
 8003cc0:	08003c99 	.word	0x08003c99
 8003cc4:	08003c99 	.word	0x08003c99
 8003cc8:	08003d1d 	.word	0x08003d1d
 8003ccc:	08003c99 	.word	0x08003c99
 8003cd0:	08003c99 	.word	0x08003c99
 8003cd4:	08003c99 	.word	0x08003c99
 8003cd8:	08003c99 	.word	0x08003c99
 8003cdc:	08003e29 	.word	0x08003e29
 8003ce0:	08003d4d 	.word	0x08003d4d
 8003ce4:	08003e0b 	.word	0x08003e0b
 8003ce8:	08003c99 	.word	0x08003c99
 8003cec:	08003c99 	.word	0x08003c99
 8003cf0:	08003e4b 	.word	0x08003e4b
 8003cf4:	08003c99 	.word	0x08003c99
 8003cf8:	08003d4d 	.word	0x08003d4d
 8003cfc:	08003c99 	.word	0x08003c99
 8003d00:	08003c99 	.word	0x08003c99
 8003d04:	08003e13 	.word	0x08003e13
 8003d08:	680b      	ldr	r3, [r1, #0]
 8003d0a:	1d1a      	adds	r2, r3, #4
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	600a      	str	r2, [r1, #0]
 8003d10:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003d14:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003d18:	2301      	movs	r3, #1
 8003d1a:	e0a3      	b.n	8003e64 <_printf_i+0x1f4>
 8003d1c:	6825      	ldr	r5, [r4, #0]
 8003d1e:	6808      	ldr	r0, [r1, #0]
 8003d20:	062e      	lsls	r6, r5, #24
 8003d22:	f100 0304 	add.w	r3, r0, #4
 8003d26:	d50a      	bpl.n	8003d3e <_printf_i+0xce>
 8003d28:	6805      	ldr	r5, [r0, #0]
 8003d2a:	600b      	str	r3, [r1, #0]
 8003d2c:	2d00      	cmp	r5, #0
 8003d2e:	da03      	bge.n	8003d38 <_printf_i+0xc8>
 8003d30:	232d      	movs	r3, #45	; 0x2d
 8003d32:	426d      	negs	r5, r5
 8003d34:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003d38:	485e      	ldr	r0, [pc, #376]	; (8003eb4 <_printf_i+0x244>)
 8003d3a:	230a      	movs	r3, #10
 8003d3c:	e019      	b.n	8003d72 <_printf_i+0x102>
 8003d3e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8003d42:	6805      	ldr	r5, [r0, #0]
 8003d44:	600b      	str	r3, [r1, #0]
 8003d46:	bf18      	it	ne
 8003d48:	b22d      	sxthne	r5, r5
 8003d4a:	e7ef      	b.n	8003d2c <_printf_i+0xbc>
 8003d4c:	680b      	ldr	r3, [r1, #0]
 8003d4e:	6825      	ldr	r5, [r4, #0]
 8003d50:	1d18      	adds	r0, r3, #4
 8003d52:	6008      	str	r0, [r1, #0]
 8003d54:	0628      	lsls	r0, r5, #24
 8003d56:	d501      	bpl.n	8003d5c <_printf_i+0xec>
 8003d58:	681d      	ldr	r5, [r3, #0]
 8003d5a:	e002      	b.n	8003d62 <_printf_i+0xf2>
 8003d5c:	0669      	lsls	r1, r5, #25
 8003d5e:	d5fb      	bpl.n	8003d58 <_printf_i+0xe8>
 8003d60:	881d      	ldrh	r5, [r3, #0]
 8003d62:	4854      	ldr	r0, [pc, #336]	; (8003eb4 <_printf_i+0x244>)
 8003d64:	2f6f      	cmp	r7, #111	; 0x6f
 8003d66:	bf0c      	ite	eq
 8003d68:	2308      	moveq	r3, #8
 8003d6a:	230a      	movne	r3, #10
 8003d6c:	2100      	movs	r1, #0
 8003d6e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003d72:	6866      	ldr	r6, [r4, #4]
 8003d74:	60a6      	str	r6, [r4, #8]
 8003d76:	2e00      	cmp	r6, #0
 8003d78:	bfa2      	ittt	ge
 8003d7a:	6821      	ldrge	r1, [r4, #0]
 8003d7c:	f021 0104 	bicge.w	r1, r1, #4
 8003d80:	6021      	strge	r1, [r4, #0]
 8003d82:	b90d      	cbnz	r5, 8003d88 <_printf_i+0x118>
 8003d84:	2e00      	cmp	r6, #0
 8003d86:	d04d      	beq.n	8003e24 <_printf_i+0x1b4>
 8003d88:	4616      	mov	r6, r2
 8003d8a:	fbb5 f1f3 	udiv	r1, r5, r3
 8003d8e:	fb03 5711 	mls	r7, r3, r1, r5
 8003d92:	5dc7      	ldrb	r7, [r0, r7]
 8003d94:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003d98:	462f      	mov	r7, r5
 8003d9a:	42bb      	cmp	r3, r7
 8003d9c:	460d      	mov	r5, r1
 8003d9e:	d9f4      	bls.n	8003d8a <_printf_i+0x11a>
 8003da0:	2b08      	cmp	r3, #8
 8003da2:	d10b      	bne.n	8003dbc <_printf_i+0x14c>
 8003da4:	6823      	ldr	r3, [r4, #0]
 8003da6:	07df      	lsls	r7, r3, #31
 8003da8:	d508      	bpl.n	8003dbc <_printf_i+0x14c>
 8003daa:	6923      	ldr	r3, [r4, #16]
 8003dac:	6861      	ldr	r1, [r4, #4]
 8003dae:	4299      	cmp	r1, r3
 8003db0:	bfde      	ittt	le
 8003db2:	2330      	movle	r3, #48	; 0x30
 8003db4:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003db8:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003dbc:	1b92      	subs	r2, r2, r6
 8003dbe:	6122      	str	r2, [r4, #16]
 8003dc0:	f8cd a000 	str.w	sl, [sp]
 8003dc4:	464b      	mov	r3, r9
 8003dc6:	aa03      	add	r2, sp, #12
 8003dc8:	4621      	mov	r1, r4
 8003dca:	4640      	mov	r0, r8
 8003dcc:	f7ff fee2 	bl	8003b94 <_printf_common>
 8003dd0:	3001      	adds	r0, #1
 8003dd2:	d14c      	bne.n	8003e6e <_printf_i+0x1fe>
 8003dd4:	f04f 30ff 	mov.w	r0, #4294967295
 8003dd8:	b004      	add	sp, #16
 8003dda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003dde:	4835      	ldr	r0, [pc, #212]	; (8003eb4 <_printf_i+0x244>)
 8003de0:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003de4:	6823      	ldr	r3, [r4, #0]
 8003de6:	680e      	ldr	r6, [r1, #0]
 8003de8:	061f      	lsls	r7, r3, #24
 8003dea:	f856 5b04 	ldr.w	r5, [r6], #4
 8003dee:	600e      	str	r6, [r1, #0]
 8003df0:	d514      	bpl.n	8003e1c <_printf_i+0x1ac>
 8003df2:	07d9      	lsls	r1, r3, #31
 8003df4:	bf44      	itt	mi
 8003df6:	f043 0320 	orrmi.w	r3, r3, #32
 8003dfa:	6023      	strmi	r3, [r4, #0]
 8003dfc:	b91d      	cbnz	r5, 8003e06 <_printf_i+0x196>
 8003dfe:	6823      	ldr	r3, [r4, #0]
 8003e00:	f023 0320 	bic.w	r3, r3, #32
 8003e04:	6023      	str	r3, [r4, #0]
 8003e06:	2310      	movs	r3, #16
 8003e08:	e7b0      	b.n	8003d6c <_printf_i+0xfc>
 8003e0a:	6823      	ldr	r3, [r4, #0]
 8003e0c:	f043 0320 	orr.w	r3, r3, #32
 8003e10:	6023      	str	r3, [r4, #0]
 8003e12:	2378      	movs	r3, #120	; 0x78
 8003e14:	4828      	ldr	r0, [pc, #160]	; (8003eb8 <_printf_i+0x248>)
 8003e16:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003e1a:	e7e3      	b.n	8003de4 <_printf_i+0x174>
 8003e1c:	065e      	lsls	r6, r3, #25
 8003e1e:	bf48      	it	mi
 8003e20:	b2ad      	uxthmi	r5, r5
 8003e22:	e7e6      	b.n	8003df2 <_printf_i+0x182>
 8003e24:	4616      	mov	r6, r2
 8003e26:	e7bb      	b.n	8003da0 <_printf_i+0x130>
 8003e28:	680b      	ldr	r3, [r1, #0]
 8003e2a:	6826      	ldr	r6, [r4, #0]
 8003e2c:	6960      	ldr	r0, [r4, #20]
 8003e2e:	1d1d      	adds	r5, r3, #4
 8003e30:	600d      	str	r5, [r1, #0]
 8003e32:	0635      	lsls	r5, r6, #24
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	d501      	bpl.n	8003e3c <_printf_i+0x1cc>
 8003e38:	6018      	str	r0, [r3, #0]
 8003e3a:	e002      	b.n	8003e42 <_printf_i+0x1d2>
 8003e3c:	0671      	lsls	r1, r6, #25
 8003e3e:	d5fb      	bpl.n	8003e38 <_printf_i+0x1c8>
 8003e40:	8018      	strh	r0, [r3, #0]
 8003e42:	2300      	movs	r3, #0
 8003e44:	6123      	str	r3, [r4, #16]
 8003e46:	4616      	mov	r6, r2
 8003e48:	e7ba      	b.n	8003dc0 <_printf_i+0x150>
 8003e4a:	680b      	ldr	r3, [r1, #0]
 8003e4c:	1d1a      	adds	r2, r3, #4
 8003e4e:	600a      	str	r2, [r1, #0]
 8003e50:	681e      	ldr	r6, [r3, #0]
 8003e52:	6862      	ldr	r2, [r4, #4]
 8003e54:	2100      	movs	r1, #0
 8003e56:	4630      	mov	r0, r6
 8003e58:	f7fc f9c2 	bl	80001e0 <memchr>
 8003e5c:	b108      	cbz	r0, 8003e62 <_printf_i+0x1f2>
 8003e5e:	1b80      	subs	r0, r0, r6
 8003e60:	6060      	str	r0, [r4, #4]
 8003e62:	6863      	ldr	r3, [r4, #4]
 8003e64:	6123      	str	r3, [r4, #16]
 8003e66:	2300      	movs	r3, #0
 8003e68:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003e6c:	e7a8      	b.n	8003dc0 <_printf_i+0x150>
 8003e6e:	6923      	ldr	r3, [r4, #16]
 8003e70:	4632      	mov	r2, r6
 8003e72:	4649      	mov	r1, r9
 8003e74:	4640      	mov	r0, r8
 8003e76:	47d0      	blx	sl
 8003e78:	3001      	adds	r0, #1
 8003e7a:	d0ab      	beq.n	8003dd4 <_printf_i+0x164>
 8003e7c:	6823      	ldr	r3, [r4, #0]
 8003e7e:	079b      	lsls	r3, r3, #30
 8003e80:	d413      	bmi.n	8003eaa <_printf_i+0x23a>
 8003e82:	68e0      	ldr	r0, [r4, #12]
 8003e84:	9b03      	ldr	r3, [sp, #12]
 8003e86:	4298      	cmp	r0, r3
 8003e88:	bfb8      	it	lt
 8003e8a:	4618      	movlt	r0, r3
 8003e8c:	e7a4      	b.n	8003dd8 <_printf_i+0x168>
 8003e8e:	2301      	movs	r3, #1
 8003e90:	4632      	mov	r2, r6
 8003e92:	4649      	mov	r1, r9
 8003e94:	4640      	mov	r0, r8
 8003e96:	47d0      	blx	sl
 8003e98:	3001      	adds	r0, #1
 8003e9a:	d09b      	beq.n	8003dd4 <_printf_i+0x164>
 8003e9c:	3501      	adds	r5, #1
 8003e9e:	68e3      	ldr	r3, [r4, #12]
 8003ea0:	9903      	ldr	r1, [sp, #12]
 8003ea2:	1a5b      	subs	r3, r3, r1
 8003ea4:	42ab      	cmp	r3, r5
 8003ea6:	dcf2      	bgt.n	8003e8e <_printf_i+0x21e>
 8003ea8:	e7eb      	b.n	8003e82 <_printf_i+0x212>
 8003eaa:	2500      	movs	r5, #0
 8003eac:	f104 0619 	add.w	r6, r4, #25
 8003eb0:	e7f5      	b.n	8003e9e <_printf_i+0x22e>
 8003eb2:	bf00      	nop
 8003eb4:	080042e5 	.word	0x080042e5
 8003eb8:	080042f6 	.word	0x080042f6

08003ebc <_sbrk_r>:
 8003ebc:	b538      	push	{r3, r4, r5, lr}
 8003ebe:	4d06      	ldr	r5, [pc, #24]	; (8003ed8 <_sbrk_r+0x1c>)
 8003ec0:	2300      	movs	r3, #0
 8003ec2:	4604      	mov	r4, r0
 8003ec4:	4608      	mov	r0, r1
 8003ec6:	602b      	str	r3, [r5, #0]
 8003ec8:	f7fd f816 	bl	8000ef8 <_sbrk>
 8003ecc:	1c43      	adds	r3, r0, #1
 8003ece:	d102      	bne.n	8003ed6 <_sbrk_r+0x1a>
 8003ed0:	682b      	ldr	r3, [r5, #0]
 8003ed2:	b103      	cbz	r3, 8003ed6 <_sbrk_r+0x1a>
 8003ed4:	6023      	str	r3, [r4, #0]
 8003ed6:	bd38      	pop	{r3, r4, r5, pc}
 8003ed8:	200001c0 	.word	0x200001c0

08003edc <__sread>:
 8003edc:	b510      	push	{r4, lr}
 8003ede:	460c      	mov	r4, r1
 8003ee0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003ee4:	f000 f8ee 	bl	80040c4 <_read_r>
 8003ee8:	2800      	cmp	r0, #0
 8003eea:	bfab      	itete	ge
 8003eec:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003eee:	89a3      	ldrhlt	r3, [r4, #12]
 8003ef0:	181b      	addge	r3, r3, r0
 8003ef2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003ef6:	bfac      	ite	ge
 8003ef8:	6563      	strge	r3, [r4, #84]	; 0x54
 8003efa:	81a3      	strhlt	r3, [r4, #12]
 8003efc:	bd10      	pop	{r4, pc}

08003efe <__swrite>:
 8003efe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003f02:	461f      	mov	r7, r3
 8003f04:	898b      	ldrh	r3, [r1, #12]
 8003f06:	05db      	lsls	r3, r3, #23
 8003f08:	4605      	mov	r5, r0
 8003f0a:	460c      	mov	r4, r1
 8003f0c:	4616      	mov	r6, r2
 8003f0e:	d505      	bpl.n	8003f1c <__swrite+0x1e>
 8003f10:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003f14:	2302      	movs	r3, #2
 8003f16:	2200      	movs	r2, #0
 8003f18:	f000 f868 	bl	8003fec <_lseek_r>
 8003f1c:	89a3      	ldrh	r3, [r4, #12]
 8003f1e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003f22:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003f26:	81a3      	strh	r3, [r4, #12]
 8003f28:	4632      	mov	r2, r6
 8003f2a:	463b      	mov	r3, r7
 8003f2c:	4628      	mov	r0, r5
 8003f2e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003f32:	f000 b817 	b.w	8003f64 <_write_r>

08003f36 <__sseek>:
 8003f36:	b510      	push	{r4, lr}
 8003f38:	460c      	mov	r4, r1
 8003f3a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003f3e:	f000 f855 	bl	8003fec <_lseek_r>
 8003f42:	1c43      	adds	r3, r0, #1
 8003f44:	89a3      	ldrh	r3, [r4, #12]
 8003f46:	bf15      	itete	ne
 8003f48:	6560      	strne	r0, [r4, #84]	; 0x54
 8003f4a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003f4e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003f52:	81a3      	strheq	r3, [r4, #12]
 8003f54:	bf18      	it	ne
 8003f56:	81a3      	strhne	r3, [r4, #12]
 8003f58:	bd10      	pop	{r4, pc}

08003f5a <__sclose>:
 8003f5a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003f5e:	f000 b813 	b.w	8003f88 <_close_r>
	...

08003f64 <_write_r>:
 8003f64:	b538      	push	{r3, r4, r5, lr}
 8003f66:	4d07      	ldr	r5, [pc, #28]	; (8003f84 <_write_r+0x20>)
 8003f68:	4604      	mov	r4, r0
 8003f6a:	4608      	mov	r0, r1
 8003f6c:	4611      	mov	r1, r2
 8003f6e:	2200      	movs	r2, #0
 8003f70:	602a      	str	r2, [r5, #0]
 8003f72:	461a      	mov	r2, r3
 8003f74:	f7fc fb2e 	bl	80005d4 <_write>
 8003f78:	1c43      	adds	r3, r0, #1
 8003f7a:	d102      	bne.n	8003f82 <_write_r+0x1e>
 8003f7c:	682b      	ldr	r3, [r5, #0]
 8003f7e:	b103      	cbz	r3, 8003f82 <_write_r+0x1e>
 8003f80:	6023      	str	r3, [r4, #0]
 8003f82:	bd38      	pop	{r3, r4, r5, pc}
 8003f84:	200001c0 	.word	0x200001c0

08003f88 <_close_r>:
 8003f88:	b538      	push	{r3, r4, r5, lr}
 8003f8a:	4d06      	ldr	r5, [pc, #24]	; (8003fa4 <_close_r+0x1c>)
 8003f8c:	2300      	movs	r3, #0
 8003f8e:	4604      	mov	r4, r0
 8003f90:	4608      	mov	r0, r1
 8003f92:	602b      	str	r3, [r5, #0]
 8003f94:	f7fc fb4a 	bl	800062c <_close>
 8003f98:	1c43      	adds	r3, r0, #1
 8003f9a:	d102      	bne.n	8003fa2 <_close_r+0x1a>
 8003f9c:	682b      	ldr	r3, [r5, #0]
 8003f9e:	b103      	cbz	r3, 8003fa2 <_close_r+0x1a>
 8003fa0:	6023      	str	r3, [r4, #0]
 8003fa2:	bd38      	pop	{r3, r4, r5, pc}
 8003fa4:	200001c0 	.word	0x200001c0

08003fa8 <_fstat_r>:
 8003fa8:	b538      	push	{r3, r4, r5, lr}
 8003faa:	4d07      	ldr	r5, [pc, #28]	; (8003fc8 <_fstat_r+0x20>)
 8003fac:	2300      	movs	r3, #0
 8003fae:	4604      	mov	r4, r0
 8003fb0:	4608      	mov	r0, r1
 8003fb2:	4611      	mov	r1, r2
 8003fb4:	602b      	str	r3, [r5, #0]
 8003fb6:	f7fc fb89 	bl	80006cc <_fstat>
 8003fba:	1c43      	adds	r3, r0, #1
 8003fbc:	d102      	bne.n	8003fc4 <_fstat_r+0x1c>
 8003fbe:	682b      	ldr	r3, [r5, #0]
 8003fc0:	b103      	cbz	r3, 8003fc4 <_fstat_r+0x1c>
 8003fc2:	6023      	str	r3, [r4, #0]
 8003fc4:	bd38      	pop	{r3, r4, r5, pc}
 8003fc6:	bf00      	nop
 8003fc8:	200001c0 	.word	0x200001c0

08003fcc <_isatty_r>:
 8003fcc:	b538      	push	{r3, r4, r5, lr}
 8003fce:	4d06      	ldr	r5, [pc, #24]	; (8003fe8 <_isatty_r+0x1c>)
 8003fd0:	2300      	movs	r3, #0
 8003fd2:	4604      	mov	r4, r0
 8003fd4:	4608      	mov	r0, r1
 8003fd6:	602b      	str	r3, [r5, #0]
 8003fd8:	f7fc fae6 	bl	80005a8 <_isatty>
 8003fdc:	1c43      	adds	r3, r0, #1
 8003fde:	d102      	bne.n	8003fe6 <_isatty_r+0x1a>
 8003fe0:	682b      	ldr	r3, [r5, #0]
 8003fe2:	b103      	cbz	r3, 8003fe6 <_isatty_r+0x1a>
 8003fe4:	6023      	str	r3, [r4, #0]
 8003fe6:	bd38      	pop	{r3, r4, r5, pc}
 8003fe8:	200001c0 	.word	0x200001c0

08003fec <_lseek_r>:
 8003fec:	b538      	push	{r3, r4, r5, lr}
 8003fee:	4d07      	ldr	r5, [pc, #28]	; (800400c <_lseek_r+0x20>)
 8003ff0:	4604      	mov	r4, r0
 8003ff2:	4608      	mov	r0, r1
 8003ff4:	4611      	mov	r1, r2
 8003ff6:	2200      	movs	r2, #0
 8003ff8:	602a      	str	r2, [r5, #0]
 8003ffa:	461a      	mov	r2, r3
 8003ffc:	f7fc fb2d 	bl	800065a <_lseek>
 8004000:	1c43      	adds	r3, r0, #1
 8004002:	d102      	bne.n	800400a <_lseek_r+0x1e>
 8004004:	682b      	ldr	r3, [r5, #0]
 8004006:	b103      	cbz	r3, 800400a <_lseek_r+0x1e>
 8004008:	6023      	str	r3, [r4, #0]
 800400a:	bd38      	pop	{r3, r4, r5, pc}
 800400c:	200001c0 	.word	0x200001c0

08004010 <memcpy>:
 8004010:	440a      	add	r2, r1
 8004012:	4291      	cmp	r1, r2
 8004014:	f100 33ff 	add.w	r3, r0, #4294967295
 8004018:	d100      	bne.n	800401c <memcpy+0xc>
 800401a:	4770      	bx	lr
 800401c:	b510      	push	{r4, lr}
 800401e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004022:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004026:	4291      	cmp	r1, r2
 8004028:	d1f9      	bne.n	800401e <memcpy+0xe>
 800402a:	bd10      	pop	{r4, pc}

0800402c <memmove>:
 800402c:	4288      	cmp	r0, r1
 800402e:	b510      	push	{r4, lr}
 8004030:	eb01 0402 	add.w	r4, r1, r2
 8004034:	d902      	bls.n	800403c <memmove+0x10>
 8004036:	4284      	cmp	r4, r0
 8004038:	4623      	mov	r3, r4
 800403a:	d807      	bhi.n	800404c <memmove+0x20>
 800403c:	1e43      	subs	r3, r0, #1
 800403e:	42a1      	cmp	r1, r4
 8004040:	d008      	beq.n	8004054 <memmove+0x28>
 8004042:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004046:	f803 2f01 	strb.w	r2, [r3, #1]!
 800404a:	e7f8      	b.n	800403e <memmove+0x12>
 800404c:	4402      	add	r2, r0
 800404e:	4601      	mov	r1, r0
 8004050:	428a      	cmp	r2, r1
 8004052:	d100      	bne.n	8004056 <memmove+0x2a>
 8004054:	bd10      	pop	{r4, pc}
 8004056:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800405a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800405e:	e7f7      	b.n	8004050 <memmove+0x24>

08004060 <__malloc_lock>:
 8004060:	4801      	ldr	r0, [pc, #4]	; (8004068 <__malloc_lock+0x8>)
 8004062:	f7ff b9c9 	b.w	80033f8 <__retarget_lock_acquire_recursive>
 8004066:	bf00      	nop
 8004068:	200001b8 	.word	0x200001b8

0800406c <__malloc_unlock>:
 800406c:	4801      	ldr	r0, [pc, #4]	; (8004074 <__malloc_unlock+0x8>)
 800406e:	f7ff b9c4 	b.w	80033fa <__retarget_lock_release_recursive>
 8004072:	bf00      	nop
 8004074:	200001b8 	.word	0x200001b8

08004078 <_realloc_r>:
 8004078:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800407a:	4607      	mov	r7, r0
 800407c:	4614      	mov	r4, r2
 800407e:	460e      	mov	r6, r1
 8004080:	b921      	cbnz	r1, 800408c <_realloc_r+0x14>
 8004082:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8004086:	4611      	mov	r1, r2
 8004088:	f7ff ba74 	b.w	8003574 <_malloc_r>
 800408c:	b922      	cbnz	r2, 8004098 <_realloc_r+0x20>
 800408e:	f7ff fa21 	bl	80034d4 <_free_r>
 8004092:	4625      	mov	r5, r4
 8004094:	4628      	mov	r0, r5
 8004096:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004098:	f000 f826 	bl	80040e8 <_malloc_usable_size_r>
 800409c:	42a0      	cmp	r0, r4
 800409e:	d20f      	bcs.n	80040c0 <_realloc_r+0x48>
 80040a0:	4621      	mov	r1, r4
 80040a2:	4638      	mov	r0, r7
 80040a4:	f7ff fa66 	bl	8003574 <_malloc_r>
 80040a8:	4605      	mov	r5, r0
 80040aa:	2800      	cmp	r0, #0
 80040ac:	d0f2      	beq.n	8004094 <_realloc_r+0x1c>
 80040ae:	4631      	mov	r1, r6
 80040b0:	4622      	mov	r2, r4
 80040b2:	f7ff ffad 	bl	8004010 <memcpy>
 80040b6:	4631      	mov	r1, r6
 80040b8:	4638      	mov	r0, r7
 80040ba:	f7ff fa0b 	bl	80034d4 <_free_r>
 80040be:	e7e9      	b.n	8004094 <_realloc_r+0x1c>
 80040c0:	4635      	mov	r5, r6
 80040c2:	e7e7      	b.n	8004094 <_realloc_r+0x1c>

080040c4 <_read_r>:
 80040c4:	b538      	push	{r3, r4, r5, lr}
 80040c6:	4d07      	ldr	r5, [pc, #28]	; (80040e4 <_read_r+0x20>)
 80040c8:	4604      	mov	r4, r0
 80040ca:	4608      	mov	r0, r1
 80040cc:	4611      	mov	r1, r2
 80040ce:	2200      	movs	r2, #0
 80040d0:	602a      	str	r2, [r5, #0]
 80040d2:	461a      	mov	r2, r3
 80040d4:	f7fc fad2 	bl	800067c <_read>
 80040d8:	1c43      	adds	r3, r0, #1
 80040da:	d102      	bne.n	80040e2 <_read_r+0x1e>
 80040dc:	682b      	ldr	r3, [r5, #0]
 80040de:	b103      	cbz	r3, 80040e2 <_read_r+0x1e>
 80040e0:	6023      	str	r3, [r4, #0]
 80040e2:	bd38      	pop	{r3, r4, r5, pc}
 80040e4:	200001c0 	.word	0x200001c0

080040e8 <_malloc_usable_size_r>:
 80040e8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80040ec:	1f18      	subs	r0, r3, #4
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	bfbc      	itt	lt
 80040f2:	580b      	ldrlt	r3, [r1, r0]
 80040f4:	18c0      	addlt	r0, r0, r3
 80040f6:	4770      	bx	lr

080040f8 <_init>:
 80040f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80040fa:	bf00      	nop
 80040fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80040fe:	bc08      	pop	{r3}
 8004100:	469e      	mov	lr, r3
 8004102:	4770      	bx	lr

08004104 <_fini>:
 8004104:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004106:	bf00      	nop
 8004108:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800410a:	bc08      	pop	{r3}
 800410c:	469e      	mov	lr, r3
 800410e:	4770      	bx	lr
